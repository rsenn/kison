/*
Generated By kison v0.4.39

Generate time: Thu Sep 30 2021 19:44:15 GMT+0800 (中国标准时间)
*/
var $parser = (function (undefined) {
  var my = {
    charRange: [[9], [10], [13], [32, 55295], [57344, 65533], [65536, 1114111]],
    createMatchString: function (str, lexer) {
      if (!lexer.nextStartsWith(str)) {
        return false;
      }
      return [str];
    },
    matchOnlyEscapeChar: function (lexer, index = 0) {
      let m = '';
      let char = lexer.nextChar(index);
      m += char;
      if (char === '\\') {
        char = lexer.nextChar(index + 1);
        m += char;
      } else {
        return { m, r: false };
      }
      if (m === '\\u' || m === '\\x') {
        const len = m === '\\u' ? 4 : 2;
        let matchedNumber = my.matchNumber(lexer, index + 2, 1, len);
        if (matchedNumber && matchedNumber[0].length === len) {
          matchedNumber = matchedNumber[0];
          let first = parseInt(matchedNumber, 16);
          if (lexer.options.unicode && index === 0) {
            // 检查是否开始 surrogate pair
            if (first >= 0xd800 && first <= 0xdbff) {
              let secondRet = my.matchOnlyEscapeChar(lexer, index + 2 + len);
              let second = (secondRet && secondRet.r && secondRet.r[2]) || 0;
              if (second >= 0xdc00 && second <= 0xdfff) {
                // low surrogate
                // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                let totoal =
                  (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
                return {
                  m,
                  r: [
                    m + matchedNumber + secondRet.r[0],
                    String.fromCodePoint(totoal),
                    totoal,
                  ],
                };
              }
            }
          }
          return {
            m,
            r: [m + matchedNumber, String.fromCharCode(first), first],
          };
        }
      }
      return {
        m,
      };
    },
    matchEscapeChar: function (lexer) {
      const ret = my.matchOnlyEscapeChar(lexer);
      if (ret.r !== undefined) {
        return ret.r;
      }
      if (my.matchCharCode(lexer.nextCharCode(1))) {
        return [ret.m, lexer.nextChar(1)];
      }
      return false;
    },
    matchAnyChar: function (lexer) {
      const char = lexer.nextChar();
      if (char === '.' && !lexer.userData.insideCharacterGroup) {
        return [char];
      }
      return false;
    },
    matchChar: function (lexer) {
      return my.matchCharCode(lexer.nextCharCode());
    },
    matchCharCode: function (charCode) {
      const range = my.charRange;
      for (const r of range) {
        if (r.length == 1) {
          if (r[0] === charCode) {
            return [String.fromCodePoint(charCode)];
          }
        } else if (charCode >= r[0] || charCode <= r[1]) {
          return [String.fromCodePoint(charCode)];
        }
      }
      return false;
    },
    matchGroupName: function (lexer, prefix) {
      let ret = [];
      let index = prefix.length;
      let char = lexer.nextChar(index++);
      while ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z')) {
        ret.push(char);
        char = lexer.nextChar(index++);
      }
      if (char === '>') {
        const name = ret.join('');
        return [prefix + name + '>', name];
      }
      return false;
    },
    matchBackreference: function (lexer) {
      if (lexer.nextChar() !== '\\') {
        return false;
      }
      const prefix = '\\k<';
      if (lexer.nextStartsWith(prefix)) {
        return my.matchGroupName(lexer, prefix);
      }
      const match = my.matchNumber(lexer, 1);
      if (match === false) {
        return false;
      }
      match[0] = '\\' + match[0];
      return match;
    },
    matchQuantifierNumber: function (lexer) {
      if (lexer.userData.insideQuantifierRange) {
        return my.matchNumber(lexer);
      }
      return false;
    },
    matchNumber: function (lexer, start = 0, hex, max) {
      let index = 0;
      const match = [];
      let l = max || lexer.nextLength();
      l = Math.min(l, lexer.nextLength());
      while (index < l) {
        const char = lexer.nextCharAt(start + index).toLowerCase();
        if (char < '0' || char > '9') {
          if (hex) {
            if (char < 'a' || char > 'f') {
              break;
            }
          } else {
            break;
          }
        }
        match.push(char);
        index++;
      }
      return match.length ? [match.join('')] : false;
    },
    matchNamedGroupPrefix: function (lexer) {
      const prefix = '(?<';
      if (!lexer.nextStartsWith(prefix)) {
        return false;
      }
      return my.matchGroupName(lexer, prefix);
    },
  };
  function mix(to, from) {
    for (var f in from) {
      to[f] = from[f];
    }
  }
  function isArray(obj) {
    return '[object Array]' === Object.prototype.toString.call(obj);
  }
  function each(object, fn, context) {
    if (object) {
      var key,
        val,
        length,
        i = 0;

      context = context || null;

      if (!isArray(object)) {
        for (key in object) {
          // can not use hasOwnProperty
          if (fn.call(context, object[key], key, object) === false) {
            break;
          }
        }
      } else {
        length = object.length;
        for (val = object[0]; i < length; val = object[++i]) {
          if (fn.call(context, val, i, object) === false) {
            break;
          }
        }
      }
    }
  }
  function inArray(item, arr) {
    for (var i = 0, l = arr.length; i < l; i++) {
      if (arr[i] === item) {
        return true;
      }
    }
    return false;
  }
  var Lexer = function (cfg) {
    this.nextTokens = [];
    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const ruleIndexMap = (this.ruleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      filter: 3,
      state: 4,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([
      STATIC.EOF_TOKEN,
      STATIC.UNKNOWN_TOKEN,
      STATIC.HIDDEN_TOKEN,
    ]);
    this.rules = [];
    this.defaultEnv = undefined;
    mix(this, cfg);
    this.rules = this.rules.concat();

    this.regexpIndex = this.isCompress ? this.ruleIndexMap.regexp : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;

    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });
    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    }
    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[ruleIndexMap.token] = errorRule.token;
      errorRuleCompress[ruleIndexMap.regexp] = errorRule.regexp;
    }
    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];
      if (pattern.test) {
        let source = pattern.source;
        if (source.startsWith('^')) {
          source = source.slice(1);
        }
        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;
        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = undefined;
      this.tokensQueue = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.ruleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];
      each(this.rules, (r) => {
        var filter = this.getRuleItem(r, 'filter');
        if (filter) {
          if (filter.call(this)) {
            rules.push(r);
          }
          return;
        }
        var state = this.getRuleItem(r, 'state');
        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (inArray(currentState, state)) {
          rules.push(r);
        }
      });
      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n) {
      n = n || 1;
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num) {
      num = num || 1;
      var ret;
      while (num--) {
        ret = this.stateStack.pop();
      }
      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function () {
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { matched, match, input } = this;

      matched = matched.slice(0, matched.length - match.length);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? '...' : '') +
          matched
            .slice(0 - DEBUG_CONTEXT_LIMIT)
            .split('\n')
            .join(' '),
        next = match + input.slice(this.end);
      //#JSCOVERAGE_ENDIF
      next =
        next.slice(0, DEBUG_CONTEXT_LIMIT).split('\n').join(' ') +
        (next.length > DEBUG_CONTEXT_LIMIT ? '...' : '');
      return past + next + '\n' + new Array(past.length + 1).join('-') + '^';
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = this.tokens.slice(this.stashIndex);
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (regexp) {
      if (regexp.test) {
        regexp.lastIndex = this.end;
        const ret = regexp.exec(this.input);
        if (ret && ret.index !== this.end) {
          return null;
        }
        return ret;
      }
      return regexp.call(this, this);
    },
    lex: function () {
      const token = this.nextToken();
      this.tokens.push(token);
      if (token.token === Lexer.STATIC.HIDDEN_TOKEN || !token.token) {
        return this.lex();
      }
      return token;
    },
    getCurrentToken: function () {
      if (this.tokens[this.tokens.length - 1]) {
        return this.tokens[this.tokens.length - 1];
      }
      return this.lex();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;
      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }
      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);
        if (code === undefined || isNaN(code)) {
          return '';
        }
        return String.fromCodePoint(code);
      }
      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }
      return this.input.charCodeAt(index);
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }
      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();

      var { input } = this;

      var { env = this.defaultEnv } = this.options;

      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        var regexp = this.getRuleItem(rule, 'regexp'),
          token = this.getRuleItem(rule, 'token'),
          action = this.getRuleItem(rule, 'action');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        }

        //#JSCOVERAGE_ENDIF
        if ((m = this.matchRegExp(regexp))) {
          this.start = this.end;
          this.end += m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: this.start,
            end: this.end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          mix(this, position);

          var match;
          // for error report
          match = this.match = m[0];

          // all matches
          this.matches = m;
          // may change by user
          this.text = match;
          // matched content utils now
          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
    HIDDEN_TOKEN: '$HIDDEN',
  };
  var lexer = new Lexer({
    rules: [
      ['characterClassAnyWord', my.createMatchString.bind(undefined, '\\w')],
      [
        'characterClassAnyWordInverted',
        my.createMatchString.bind(undefined, '\\W'),
      ],
      ['whitespaceCharacter', my.createMatchString.bind(undefined, '\\s')],
      [
        'whitespaceCharacterInverted',
        my.createMatchString.bind(undefined, '\\S'),
      ],
      [
        'characterClassAnyDecimalDigit',
        my.createMatchString.bind(undefined, '\\d'),
      ],
      [
        'characterClassAnyDecimalDigitInverted',
        my.createMatchString.bind(undefined, '\\D'),
      ],
      ['anchorWordBoundary', my.createMatchString.bind(undefined, '\\b')],
      ['anchorNonWordBoundary', my.createMatchString.bind(undefined, '\\B')],
      ['anchorStartOfStringOnly', my.createMatchString.bind(undefined, '\\A')],
      [
        'anchorEndOfStringOnlyNotNewline',
        my.createMatchString.bind(undefined, '\\z'),
      ],
      ['anchorEndOfStringOnly', my.createMatchString.bind(undefined, '\\Z')],
      ['anchorPreviousMatchEnd', my.createMatchString.bind(undefined, '\\G')],
      ['backreference', my.matchBackreference],
      [
        'char',
        my.matchEscapeChar,
        function () {
          this.text = this.matches[1];
        },
      ],
      ['lookahead', my.createMatchString.bind(undefined, '(?=')],
      ['negativeLookahead', my.createMatchString.bind(undefined, '(?!')],
      ['lookbehind', my.createMatchString.bind(undefined, '(?<=')],
      ['negativeLookbehind', my.createMatchString.bind(undefined, '(?<!')],
      [
        'namedGroupPrefix',
        my.matchNamedGroupPrefix,
        function () {
          this.text = this.matches[1];
        },
      ],
      ['$', my.createMatchString.bind(undefined, '$')],
      [',', my.createMatchString.bind(undefined, ',')],
      ['^', my.createMatchString.bind(undefined, '^')],
      ['?:', my.createMatchString.bind(undefined, '?:')],
      ['?', my.createMatchString.bind(undefined, '?')],
      ['(', my.createMatchString.bind(undefined, '(')],
      [')', my.createMatchString.bind(undefined, ')')],
      ['-', my.createMatchString.bind(undefined, '-')],
      ['|', my.createMatchString.bind(undefined, '|')],
      ['*', my.createMatchString.bind(undefined, '*')],
      ['+', my.createMatchString.bind(undefined, '+')],
      [
        '[',
        my.createMatchString.bind(undefined, '['),
        function () {
          this.userData.insideCharacterGroup = true;
        },
      ],
      [
        ']',
        my.createMatchString.bind(undefined, ']'),
        function () {
          this.userData.insideCharacterGroup = false;
        },
      ],
      ['anyChar', my.matchAnyChar],
      [
        '{',
        my.createMatchString.bind(undefined, '{'),
        function () {
          this.userData.insideQuantifierRange = true;
        },
      ],
      [
        '}',
        my.createMatchString.bind(undefined, '}'),
        function () {
          this.userData.insideQuantifierRange = false;
        },
      ],
      ['int', my.matchQuantifierNumber],
      ['char', my.matchChar],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;
    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }
      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }
    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);
    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['Regexp']],
      ['Regexp', ['^', 'Expression']],
      ['Regexp', ['Expression']],
      ['(Expression)1_', ['|', 'SubExpression', '(Expression)1_']],
      ['(Expression)1_', []],
      ['Expression', ['SubExpression', '(Expression)1_']],
      ['(SubExpression)1_', ['ExpressionItem', '(SubExpression)1_']],
      ['(SubExpression)1_', []],
      ['SubExpression', ['ExpressionItem', '(SubExpression)1_']],
      ['ExpressionItem', ['Match']],
      ['ExpressionItem', ['Group']],
      ['ExpressionItem', ['Anchor']],
      ['ExpressionItem', ['backreference']],
      ['Group', ['(', '_1(Group)']],
      ['_2(Group)', []],
      ['_2(Group)', ['Quantifier']],
      ['Group', ['namedGroupPrefix', 'Expression', ')', '_2(Group)']],
      ['_1(_1(Group))', ['Quantifier']],
      ['_1(_1(Group))', []],
      ['_1(Group)', ['Expression', ')', '_1(_1(Group))']],
      ['_2(_1(Group))', ['Quantifier']],
      ['_2(_1(Group))', []],
      ['_1(Group)', ['?:', 'Expression', ')', '_2(_1(Group))']],
      ['_1(Match)', []],
      ['_1(Match)', ['Quantifier']],
      ['Match', ['MatchItem', '_1(Match)']],
      ['MatchItem', ['anyChar']],
      ['MatchItem', ['MatchCharacterClass']],
      ['MatchItem', ['char']],
      ['MatchCharacterClass', ['CharacterGroup']],
      ['MatchCharacterClass', ['CharacterClass']],
      ['_1(CharacterGroup)', ['CharacterGroupInner', ']']],
      ['_1(CharacterGroup)', ['^', 'CharacterGroupInner', ']']],
      ['CharacterGroup', ['[', '_1(CharacterGroup)']],
      [
        '(CharacterGroupInner)1_',
        ['CharacterGroupItem', '(CharacterGroupInner)1_'],
      ],
      ['(CharacterGroupInner)1_', []],
      [
        'CharacterGroupInner',
        ['CharacterGroupItem', '(CharacterGroupInner)1_'],
      ],
      ['CharacterGroupItem', ['CharacterClass']],
      ['CharacterGroupItem', ['CharacterRange']],
      ['CharacterClass', ['characterClassAnyWordInverted']],
      ['CharacterClass', ['characterClassAnyWord']],
      ['CharacterClass', ['characterClassAnyDecimalDigit']],
      ['CharacterClass', ['characterClassAnyDecimalDigitInverted']],
      ['CharacterClass', ['whitespaceCharacter']],
      ['CharacterClass', ['whitespaceCharacterInverted']],
      ['_1(CharacterRange)', ['-', 'char']],
      ['_1(CharacterRange)', []],
      ['CharacterRange', ['char', '_1(CharacterRange)']],
      ['_1(Quantifier)', []],
      ['_1(Quantifier)', ['?']],
      ['Quantifier', ['QuantifierType', '_1(Quantifier)']],
      ['QuantifierType', ['*']],
      ['QuantifierType', ['+']],
      ['QuantifierType', ['?']],
      ['_1(QuantifierType)', ['}']],
      ['QuantifierType', ['{', 'int', '_1(QuantifierType)']],
      ['_1(_1(QuantifierType))', ['int', '}']],
      ['_1(_1(QuantifierType))', ['}']],
      ['_1(QuantifierType)', [',', '_1(_1(QuantifierType))']],
      ['Anchor', ['anchorWordBoundary']],
      ['Anchor', ['anchorNonWordBoundary']],
      ['Anchor', ['anchorStartOfStringOnly']],
      ['Anchor', ['anchorEndOfStringOnlyNotNewline']],
      ['Anchor', ['anchorEndOfStringOnly']],
      ['Anchor', ['anchorPreviousMatchEnd']],
      ['Anchor', ['$']],
      ['Anchor', ['lookahead', 'Expression', ')']],
      ['Anchor', ['negativeLookahead', 'Expression', ')']],
      ['Anchor', ['lookbehind', 'Expression', ')']],
      ['Anchor', ['negativeLookbehind', 'Expression', ')']],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
    },
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p[this.productionIndexMap[itemType]];
      }
      return p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    isCompress: 1,
  };
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  const productionSkipAstNodeSet = new Set([
    3, 4, 6, 7, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 34, 35, 45, 46,
    48, 49, 54, 56, 57, 58,
  ]);
  const productionEndFlag = 2;
  const productionAddAstNodeFlag = 1;
  const isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  const isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  parser.table = {
    $START: {
      '^': 0,
      anyChar: 0,
      '[': 0,
      characterClassAnyWordInverted: 0,
      characterClassAnyWord: 0,
      characterClassAnyDecimalDigit: 0,
      characterClassAnyDecimalDigitInverted: 0,
      whitespaceCharacter: 0,
      whitespaceCharacterInverted: 0,
      char: 0,
      '(': 0,
      namedGroupPrefix: 0,
      anchorWordBoundary: 0,
      anchorNonWordBoundary: 0,
      anchorStartOfStringOnly: 0,
      anchorEndOfStringOnlyNotNewline: 0,
      anchorEndOfStringOnly: 0,
      anchorPreviousMatchEnd: 0,
      $: 0,
      lookahead: 0,
      negativeLookahead: 0,
      lookbehind: 0,
      negativeLookbehind: 0,
      backreference: 0,
    },
    Regexp: {
      '^': 1,
      anyChar: 2,
      '[': 2,
      characterClassAnyWordInverted: 2,
      characterClassAnyWord: 2,
      characterClassAnyDecimalDigit: 2,
      characterClassAnyDecimalDigitInverted: 2,
      whitespaceCharacter: 2,
      whitespaceCharacterInverted: 2,
      char: 2,
      '(': 2,
      namedGroupPrefix: 2,
      anchorWordBoundary: 2,
      anchorNonWordBoundary: 2,
      anchorStartOfStringOnly: 2,
      anchorEndOfStringOnlyNotNewline: 2,
      anchorEndOfStringOnly: 2,
      anchorPreviousMatchEnd: 2,
      $: 2,
      lookahead: 2,
      negativeLookahead: 2,
      lookbehind: 2,
      negativeLookbehind: 2,
      backreference: 2,
    },
    '(Expression)1_': {
      '|': 3,
      $EOF: 4,
      ')': 4,
    },
    Expression: {
      anyChar: 5,
      '[': 5,
      characterClassAnyWordInverted: 5,
      characterClassAnyWord: 5,
      characterClassAnyDecimalDigit: 5,
      characterClassAnyDecimalDigitInverted: 5,
      whitespaceCharacter: 5,
      whitespaceCharacterInverted: 5,
      char: 5,
      '(': 5,
      namedGroupPrefix: 5,
      anchorWordBoundary: 5,
      anchorNonWordBoundary: 5,
      anchorStartOfStringOnly: 5,
      anchorEndOfStringOnlyNotNewline: 5,
      anchorEndOfStringOnly: 5,
      anchorPreviousMatchEnd: 5,
      $: 5,
      lookahead: 5,
      negativeLookahead: 5,
      lookbehind: 5,
      negativeLookbehind: 5,
      backreference: 5,
    },
    '(SubExpression)1_': {
      anyChar: 6,
      '[': 6,
      characterClassAnyWordInverted: 6,
      characterClassAnyWord: 6,
      characterClassAnyDecimalDigit: 6,
      characterClassAnyDecimalDigitInverted: 6,
      whitespaceCharacter: 6,
      whitespaceCharacterInverted: 6,
      char: 6,
      '(': 6,
      namedGroupPrefix: 6,
      anchorWordBoundary: 6,
      anchorNonWordBoundary: 6,
      anchorStartOfStringOnly: 6,
      anchorEndOfStringOnlyNotNewline: 6,
      anchorEndOfStringOnly: 6,
      anchorPreviousMatchEnd: 6,
      $: 6,
      lookahead: 6,
      negativeLookahead: 6,
      lookbehind: 6,
      negativeLookbehind: 6,
      backreference: 6,
      '|': 7,
      $EOF: 7,
      ')': 7,
    },
    SubExpression: {
      anyChar: 8,
      '[': 8,
      characterClassAnyWordInverted: 8,
      characterClassAnyWord: 8,
      characterClassAnyDecimalDigit: 8,
      characterClassAnyDecimalDigitInverted: 8,
      whitespaceCharacter: 8,
      whitespaceCharacterInverted: 8,
      char: 8,
      '(': 8,
      namedGroupPrefix: 8,
      anchorWordBoundary: 8,
      anchorNonWordBoundary: 8,
      anchorStartOfStringOnly: 8,
      anchorEndOfStringOnlyNotNewline: 8,
      anchorEndOfStringOnly: 8,
      anchorPreviousMatchEnd: 8,
      $: 8,
      lookahead: 8,
      negativeLookahead: 8,
      lookbehind: 8,
      negativeLookbehind: 8,
      backreference: 8,
    },
    ExpressionItem: {
      anyChar: 9,
      '[': 9,
      characterClassAnyWordInverted: 9,
      characterClassAnyWord: 9,
      characterClassAnyDecimalDigit: 9,
      characterClassAnyDecimalDigitInverted: 9,
      whitespaceCharacter: 9,
      whitespaceCharacterInverted: 9,
      char: 9,
      '(': 10,
      namedGroupPrefix: 10,
      anchorWordBoundary: 11,
      anchorNonWordBoundary: 11,
      anchorStartOfStringOnly: 11,
      anchorEndOfStringOnlyNotNewline: 11,
      anchorEndOfStringOnly: 11,
      anchorPreviousMatchEnd: 11,
      $: 11,
      lookahead: 11,
      negativeLookahead: 11,
      lookbehind: 11,
      negativeLookbehind: 11,
      backreference: 12,
    },
    Group: {
      '(': 13,
      namedGroupPrefix: 16,
    },
    '_2(Group)': {
      anyChar: 14,
      '[': 14,
      characterClassAnyWordInverted: 14,
      characterClassAnyWord: 14,
      characterClassAnyDecimalDigit: 14,
      characterClassAnyDecimalDigitInverted: 14,
      whitespaceCharacter: 14,
      whitespaceCharacterInverted: 14,
      char: 14,
      '(': 14,
      namedGroupPrefix: 14,
      anchorWordBoundary: 14,
      anchorNonWordBoundary: 14,
      anchorStartOfStringOnly: 14,
      anchorEndOfStringOnlyNotNewline: 14,
      anchorEndOfStringOnly: 14,
      anchorPreviousMatchEnd: 14,
      $: 14,
      lookahead: 14,
      negativeLookahead: 14,
      lookbehind: 14,
      negativeLookbehind: 14,
      backreference: 14,
      '|': 14,
      $EOF: 14,
      ')': 14,
      '*': 15,
      '+': 15,
      '?': 15,
      '{': 15,
    },
    '_1(_1(Group))': {
      '*': 17,
      '+': 17,
      '?': 17,
      '{': 17,
      anyChar: 18,
      '[': 18,
      characterClassAnyWordInverted: 18,
      characterClassAnyWord: 18,
      characterClassAnyDecimalDigit: 18,
      characterClassAnyDecimalDigitInverted: 18,
      whitespaceCharacter: 18,
      whitespaceCharacterInverted: 18,
      char: 18,
      '(': 18,
      namedGroupPrefix: 18,
      anchorWordBoundary: 18,
      anchorNonWordBoundary: 18,
      anchorStartOfStringOnly: 18,
      anchorEndOfStringOnlyNotNewline: 18,
      anchorEndOfStringOnly: 18,
      anchorPreviousMatchEnd: 18,
      $: 18,
      lookahead: 18,
      negativeLookahead: 18,
      lookbehind: 18,
      negativeLookbehind: 18,
      backreference: 18,
      '|': 18,
      $EOF: 18,
      ')': 18,
    },
    '_1(Group)': {
      anyChar: 19,
      '[': 19,
      characterClassAnyWordInverted: 19,
      characterClassAnyWord: 19,
      characterClassAnyDecimalDigit: 19,
      characterClassAnyDecimalDigitInverted: 19,
      whitespaceCharacter: 19,
      whitespaceCharacterInverted: 19,
      char: 19,
      '(': 19,
      namedGroupPrefix: 19,
      anchorWordBoundary: 19,
      anchorNonWordBoundary: 19,
      anchorStartOfStringOnly: 19,
      anchorEndOfStringOnlyNotNewline: 19,
      anchorEndOfStringOnly: 19,
      anchorPreviousMatchEnd: 19,
      $: 19,
      lookahead: 19,
      negativeLookahead: 19,
      lookbehind: 19,
      negativeLookbehind: 19,
      backreference: 19,
      '?:': 22,
    },
    '_2(_1(Group))': {
      '*': 20,
      '+': 20,
      '?': 20,
      '{': 20,
      anyChar: 21,
      '[': 21,
      characterClassAnyWordInverted: 21,
      characterClassAnyWord: 21,
      characterClassAnyDecimalDigit: 21,
      characterClassAnyDecimalDigitInverted: 21,
      whitespaceCharacter: 21,
      whitespaceCharacterInverted: 21,
      char: 21,
      '(': 21,
      namedGroupPrefix: 21,
      anchorWordBoundary: 21,
      anchorNonWordBoundary: 21,
      anchorStartOfStringOnly: 21,
      anchorEndOfStringOnlyNotNewline: 21,
      anchorEndOfStringOnly: 21,
      anchorPreviousMatchEnd: 21,
      $: 21,
      lookahead: 21,
      negativeLookahead: 21,
      lookbehind: 21,
      negativeLookbehind: 21,
      backreference: 21,
      '|': 21,
      $EOF: 21,
      ')': 21,
    },
    '_1(Match)': {
      anyChar: 23,
      '[': 23,
      characterClassAnyWordInverted: 23,
      characterClassAnyWord: 23,
      characterClassAnyDecimalDigit: 23,
      characterClassAnyDecimalDigitInverted: 23,
      whitespaceCharacter: 23,
      whitespaceCharacterInverted: 23,
      char: 23,
      '(': 23,
      namedGroupPrefix: 23,
      anchorWordBoundary: 23,
      anchorNonWordBoundary: 23,
      anchorStartOfStringOnly: 23,
      anchorEndOfStringOnlyNotNewline: 23,
      anchorEndOfStringOnly: 23,
      anchorPreviousMatchEnd: 23,
      $: 23,
      lookahead: 23,
      negativeLookahead: 23,
      lookbehind: 23,
      negativeLookbehind: 23,
      backreference: 23,
      '|': 23,
      $EOF: 23,
      ')': 23,
      '*': 24,
      '+': 24,
      '?': 24,
      '{': 24,
    },
    Match: {
      anyChar: 25,
      '[': 25,
      characterClassAnyWordInverted: 25,
      characterClassAnyWord: 25,
      characterClassAnyDecimalDigit: 25,
      characterClassAnyDecimalDigitInverted: 25,
      whitespaceCharacter: 25,
      whitespaceCharacterInverted: 25,
      char: 25,
    },
    MatchItem: {
      anyChar: 26,
      '[': 27,
      characterClassAnyWordInverted: 27,
      characterClassAnyWord: 27,
      characterClassAnyDecimalDigit: 27,
      characterClassAnyDecimalDigitInverted: 27,
      whitespaceCharacter: 27,
      whitespaceCharacterInverted: 27,
      char: 28,
    },
    MatchCharacterClass: {
      '[': 29,
      characterClassAnyWordInverted: 30,
      characterClassAnyWord: 30,
      characterClassAnyDecimalDigit: 30,
      characterClassAnyDecimalDigitInverted: 30,
      whitespaceCharacter: 30,
      whitespaceCharacterInverted: 30,
    },
    '_1(CharacterGroup)': {
      characterClassAnyWordInverted: 31,
      characterClassAnyWord: 31,
      characterClassAnyDecimalDigit: 31,
      characterClassAnyDecimalDigitInverted: 31,
      whitespaceCharacter: 31,
      whitespaceCharacterInverted: 31,
      char: 31,
      '^': 32,
    },
    CharacterGroup: {
      '[': 33,
    },
    '(CharacterGroupInner)1_': {
      characterClassAnyWordInverted: 34,
      characterClassAnyWord: 34,
      characterClassAnyDecimalDigit: 34,
      characterClassAnyDecimalDigitInverted: 34,
      whitespaceCharacter: 34,
      whitespaceCharacterInverted: 34,
      char: 34,
      ']': 35,
    },
    CharacterGroupInner: {
      characterClassAnyWordInverted: 36,
      characterClassAnyWord: 36,
      characterClassAnyDecimalDigit: 36,
      characterClassAnyDecimalDigitInverted: 36,
      whitespaceCharacter: 36,
      whitespaceCharacterInverted: 36,
      char: 36,
    },
    CharacterGroupItem: {
      characterClassAnyWordInverted: 37,
      characterClassAnyWord: 37,
      characterClassAnyDecimalDigit: 37,
      characterClassAnyDecimalDigitInverted: 37,
      whitespaceCharacter: 37,
      whitespaceCharacterInverted: 37,
      char: 38,
    },
    CharacterClass: {
      characterClassAnyWordInverted: 39,
      characterClassAnyWord: 40,
      characterClassAnyDecimalDigit: 41,
      characterClassAnyDecimalDigitInverted: 42,
      whitespaceCharacter: 43,
      whitespaceCharacterInverted: 44,
    },
    '_1(CharacterRange)': {
      '-': 45,
      characterClassAnyWordInverted: 46,
      characterClassAnyWord: 46,
      characterClassAnyDecimalDigit: 46,
      characterClassAnyDecimalDigitInverted: 46,
      whitespaceCharacter: 46,
      whitespaceCharacterInverted: 46,
      char: 46,
      ']': 46,
    },
    CharacterRange: {
      char: 47,
    },
    '_1(Quantifier)': {
      anyChar: 48,
      '[': 48,
      characterClassAnyWordInverted: 48,
      characterClassAnyWord: 48,
      characterClassAnyDecimalDigit: 48,
      characterClassAnyDecimalDigitInverted: 48,
      whitespaceCharacter: 48,
      whitespaceCharacterInverted: 48,
      char: 48,
      '(': 48,
      namedGroupPrefix: 48,
      anchorWordBoundary: 48,
      anchorNonWordBoundary: 48,
      anchorStartOfStringOnly: 48,
      anchorEndOfStringOnlyNotNewline: 48,
      anchorEndOfStringOnly: 48,
      anchorPreviousMatchEnd: 48,
      $: 48,
      lookahead: 48,
      negativeLookahead: 48,
      lookbehind: 48,
      negativeLookbehind: 48,
      backreference: 48,
      '|': 48,
      $EOF: 48,
      ')': 48,
      '?': 49,
    },
    Quantifier: {
      '*': 50,
      '+': 50,
      '?': 50,
      '{': 50,
    },
    QuantifierType: {
      '*': 51,
      '+': 52,
      '?': 53,
      '{': 55,
    },
    '_1(QuantifierType)': {
      '}': 54,
      ',': 58,
    },
    '_1(_1(QuantifierType))': {
      int: 56,
      '}': 57,
    },
    Anchor: {
      anchorWordBoundary: 59,
      anchorNonWordBoundary: 60,
      anchorStartOfStringOnly: 61,
      anchorEndOfStringOnlyNotNewline: 62,
      anchorEndOfStringOnly: 63,
      anchorPreviousMatchEnd: 64,
      $: 65,
      lookahead: 66,
      negativeLookahead: 67,
      lookbehind: 68,
      negativeLookbehind: 69,
    },
  };
  parser.prioritySymbolMap = {};

  class AstNode {
    constructor(cfg) {
      Object.assign(this, cfg);
      if (cfg.children) {
        this.setChildren(cfg.children);
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }
      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;
      for (const c of cs) {
        c.parent = this;
      }
    }

    toJSON() {
      const ret = {};
      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          ret[k] = this[k];
        }
      }
      return ret;
    }
  }

  parser.parse = function parse(input, options) {
    const recoveryTokens = [];
    const terminalNodes = [];

    function isExtraSymbol(ast) {
      return ast.children && !ast.children.length;
    }

    function isSymbolName(s) {
      return !!table[s];
    }

    function peekStack(stack, n) {
      n = n || 1;
      return stack[stack.length - n];
    }

    function getTableVal(row, col) {
      return table[row] && table[row][col];
    }

    function getOriginalSymbol(s) {
      let uncompressed = lexer.mapReverseSymbol(s);
      return prioritySymbolMap[uncompressed] || uncompressed;
    }

    options = options || {};
    let error;
    var {
      onErrorRecovery,
      onAction,
      lexerOptions = {},
      transformNode,
    } = options;

    function checkLabel(node, parent) {
      if (node.label || parent.label) {
        if (node.label === parent.label) {
          return node.children;
        }
        return node;
      }
      return node.children;
    }

    function defaultTransformNode({ node, parent }) {
      if (node.token || node.error || node.symbol !== parent.symbol) {
        return node;
      }
      if (parent.children.length === 1) {
        // do not check label
        // replace label!
        parent.label = node.label;
        return node.children;
      }
      if (node.children.length > 1) {
        return node;
      }
      // drill down to token
      if (node.children[0]?.token) {
        // do not check label
        // parent.label = node.label;
        return node.children;
      }
      return checkLabel(node, parent);
    }

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformNode;
    }

    var {
      lexer,
      table,
      productions,
      prioritySymbolMap,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;

    lexer.options = lexerOptions;
    const startSymbol = getProductionSymbol(productions[0]);
    var symbolStack = [startSymbol];
    const astStack = [
      new AstNode({
        children: [],
      }),
    ];
    lexer.resetInput(input);
    let token;
    let next;

    function getError() {
      const expected = getExpected();
      const tips = [];
      if (expected.length) {
        tips.push("'" + expected.join("', '") + "' expected.");
      }

      tips.push("current token: '" + lexer.getCurrentToken().token + "'.");

      const tip = tips.join('\n');
      return {
        errorMessage: [
          'syntax error at line ' +
            lexer.lineNumber +
            ':\n' +
            lexer.showDebugInfo(),
          ...tips,
        ].join('\n'),
        tip,
      };
    }

    function cleanAst(ast) {
      if (!transformNode) {
        return ast;
      }
      if (ast.children) {
        let children;
        let childrenChanged;
        while (true) {
          let changed = false;
          let index = 0;
          children = [];
          for (const c of ast.children) {
            const node = transformNode({
              node: c,
              index,
              parent: ast,
              defaultTransformNode,
            });
            if (Array.isArray(node)) {
              children.push(...node);
            } else if (node) {
              children.push(node);
            }
            changed = changed || node !== c;
            index++;
          }
          if (!changed) {
            break;
          } else {
            ast.setChildren(children);
            childrenChanged = true;
          }
        }
        if (childrenChanged && ast.parent) {
          cleanAst(ast.parent);
        } else {
          for (const c of children) {
            cleanAst(c);
          }
        }
      }
      return ast;
    }

    function getAst(raw) {
      let ast = astStack[0];
      ast = ast?.children?.[0];
      ast = ast?.children?.[0];
      if (ast) {
        ast.parent = null;
      }
      if (raw) {
        return ast;
      }
      return ast && cleanAst(ast);
    }

    let topSymbol;

    let errorNode;

    function popSymbolStack() {
      symbolStack.pop();
    }

    let getExpected = function () {
      const s = topSymbol;
      if (!isSymbolName(s)) {
        return [lexer.mapReverseSymbol(s)];
      }
      const ret = (table[s] && Object.keys(table[s])) || [];
      return ret.map((r) => lexer.mapReverseSymbol(r));
    };

    function closeAstWhenError() {
      errorNode = new AstNode({
        type: 'token',
        error,
        ...error.lexer,
      });
      peekStack(astStack).addChild(errorNode);
      while (astStack.length !== 1) {
        const ast = astStack.pop();
        if (ast.symbol && isExtraSymbol(ast)) {
          const topAst = peekStack(astStack);
          topAst.children.pop();
          topAst.addChildren(ast.children);
        }
      }
    }

    let production;

    while (1) {
      topSymbol = peekStack(symbolStack);

      if (!topSymbol) {
        break;
      }

      while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
        let ast = astStack.pop();
        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstNode({
            type: 'symbol',
            symbol: ast.symbol,
            children: [ast],
            label: ast.label,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
        if (!topSymbol) {
          break;
        }
      }

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          recoveryTokens.push(token);
        }
        if (topSymbol === token.t) {
          symbolStack.pop();
          const terminalNode = new AstNode(token);
          terminalNode.type = 'token';
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = null;
        } else if ((next = getTableVal(topSymbol, token.t)) !== undefined) {
          popSymbolStack();
          production = productions[next];

          if (productionSkipAstNodeSet.has(next)) {
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat().reverse(),
            );
          } else {
            const newAst = new AstNode({
              type: 'symbol',
              symbol: getOriginalSymbol(topSymbol),
              label: getOriginalSymbol(getProductionLabel(production)),
              children: [],
            });
            peekStack(astStack).addChild(newAst);
            astStack.push(newAst);
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat(productionEndFlag).reverse(),
            );
          }
        } else {
          error = {
            recovery: false,
            ...getError(),
            expected: getExpected(),
            symbol: peekStack(astStack).symbol,
            lexer: lexer.toJSON(),
          };
          if (onErrorRecovery) {
            const recommendedAction = {};
            lexer.stash();
            const nextToken = lexer.lex();
            lexer.stashPop();
            // should delete
            if (
              topSymbol === nextToken.t ||
              getTableVal(topSymbol, nextToken.t) !== undefined
            ) {
              recommendedAction.action = 'del';
            } else if (error.expected.length) {
              recommendedAction.action = 'add';
            }

            const errorNode = new AstNode({
              error,
              type: 'token',
              ...error.lexer,
            });
            peekStack(astStack).addChild(errorNode);

            const recovery =
              onErrorRecovery(
                {
                  errorNode,
                  parseTree: getAst(true),
                },
                recommendedAction,
              ) || {};

            const { action } = recovery;

            peekStack(astStack).children.pop();

            if (!action) {
              closeAstWhenError();
              break;
            }

            if (action === 'del') {
              error.recovery = true;
              recoveryTokens.pop();
              token = null;
            } else if (action === 'add') {
              error.recovery = true;
              token = {
                ...token,
                token: recovery.token,
                text: recovery.text,
                t: lexer.mapSymbol(recovery.token),
              };
              recoveryTokens.push(token);
            }
          } else {
            closeAstWhenError();
            break;
          }
        }
      }

      topSymbol = peekStack(symbolStack);

      while (topSymbol && typeof topSymbol === 'function') {
        if (onAction) {
          onAction({
            token: lexer.toJSON(),
            action: topSymbol,
            parseTree: getAst(true),
          });
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
      }

      if (!symbolStack.length) {
        break;
      }
    }

    if (!error && lexer.getCurrentToken().token !== Lexer.STATIC.EOF_TOKEN) {
      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [Lexer.STATIC.EOF_TOKEN];
        lexer.lex();
      }
      error = {
        ...getError(),
        expected: getExpected(),
        symbol: peekStack(astStack)?.symbol,
        lexer: lexer.toJSON(),
      };
      closeAstWhenError();
    }

    const ast = getAst();

    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  return parser;
})();

export default $parser;
