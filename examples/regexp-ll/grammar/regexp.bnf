Regexp ::= '^' Expression
Regexp ::= Expression
zeroMore_SubExpressionPart_1 ::= zeroMore_SubExpressionPart_1 SubExpressionPart
zeroMore_SubExpressionPart_1 ::=
Expression ::= SubExpression zeroMore_SubExpressionPart_1
SubExpressionPart ::= '|' SubExpression
zeroMore_ExpressionItem_2 ::= zeroMore_ExpressionItem_2 ExpressionItem
zeroMore_ExpressionItem_2 ::=
SubExpression ::= zeroMore_ExpressionItem_2
ExpressionItem ::= Match
ExpressionItem ::= Group
ExpressionItem ::= Anchor
ExpressionItem ::= 'backreference'
Group ::= '(' '?:' Expression ')' Quantifier
Group ::= '(' '?:' Expression ')'
Group ::= '(' Expression ')' Quantifier
Group ::= '(' Expression ')'
Group ::= 'namedGroupPrefix' Expression ')' Quantifier
Group ::= 'namedGroupPrefix' Expression ')'
Match ::= MatchItem Quantifier
Match ::= MatchItem
MatchItem ::= 'anyChar'
MatchItem ::= MatchCharacterClass
MatchItem ::= 'char'
MatchCharacterClass ::= CharacterGroup
MatchCharacterClass ::= CharacterClass
CharacterGroup ::= '[' '^' CharacterGroupInner ']'
CharacterGroup ::= '[' CharacterGroupInner ']'
zeroMore_CharacterGroupItem_3 ::= zeroMore_CharacterGroupItem_3 CharacterGroupItem
zeroMore_CharacterGroupItem_3 ::=
CharacterGroupInner ::= zeroMore_CharacterGroupItem_3
CharacterGroupItem ::= CharacterClass
CharacterGroupItem ::= CharacterRange
CharacterClass ::= 'characterClassAnyWordInverted'
CharacterClass ::= 'characterClassAnyWord'
CharacterClass ::= 'characterClassAnyDecimalDigit'
CharacterClass ::= 'characterClassAnyDecimalDigitInverted'
CharacterClass ::= 'whitespaceCharacter'
CharacterClass ::= 'whitespaceCharacterInverted'
CharacterRange ::= 'char'
CharacterRange ::= 'char' '-' 'char'
Quantifier ::= QuantifierType '?'
Quantifier ::= QuantifierType
QuantifierType ::= '*'
QuantifierType ::= '+'
QuantifierType ::= '?'
QuantifierType ::= '{' 'int' '}'
QuantifierType ::= '{' 'int' ',' 'int' '}'
QuantifierType ::= '{' 'int' ',' '}'
Anchor ::= 'anchorWordBoundary'
Anchor ::= 'anchorNonWordBoundary'
Anchor ::= 'anchorStartOfStringOnly'
Anchor ::= 'anchorEndOfStringOnlyNotNewline'
Anchor ::= 'anchorEndOfStringOnly'
Anchor ::= 'anchorPreviousMatchEnd'
Anchor ::= '$'
Anchor ::= 'lookahead' Expression ')'
Anchor ::= 'negativeLookahead' Expression ')'
Anchor ::= 'lookbehind' Expression ')'
Anchor ::= 'negativeLookbehind' Expression ')'