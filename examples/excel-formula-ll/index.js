/*
Generated By kison v0.4.5

Generate time: Thu Jul 01 2021 18:17:12 GMT+0800 (中国标准时间)
*/
var index = (function(undefined) {
  "use strict";

  function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it =
      (typeof Symbol !== "undefined" && o[Symbol.iterator]) || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (
      Array.isArray(o) ||
      (it = _unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      };
    }
    throw new TypeError(
      "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  }

  function _extends() {
    _extends =
      Object.assign ||
      function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
    return _extends.apply(this, arguments);
  }

  var my = {
    markType: function markType(self, type, enter) {
      if (enter === void 0) {
        enter = true;
      }

      var userData = self.userData;
      userData[type] = userData[type] || 0;

      if (enter) {
        ++userData[type];
      } else if (userData.inArray) {
        --userData[type];
      }
    },
    last: function last(arr) {
      return arr && arr[arr.length - 1];
    }
  };

  function mix(to, from) {
    for (var f in from) {
      to[f] = from[f];
    }
  }

  function isArray(obj) {
    return "[object Array]" === Object.prototype.toString.call(obj);
  }

  function each(object, fn, context) {
    if (object) {
      var key,
        val,
        length,
        i = 0;
      context = context || null;

      if (!isArray(object)) {
        for (key in object) {
          // can not use hasOwnProperty
          if (fn.call(context, object[key], key, object) === false) {
            break;
          }
        }
      } else {
        length = object.length;

        for (val = object[0]; i < length; val = object[++i]) {
          if (fn.call(context, val, i, object) === false) {
            break;
          }
        }
      }
    }
  }

  function inArray(item, arr) {
    for (var i = 0, l = arr.length; i < l; i++) {
      if (arr[i] === item) {
        return true;
      }
    }

    return false;
  }

  var Lexer = function Lexer(cfg) {
    /*
     lex rules.
     @type {Object[]}
     @example
     [
     {
     regexp:'\\w+',
     state:['xx'],
     token:'c',
     // this => lex
     action:function(){}
     }
     ]
     */
    this.rules = [];
    this.tokensQueue = [];
    mix(this, cfg);
    this.rules = [].concat(this.rules);
    this.userData = {};
    this.errorRule = {
      regexp: /^./,
      token: Lexer.STATIC.UNKNOWN_TOKEN
    };
    this.resetInput(this.input);
    this.ruleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      filter: 3,
      state: 4
    };
  };

  Lexer.prototype = {
    resetInput: function resetInput(input) {
      mix(this, {
        userData: {},
        input: input,
        matched: "",
        stateStack: [Lexer.STATIC.INITIAL_STATE],
        match: "",
        text: "",
        firstLine: 1,
        lineNumber: 1,
        lastLine: 1,
        start: 0,
        end: 0,
        firstColumn: 1,
        lastColumn: 1
      });
    },
    mapEndSymbol: function mapEndSymbol() {
      return this.mapSymbol(Lexer.STATIC.EOF_TOKEN);
    },
    mapHiddenSymbol: function mapHiddenSymbol() {
      return this.mapSymbol(Lexer.STATIC.HIDDEN_TOKEN);
    },
    getRuleItem: function getRuleItem(rule, itemType) {
      if (this.isCompress) {
        return rule[this.ruleIndexMap[itemType]];
      } else {
        return rule[itemType];
      }
    },
    getCurrentRules: function getCurrentRules() {
      var _this = this;

      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      if (this.mapState) {
        currentState = this.mapState(currentState);
      }

      each(this.rules, function(r) {
        var filter = _this.getRuleItem(r, "filter");

        if (filter) {
          if (filter.call(_this)) {
            rules.push(r);
          }

          return;
        }

        var state = _this.getRuleItem(r, "state");

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (inArray(currentState, state)) {
          rules.push(r);
        }
      });
      rules.push(this.errorRule);
      return rules;
    },
    peekState: function peekState(n) {
      n = n || 1;
      return this.stateStack[this.stateStack.length - n];
    },
    pushState: function pushState(state) {
      this.stateStack.push(state);
    },
    popState: function popState(num) {
      num = num || 1;
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret;
    },
    showDebugInfo: function showDebugInfo() {
      var DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT;
      var matched = this.matched,
        match = this.match,
        input = this.input;
      matched = matched.slice(0, matched.length - match.length);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") +
          matched.slice(0 - DEBUG_CONTEXT_LIMIT).replace(/\n/g, " "),
        next = match + input; //#JSCOVERAGE_ENDIF

      next =
        next.slice(0, DEBUG_CONTEXT_LIMIT).replace(/\n/g, " ") +
        (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
      return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
    },
    mapSymbol: function mapSymbol(t) {
      var symbolMap = this.symbolMap;

      if (!symbolMap) {
        return t;
      } // force string, see util.clone iphone5s ios7 bug

      return symbolMap[t] || (symbolMap[t] = this.genShortId("symbol"));
    },
    mapReverseSymbol: function mapReverseSymbol(rs) {
      var symbolMap = this.symbolMap,
        reverseSymbolMap = this.reverseSymbolMap;

      if (!reverseSymbolMap && symbolMap) {
        reverseSymbolMap = this.reverseSymbolMap = {};

        for (var i in symbolMap) {
          reverseSymbolMap[symbolMap[i]] = i;
        }
      }

      if (reverseSymbolMap) {
        return reverseSymbolMap[rs] || rs;
      } else {
        return rs;
      }
    },
    toJSON: function toJSON() {
      return {
        text: this.text,
        firstLine: this.firstLine,
        firstColumn: this.firstColumn,
        lastLine: this.lastLine,
        lastColumn: this.lastColumn,
        token: this.token,
        start: this.start,
        end: this.end
      };
    },
    peek: function peek(skipHidden) {
      var token = this.lex(skipHidden, true);

      if (this.tokensQueue.indexOf(token) === -1) {
        this.tokensQueue.push(token);
      }

      return token;
    },
    lex: function lex(skipHidden, reserveQueue) {
      if (skipHidden === undefined) {
        skipHidden = true;
      }

      var tokensQueue = this.tokensQueue;

      if (reserveQueue) {
        for (var _i = 0; _i < tokensQueue.length; _i++) {
          var _token = tokensQueue[_i];

          if (skipHidden && _token.t === this.mapHiddenSymbol()) {
            continue;
          }

          return _token;
        }
      } else {
        while (tokensQueue.length) {
          var _token2 = tokensQueue.shift();

          if (skipHidden && _token2.t === this.mapHiddenSymbol()) {
            continue;
          }

          return _token2;
        }
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var env = this.env,
        input = this.input;
      this.match = this.text = "";

      if (!input) {
        return {
          t: this.mapEndSymbol(),
          token: Lexer.STATIC.EOF_TOKEN,
          start: this.end,
          end: this.end,
          firstLine: this.lastLine,
          firstColumn: this.lastColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        var regexp = this.getRuleItem(rule, "regexp"),
          token = this.getRuleItem(rule, "token"),
          action = this.getRuleItem(rule, "action");

        if (env && typeof regexp.test !== "function") {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = input.match(regexp))) {
          this.start = this.end;
          this.end += m[0].length;
          lines = m[0].match(/\n.*/g);

          if (lines) {
            this.lineNumber += lines.length;
          }

          var position = {
            start: this.start,
            end: this.end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines
              ? lines[lines.length - 1].length - 1
              : this.lastColumn + m[0].length
          };
          mix(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          input = input.slice(match.length);
          this.input = input;

          if (ret) {
            this.token = this.mapReverseSymbol(ret);

            if (ret === this.mapHiddenSymbol() && skipHidden) {
              return this.lex();
            }

            return _extends(
              {
                text: this.text,
                token: this.token,
                t: ret
              },
              position
            );
          } else {
            // ignore
            return this.lex();
          }
        }
      }
    }
  };
  Lexer.STATIC = {
    INITIAL_STATE: "I",
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: "$EOF",
    UNKNOWN_TOKEN: "$UNKNOWN",
    HIDDEN_TOKEN: "$HIDDEN"
  };
  var lexer = new Lexer({
    rules: [
      {
        regexp: /^\s+/,
        token: "$HIDDEN"
      },
      {
        regexp: /^\(/,
        token: "(",
        action: function action() {
          var userData = this.userData;
          userData.markParen = userData.markParen || [];
          var lastItem = my.last(userData.markParen);

          if (lastItem && lastItem.index === this.start) {
            return;
          }

          userData.markParen.push({
            index: this.end,
            func: false
          });
        }
      },
      {
        regexp: /^\)/,
        token: ")",
        action: function action() {
          var userData = this.userData;
          userData.markParen = userData.markParen || [];
          userData.markParen.pop();
        }
      },
      {
        regexp: /^\{/,
        token: "{",
        action: function action() {
          // array constants
          my.markType(this, "a");
        }
      },
      {
        regexp: /^:/,
        token: ":"
      },
      {
        regexp: /^=/,
        token: "="
      },
      {
        regexp: /^<=/,
        token: "<="
      },
      {
        regexp: /^>=/,
        token: ">="
      },
      {
        regexp: /^<>/,
        token: "<>"
      },
      {
        regexp: /^>/,
        token: ">"
      },
      {
        regexp: /^</,
        token: "<"
      },
      {
        regexp: /^\+/,
        token: "+"
      },
      {
        regexp: /^\-/,
        token: "-"
      },
      {
        regexp: /^\*/,
        token: "*"
      },
      {
        regexp: /^\//,
        token: "/"
      },
      {
        regexp: /^\^/,
        token: "^"
      },
      {
        regexp: /^&/,
        token: "&"
      },
      {
        regexp: /^%/,
        token: "%"
      },
      {
        regexp: /^\}/,
        token: "}",
        action: function action() {
          my.markType(this, "a", false);
        }
      },
      {
        state: ["s", "I"],
        regexp: /^\[#(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)\]/,
        token: "TABLE_ITEM_SPECIFIER"
      },
      {
        state: ["s"],
        regexp: /^(?:(?:(?:\[(?:'\]|'#|''|[^\]'#])+\])(?:\:(?:\[(?:'\]|'#|''|[^\]'#])+\]))?)|(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))/,
        token: "TABLE_COLUMN_SPECIFIER"
      },
      {
        state: ["s", "I"],
        regexp: /^\[/,
        token: "[",
        action: function action() {
          this.pushState("s");
        }
      },
      {
        state: ["s"],
        regexp: /^@/,
        token: "@"
      },
      {
        state: ["s"],
        regexp: /^\]/,
        token: "]",
        action: function action() {
          this.popState();
        }
      },
      {
        state: ["s"],
        regexp: /^,/,
        token: "SPECIFIER_SEPARATOR"
      },
      {
        filter: function filter() {
          return !!this.userData.a;
        },
        regexp: {
          en: /^[,;]/,
          de: /^[\\;]/
        },
        token: "ARRAY_SEPARATOR"
      },
      {
        filter: function filter() {
          var lastItem = my.last(this.userData.markParen);
          return !lastItem || !lastItem.func;
        },
        regexp: /^,/,
        token: "REF_SEPARATOR"
      },
      {
        regexp: {
          en: /^,/,
          de: /^;/
        },
        token: "ARGUMENT_SEPARATOR"
      },
      {
        regexp: /^"(?:""|[^"])*"/,
        token: "STRING",
        action: function action() {
          this.text = this.text.slice(1, -1).replace(/""/g, '"');
        }
      },
      {
        regexp: /^(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[(])/,
        token: "FUNCTION",
        action: function action() {
          var userData = this.userData;
          userData.markParen = userData.markParen || [];
          userData.markParen.push({
            index: this.end,
            func: true
          });
        }
      },
      {
        regexp: /^#[A-Z0-9\/]+(!|\?)? /,
        token: "ERROR"
      },
      {
        regexp: /^(?:(?:(?:'(?:''|[^'])*')|(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))?))!)?(?:\$?[A-Za-z]+\$?[0-9]+)(?:\s*\:\s*(?:\$?[A-Za-z]+\$?[0-9]+))?/,
        token: "CELL"
      },
      {
        regexp: /^(TRUE|FALSE)(?=\b)/i,
        token: "LOGIC"
      },
      {
        regexp: /^(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[\[])/,
        token: "TABLE_NAME"
      },
      {
        regexp: /^(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)/,
        token: "NAME"
      },
      {
        regexp: {
          en: /^(?:0|[1-9][0-9]*)?\.(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/,
          de: /^(?:0|[1-9][0-9]*)?,(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/
        },
        token: "NUMBER"
      },
      {
        regexp: /^(?:0|[1-9][0-9]*)(?:[eE][+-]?[0-9]+)?/,
        token: "NUMBER"
      }
    ],
    isCompress: 0
  });
  var parser = {
    productions: [
      ["formula", ["expression"]],
      ["expression", ["exp="], undefined, "single-exp"],
      ["exp=_", ["=", "exp+", 1, "exp=_"]],
      ["exp=_", ["<=", "exp+", 1, "exp=_"]],
      ["exp=_", [">=", "exp+", 1, "exp=_"]],
      ["exp=_", ["<>", "exp+", 1, "exp=_"]],
      ["exp=_", [">", "exp+", 1, "exp=_"]],
      ["exp=_", ["<", "exp+", 1, "exp=_"]],
      ["exp=_", []],
      ["exp=", ["exp+", 1, "exp=_"], undefined, "single-exp"],
      ["exp+_", ["+", "exp*", 1, "exp+_"]],
      ["exp+_", ["-", "exp*", 1, "exp+_"]],
      ["exp+_", []],
      ["exp+", ["exp*", 1, "exp+_"], undefined, "single-exp"],
      ["exp*_", ["*", "exp^", 1, "exp*_"]],
      ["exp*_", ["/", "exp^", 1, "exp*_"]],
      ["exp*_", []],
      ["exp*", ["exp^", 1, "exp*_"], undefined, "single-exp"],
      ["exp^_", ["^", "exp&", 1, "exp^_"]],
      ["exp^_", []],
      ["exp^", ["exp&", 1, "exp^_"], undefined, "single-exp"],
      ["exp&_", ["&", "exp%", 1, "exp&_"]],
      ["exp&_", []],
      ["exp&", ["exp%", 1, "exp&_"], undefined, "single-exp"],
      ["exp%_", ["%", 1, "exp%_"]],
      ["exp%_", []],
      ["exp%", ["prefix-exp", 1, "exp%_"], undefined, "single-exp"],
      ["prefix-exp", ["-", "prefix-exp"], undefined, "single-exp"],
      ["prefix-exp", ["+", "prefix-exp"], undefined, "single-exp"],
      ["prefix-exp", ["atom-exp"], undefined, "single-exp"],
      ["atom-exp", ["(", "exp=", ")"], undefined, "single-exp"],
      ["atom-exp", ["NUMBER"], undefined, "number-exp"],
      ["atom-exp", ["STRING"], undefined, "string-exp"],
      ["atom-exp", ["LOGIC"], undefined, "string-exp"],
      ["atom-exp", ["ERROR"], undefined, "error-exp"],
      ["atom-exp", ["NAME"], undefined, "error-exp"],
      ["atom-exp", ["reference"], undefined, "single-exp"],
      ["atom-exp", ["function"], undefined, "single-exp"],
      ["atom-exp", ["array"], undefined, "single-exp"],
      ["reference-item", ["CELL"]],
      ["reference-item", ["structure-reference"]],
      ["reference_", ["reference-item", 1, "reference_"]],
      ["reference_", ["REF_SEPARATOR", "reference-item", 1, "reference_"]],
      ["reference_", []],
      ["reference", ["reference-item", 1, "reference_"]],
      ["array-element", ["STRING"]],
      ["array-element", ["NUMBER"]],
      ["array-element", ["LOGIC"]],
      ["array-element", ["ERROR"]],
      ["array-list_", ["ARRAY_SEPARATOR", "array-element", 1, "array-list_"]],
      ["array-list_", []],
      ["array-list", ["array-element", 1, "array-list_"]],
      ["array", ["{", "array-list", "}"]],
      ["function", ["FUNCTION", "(", "arguments", ")"]],
      ["argument", [], undefined, "single-exp"],
      ["argument", ["exp="], undefined, "single-exp"],
      ["arguments_", ["ARGUMENT_SEPARATOR", "argument", 1, "arguments_"]],
      ["arguments_", []],
      ["arguments", ["argument", 1, "arguments_"]],
      ["structure-reference", ["TABLE_NAME", "table-specifier"]],
      ["structure-reference", ["table-specifier"]],
      ["table-specifier", ["TABLE_ITEM_SPECIFIER"]],
      ["table-specifier", ["[", "table-specifier-inner", "]"]],
      ["_table-this-row", ["TABLE_COLUMN_SPECIFIER"]],
      ["_table-this-row", []],
      ["table-this-row", ["@", "_table-this-row"]],
      ["table-specifier-inner", ["table-this-row"]],
      ["table-specifier-inner", ["table-column-specifier"]],
      ["table-specifier-item", ["TABLE_COLUMN_SPECIFIER"]],
      ["table-specifier-item", ["TABLE_ITEM_SPECIFIER"]],
      [
        "table-column-specifier_",
        [
          "SPECIFIER_SEPARATOR",
          "table-specifier-item",
          1,
          "table-column-specifier_"
        ]
      ],
      ["table-column-specifier_", []],
      [
        "table-column-specifier",
        ["table-specifier-item", 1, "table-column-specifier_"]
      ]
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3
    },
    getProductionItemByType: function getProductionItemByType(p, itemType) {
      if (this.isCompress) {
        return p[this.productionIndexMap[itemType]];
      }

      return p[itemType];
    },
    getProductionSymbol: function getProductionSymbol(p) {
      return this.getProductionItemByType(p, "symbol");
    },
    getProductionRhs: function getProductionRhs(p) {
      return this.getProductionItemByType(p, "rhs");
    },
    getProductionAction: function getProductionAction(p) {
      return this.getProductionItemByType(p, "action");
    },
    getProductionLabel: function getProductionLabel(p) {
      return this.getProductionItemByType(p, "label");
    },
    isCompress: 1
  };
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.lexer = lexer;
  var productionSkipEndSet = new Set([
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    10,
    11,
    12,
    14,
    15,
    16,
    18,
    19,
    21,
    22,
    24,
    25,
    41,
    42,
    43,
    49,
    50,
    56,
    57,
    63,
    64,
    70,
    71
  ]);
  var productionEndFlag = 2;
  var productionReductionFlag = 1;

  var isProductionEndFlag = function isProductionEndFlag(t) {
    return t === productionEndFlag;
  };

  var isProductionReductionFlag = function isProductionReductionFlag(t) {
    return t === productionReductionFlag;
  };

  parser.table = {
    formula: {
      "-": 0,
      "+": 0,
      "(": 0,
      NUMBER: 0,
      STRING: 0,
      LOGIC: 0,
      ERROR: 0,
      NAME: 0,
      CELL: 0,
      TABLE_NAME: 0,
      TABLE_ITEM_SPECIFIER: 0,
      "[": 0,
      FUNCTION: 0,
      "{": 0
    },
    expression: {
      "-": 1,
      "+": 1,
      "(": 1,
      NUMBER: 1,
      STRING: 1,
      LOGIC: 1,
      ERROR: 1,
      NAME: 1,
      CELL: 1,
      TABLE_NAME: 1,
      TABLE_ITEM_SPECIFIER: 1,
      "[": 1,
      FUNCTION: 1,
      "{": 1
    },
    "exp=_": {
      "=": 2,
      "<=": 3,
      ">=": 4,
      "<>": 5,
      ">": 6,
      "<": 7,
      $EOF: 8,
      ")": 8,
      ARGUMENT_SEPARATOR: 8
    },
    "exp=": {
      "-": 9,
      "+": 9,
      "(": 9,
      NUMBER: 9,
      STRING: 9,
      LOGIC: 9,
      ERROR: 9,
      NAME: 9,
      CELL: 9,
      TABLE_NAME: 9,
      TABLE_ITEM_SPECIFIER: 9,
      "[": 9,
      FUNCTION: 9,
      "{": 9
    },
    "exp+_": {
      "+": 10,
      "-": 11,
      "=": 12,
      "<=": 12,
      ">=": 12,
      "<>": 12,
      ">": 12,
      "<": 12,
      $EOF: 12,
      ")": 12,
      ARGUMENT_SEPARATOR: 12
    },
    "exp+": {
      "-": 13,
      "+": 13,
      "(": 13,
      NUMBER: 13,
      STRING: 13,
      LOGIC: 13,
      ERROR: 13,
      NAME: 13,
      CELL: 13,
      TABLE_NAME: 13,
      TABLE_ITEM_SPECIFIER: 13,
      "[": 13,
      FUNCTION: 13,
      "{": 13
    },
    "exp*_": {
      "*": 14,
      "/": 15,
      "+": 16,
      "-": 16,
      "=": 16,
      "<=": 16,
      ">=": 16,
      "<>": 16,
      ">": 16,
      "<": 16,
      $EOF: 16,
      ")": 16,
      ARGUMENT_SEPARATOR: 16
    },
    "exp*": {
      "-": 17,
      "+": 17,
      "(": 17,
      NUMBER: 17,
      STRING: 17,
      LOGIC: 17,
      ERROR: 17,
      NAME: 17,
      CELL: 17,
      TABLE_NAME: 17,
      TABLE_ITEM_SPECIFIER: 17,
      "[": 17,
      FUNCTION: 17,
      "{": 17
    },
    "exp^_": {
      "^": 18,
      "*": 19,
      "/": 19,
      "+": 19,
      "-": 19,
      "=": 19,
      "<=": 19,
      ">=": 19,
      "<>": 19,
      ">": 19,
      "<": 19,
      $EOF: 19,
      ")": 19,
      ARGUMENT_SEPARATOR: 19
    },
    "exp^": {
      "-": 20,
      "+": 20,
      "(": 20,
      NUMBER: 20,
      STRING: 20,
      LOGIC: 20,
      ERROR: 20,
      NAME: 20,
      CELL: 20,
      TABLE_NAME: 20,
      TABLE_ITEM_SPECIFIER: 20,
      "[": 20,
      FUNCTION: 20,
      "{": 20
    },
    "exp&_": {
      "&": 21,
      "^": 22,
      "*": 22,
      "/": 22,
      "+": 22,
      "-": 22,
      "=": 22,
      "<=": 22,
      ">=": 22,
      "<>": 22,
      ">": 22,
      "<": 22,
      $EOF: 22,
      ")": 22,
      ARGUMENT_SEPARATOR: 22
    },
    "exp&": {
      "-": 23,
      "+": 23,
      "(": 23,
      NUMBER: 23,
      STRING: 23,
      LOGIC: 23,
      ERROR: 23,
      NAME: 23,
      CELL: 23,
      TABLE_NAME: 23,
      TABLE_ITEM_SPECIFIER: 23,
      "[": 23,
      FUNCTION: 23,
      "{": 23
    },
    "exp%_": {
      "%": 24,
      "&": 25,
      "^": 25,
      "*": 25,
      "/": 25,
      "+": 25,
      "-": 25,
      "=": 25,
      "<=": 25,
      ">=": 25,
      "<>": 25,
      ">": 25,
      "<": 25,
      $EOF: 25,
      ")": 25,
      ARGUMENT_SEPARATOR: 25
    },
    "exp%": {
      "-": 26,
      "+": 26,
      "(": 26,
      NUMBER: 26,
      STRING: 26,
      LOGIC: 26,
      ERROR: 26,
      NAME: 26,
      CELL: 26,
      TABLE_NAME: 26,
      TABLE_ITEM_SPECIFIER: 26,
      "[": 26,
      FUNCTION: 26,
      "{": 26
    },
    "prefix-exp": {
      "-": 27,
      "+": 28,
      "(": 29,
      NUMBER: 29,
      STRING: 29,
      LOGIC: 29,
      ERROR: 29,
      NAME: 29,
      CELL: 29,
      TABLE_NAME: 29,
      TABLE_ITEM_SPECIFIER: 29,
      "[": 29,
      FUNCTION: 29,
      "{": 29
    },
    "atom-exp": {
      "(": 30,
      NUMBER: 31,
      STRING: 32,
      LOGIC: 33,
      ERROR: 34,
      NAME: 35,
      CELL: 36,
      TABLE_NAME: 36,
      TABLE_ITEM_SPECIFIER: 36,
      "[": 36,
      FUNCTION: 37,
      "{": 38
    },
    "reference-item": {
      CELL: 39,
      TABLE_NAME: 40,
      TABLE_ITEM_SPECIFIER: 40,
      "[": 40
    },
    reference_: {
      CELL: 41,
      TABLE_NAME: 41,
      TABLE_ITEM_SPECIFIER: 41,
      "[": 41,
      REF_SEPARATOR: 42,
      "%": 43,
      "&": 43,
      "^": 43,
      "*": 43,
      "/": 43,
      "+": 43,
      "-": 43,
      "=": 43,
      "<=": 43,
      ">=": 43,
      "<>": 43,
      ">": 43,
      "<": 43,
      $EOF: 43,
      ")": 43,
      ARGUMENT_SEPARATOR: 43
    },
    reference: {
      CELL: 44,
      TABLE_NAME: 44,
      TABLE_ITEM_SPECIFIER: 44,
      "[": 44
    },
    "array-element": {
      STRING: 45,
      NUMBER: 46,
      LOGIC: 47,
      ERROR: 48
    },
    "array-list_": {
      ARRAY_SEPARATOR: 49,
      "}": 50
    },
    "array-list": {
      STRING: 51,
      NUMBER: 51,
      LOGIC: 51,
      ERROR: 51
    },
    array: {
      "{": 52
    },
    function: {
      FUNCTION: 53
    },
    argument: {
      ARGUMENT_SEPARATOR: 54,
      ")": 54,
      "-": 55,
      "+": 55,
      "(": 55,
      NUMBER: 55,
      STRING: 55,
      LOGIC: 55,
      ERROR: 55,
      NAME: 55,
      CELL: 55,
      TABLE_NAME: 55,
      TABLE_ITEM_SPECIFIER: 55,
      "[": 55,
      FUNCTION: 55,
      "{": 55
    },
    arguments_: {
      ARGUMENT_SEPARATOR: 56,
      ")": 57
    },
    arguments: {
      "-": 58,
      "+": 58,
      "(": 58,
      NUMBER: 58,
      STRING: 58,
      LOGIC: 58,
      ERROR: 58,
      NAME: 58,
      CELL: 58,
      TABLE_NAME: 58,
      TABLE_ITEM_SPECIFIER: 58,
      "[": 58,
      FUNCTION: 58,
      "{": 58,
      ARGUMENT_SEPARATOR: 58,
      ")": 58
    },
    "structure-reference": {
      TABLE_NAME: 59,
      TABLE_ITEM_SPECIFIER: 60,
      "[": 60
    },
    "table-specifier": {
      TABLE_ITEM_SPECIFIER: 61,
      "[": 62
    },
    "_table-this-row": {
      TABLE_COLUMN_SPECIFIER: 63,
      "]": 64
    },
    "table-this-row": {
      "@": 65
    },
    "table-specifier-inner": {
      "@": 66,
      TABLE_COLUMN_SPECIFIER: 67,
      TABLE_ITEM_SPECIFIER: 67
    },
    "table-specifier-item": {
      TABLE_COLUMN_SPECIFIER: 68,
      TABLE_ITEM_SPECIFIER: 69
    },
    "table-column-specifier_": {
      SPECIFIER_SEPARATOR: 70,
      "]": 71
    },
    "table-column-specifier": {
      TABLE_COLUMN_SPECIFIER: 72,
      TABLE_ITEM_SPECIFIER: 72
    }
  };

  parser.parse = function parse(input, options) {
    var tokens = [];
    var recoveryTokens = [];
    var terminalNodes = [];

    var AstNode = /*#__PURE__*/ (function() {
      function AstNode(cfg) {
        Object.assign(this, cfg);

        if (cfg.children) {
          this.setChildren(cfg.children);
        }
      }

      var _proto = AstNode.prototype;

      _proto.addChild = function addChild(c) {
        this.addChildren([c]);
      };

      _proto.addChildren = function addChildren(cs) {
        var _this$children;

        (_this$children = this.children).push.apply(_this$children, cs);

        this.setChildren(this.children);
      };

      _proto.setChildren = function setChildren(cs) {
        if (!cs.length) {
          this.children = [];
          return;
        }

        var first = cs[0];
        var last = cs[cs.length - 1];
        this.start = first.start;
        this.end = last.end;
        this.firstLine = first.firstLine;
        this.lastLine = last.lastLine;
        this.firstColumn = first.firstColumn;
        this.lastColumn = last.lastColumn;
        this.children = cs;

        for (
          var _iterator = _createForOfIteratorHelperLoose(cs), _step;
          !(_step = _iterator()).done;

        ) {
          var c = _step.value;
          c.parent = this;
        }
      };

      _proto.toJSON = function toJSON() {
        var ret = {};

        for (
          var _i2 = 0, _Object$keys = Object.keys(this);
          _i2 < _Object$keys.length;
          _i2++
        ) {
          var k = _Object$keys[_i2];

          if (k !== "parent" && k !== "t") {
            ret[k] = this[k];
          }
        }

        return ret;
      };

      return AstNode;
    })();

    function isExtraSymbol(ast) {
      return ast.children && !ast.children.length;
    }

    function peekStack(stack, n) {
      n = n || 1;
      return stack[stack.length - n];
    }

    function getTableVal(row, col) {
      return table[row] && table[row][col];
    }

    function noop() {}

    function getOriginalSymbol(s) {
      return lexer.mapReverseSymbol(s);
    }

    options = options || {};
    var error;
    var _options = options,
      onErrorRecovery = _options.onErrorRecovery,
      _options$onAction = _options.onAction,
      onAction = _options$onAction === void 0 ? noop : _options$onAction,
      lexerEnv = _options.lexerEnv;
    var lexer = this.lexer,
      table = this.table,
      productions = this.productions,
      getProductionSymbol = this.getProductionSymbol,
      getProductionRhs = this.getProductionRhs,
      getProductionLabel = this.getProductionLabel;
    lexer.env = lexerEnv;
    var symbolStack = [getProductionSymbol(productions[0])];
    var astStack = [
      new AstNode({
        children: []
      })
    ];
    lexer.resetInput(input);
    var token;
    var next;
    var currentToken;

    function getError() {
      var expected = getExpected();
      return (
        "syntax error at line " +
        lexer.lineNumber +
        ":\n" +
        lexer.showDebugInfo() +
        "\n" +
        (expected.length ? "expect " + expected.join(", ") : "")
      );
    }

    function cleanAst(ast) {
      if (ast.token || ast.error) {
        return ast;
      }

      if (ast.children) {
        var children = [];

        for (
          var _iterator2 = _createForOfIteratorHelperLoose(ast.children),
            _step2;
          !(_step2 = _iterator2()).done;

        ) {
          var c = _step2.value;

          if (cleanAst(c)) {
            children.push(c);
          }
        }

        ast.setChildren(children);
      }

      if (!ast.children || !ast.children.length) {
        return null;
      }

      if (ast.children.length === 1) {
        var child = ast.children[0];

        if (
          (ast.label && child.label && ast.label === child.label) ||
          (!ast.label && !child.label && ast.symbol === child.symbol)
        ) {
          ast.setChildren(child.children);
          ast.symbol = child.symbol;
        }
      }

      return ast;
    }

    function getAst(raw) {
      var ast = astStack[0] && astStack[0].children && astStack[0].children[0];

      if (ast) {
        astStack[0].children.forEach(function(a) {
          return delete a.parent;
        });
      }

      if (raw) {
        return ast;
      }

      return ast && cleanAst(ast);
    }

    var topSymbol;
    var errorNode;
    var lastSymbol;

    function popSymbolStack() {
      var last = symbolStack.pop();

      if (typeof last === "string") {
        lastSymbol = last;
      }
    }

    function getExpected() {
      var s = topSymbol || lastSymbol;
      var ret = (table[s] && Object.keys(table[s])) || [];
      return ret.map(function(r) {
        return lexer.mapReverseSymbol(r);
      });
    }

    function closeAstWhenError() {
      errorNode = new AstNode(
        _extends(
          {
            error: error
          },
          error.lexer
        )
      );
      peekStack(astStack).addChild(errorNode);

      while (astStack.length !== 1) {
        var _ast = astStack.pop();

        if (_ast.symbol && isExtraSymbol(_ast)) {
          var topAst = peekStack(astStack);
          topAst.children.pop();
          topAst.addChildren(_ast.children);
        }
      }
    }

    var production;

    while (1) {
      topSymbol = peekStack(symbolStack);

      if (!topSymbol) {
        break;
      }

      while (
        isProductionEndFlag(topSymbol) ||
        isProductionReductionFlag(topSymbol)
      ) {
        var _ast2 = astStack.pop();

        if (isProductionReductionFlag(topSymbol)) {
          var stackTop = peekStack(astStack);
          var wrap = new AstNode({
            symbol: _ast2.symbol,
            children: [_ast2],
            label: _ast2.label
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }

        popSymbolStack();
        topSymbol = peekStack(symbolStack);

        if (!topSymbol) {
          break;
        }
      }

      if (typeof topSymbol === "string") {
        if (!token) {
          token = lexer.lex();
          tokens.push(token);
          recoveryTokens.push(token);
        }

        currentToken = token;

        if (topSymbol === token.t) {
          symbolStack.pop();
          var terminalNode = new AstNode(token);
          terminalNodes.push(terminalNode);
          var parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = null;
        } else if ((next = getTableVal(topSymbol, token.t)) !== undefined) {
          popSymbolStack();
          production = productions[next];

          if (productionSkipEndSet.has(next)) {
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production)
                .concat()
                .reverse()
            );
          } else {
            var newAst = new AstNode({
              symbol: getOriginalSymbol(topSymbol),
              label: getProductionLabel(production),
              children: []
            });
            peekStack(astStack).addChild(newAst);
            astStack.push(newAst);
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production)
                .concat(productionEndFlag)
                .reverse()
            );
          }
        } else {
          error = {
            errorMessage: getError(),
            expected: getExpected(),
            symbol: lexer.mapReverseSymbol(topSymbol),
            lexer: token
          };

          if (onErrorRecovery) {
            var recommendedAction = {};
            var nextToken = lexer.peek(); // should delete

            if (
              topSymbol === nextToken.t ||
              getTableVal(topSymbol, nextToken.t) !== undefined
            ) {
              recommendedAction.action = "del";
            } else if (error.expected.length) {
              recommendedAction.action = "add";
            }

            var _errorNode = new AstNode(
              _extends(
                {
                  error: error
                },
                error.lexer
              )
            );

            peekStack(astStack).addChild(_errorNode);
            var recovery =
              onErrorRecovery(
                {
                  errorNode: _errorNode,
                  ast: getAst(true)
                },
                recommendedAction
              ) || {};
            var action = recovery.action;
            peekStack(astStack).children.pop();

            if (!action) {
              closeAstWhenError();
              break;
            }

            if (action === "del") {
              error.recovery = true;
              recoveryTokens.pop();
              token = null;
            } else if (action === "add") {
              error.recovery = true;
              token = _extends({}, token, {
                token: recovery.token,
                text: recovery.text,
                t: lexer.mapSymbol(recovery.token)
              });
              recoveryTokens.push(token);
            }
          } else {
            closeAstWhenError();
            break;
          }
        }
      }

      topSymbol = peekStack(symbolStack);

      while (topSymbol && typeof topSymbol === "function") {
        onAction({
          lexer: currentToken,
          action: topSymbol
        });
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
      }

      if (!symbolStack.length) {
        break;
      }
    }

    if (!error && currentToken.t !== lexer.mapEndSymbol()) {
      error = {
        errorMessage: getError(),
        expected: getExpected(),
        symbol: lexer.mapReverseSymbol(topSymbol || lastSymbol),
        lexer: currentToken
      };
      closeAstWhenError();
    }

    var ast = getAst();
    return {
      ast: ast,
      tokens: tokens,
      recoveryTokens: recoveryTokens,
      errorNode: errorNode,
      error: error,
      terminalNodes: terminalNodes
    };
  };

  return parser;
})();

if (typeof module !== "undefined") {
  module.exports = index;
}
