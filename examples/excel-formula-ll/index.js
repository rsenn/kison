"use strict";

function _extends() {
  _extends =
    Object.assign ||
    function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
  return _extends.apply(this, arguments);
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it =
    (typeof Symbol !== "undefined" && o[Symbol.iterator]) || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);
  if (
    Array.isArray(o) ||
    (it = _unsupportedIterableToArray(o)) ||
    (allowArrayLike && o && typeof o.length === "number")
  ) {
    if (it) o = it;
    var i = 0;
    return function() {
      if (i >= o.length) return { done: true };
      return { done: false, value: o[i++] };
    };
  }
  throw new TypeError(
    "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
  );
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}

/*
Generated By kison v0.4.25

Generate time: Mon Sep 13 2021 16:16:16 GMT+0800 (中国标准时间)
*/
var formulaParser = (function(undefined) {
  var my = {
    markType: function markType(self, type, enter) {
      if (enter === void 0) {
        enter = true;
      }

      var userData = self.userData;
      userData[type] = userData[type] || 0;

      if (enter) {
        ++userData[type];
      } else if (userData.inArray) {
        --userData[type];
      }
    },
    last: function last(arr) {
      return arr && arr[arr.length - 1];
    }
  };

  function mix(to, from) {
    for (var f in from) {
      to[f] = from[f];
    }
  }

  function isArray(obj) {
    return "[object Array]" === Object.prototype.toString.call(obj);
  }

  function each(object, fn, context) {
    if (object) {
      var key,
        val,
        length,
        i = 0;
      context = context || null;

      if (!isArray(object)) {
        for (key in object) {
          // can not use hasOwnProperty
          if (fn.call(context, object[key], key, object) === false) {
            break;
          }
        }
      } else {
        length = object.length;

        for (val = object[0]; i < length; val = object[++i]) {
          if (fn.call(context, val, i, object) === false) {
            break;
          }
        }
      }
    }
  }

  function inArray(item, arr) {
    for (var i = 0, l = arr.length; i < l; i++) {
      if (arr[i] === item) {
        return true;
      }
    }

    return false;
  }

  var Lexer = function Lexer(cfg) {
    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == "boolean";
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    var ruleIndexMap = (this.ruleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      filter: 3,
      state: 4
    });
    this.rules = [];
    this.defaultEnv = undefined;
    mix(this, cfg);
    this.rules = this.rules.concat();
    this.transformRules();
    this.userData = {};
    var errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN
    });
    var errorRuleCompress = (this.errorRuleCompress = []);
    errorRuleCompress[ruleIndexMap.token] = errorRule.token;
    errorRuleCompress[ruleIndexMap.regexp] = errorRule.regexp;
    this.resetInput(this.input);
    this.options = {};
  };

  Lexer.prototype = {
    transformRegExp: function transformRegExp(obj, p, disableSticky) {
      var pattern = obj[p];

      if (pattern.test) {
        var source = pattern.source;

        if (source.startsWith("^")) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? "gy" : "g";
        if (pattern.multiline) flags += "m";
        if (pattern.ignoreCase) flags += "i";
        if (pattern.unicode) flags += "u";
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === "object") {
        for (
          var _i = 0, _Object$keys = Object.keys(pattern);
          _i < _Object$keys.length;
          _i++
        ) {
          var k = _Object$keys[_i];
          this.transformRegExp(pattern, k);
        }
      }
    },
    transformRules: function transformRules() {
      if (Lexer.supportSticky) {
        var regIndex = this.isCompress ? this.ruleIndexMap.regexp : "regexp";

        for (
          var _iterator = _createForOfIteratorHelperLoose(this.rules), _step;
          !(_step = _iterator()).done;

        ) {
          var r = _step.value;
          this.transformRegExp(r, regIndex);
        }
      }
    },
    matchAny: function matchAny() {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    resetInput: function resetInput(input) {
      this.tokensQueue = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = "";
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = "";
      this.text = "";
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    mapEndSymbol: function mapEndSymbol() {
      return this.mapSymbol(Lexer.STATIC.EOF_TOKEN);
    },
    mapHiddenSymbol: function mapHiddenSymbol() {
      return this.mapSymbol(Lexer.STATIC.HIDDEN_TOKEN);
    },
    getRuleItem: function getRuleItem(rule, itemType) {
      if (this.isCompress) {
        return rule[this.ruleIndexMap[itemType]];
      } else {
        return rule[itemType];
      }
    },
    getCurrentRules: function getCurrentRules() {
      var _this = this;

      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];
      each(this.rules, function(r) {
        var filter = _this.getRuleItem(r, "filter");

        if (filter) {
          if (filter.call(_this)) {
            rules.push(r);
          }

          return;
        }

        var state = _this.getRuleItem(r, "state");

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (inArray(currentState, state)) {
          rules.push(r);
        }
      });

      if (this.isCompress) {
        rules.push(this.errorRuleCompress);
      } else {
        rules.push(this.errorRule);
      }

      return rules;
    },
    peekState: function peekState(n) {
      n = n || 1;
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function pushState(state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function popState(num) {
      num = num || 1;
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function showDebugInfo() {
      var DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT;
      var matched = this.matched,
        match = this.match,
        input = this.input;
      matched = matched.slice(0, matched.length - match.length);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") +
          matched
            .slice(0 - DEBUG_CONTEXT_LIMIT)
            .split("\n")
            .join(" "),
        next = match + input.slice(this.end); //#JSCOVERAGE_ENDIF

      next =
        next
          .slice(0, DEBUG_CONTEXT_LIMIT)
          .split("\n")
          .join(" ") + (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
      return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
    },
    mapSymbol: function mapSymbol(t) {
      return this.symbolMap[t];
    },
    mapReverseSymbol: function mapReverseSymbol(rs) {
      var symbolMap = this.symbolMap,
        reverseSymbolMap = this.reverseSymbolMap;

      if (!reverseSymbolMap && symbolMap) {
        reverseSymbolMap = this.reverseSymbolMap = {};

        for (var i in symbolMap) {
          reverseSymbolMap[symbolMap[i]] = i;
        }
      }

      if (reverseSymbolMap) {
        return reverseSymbolMap[rs] || rs;
      } else {
        return rs;
      }
    },
    mapState: function mapState(s) {
      var stateMap = this.stateMap;

      if (!stateMap) {
        return s;
      }

      return stateMap[s] || (stateMap[s] = this.genShortId("state"));
    },
    mapReverseState: function mapReverseState(rs) {
      var stateMap = this.stateMap,
        reverseStateMap = this.reverseStateMap;

      if (!reverseStateMap && stateMap) {
        reverseStateMap = this.reverseStateMap = {};

        for (var i in stateMap) {
          reverseStateMap[stateMap[i]] = i;
        }
      }

      if (reverseStateMap) {
        return reverseStateMap[rs] || rs;
      } else {
        return rs;
      }
    },
    toJSON: function toJSON() {
      return {
        text: this.text,
        firstLine: this.firstLine,
        firstColumn: this.firstColumn,
        lastLine: this.lastLine,
        lastColumn: this.lastColumn,
        token: this.token,
        start: this.start,
        end: this.end
      };
    },
    peek: function peek() {
      var token = this._lex(true);

      this.tokensQueue.push(token);

      if (token.token === Lexer.STATIC.HIDDEN_TOKEN) {
        return this.peek();
      }

      return token;
    },
    matchRegExp: function matchRegExp(regexp) {
      if (regexp.test) {
        regexp.lastIndex = this.end;
        var ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }

        return ret;
      }

      return regexp.call(this, this);
    },
    lex: function lex() {
      var token = this._lex();

      this.tokens.push(token);

      if (token.token === Lexer.STATIC.HIDDEN_TOKEN) {
        return this.lex();
      }

      return token;
    },
    nextChar: function nextChar(index) {
      if (index === void 0) {
        index = 0;
      }

      return this.getChar(this.end + index);
    },
    nextCharCode: function nextCharCode(index) {
      if (index === void 0) {
        index = 0;
      }

      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function nextStartsWith(search) {
      var input = this.input,
        end = this.end;
      var l = search.length;

      for (var i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function nextCharAt(index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function nextLength() {
      return this.input.length - this.end;
    },
    getChar: function getChar(index) {
      if (index === void 0) {
        index = 0;
      }

      if (this.options.unicode) {
        var code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return "";
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function getCharCode(index) {
      if (index === void 0) {
        index = 0;
      }

      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    _lex: function _lex(skipQueue) {
      if (!skipQueue) {
        var tokensQueue = this.tokensQueue;

        while (tokensQueue.length) {
          var _token = tokensQueue.shift();

          return _token;
        }
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var input = this.input;
      var _this$options$env = this.options.env,
        env =
          _this$options$env === void 0 ? this.defaultEnv : _this$options$env;
      this.match = this.text = "";

      if (this.end >= input.length) {
        return {
          t: this.mapEndSymbol(),
          token: Lexer.STATIC.EOF_TOKEN,
          start: this.end,
          end: this.end,
          firstLine: this.lastLine,
          firstColumn: this.lastColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        var regexp = this.getRuleItem(rule, "regexp"),
          token = this.getRuleItem(rule, "token"),
          action = this.getRuleItem(rule, "action");

        if (
          typeof regexp !== "function" &&
          regexp &&
          env &&
          typeof regexp.test !== "function"
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(regexp))) {
          this.start = this.end;
          this.end += m[0].length;
          lines = m[0].split("\n");
          lines.shift();
          this.lineNumber += lines.length;
          var position = {
            start: this.start,
            end: this.end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length
          };
          mix(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return _extends(
              {
                text: this.text,
                token: this.token,
                t: ret
              },
              position
            );
          } else {
            // ignore
            return this._lex(skipQueue);
          }
        }
      }
    }
  };
  Lexer.STATIC = {
    INITIAL_STATE: "I",
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: "$EOF",
    UNKNOWN_TOKEN: "$UNKNOWN",
    HIDDEN_TOKEN: "$HIDDEN"
  };
  var lexer = new Lexer({
    rules: [
      ["$HIDDEN", /\s+/g, undefined, undefined, ["a", "I"]],
      [
        "a",
        /\(/g,
        function() {
          var userData = this.userData;
          userData.markParen = userData.markParen || [];
          var lastItem = my.last(userData.markParen);

          if (lastItem && lastItem.index === this.start) {
            return;
          }

          userData.markParen.push({
            index: this.end,
            func: false
          });
        }
      ],
      [
        "b",
        /\)/g,
        function() {
          var userData = this.userData;
          userData.markParen = userData.markParen || [];
          userData.markParen.pop();
        }
      ],
      [
        "c",
        /\{/g,
        function() {
          // array constants
          my.markType(this, "a");
        }
      ],
      ["d", /=/g],
      ["e", /<=/g],
      ["f", />=/g],
      ["g", /<>/g],
      ["h", />/g],
      ["i", /</g],
      ["j", /\+/g],
      ["k", /\-/g],
      ["l", /\*/g],
      ["m", /\//g],
      ["n", /\^/g],
      ["o", /&/g],
      ["p", /%/g],
      [
        "q",
        /\}/g,
        function() {
          my.markType(this, "a", false);
        }
      ],
      ["r", /,/g, undefined, undefined, ["a"]],
      ["s", /\[#('.|[^\]#])+\]/g, undefined, undefined, ["a", "I"]],
      ["t", /@/g, undefined, undefined, ["a"]],
      [
        "u",
        /(?:(?:(?:\[(?:'.|[^\]'#])+\])(?:\:(?:\[(?:'.|[^\]'#])+\]))?)|(?:'.|[^\]#'])+)/g,
        undefined,
        undefined,
        ["a"]
      ],
      [
        "v",
        /\[/g,
        function() {
          this.pushState("inside structure reference");
        },
        undefined,
        ["a", "I"]
      ],
      ["w", /@/g],
      [
        "x",
        /\]/g,
        function() {
          this.popState();
        },
        undefined,
        ["a"]
      ],
      [
        "y",
        {
          en: /[,;]/g,
          de: /[\\;]/g
        },
        undefined,
        function() {
          return !!this.userData.a;
        }
      ],
      [
        "z",
        /,/g,
        undefined,
        function() {
          var lastItem = my.last(this.userData.markParen);
          return !lastItem || !lastItem.func;
        }
      ],
      ["aa", /:/g],
      [
        "ab",
        {
          en: /,/g,
          de: /;/g
        }
      ],
      [
        "ac",
        /"(?:""|[^"])*"/g,
        function() {
          this.text = this.text.slice(1, -1).replace(/""/g, '"');
        }
      ],
      [
        "ad",
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[(])/g,
        function() {
          var userData = this.userData;
          userData.markParen = userData.markParen || [];
          userData.markParen.push({
            index: this.end,
            func: true
          });
        }
      ],
      ["ae", /#[A-Z0-9\/]+(!|\?)? /g],
      [
        "af",
        /(?:(?:(?:'(?:''|[^'])*')|(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))?))!)?(?:(?:(?:\$?[A-Za-z]+\$?[0-9]+)(?:\s*\:\s*(?:\$?[A-Za-z]+\$?[0-9]+))?#?)|(?:\d+\:\d+))/g
      ],
      ["ag", /(TRUE|FALSE)(?=\b)/gi],
      [
        "ah",
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[\[])/g
      ],
      [
        "ai",
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)/g
      ],
      [
        "aj",
        {
          en: /(?:0|[1-9][0-9]*)?\.(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g,
          de: /(?:0|[1-9][0-9]*)?,(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g
        }
      ],
      ["aj", /(?:0|[1-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g]
    ],
    isCompress: 1,
    defaultEnv: "en"
  });
  lexer.stateMap = {
    I: "I",
    "inside structure reference": "a"
  };

  function lex(input, options) {
    if (options === void 0) {
      options = {};
    }

    lexer.options = options;
    lexer.resetInput(input);

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN) {}

    return {
      tokens: lexer.tokens
    };
  }

  var parser = {
    productions: [
      ["ak", ["al"]],
      ["am", ["d", "an", 1, "am"]],
      ["am", ["e", "an", 1, "am"]],
      ["am", ["f", "an", 1, "am"]],
      ["am", ["g", "an", 1, "am"]],
      ["am", ["h", "an", 1, "am"]],
      ["am", ["i", "an", 1, "am"]],
      ["am", []],
      ["al", ["an", 1, "am"]],
      ["ao", ["j", "ap", 1, "ao"]],
      ["ao", ["k", "ap", 1, "ao"]],
      ["ao", []],
      ["an", ["ap", 1, "ao"]],
      ["aq", ["l", "ar", 1, "aq"]],
      ["aq", ["m", "ar", 1, "aq"]],
      ["aq", []],
      ["ap", ["ar", 1, "aq"]],
      ["as", ["n", "at", 1, "as"]],
      ["as", []],
      ["ar", ["at", 1, "as"]],
      ["au", ["o", "av", 1, "au"]],
      ["au", []],
      ["at", ["av", 1, "au"]],
      ["aw", ["p", 1, "aw"]],
      ["aw", []],
      ["av", ["ax", 1, "aw"]],
      ["ax", ["k", "ax"]],
      ["ax", ["j", "ax"]],
      ["ax", ["w", "ax"]],
      ["ax", ["ay"]],
      ["ay", ["a", "al", "b"]],
      ["ay", ["aj"]],
      ["ay", ["ac"]],
      ["ay", ["ag"]],
      ["ay", ["ae"]],
      ["ay", ["az"]],
      ["ay", ["ba"]],
      ["ay", ["bb"]],
      ["bc", ["af"]],
      ["bc", ["ai"]],
      ["bc", ["bd"]],
      ["az", ["be"]],
      ["bf", ["z", "bg", 1, "bf"]],
      ["bf", []],
      ["be", ["bg", 1, "bf"]],
      ["bh", ["bi", 1, "bh"]],
      ["bh", []],
      ["bg", ["bi", 1, "bh"]],
      ["bj", ["aa", "bc", 1, "bj"]],
      ["bj", []],
      ["bi", ["bc", 1, "bj"]],
      ["bk", ["ac"]],
      ["bk", ["aj"]],
      ["bk", ["ag"]],
      ["bk", ["ae"]],
      ["bl", ["y", "bk", "bl"]],
      ["bl", []],
      ["bm", ["bk", "bl"]],
      ["bb", ["c", "bm", "q"]],
      ["ba", ["ad", "a", "bn", "b"]],
      ["bo", []],
      ["bo", ["al"]],
      ["bp", ["ab", "bo", "bp"]],
      ["bp", []],
      ["bn", ["bo", "bp"]],
      ["bd", ["ah", "bq"]],
      ["bd", ["bq"]],
      ["bq", ["s"]],
      ["bq", ["v", "br", "x"]],
      ["bs", ["u"]],
      ["bs", []],
      ["bt", ["t", "bs"]],
      ["br", ["bt"]],
      ["br", ["bu"]],
      ["bv", ["u"]],
      ["bv", ["s"]],
      ["bw", ["r", "bv", "bw"]],
      ["bw", []],
      ["bu", ["bv", "bw"]]
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3
    },
    getProductionItemByType: function getProductionItemByType(p, itemType) {
      if (this.isCompress) {
        return p[this.productionIndexMap[itemType]];
      }

      return p[itemType];
    },
    getProductionSymbol: function getProductionSymbol(p) {
      return this.getProductionItemByType(p, "symbol");
    },
    getProductionRhs: function getProductionRhs(p) {
      return this.getProductionItemByType(p, "rhs");
    },
    getProductionAction: function getProductionAction(p) {
      return this.getProductionItemByType(p, "action");
    },
    getProductionLabel: function getProductionLabel(p) {
      return this.getProductionItemByType(p, "label");
    },
    isCompress: 1
  };
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  lexer.symbolMap = {
    $UNKNOWN: "$UNKNOWN",
    $HIDDEN: "$HIDDEN",
    $EOF: "$EOF",
    "(": "a",
    ")": "b",
    "{": "c",
    "=": "d",
    "<=": "e",
    ">=": "f",
    "<>": "g",
    ">": "h",
    "<": "i",
    "+": "j",
    "-": "k",
    "*": "l",
    "/": "m",
    "^": "n",
    "&": "o",
    "%": "p",
    "}": "q",
    SPECIFIER_SEPARATOR: "r",
    TABLE_ITEM_SPECIFIER: "s",
    "TABLE_@": "t",
    TABLE_COLUMN_SPECIFIER: "u",
    "[": "v",
    "@": "w",
    "]": "x",
    ARRAY_SEPARATOR: "y",
    REF_UNION_OPERATOR: "z",
    REF_EXPAND_OPERATOR: "aa",
    ARGUMENT_SEPARATOR: "ab",
    STRING: "ac",
    FUNCTION: "ad",
    ERROR: "ae",
    CELL: "af",
    LOGIC: "ag",
    TABLE_NAME: "ah",
    NAME: "ai",
    NUMBER: "aj",
    formula: "ak",
    equalExp: "al",
    "(equalExp)1_": "am",
    addExp: "an",
    "(addExp)1_": "ao",
    mulExp: "ap",
    "(mulExp)1_": "aq",
    expoExp: "ar",
    "(expoExp)1_": "as",
    concatExp: "at",
    "(concatExp)1_": "au",
    percentExp: "av",
    "(percentExp)1_": "aw",
    "prefix-exp": "ax",
    "atom-exp": "ay",
    reference: "az",
    function: "ba",
    array: "bb",
    "reference-item": "bc",
    "structure-reference": "bd",
    "union-reference": "be",
    "(union-reference)1_": "bf",
    "intersect-reference": "bg",
    "(intersect-reference)1_": "bh",
    "expand-reference": "bi",
    "(expand-reference)1_": "bj",
    "array-element": "bk",
    "(array-list)1_": "bl",
    "array-list": "bm",
    arguments: "bn",
    argument: "bo",
    "(arguments)1_": "bp",
    "table-specifier": "bq",
    "table-specifier-inner": "br",
    "_1(table-this-row)": "bs",
    "table-this-row": "bt",
    "table-column-specifier": "bu",
    "table-specifier-item": "bv",
    "(table-column-specifier)1_": "bw"
  };
  var productionSkipEndSet = new Set([
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    9,
    10,
    11,
    13,
    14,
    15,
    17,
    18,
    20,
    21,
    23,
    24,
    42,
    43,
    45,
    46,
    48,
    49,
    55,
    56,
    62,
    63,
    69,
    70,
    76,
    77
  ]);
  var productionEndFlag = 2;
  var productionReductionFlag = 1;

  var isProductionEndFlag = function isProductionEndFlag(t) {
    return t === productionEndFlag;
  };

  var isProductionReductionFlag = function isProductionReductionFlag(t) {
    return t === productionReductionFlag;
  };

  parser.table = {
    ak: {
      k: 0,
      j: 0,
      w: 0,
      a: 0,
      aj: 0,
      ac: 0,
      ag: 0,
      ae: 0,
      af: 0,
      ai: 0,
      ah: 0,
      s: 0,
      v: 0,
      ad: 0,
      c: 0
    },
    am: {
      d: 1,
      e: 2,
      f: 3,
      g: 4,
      h: 5,
      i: 6,
      $EOF: 7,
      b: 7,
      ab: 7
    },
    al: {
      k: 8,
      j: 8,
      w: 8,
      a: 8,
      aj: 8,
      ac: 8,
      ag: 8,
      ae: 8,
      af: 8,
      ai: 8,
      ah: 8,
      s: 8,
      v: 8,
      ad: 8,
      c: 8
    },
    ao: {
      j: 9,
      k: 10,
      d: 11,
      e: 11,
      f: 11,
      g: 11,
      h: 11,
      i: 11,
      $EOF: 11,
      b: 11,
      ab: 11
    },
    an: {
      k: 12,
      j: 12,
      w: 12,
      a: 12,
      aj: 12,
      ac: 12,
      ag: 12,
      ae: 12,
      af: 12,
      ai: 12,
      ah: 12,
      s: 12,
      v: 12,
      ad: 12,
      c: 12
    },
    aq: {
      l: 13,
      m: 14,
      j: 15,
      k: 15,
      d: 15,
      e: 15,
      f: 15,
      g: 15,
      h: 15,
      i: 15,
      $EOF: 15,
      b: 15,
      ab: 15
    },
    ap: {
      k: 16,
      j: 16,
      w: 16,
      a: 16,
      aj: 16,
      ac: 16,
      ag: 16,
      ae: 16,
      af: 16,
      ai: 16,
      ah: 16,
      s: 16,
      v: 16,
      ad: 16,
      c: 16
    },
    as: {
      n: 17,
      l: 18,
      m: 18,
      j: 18,
      k: 18,
      d: 18,
      e: 18,
      f: 18,
      g: 18,
      h: 18,
      i: 18,
      $EOF: 18,
      b: 18,
      ab: 18
    },
    ar: {
      k: 19,
      j: 19,
      w: 19,
      a: 19,
      aj: 19,
      ac: 19,
      ag: 19,
      ae: 19,
      af: 19,
      ai: 19,
      ah: 19,
      s: 19,
      v: 19,
      ad: 19,
      c: 19
    },
    au: {
      o: 20,
      n: 21,
      l: 21,
      m: 21,
      j: 21,
      k: 21,
      d: 21,
      e: 21,
      f: 21,
      g: 21,
      h: 21,
      i: 21,
      $EOF: 21,
      b: 21,
      ab: 21
    },
    at: {
      k: 22,
      j: 22,
      w: 22,
      a: 22,
      aj: 22,
      ac: 22,
      ag: 22,
      ae: 22,
      af: 22,
      ai: 22,
      ah: 22,
      s: 22,
      v: 22,
      ad: 22,
      c: 22
    },
    aw: {
      p: 23,
      o: 24,
      n: 24,
      l: 24,
      m: 24,
      j: 24,
      k: 24,
      d: 24,
      e: 24,
      f: 24,
      g: 24,
      h: 24,
      i: 24,
      $EOF: 24,
      b: 24,
      ab: 24
    },
    av: {
      k: 25,
      j: 25,
      w: 25,
      a: 25,
      aj: 25,
      ac: 25,
      ag: 25,
      ae: 25,
      af: 25,
      ai: 25,
      ah: 25,
      s: 25,
      v: 25,
      ad: 25,
      c: 25
    },
    ax: {
      k: 26,
      j: 27,
      w: 28,
      a: 29,
      aj: 29,
      ac: 29,
      ag: 29,
      ae: 29,
      af: 29,
      ai: 29,
      ah: 29,
      s: 29,
      v: 29,
      ad: 29,
      c: 29
    },
    ay: {
      a: 30,
      aj: 31,
      ac: 32,
      ag: 33,
      ae: 34,
      af: 35,
      ai: 35,
      ah: 35,
      s: 35,
      v: 35,
      ad: 36,
      c: 37
    },
    bc: {
      af: 38,
      ai: 39,
      ah: 40,
      s: 40,
      v: 40
    },
    az: {
      af: 41,
      ai: 41,
      ah: 41,
      s: 41,
      v: 41
    },
    bf: {
      z: 42,
      p: 43,
      o: 43,
      n: 43,
      l: 43,
      m: 43,
      j: 43,
      k: 43,
      d: 43,
      e: 43,
      f: 43,
      g: 43,
      h: 43,
      i: 43,
      $EOF: 43,
      b: 43,
      ab: 43
    },
    be: {
      af: 44,
      ai: 44,
      ah: 44,
      s: 44,
      v: 44
    },
    bh: {
      af: 45,
      ai: 45,
      ah: 45,
      s: 45,
      v: 45,
      z: 46,
      p: 46,
      o: 46,
      n: 46,
      l: 46,
      m: 46,
      j: 46,
      k: 46,
      d: 46,
      e: 46,
      f: 46,
      g: 46,
      h: 46,
      i: 46,
      $EOF: 46,
      b: 46,
      ab: 46
    },
    bg: {
      af: 47,
      ai: 47,
      ah: 47,
      s: 47,
      v: 47
    },
    bj: {
      aa: 48,
      af: 49,
      ai: 49,
      ah: 49,
      s: 49,
      v: 49,
      z: 49,
      p: 49,
      o: 49,
      n: 49,
      l: 49,
      m: 49,
      j: 49,
      k: 49,
      d: 49,
      e: 49,
      f: 49,
      g: 49,
      h: 49,
      i: 49,
      $EOF: 49,
      b: 49,
      ab: 49
    },
    bi: {
      af: 50,
      ai: 50,
      ah: 50,
      s: 50,
      v: 50
    },
    bk: {
      ac: 51,
      aj: 52,
      ag: 53,
      ae: 54
    },
    bl: {
      y: 55,
      q: 56
    },
    bm: {
      ac: 57,
      aj: 57,
      ag: 57,
      ae: 57
    },
    bb: {
      c: 58
    },
    ba: {
      ad: 59
    },
    bo: {
      ab: 60,
      b: 60,
      k: 61,
      j: 61,
      w: 61,
      a: 61,
      aj: 61,
      ac: 61,
      ag: 61,
      ae: 61,
      af: 61,
      ai: 61,
      ah: 61,
      s: 61,
      v: 61,
      ad: 61,
      c: 61
    },
    bp: {
      ab: 62,
      b: 63
    },
    bn: {
      k: 64,
      j: 64,
      w: 64,
      a: 64,
      aj: 64,
      ac: 64,
      ag: 64,
      ae: 64,
      af: 64,
      ai: 64,
      ah: 64,
      s: 64,
      v: 64,
      ad: 64,
      c: 64,
      ab: 64,
      b: 64
    },
    bd: {
      ah: 65,
      s: 66,
      v: 66
    },
    bq: {
      s: 67,
      v: 68
    },
    bs: {
      u: 69,
      x: 70
    },
    bt: {
      t: 71
    },
    br: {
      t: 72,
      u: 73,
      s: 73
    },
    bv: {
      u: 74,
      s: 75
    },
    bw: {
      r: 76,
      x: 77
    },
    bu: {
      u: 78,
      s: 78
    }
  };

  var AstNode = /*#__PURE__*/ (function() {
    function AstNode(cfg) {
      Object.assign(this, cfg);

      if (cfg.children) {
        this.setChildren(cfg.children);
      }
    }

    var _proto = AstNode.prototype;

    _proto.addChild = function addChild(c) {
      this.addChildren([c]);
    };

    _proto.addChildren = function addChildren(cs) {
      var _this$children;

      (_this$children = this.children).push.apply(_this$children, cs);

      this.setChildren(this.children);
    };

    _proto.setChildren = function setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      var first = cs[0];
      var last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (
        var _iterator2 = _createForOfIteratorHelperLoose(cs), _step2;
        !(_step2 = _iterator2()).done;

      ) {
        var c = _step2.value;
        c.parent = this;
      }
    };

    _proto.toJSON = function toJSON() {
      var ret = {};

      for (
        var _i2 = 0, _Object$keys2 = Object.keys(this);
        _i2 < _Object$keys2.length;
        _i2++
      ) {
        var k = _Object$keys2[_i2];

        if (k !== "parent" && k !== "t") {
          ret[k] = this[k];
        }
      }

      return ret;
    };

    return AstNode;
  })();

  parser.parse = function parse(input, options) {
    var recoveryTokens = [];
    var terminalNodes = [];

    function isExtraSymbol(ast) {
      return ast.children && !ast.children.length;
    }

    function peekStack(stack, n) {
      n = n || 1;
      return stack[stack.length - n];
    }

    function getTableVal(row, col) {
      return table[row] && table[row][col];
    }

    function noop() {}

    function getOriginalSymbol(s) {
      return lexer.mapReverseSymbol(s);
    }

    options = options || {};
    var error;
    var _options = options,
      onErrorRecovery = _options.onErrorRecovery,
      _options$onAction = _options.onAction,
      onAction = _options$onAction === void 0 ? noop : _options$onAction,
      _options$lexerOptions = _options.lexerOptions,
      lexerOptions =
        _options$lexerOptions === void 0 ? {} : _options$lexerOptions,
      transformNode = _options.transformNode;

    function checkSymbolLabel(node, parent) {
      if (node.label || parent.label) {
        if (node.label === parent.label) {
          return node.children;
        } else {
          return node;
        }
      }

      if (node.symbol === parent.symbol) {
        return node.children;
      }

      return node;
    }

    function defaultTransformNode(_ref) {
      var _node$children;

      var node = _ref.node,
        parent = _ref.parent;

      if (node.token || node.error) {
        return node;
      }

      if (
        ((_node$children = node.children) == null
          ? void 0
          : _node$children.length) > 1
      ) {
        if (parent.children.length === 1 && node.symbol === parent.symbol) {
          return node.children;
        }

        return node;
      }

      return checkSymbolLabel(node, parent);
    }

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformNode;
    }

    var lexer = parser.lexer,
      table = parser.table,
      productions = parser.productions,
      getProductionSymbol = parser.getProductionSymbol,
      getProductionRhs = parser.getProductionRhs,
      getProductionLabel = parser.getProductionLabel;
    lexer.options = lexerOptions;
    var symbolStack = [getProductionSymbol(productions[0])];
    var astStack = [
      new AstNode({
        children: []
      })
    ];
    lexer.resetInput(input);
    var token;
    var next;
    var currentToken;

    function getError() {
      var expected = getExpected();
      var tips = [];

      if (expected.length) {
        tips.push("'" + expected.join("', '") + "' expected.");
      }

      if (currentToken) {
        tips.push("current token: '" + currentToken.token + "'.");
      }

      var tip = tips.join("\n");
      return {
        errorMessage: [
          "syntax error at line " +
            lexer.lineNumber +
            ":\n" +
            lexer.showDebugInfo()
        ]
          .concat(tips)
          .join("\n"),
        tip: tip
      };
    }

    function cleanAst(ast) {
      if (!transformNode) {
        return ast;
      }

      if (ast.children) {
        var children;
        var childrenChanged;

        while (true) {
          var changed = false;
          var index = 0;
          children = [];

          for (
            var _iterator3 = _createForOfIteratorHelperLoose(ast.children),
              _step3;
            !(_step3 = _iterator3()).done;

          ) {
            var c = _step3.value;
            var node = transformNode({
              node: c,
              index: index,
              parent: ast,
              defaultTransformNode: defaultTransformNode
            });

            if (Array.isArray(node)) {
              var _children;

              (_children = children).push.apply(_children, node);
            } else if (node) {
              children.push(node);
            }

            changed = changed || node !== c;
            index++;
          }

          if (!changed) {
            break;
          } else {
            ast.setChildren(children);
            childrenChanged = true;
          }
        }

        if (childrenChanged && ast.parent) {
          cleanAst(ast.parent);
        } else {
          for (
            var _iterator4 = _createForOfIteratorHelperLoose(children), _step4;
            !(_step4 = _iterator4()).done;

          ) {
            var _c = _step4.value;
            cleanAst(_c);
          }
        }
      }

      return ast;
    }

    function getAst(raw) {
      var ast = astStack[0] && astStack[0].children && astStack[0].children[0];

      if (ast) {
        astStack[0].children.forEach(function(a) {
          return delete a.parent;
        });
      }

      if (raw) {
        return ast;
      }

      return ast && cleanAst(ast);
    }

    var topSymbol;
    var errorNode;
    var lastSymbol;

    function popSymbolStack() {
      var last = symbolStack.pop();

      if (typeof last === "string") {
        lastSymbol = last;
      }
    }

    function getExpected() {
      var s = topSymbol || lastSymbol;
      var ret = (table[s] && Object.keys(table[s])) || [];
      return ret.map(function(r) {
        return lexer.mapReverseSymbol(r);
      });
    }

    function closeAstWhenError() {
      errorNode = new AstNode(
        _extends(
          {
            error: error
          },
          error.lexer
        )
      );
      peekStack(astStack).addChild(errorNode);

      while (astStack.length !== 1) {
        var _ast = astStack.pop();

        if (_ast.symbol && isExtraSymbol(_ast)) {
          var topAst = peekStack(astStack);
          topAst.children.pop();
          topAst.addChildren(_ast.children);
        }
      }
    }

    var production;

    while (1) {
      topSymbol = peekStack(symbolStack);

      if (!topSymbol) {
        break;
      }

      while (
        isProductionEndFlag(topSymbol) ||
        isProductionReductionFlag(topSymbol)
      ) {
        var _ast2 = astStack.pop();

        if (isProductionReductionFlag(topSymbol)) {
          var stackTop = peekStack(astStack);
          var wrap = new AstNode({
            symbol: _ast2.symbol,
            children: [_ast2],
            label: _ast2.label
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }

        popSymbolStack();
        topSymbol = peekStack(symbolStack);

        if (!topSymbol) {
          break;
        }
      }

      if (typeof topSymbol === "string") {
        if (!token) {
          token = lexer.lex();
          recoveryTokens.push(token);
        }

        currentToken = token;

        if (topSymbol === token.t) {
          symbolStack.pop();
          var terminalNode = new AstNode(token);
          terminalNodes.push(terminalNode);
          var parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = null;
        } else if ((next = getTableVal(topSymbol, token.t)) !== undefined) {
          popSymbolStack();
          production = productions[next];

          if (productionSkipEndSet.has(next)) {
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production)
                .concat()
                .reverse()
            );
          } else {
            var newAst = new AstNode({
              symbol: getOriginalSymbol(topSymbol),
              label: getProductionLabel(production),
              children: []
            });
            peekStack(astStack).addChild(newAst);
            astStack.push(newAst);
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production)
                .concat(productionEndFlag)
                .reverse()
            );
          }
        } else {
          error = _extends(
            {
              recovery: false
            },
            getError(),
            {
              expected: getExpected(),
              symbol: lexer.mapReverseSymbol(topSymbol),
              lexer: token
            }
          );

          if (onErrorRecovery) {
            var recommendedAction = {};
            var nextToken = lexer.peek(); // should delete

            if (
              topSymbol === nextToken.t ||
              getTableVal(topSymbol, nextToken.t) !== undefined
            ) {
              recommendedAction.action = "del";
            } else if (error.expected.length) {
              recommendedAction.action = "add";
            }

            var _errorNode = new AstNode(
              _extends(
                {
                  error: error
                },
                error.lexer
              )
            );

            peekStack(astStack).addChild(_errorNode);
            var recovery =
              onErrorRecovery(
                {
                  errorNode: _errorNode,
                  parseTree: getAst(true)
                },
                recommendedAction
              ) || {};
            var action = recovery.action;
            peekStack(astStack).children.pop();

            if (!action) {
              closeAstWhenError();
              break;
            }

            if (action === "del") {
              error.recovery = true;
              recoveryTokens.pop();
              token = null;
            } else if (action === "add") {
              error.recovery = true;
              token = _extends({}, token, {
                token: recovery.token,
                text: recovery.text,
                t: lexer.mapSymbol(recovery.token)
              });
              recoveryTokens.push(token);
            }
          } else {
            closeAstWhenError();
            break;
          }
        }
      }

      topSymbol = peekStack(symbolStack);

      while (topSymbol && typeof topSymbol === "function") {
        onAction({
          lexer: currentToken,
          action: topSymbol
        });
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
      }

      if (!symbolStack.length) {
        break;
      }
    }

    if (!error && currentToken.t !== lexer.mapEndSymbol()) {
      error = _extends({}, getError(), {
        expected: getExpected(),
        symbol: lexer.mapReverseSymbol(topSymbol || lastSymbol),
        lexer: currentToken
      });
      closeAstWhenError();
    }

    var ast = getAst();
    return {
      ast: ast,
      tokens: lexer.tokens,
      recoveryTokens: recoveryTokens,
      errorNode: errorNode,
      error: error,
      terminalNodes: terminalNodes
    };
  };

  return parser;
})();

if (typeof module !== "undefined") {
  module.exports = formulaParser;
}
