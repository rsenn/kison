/*
Generated By kison v0.5.32

Generate time: Fri Nov 26 2021 20:15:16 GMT+0800 (中国标准时间)
*/
var formulaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token =
      recommendedAction.action === 'add'
        ? lexer.peekTokens()[0]
        : lexer.getCurrentToken();
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var my = {
    insideStructureRef: 'inside structure reference',
    markType: function (self, type, enter = true) {
      const { userData } = self;
      userData[type] = userData[type] || 0;

      if (enter) {
        ++userData[type];
      } else if (userData.inArray) {
        --userData[type];
      }
    },
    last: function (arr) {
      return arr && arr[arr.length - 1];
    },
  };
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      [
        'HIDDEN',
        /\s+/g,
        undefined,
        undefined,
        ['inside structure reference', 'I'],
        'HIDDEN',
      ],
      [
        '(',
        /\(/g,
        function () {
          var _this$tokens;

          if (
            ((_this$tokens = this.tokens[this.tokens.length - 1]) === null ||
            _this$tokens === void 0
              ? void 0
              : _this$tokens.token) === 'FUNCTION'
          ) {
            return;
          }

          const { userData } = this;
          userData.markParen = userData.markParen || [];
          userData.markParen.push({
            func: false,
          });
        },
      ],
      [
        ')',
        /\)/g,
        function () {
          const { userData } = this;
          userData.markParen = userData.markParen || [];
          userData.markParen.pop();
        },
      ],
      [
        '{',
        /\{/g,
        function () {
          // array constants
          my.markType(this, 'a');
        },
      ],
      [
        '}',
        /\}/g,
        function () {
          my.markType(this, 'a', false);
        },
      ],
      [
        'SPECIFIER_SEPARATOR',
        /,/g,
        undefined,
        undefined,
        ['inside structure reference'],
      ],
      [
        'TABLE_ITEM_SPECIFIER',
        /\[#('.|[^\]#])+\]/g,
        undefined,
        undefined,
        ['inside structure reference', 'I'],
      ],
      ['TABLE_AT', /@/g, undefined, undefined, ['inside structure reference']],
      [
        'TABLE_COLUMN_SPECIFIER',
        /(?:(?:(?:\[(?:'.|[^\]'#])+\])(?:\:(?:\[(?:'.|[^\]'#])+\]))?)|(?:'.|[^\]#'])+)/g,
        undefined,
        undefined,
        ['inside structure reference'],
      ],
      [
        '[',
        /\[/g,
        function () {
          this.pushState(my.insideStructureRef);
        },
        undefined,
        ['inside structure reference', 'I'],
      ],
      [
        ']',
        /\]/g,
        function () {
          this.popState();
        },
        undefined,
        ['inside structure reference'],
      ],
      [
        'ARRAY_SEPARATOR',
        {
          en: /[,;]/g,
          de: /[\\;]/g,
        },
        undefined,
        function () {
          return !!this.userData.a;
        },
      ],
      [
        'REF_UNION_OPERATOR',
        /,/g,
        undefined,
        function () {
          const lastItem = my.last(this.userData.markParen);
          return !lastItem || !lastItem.func;
        },
      ],
      ['REF_RANGE_OPERATOR', /:/g],
      [
        'ARGUMENT_SEPARATOR',
        {
          en: /,/g,
          de: /;/g,
        },
      ],
      [
        'STRING',
        /"(?:""|[^"])*"/g,
        function () {
          this.text = this.text.slice(1, -1).replace(/""/g, '"');
        },
      ],
      [
        'FUNCTION',
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[(])/g,
        function () {
          const { userData } = this;
          userData.markParen = userData.markParen || [];
          userData.markParen.push({
            func: true,
          });
        },
      ],
      [
        'TABLE_NAME',
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[\[])/g,
      ],
      ['ERROR', /#[A-Z0-9\/]+(!|\?)? /g],
      [
        'CELL',
        /(?:(?:(?:'(?:''|[^'])*')|(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))?))!)?(?:(?:(?:\$?[A-Za-z]+\$?[0-9]+)(?:\s*\:\s*(?:\$?[A-Za-z]+\$?[0-9]+))?#?)|(?:\d+\:\d+))/g,
      ],
      ['LOGIC', /(TRUE|FALSE)(?=\b)/gi],
      [
        'NAME',
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)/g,
      ],
      [
        'NUMBER',
        {
          en: /(?:0|[1-9][0-9]*)?\.(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g,
          de: /(?:0|[1-9][0-9]*)?,(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g,
        },
      ],
      ['NUMBER', /(?:0|[1-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g],
      ['=', /=/g],
      ['<=', /<=/g],
      ['>=', />=/g],
      ['<>', /<>/g],
      ['>', />/g],
      ['<', /</g],
      ['&', /&/g],
      ['+', /\+/g],
      ['-', /\-/g],
      ['*', /\*/g],
      ['/', /\//g],
      ['^', /\^/g],
      ['@', /@/g],
      ['%', /%/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
    ],
    isCompress: 1,
    defaultEnv: 'en',
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['formula']],
      ['formula', ['exp']],
      ['exp_p_end', ['(', 'exp', ')']],
      ['exp_p_end', ['NUMBER']],
      ['exp_p_end', ['STRING']],
      ['exp_p_end', ['LOGIC']],
      ['exp_p_end', ['ERROR']],
      ['exp_p_end', ['reference']],
      ['exp_p_end', ['functionExp']],
      ['exp_p_end', ['array']],
      ['referenceItem', ['CELL']],
      ['referenceItem', ['NAME']],
      ['referenceItem', ['structureReference']],
      ['reference_p_end', ['referenceItem']],
      ['arrayElement', ['STRING']],
      ['arrayElement', ['NUMBER']],
      ['arrayElement', ['LOGIC']],
      ['arrayElement', ['ERROR']],
      [
        '(zeroMore_array_38_group_2_1)1_',
        ['array_38_group_2', '(zeroMore_array_38_group_2_1)1_'],
      ],
      ['(zeroMore_array_38_group_2_1)1_', []],
      ['zeroMore_array_38_group_2_1', ['(zeroMore_array_38_group_2_1)1_']],
      ['array', ['{', 'arrayElement', 'zeroMore_array_38_group_2_1', '}']],
      ['functionExp', ['FUNCTION', '(', 'argumentsList', ')']],
      [
        '(zeroMore_argumentsList_40_group_1_2)1_',
        ['argumentsList_40_group_1', '(zeroMore_argumentsList_40_group_1_2)1_'],
      ],
      ['(zeroMore_argumentsList_40_group_1_2)1_', []],
      [
        'zeroMore_argumentsList_40_group_1_2',
        ['(zeroMore_argumentsList_40_group_1_2)1_'],
      ],
      ['argumentsList', ['exp', 'zeroMore_argumentsList_40_group_1_2']],
      ['argumentsList', ['zeroMore_argumentsList_40_group_1_2']],
      ['structureReference', ['TABLE_NAME', 'tableSpecifier']],
      ['structureReference', ['tableSpecifier']],
      ['tableSpecifier', ['TABLE_ITEM_SPECIFIER']],
      ['tableSpecifier', ['[', 'tableSpecifierInner', ']']],
      ['_1(tableThisRow)', ['TABLE_COLUMN_SPECIFIER']],
      ['_1(tableThisRow)', []],
      ['tableThisRow', ['TABLE_AT', '_1(tableThisRow)']],
      ['tableSpecifierInner', ['tableThisRow']],
      ['tableSpecifierInner', ['tableColumnSpecifier']],
      ['tableSpecifierItem', ['TABLE_COLUMN_SPECIFIER']],
      ['tableSpecifierItem', ['TABLE_ITEM_SPECIFIER']],
      [
        '(zeroMore_tableColumnSpecifier_51_group_1_3)1_',
        [
          'tableColumnSpecifier_51_group_1',
          '(zeroMore_tableColumnSpecifier_51_group_1_3)1_',
        ],
      ],
      ['(zeroMore_tableColumnSpecifier_51_group_1_3)1_', []],
      [
        'zeroMore_tableColumnSpecifier_51_group_1_3',
        ['(zeroMore_tableColumnSpecifier_51_group_1_3)1_'],
      ],
      [
        'tableColumnSpecifier',
        ['tableSpecifierItem', 'zeroMore_tableColumnSpecifier_51_group_1_3'],
      ],
      ['array_38_group_2', ['ARRAY_SEPARATOR', 'arrayElement']],
      ['_1(argumentsList_40_group_1)', []],
      ['_1(argumentsList_40_group_1)', ['exp']],
      [
        'argumentsList_40_group_1',
        ['ARGUMENT_SEPARATOR', '_1(argumentsList_40_group_1)'],
      ],
      [
        'tableColumnSpecifier_51_group_1',
        ['SPECIFIER_SEPARATOR', 'tableSpecifierItem'],
      ],
      ['(exp)1_', ['=', 'exp_p_2', 1, '(exp)1_'], undefined, 'binaryExp'],
      ['(exp)1_', ['<=', 'exp_p_2', 1, '(exp)1_'], undefined, 'binaryExp'],
      ['(exp)1_', ['>=', 'exp_p_2', 1, '(exp)1_'], undefined, 'binaryExp'],
      ['(exp)1_', ['<>', 'exp_p_2', 1, '(exp)1_'], undefined, 'binaryExp'],
      ['(exp)1_', ['>', 'exp_p_2', 1, '(exp)1_'], undefined, 'binaryExp'],
      ['(exp)1_', ['<', 'exp_p_2', 1, '(exp)1_'], undefined, 'binaryExp'],
      ['(exp)1_', []],
      ['exp', ['exp_p_2', 1, '(exp)1_'], undefined, undefined, undefined, true],
      [
        '(exp_p_2)1_',
        ['&', 'exp_p_3', 1, '(exp_p_2)1_'],
        undefined,
        'binaryExp',
      ],
      ['(exp_p_2)1_', []],
      [
        'exp_p_2',
        ['exp_p_3', 1, '(exp_p_2)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(exp_p_3)1_',
        ['+', 'exp_p_4', 1, '(exp_p_3)1_'],
        undefined,
        'binaryExp',
      ],
      [
        '(exp_p_3)1_',
        ['-', 'exp_p_4', 1, '(exp_p_3)1_'],
        undefined,
        'binaryExp',
      ],
      ['(exp_p_3)1_', []],
      [
        'exp_p_3',
        ['exp_p_4', 1, '(exp_p_3)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(exp_p_4)1_',
        ['*', 'exp_p_5', 1, '(exp_p_4)1_'],
        undefined,
        'binaryExp',
      ],
      [
        '(exp_p_4)1_',
        ['/', 'exp_p_5', 1, '(exp_p_4)1_'],
        undefined,
        'binaryExp',
      ],
      ['(exp_p_4)1_', []],
      [
        'exp_p_4',
        ['exp_p_5', 1, '(exp_p_4)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(exp_p_5)1_',
        ['^', 'exp_p_6', 1, '(exp_p_5)1_'],
        undefined,
        'binaryExp',
      ],
      ['(exp_p_5)1_', []],
      [
        'exp_p_5',
        ['exp_p_6', 1, '(exp_p_5)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      ['(exp_p_6)1_', ['%', 1, '(exp_p_6)1_'], undefined, 'percentageExp'],
      ['(exp_p_6)1_', []],
      [
        'exp_p_6',
        ['exp_p_7', 1, '(exp_p_6)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      ['exp_p_7', ['exp_p_8'], undefined, undefined, undefined, true],
      ['exp_p_7', ['+', 'exp_p_7'], undefined, 'prefixExp'],
      ['exp_p_7', ['-', 'exp_p_7'], undefined, 'prefixExp'],
      ['exp_p_8', ['exp_p_end'], undefined, undefined, undefined, true],
      ['exp_p_8', ['@', 'exp_p_8'], undefined, 'clipExp'],
      [
        '(reference)1_',
        ['REF_UNION_OPERATOR', 'reference_p_10', 1, '(reference)1_'],
        undefined,
        'unionReference',
      ],
      ['(reference)1_', []],
      [
        'reference',
        ['reference_p_10', 1, '(reference)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(reference_p_10)1_',
        ['reference_p_11', 1, '(reference_p_10)1_'],
        undefined,
        'intersectionReference',
      ],
      ['(reference_p_10)1_', []],
      [
        'reference_p_10',
        ['reference_p_11', 1, '(reference_p_10)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(reference_p_11)1_',
        ['REF_RANGE_OPERATOR', 'reference_p_end', 1, '(reference_p_11)1_'],
        undefined,
        'rangeReference',
      ],
      ['(reference_p_11)1_', []],
      [
        'reference_p_11',
        ['reference_p_end', 1, '(reference_p_11)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {
    exp_p_end: 'exp',
    exp_p_1: 'exp',
    exp_p_2: 'exp',
    exp_p_3: 'exp',
    exp_p_4: 'exp',
    exp_p_5: 'exp',
    exp_p_6: 'exp',
    exp_p_7: 'exp',
    exp_p_8: 'exp',
    reference_p_end: 'reference',
    reference_p_9: 'reference',
    reference_p_10: 'reference',
    reference_p_11: 'reference',
  };
  productionSkipAstNodeSet = new Set([
    18, 19, 20, 23, 24, 25, 32, 33, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50,
    51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 78, 79, 81,
    82, 84, 85,
  ]);
  const parserPredictTable = {
    $START: {
      '(': [0],
      NUMBER: [0],
      STRING: [0],
      LOGIC: [0],
      ERROR: [0],
      CELL: [0],
      NAME: [0],
      TABLE_NAME: [0],
      TABLE_ITEM_SPECIFIER: [0],
      '[': [0],
      FUNCTION: [0],
      '{': [0],
      '@': [0],
      '+': [0],
      '-': [0],
    },
    formula: {
      '(': [1],
      NUMBER: [1],
      STRING: [1],
      LOGIC: [1],
      ERROR: [1],
      CELL: [1],
      NAME: [1],
      TABLE_NAME: [1],
      TABLE_ITEM_SPECIFIER: [1],
      '[': [1],
      FUNCTION: [1],
      '{': [1],
      '@': [1],
      '+': [1],
      '-': [1],
    },
    exp_p_end: {
      '(': [2],
      NUMBER: [3],
      STRING: [4],
      LOGIC: [5],
      ERROR: [6],
      CELL: [7],
      NAME: [7],
      TABLE_NAME: [7],
      TABLE_ITEM_SPECIFIER: [7],
      '[': [7],
      FUNCTION: [8],
      '{': [9],
    },
    referenceItem: {
      CELL: [10],
      NAME: [11],
      TABLE_NAME: [12],
      TABLE_ITEM_SPECIFIER: [12],
      '[': [12],
    },
    reference_p_end: {
      CELL: [13],
      NAME: [13],
      TABLE_NAME: [13],
      TABLE_ITEM_SPECIFIER: [13],
      '[': [13],
    },
    arrayElement: {
      STRING: [14],
      NUMBER: [15],
      LOGIC: [16],
      ERROR: [17],
    },
    '(zeroMore_array_38_group_2_1)1_': {
      ARRAY_SEPARATOR: [18],
      '}': [19],
    },
    zeroMore_array_38_group_2_1: {
      ARRAY_SEPARATOR: [20],
      '}': [20],
    },
    array: {
      '{': [21],
    },
    functionExp: {
      FUNCTION: [22],
    },
    '(zeroMore_argumentsList_40_group_1_2)1_': {
      ARGUMENT_SEPARATOR: [23],
      ')': [24],
    },
    zeroMore_argumentsList_40_group_1_2: {
      ARGUMENT_SEPARATOR: [25],
      ')': [25],
    },
    argumentsList: {
      '(': [26],
      NUMBER: [26],
      STRING: [26],
      LOGIC: [26],
      ERROR: [26],
      CELL: [26],
      NAME: [26],
      TABLE_NAME: [26],
      TABLE_ITEM_SPECIFIER: [26],
      '[': [26],
      FUNCTION: [26],
      '{': [26],
      '@': [26],
      '+': [26],
      '-': [26],
      ARGUMENT_SEPARATOR: [27],
    },
    structureReference: {
      TABLE_NAME: [28],
      TABLE_ITEM_SPECIFIER: [29],
      '[': [29],
    },
    tableSpecifier: {
      TABLE_ITEM_SPECIFIER: [30],
      '[': [31],
    },
    '_1(tableThisRow)': {
      TABLE_COLUMN_SPECIFIER: [32],
      ']': [33],
    },
    tableThisRow: {
      TABLE_AT: [34],
    },
    tableSpecifierInner: {
      TABLE_AT: [35],
      TABLE_COLUMN_SPECIFIER: [36],
      TABLE_ITEM_SPECIFIER: [36],
    },
    tableSpecifierItem: {
      TABLE_COLUMN_SPECIFIER: [37],
      TABLE_ITEM_SPECIFIER: [38],
    },
    '(zeroMore_tableColumnSpecifier_51_group_1_3)1_': {
      SPECIFIER_SEPARATOR: [39],
      ']': [40],
    },
    zeroMore_tableColumnSpecifier_51_group_1_3: {
      SPECIFIER_SEPARATOR: [41],
      ']': [41],
    },
    tableColumnSpecifier: {
      TABLE_COLUMN_SPECIFIER: [42],
      TABLE_ITEM_SPECIFIER: [42],
    },
    array_38_group_2: {
      ARRAY_SEPARATOR: [43],
    },
    '_1(argumentsList_40_group_1)': {
      ARGUMENT_SEPARATOR: [44],
      ')': [44],
      '(': [45],
      NUMBER: [45],
      STRING: [45],
      LOGIC: [45],
      ERROR: [45],
      CELL: [45],
      NAME: [45],
      TABLE_NAME: [45],
      TABLE_ITEM_SPECIFIER: [45],
      '[': [45],
      FUNCTION: [45],
      '{': [45],
      '@': [45],
      '+': [45],
      '-': [45],
    },
    argumentsList_40_group_1: {
      ARGUMENT_SEPARATOR: [46],
    },
    tableColumnSpecifier_51_group_1: {
      SPECIFIER_SEPARATOR: [47],
    },
    '(exp)1_': {
      '=': [48],
      '<=': [49],
      '>=': [50],
      '<>': [51],
      '>': [52],
      '<': [53],
      $EOF: [54],
      ')': [54],
      ARGUMENT_SEPARATOR: [54],
    },
    exp: {
      '(': [55],
      NUMBER: [55],
      STRING: [55],
      LOGIC: [55],
      ERROR: [55],
      CELL: [55],
      NAME: [55],
      TABLE_NAME: [55],
      TABLE_ITEM_SPECIFIER: [55],
      '[': [55],
      FUNCTION: [55],
      '{': [55],
      '@': [55],
      '+': [55],
      '-': [55],
    },
    '(exp_p_2)1_': {
      '&': [56],
      '=': [57],
      '<=': [57],
      '>=': [57],
      '<>': [57],
      '>': [57],
      '<': [57],
      $EOF: [57],
      ')': [57],
      ARGUMENT_SEPARATOR: [57],
    },
    exp_p_2: {
      '(': [58],
      NUMBER: [58],
      STRING: [58],
      LOGIC: [58],
      ERROR: [58],
      CELL: [58],
      NAME: [58],
      TABLE_NAME: [58],
      TABLE_ITEM_SPECIFIER: [58],
      '[': [58],
      FUNCTION: [58],
      '{': [58],
      '@': [58],
      '+': [58],
      '-': [58],
    },
    '(exp_p_3)1_': {
      '+': [59],
      '-': [60],
      '&': [61],
      '=': [61],
      '<=': [61],
      '>=': [61],
      '<>': [61],
      '>': [61],
      '<': [61],
      $EOF: [61],
      ')': [61],
      ARGUMENT_SEPARATOR: [61],
    },
    exp_p_3: {
      '(': [62],
      NUMBER: [62],
      STRING: [62],
      LOGIC: [62],
      ERROR: [62],
      CELL: [62],
      NAME: [62],
      TABLE_NAME: [62],
      TABLE_ITEM_SPECIFIER: [62],
      '[': [62],
      FUNCTION: [62],
      '{': [62],
      '@': [62],
      '+': [62],
      '-': [62],
    },
    '(exp_p_4)1_': {
      '*': [63],
      '/': [64],
      '+': [65],
      '-': [65],
      '&': [65],
      '=': [65],
      '<=': [65],
      '>=': [65],
      '<>': [65],
      '>': [65],
      '<': [65],
      $EOF: [65],
      ')': [65],
      ARGUMENT_SEPARATOR: [65],
    },
    exp_p_4: {
      '(': [66],
      NUMBER: [66],
      STRING: [66],
      LOGIC: [66],
      ERROR: [66],
      CELL: [66],
      NAME: [66],
      TABLE_NAME: [66],
      TABLE_ITEM_SPECIFIER: [66],
      '[': [66],
      FUNCTION: [66],
      '{': [66],
      '@': [66],
      '+': [66],
      '-': [66],
    },
    '(exp_p_5)1_': {
      '^': [67],
      '*': [68],
      '/': [68],
      '+': [68],
      '-': [68],
      '&': [68],
      '=': [68],
      '<=': [68],
      '>=': [68],
      '<>': [68],
      '>': [68],
      '<': [68],
      $EOF: [68],
      ')': [68],
      ARGUMENT_SEPARATOR: [68],
    },
    exp_p_5: {
      '(': [69],
      NUMBER: [69],
      STRING: [69],
      LOGIC: [69],
      ERROR: [69],
      CELL: [69],
      NAME: [69],
      TABLE_NAME: [69],
      TABLE_ITEM_SPECIFIER: [69],
      '[': [69],
      FUNCTION: [69],
      '{': [69],
      '@': [69],
      '+': [69],
      '-': [69],
    },
    '(exp_p_6)1_': {
      '%': [70],
      '^': [71],
      '*': [71],
      '/': [71],
      '+': [71],
      '-': [71],
      '&': [71],
      '=': [71],
      '<=': [71],
      '>=': [71],
      '<>': [71],
      '>': [71],
      '<': [71],
      $EOF: [71],
      ')': [71],
      ARGUMENT_SEPARATOR: [71],
    },
    exp_p_6: {
      '(': [72],
      NUMBER: [72],
      STRING: [72],
      LOGIC: [72],
      ERROR: [72],
      CELL: [72],
      NAME: [72],
      TABLE_NAME: [72],
      TABLE_ITEM_SPECIFIER: [72],
      '[': [72],
      FUNCTION: [72],
      '{': [72],
      '@': [72],
      '+': [72],
      '-': [72],
    },
    exp_p_7: {
      '(': [73],
      NUMBER: [73],
      STRING: [73],
      LOGIC: [73],
      ERROR: [73],
      CELL: [73],
      NAME: [73],
      TABLE_NAME: [73],
      TABLE_ITEM_SPECIFIER: [73],
      '[': [73],
      FUNCTION: [73],
      '{': [73],
      '@': [73],
      '+': [74],
      '-': [75],
    },
    exp_p_8: {
      '(': [76],
      NUMBER: [76],
      STRING: [76],
      LOGIC: [76],
      ERROR: [76],
      CELL: [76],
      NAME: [76],
      TABLE_NAME: [76],
      TABLE_ITEM_SPECIFIER: [76],
      '[': [76],
      FUNCTION: [76],
      '{': [76],
      '@': [77],
    },
    '(reference)1_': {
      REF_UNION_OPERATOR: [78],
      '%': [79],
      '^': [79],
      '*': [79],
      '/': [79],
      '+': [79],
      '-': [79],
      '&': [79],
      '=': [79],
      '<=': [79],
      '>=': [79],
      '<>': [79],
      '>': [79],
      '<': [79],
      $EOF: [79],
      ')': [79],
      ARGUMENT_SEPARATOR: [79],
    },
    reference: {
      CELL: [80],
      NAME: [80],
      TABLE_NAME: [80],
      TABLE_ITEM_SPECIFIER: [80],
      '[': [80],
    },
    '(reference_p_10)1_': {
      CELL: [81],
      NAME: [81],
      TABLE_NAME: [81],
      TABLE_ITEM_SPECIFIER: [81],
      '[': [81],
      REF_UNION_OPERATOR: [82],
      '%': [82],
      '^': [82],
      '*': [82],
      '/': [82],
      '+': [82],
      '-': [82],
      '&': [82],
      '=': [82],
      '<=': [82],
      '>=': [82],
      '<>': [82],
      '>': [82],
      '<': [82],
      $EOF: [82],
      ')': [82],
      ARGUMENT_SEPARATOR: [82],
    },
    reference_p_10: {
      CELL: [83],
      NAME: [83],
      TABLE_NAME: [83],
      TABLE_ITEM_SPECIFIER: [83],
      '[': [83],
    },
    '(reference_p_11)1_': {
      REF_RANGE_OPERATOR: [84],
      CELL: [85],
      NAME: [85],
      TABLE_NAME: [85],
      TABLE_ITEM_SPECIFIER: [85],
      '[': [85],
      REF_UNION_OPERATOR: [85],
      '%': [85],
      '^': [85],
      '*': [85],
      '/': [85],
      '+': [85],
      '-': [85],
      '&': [85],
      '=': [85],
      '<=': [85],
      '>=': [85],
      '<>': [85],
      '>': [85],
      '<': [85],
      $EOF: [85],
      ')': [85],
      ARGUMENT_SEPARATOR: [85],
    },
    reference_p_11: {
      CELL: [86],
      NAME: [86],
      TABLE_NAME: [86],
      TABLE_ITEM_SPECIFIER: [86],
      '[': [86],
    },
  };
  parser.parse = function parse(input, options) {
    prepareLLParse();
    const recoveryTokens = [];
    const terminalNodes = [];

    function getTableVal(row, col) {
      return table[row] && table[row][col];
    }

    function isSymbolName(s) {
      return !!table[s];
    }

    options = options || {};
    let error;
    var {
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      startSymbol,
      parseTree = true,
    } = options;

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    var {
      getProductionIsWrap,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
      productions,
    } = parser;
    var table = parserPredictTable;
    lexer.options = lexerOptions;
    startSymbol = startSymbol || getProductionSymbol(productions[0]);
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token;
    let next;
    let topSymbol;
    let errorNode;

    function popSymbolStack() {
      symbolStack.pop();
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s !== 'string') {
        throw new Error('unexpected topSymbol:' + s);
      }

      if (!isSymbolName(s)) {
        return [lexer.mapReverseSymbol(s)];
      }

      const ret = (table[s] && Object.keys(table[s])) || [];
      return ret.map((r) => lexer.mapReverseSymbol(r));
    };

    function peekSymbolStack() {
      return peekStack(symbolStack);
    }

    let production;

    while (1) {
      topSymbol = peekStack(symbolStack);

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        if (topSymbol === `$ANY` || topSymbol === token.t) {
          symbolStack.pop();

          if (parseTree) {
            const terminalNode = new AstTokenNode(token);
            terminalNode.type = 'token';
            terminalNodes.push(terminalNode);
            const parent = peekStack(astStack);
            parent.addChild(terminalNode);
          }

          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        } else if ((next = getTableVal(topSymbol, token.t)) !== undefined) {
          popSymbolStack();
          production = productions[next[0]];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(next[0])
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                id: ++globalSymbolNodeId,
                internalRuleIndex: next[0],
                symbol: getOriginalSymbol(topSymbol),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat(productionEndFlag).reverse(),
            );
          }
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            (nextToken) =>
              typeof topSymbol === 'string' &&
              getTableVal(topSymbol, nextToken.t) !== undefined,
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 18,
    3: 19,
    4: 20,
    5: 21,
    6: 22,
    7: 23,
    8: 24,
    9: 25,
    10: 26,
    11: 30,
    12: 31,
    13: 32,
    14: 33,
    15: 34,
    16: 35,
    17: 36,
    18: 37,
    19: 37,
    20: 37,
    21: 38,
    22: 39,
    23: 39,
    24: 39,
    25: 39,
    26: 40,
    27: 41,
    28: 42,
    29: 43,
    30: 44,
    31: 45,
    32: 46,
    33: 47,
    34: 48,
    35: 49,
    36: 50,
    37: 50,
    38: 50,
    39: 37,
    40: 39,
    41: 39,
    42: 50,
    43: 2,
    44: 2,
    45: 3,
    46: 4,
    47: 5,
    48: 6,
    49: 7,
    50: 8,
    51: 8,
    52: 9,
    53: 9,
    54: 10,
    55: 11,
    56: 11,
    57: 12,
    58: 13,
    59: 13,
    60: 17,
    61: 17,
    62: 14,
    63: 14,
    64: 15,
    65: 16,
    66: 16,
    67: 27,
    68: 27,
    69: 28,
    70: 28,
    71: 29,
    72: 29,
  };
  return parser;
})();

export default formulaParser;
