/*
Generated By kison v0.4.36

Generate time: Sat Sep 25 2021 01:21:26 GMT+0800 (中国标准时间)
*/
var formulaParser = (function (undefined) {
  var my = {
    markType: function (self, type, enter = true) {
      const { userData } = self;
      userData[type] = userData[type] || 0;
      if (enter) {
        ++userData[type];
      } else if (userData.inArray) {
        --userData[type];
      }
    },
    last: function (arr) {
      return arr && arr[arr.length - 1];
    },
  };
  function mix(to, from) {
    for (var f in from) {
      to[f] = from[f];
    }
  }
  function isArray(obj) {
    return '[object Array]' === Object.prototype.toString.call(obj);
  }
  function each(object, fn, context) {
    if (object) {
      var key,
        val,
        length,
        i = 0;

      context = context || null;

      if (!isArray(object)) {
        for (key in object) {
          // can not use hasOwnProperty
          if (fn.call(context, object[key], key, object) === false) {
            break;
          }
        }
      } else {
        length = object.length;
        for (val = object[0]; i < length; val = object[++i]) {
          if (fn.call(context, val, i, object) === false) {
            break;
          }
        }
      }
    }
  }
  function inArray(item, arr) {
    for (var i = 0, l = arr.length; i < l; i++) {
      if (arr[i] === item) {
        return true;
      }
    }
    return false;
  }
  var Lexer = function (cfg) {
    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const ruleIndexMap = (this.ruleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      filter: 3,
      state: 4,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([
      STATIC.EOF_TOKEN,
      STATIC.UNKNOWN_TOKEN,
      STATIC.HIDDEN_TOKEN,
    ]);
    this.rules = [];
    this.defaultEnv = undefined;
    mix(this, cfg);
    this.rules = this.rules.concat();
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });
    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    }
    const errorRuleCompress = (this.errorRuleCompress = []);
    errorRuleCompress[ruleIndexMap.token] = errorRule.token;
    errorRuleCompress[ruleIndexMap.regexp] = errorRule.regexp;
    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];
      if (pattern.test) {
        let source = pattern.source;
        if (source.startsWith('^')) {
          source = source.slice(1);
        }
        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const regIndex = this.isCompress ? this.ruleIndexMap.regexp : 'regexp';
        for (const r of this.rules) {
          this.transformRegExp(r, regIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = undefined;
      this.tokensQueue = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItem: function (rule, itemType) {
      if (this.isCompress) {
        return rule[this.ruleIndexMap[itemType]];
      } else {
        return rule[itemType];
      }
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];
      each(this.rules, (r) => {
        var filter = this.getRuleItem(r, 'filter');
        if (filter) {
          if (filter.call(this)) {
            rules.push(r);
          }
          return;
        }
        var state = this.getRuleItem(r, 'state');
        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (inArray(currentState, state)) {
          rules.push(r);
        }
      });
      if (this.isCompress) {
        rules.push(this.errorRuleCompress);
      } else {
        rules.push(this.errorRule);
      }
      return rules;
    },
    peekState: function (n) {
      n = n || 1;
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num) {
      num = num || 1;
      var ret;
      while (num--) {
        ret = this.stateStack.pop();
      }
      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function () {
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { matched, match, input } = this;

      matched = matched.slice(0, matched.length - match.length);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? '...' : '') +
          matched
            .slice(0 - DEBUG_CONTEXT_LIMIT)
            .split('\n')
            .join(' '),
        next = match + input.slice(this.end);
      //#JSCOVERAGE_ENDIF
      next =
        next.slice(0, DEBUG_CONTEXT_LIMIT).split('\n').join(' ') +
        (next.length > DEBUG_CONTEXT_LIMIT ? '...' : '');
      return past + next + '\n' + new Array(past.length + 1).join('-') + '^';
    },
    mapSymbol: function (t) {
      if (!t) {
        return t;
      }
      var { symbolMap } = this;
      if (!symbolMap) {
        return t;
      }
      // force string, see util.clone iphone5s ios7 bug
      return symbolMap[t] || (symbolMap[t] = this.genShortId('symbol'));
    },
    mapReverseSymbol: function (rs) {
      if (!rs) {
        return rs;
      }
      var { symbolMap, reverseSymbolMap } = this;
      if (!reverseSymbolMap && symbolMap) {
        reverseSymbolMap = this.reverseSymbolMap = {};
        for (var i in symbolMap) {
          reverseSymbolMap[symbolMap[i]] = i;
        }
      }
      if (reverseSymbolMap) {
        return reverseSymbolMap[rs] || rs;
      } else {
        return rs;
      }
    },
    mapState: function (s) {
      var { stateMap } = this;
      if (!stateMap) {
        return s;
      }
      return stateMap[s] || (stateMap[s] = this.genShortId('state'));
    },
    mapReverseState: function (rs) {
      var { stateMap, reverseStateMap } = this;
      if (!reverseStateMap && stateMap) {
        reverseStateMap = this.reverseStateMap = {};
        for (var i in stateMap) {
          reverseStateMap[stateMap[i]] = i;
        }
      }
      if (reverseStateMap) {
        return reverseStateMap[rs] || rs;
      } else {
        return rs;
      }
    },
    toJSON: function () {
      return {
        text: this.text,
        firstLine: this.firstLine,
        firstColumn: this.firstColumn,
        lastLine: this.lastLine,
        lastColumn: this.lastColumn,
        token: this.token,
        start: this.start,
        end: this.end,
      };
    },
    peek: function () {
      const token = this._lex(true);
      this.tokensQueue.push(token);
      if (token.token === Lexer.STATIC.HIDDEN_TOKEN) {
        return this.peek();
      }
      return token;
    },
    matchRegExp: function (regexp) {
      if (regexp.test) {
        regexp.lastIndex = this.end;
        const ret = regexp.exec(this.input);
        if (ret && ret.index !== this.end) {
          return null;
        }
        return ret;
      }
      return regexp.call(this, this);
    },
    lex: function () {
      const token = this._lex();
      this.tokens.push(token);
      if (token.token === Lexer.STATIC.HIDDEN_TOKEN) {
        return this.lex();
      }
      return token;
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;
      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }
      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);
        if (code === undefined || isNaN(code)) {
          return '';
        }
        return String.fromCodePoint(code);
      }
      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }
      return this.input.charCodeAt(index);
    },
    _lex: function (skipQueue) {
      if (!skipQueue) {
        const { tokensQueue } = this;
        while (tokensQueue.length) {
          const token = tokensQueue.shift();
          return token;
        }
      }
      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();

      var { input } = this;

      var { env = this.defaultEnv } = this.options;

      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        var regexp = this.getRuleItem(rule, 'regexp'),
          token = this.getRuleItem(rule, 'token'),
          action = this.getRuleItem(rule, 'action');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        }

        //#JSCOVERAGE_ENDIF
        if ((m = this.matchRegExp(regexp))) {
          this.start = this.end;
          this.end += m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: this.start,
            end: this.end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          mix(this, position);

          var match;
          // for error report
          match = this.match = m[0];

          // all matches
          this.matches = m;
          // may change by user
          this.text = match;
          // matched content utils now
          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this._lex(skipQueue);
          }
        }
      }
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
    HIDDEN_TOKEN: '$HIDDEN',
  };
  var lexer = new Lexer({
    rules: [
      [
        '$HIDDEN',
        /\s+/g,
        undefined,
        undefined,
        ['inside structure reference', 'I'],
      ],
      [
        '(',
        /\(/g,
        function () {
          if (this.tokens[this.tokens.length - 1]?.token === 'FUNCTION') {
            return;
          }
          const { userData } = this;
          userData.markParen = userData.markParen || [];
          userData.markParen.push({ func: false });
        },
      ],
      [
        ')',
        /\)/g,
        function () {
          const { userData } = this;
          userData.markParen = userData.markParen || [];
          userData.markParen.pop();
        },
      ],
      [
        '{',
        /\{/g,
        function () {
          // array constants
          my.markType(this, 'a');
        },
      ],
      [
        '}',
        /\}/g,
        function () {
          my.markType(this, 'a', false);
        },
      ],
      [
        'SPECIFIER_SEPARATOR',
        /,/g,
        undefined,
        undefined,
        ['inside structure reference'],
      ],
      [
        'TABLE_ITEM_SPECIFIER',
        /\[#('.|[^\]#])+\]/g,
        undefined,
        undefined,
        ['inside structure reference', 'I'],
      ],
      ['TABLE_@', /@/g, undefined, undefined, ['inside structure reference']],
      [
        'TABLE_COLUMN_SPECIFIER',
        /(?:(?:(?:\[(?:'.|[^\]'#])+\])(?:\:(?:\[(?:'.|[^\]'#])+\]))?)|(?:'.|[^\]#'])+)/g,
        undefined,
        undefined,
        ['inside structure reference'],
      ],
      [
        '[',
        /\[/g,
        function () {
          this.pushState('inside structure reference');
        },
        undefined,
        ['inside structure reference', 'I'],
      ],
      [
        ']',
        /\]/g,
        function () {
          this.popState();
        },
        undefined,
        ['inside structure reference'],
      ],
      [
        'ARRAY_SEPARATOR',
        {
          en: /[,;]/g,
          de: /[\\;]/g,
        },
        undefined,
        function () {
          return !!this.userData.a;
        },
      ],
      [
        'REF_UNION_OPERATOR',
        /,/g,
        undefined,
        function () {
          const lastItem = my.last(this.userData.markParen);
          return !lastItem || !lastItem.func;
        },
      ],
      ['REF_EXPAND_OPERATOR', /:/g],
      [
        'ARGUMENT_SEPARATOR',
        {
          en: /,/g,
          de: /;/g,
        },
      ],
      [
        'STRING',
        /"(?:""|[^"])*"/g,
        function () {
          this.text = this.text.slice(1, -1).replace(/""/g, '"');
        },
      ],
      [
        'FUNCTION',
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[(])/g,
        function () {
          const { userData } = this;
          userData.markParen = userData.markParen || [];
          userData.markParen.push({ func: true });
        },
      ],
      ['ERROR', /#[A-Z0-9\/]+(!|\?)? /g],
      [
        'CELL',
        /(?:(?:(?:'(?:''|[^'])*')|(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))?))!)?(?:(?:(?:\$?[A-Za-z]+\$?[0-9]+)(?:\s*\:\s*(?:\$?[A-Za-z]+\$?[0-9]+))?#?)|(?:\d+\:\d+))/g,
      ],
      ['LOGIC', /(TRUE|FALSE)(?=\b)/gi],
      [
        'TABLE_NAME',
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[\[])/g,
      ],
      [
        'NAME',
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)/g,
      ],
      [
        'NUMBER',
        {
          en: /(?:0|[1-9][0-9]*)?\.(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g,
          de: /(?:0|[1-9][0-9]*)?,(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g,
        },
      ],
      ['NUMBER', /(?:0|[1-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g],
      ['=', /=/g],
      ['<=', /<=/g],
      ['>=', />=/g],
      ['<>', /<>/g],
      ['>', />/g],
      ['<', /</g],
      ['&', /&/g],
      ['+', /\+/g],
      ['-', /\-/g],
      ['*', /\*/g],
      ['/', /\//g],
      ['^', /\^/g],
      ['@', /@/g],
      ['%', /%/g],
    ],
    isCompress: 1,
    defaultEnv: 'en',
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;
    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }
      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }
    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);
    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['formula']],
      ['formula', ['exp']],
      ['exp_p_end', ['(', 'exp', ')']],
      ['exp_p_end', ['NUMBER']],
      ['exp_p_end', ['STRING']],
      ['exp_p_end', ['LOGIC']],
      ['exp_p_end', ['ERROR']],
      ['exp_p_end', ['reference']],
      ['exp_p_end', ['function']],
      ['exp_p_end', ['array']],
      ['reference-item', ['CELL']],
      ['reference-item', ['NAME']],
      ['reference-item', ['structure-reference']],
      ['reference_p_end', ['reference-item']],
      ['array-element', ['STRING']],
      ['array-element', ['NUMBER']],
      ['array-element', ['LOGIC']],
      ['array-element', ['ERROR']],
      [
        '(array-list)1_',
        ['ARRAY_SEPARATOR', 'array-element', '(array-list)1_'],
      ],
      ['(array-list)1_', []],
      ['array-list', ['array-element', '(array-list)1_']],
      ['array', ['{', 'array-list', '}']],
      ['function', ['FUNCTION', '(', 'arguments', ')']],
      ['argument', []],
      ['argument', ['exp']],
      ['(arguments)1_', ['ARGUMENT_SEPARATOR', 'argument', '(arguments)1_']],
      ['(arguments)1_', []],
      ['arguments', ['argument', '(arguments)1_']],
      ['structure-reference', ['TABLE_NAME', 'table-specifier']],
      ['structure-reference', ['table-specifier']],
      ['table-specifier', ['TABLE_ITEM_SPECIFIER']],
      ['table-specifier', ['[', 'table-specifier-inner', ']']],
      ['_1(table-this-row)', ['TABLE_COLUMN_SPECIFIER']],
      ['_1(table-this-row)', []],
      ['table-this-row', ['TABLE_@', '_1(table-this-row)']],
      ['table-specifier-inner', ['table-this-row']],
      ['table-specifier-inner', ['table-column-specifier']],
      ['table-specifier-item', ['TABLE_COLUMN_SPECIFIER']],
      ['table-specifier-item', ['TABLE_ITEM_SPECIFIER']],
      [
        '(table-column-specifier)1_',
        [
          'SPECIFIER_SEPARATOR',
          'table-specifier-item',
          '(table-column-specifier)1_',
        ],
      ],
      ['(table-column-specifier)1_', []],
      [
        'table-column-specifier',
        ['table-specifier-item', '(table-column-specifier)1_'],
      ],
      ['(exp)1_', ['=', 'exp_p_2', 1, '(exp)1_']],
      ['(exp)1_', ['<=', 'exp_p_2', 1, '(exp)1_']],
      ['(exp)1_', ['>=', 'exp_p_2', 1, '(exp)1_']],
      ['(exp)1_', ['<>', 'exp_p_2', 1, '(exp)1_']],
      ['(exp)1_', ['>', 'exp_p_2', 1, '(exp)1_']],
      ['(exp)1_', ['<', 'exp_p_2', 1, '(exp)1_']],
      ['(exp)1_', []],
      ['exp', ['exp_p_2', 1, '(exp)1_'], undefined, 'binary-exp'],
      ['(exp_p_2)1_', ['&', 'exp_p_3', 1, '(exp_p_2)1_']],
      ['(exp_p_2)1_', []],
      ['exp_p_2', ['exp_p_3', 1, '(exp_p_2)1_'], undefined, 'binary-exp'],
      ['(exp_p_3)1_', ['+', 'exp_p_4', 1, '(exp_p_3)1_']],
      ['(exp_p_3)1_', ['-', 'exp_p_4', 1, '(exp_p_3)1_']],
      ['(exp_p_3)1_', []],
      ['exp_p_3', ['exp_p_4', 1, '(exp_p_3)1_'], undefined, 'binary-exp'],
      ['(exp_p_4)1_', ['*', 'exp_p_5', 1, '(exp_p_4)1_']],
      ['(exp_p_4)1_', ['/', 'exp_p_5', 1, '(exp_p_4)1_']],
      ['(exp_p_4)1_', []],
      ['exp_p_4', ['exp_p_5', 1, '(exp_p_4)1_'], undefined, 'binary-exp'],
      ['(exp_p_5)1_', ['^', 'exp_p_6', 1, '(exp_p_5)1_']],
      ['(exp_p_5)1_', []],
      ['exp_p_5', ['exp_p_6', 1, '(exp_p_5)1_'], undefined, 'binary-exp'],
      ['(exp_p_6)1_', ['%', 1, '(exp_p_6)1_']],
      ['(exp_p_6)1_', []],
      ['exp_p_6', ['exp_p_7', 1, '(exp_p_6)1_'], undefined, 'percentage-exp'],
      ['exp_p_7', ['exp_p_8']],
      ['exp_p_7', ['+', 'exp_p_7'], undefined, 'prefix-exp'],
      ['exp_p_7', ['-', 'exp_p_7'], undefined, 'prefix-exp'],
      ['exp_p_8', ['exp_p_end']],
      ['exp_p_8', ['@', 'exp_p_8'], undefined, 'clip-exp'],
      [
        '(reference)1_',
        ['REF_UNION_OPERATOR', 'reference_p_10', 1, '(reference)1_'],
      ],
      ['(reference)1_', []],
      [
        'reference',
        ['reference_p_10', 1, '(reference)1_'],
        undefined,
        'union-reference',
      ],
      ['(reference_p_10)1_', ['reference_p_11', 1, '(reference_p_10)1_']],
      ['(reference_p_10)1_', []],
      [
        'reference_p_10',
        ['reference_p_11', 1, '(reference_p_10)1_'],
        undefined,
        'intersect-reference',
      ],
      [
        '(reference_p_11)1_',
        ['REF_EXPAND_OPERATOR', 'reference_p_end', 1, '(reference_p_11)1_'],
      ],
      ['(reference_p_11)1_', []],
      [
        'reference_p_11',
        ['reference_p_end', 1, '(reference_p_11)1_'],
        undefined,
        'expand-reference',
      ],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
    },
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p[this.productionIndexMap[itemType]];
      }
      return p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    isCompress: 1,
  };
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  const productionSkipEndSet = new Set([
    18, 19, 25, 26, 32, 33, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54,
    55, 57, 58, 59, 61, 62, 64, 65, 72, 73, 75, 76, 78, 79,
  ]);
  const productionEndFlag = 2;
  const productionReductionFlag = 1;
  const isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  const isProductionReductionFlag = function (t) {
    return t === productionReductionFlag;
  };
  parser.table = {
    $START: {
      '(': 0,
      NUMBER: 0,
      STRING: 0,
      LOGIC: 0,
      ERROR: 0,
      CELL: 0,
      NAME: 0,
      TABLE_NAME: 0,
      TABLE_ITEM_SPECIFIER: 0,
      '[': 0,
      FUNCTION: 0,
      '{': 0,
      '@': 0,
      '+': 0,
      '-': 0,
    },
    formula: {
      '(': 1,
      NUMBER: 1,
      STRING: 1,
      LOGIC: 1,
      ERROR: 1,
      CELL: 1,
      NAME: 1,
      TABLE_NAME: 1,
      TABLE_ITEM_SPECIFIER: 1,
      '[': 1,
      FUNCTION: 1,
      '{': 1,
      '@': 1,
      '+': 1,
      '-': 1,
    },
    exp_p_end: {
      '(': 2,
      NUMBER: 3,
      STRING: 4,
      LOGIC: 5,
      ERROR: 6,
      CELL: 7,
      NAME: 7,
      TABLE_NAME: 7,
      TABLE_ITEM_SPECIFIER: 7,
      '[': 7,
      FUNCTION: 8,
      '{': 9,
    },
    'reference-item': {
      CELL: 10,
      NAME: 11,
      TABLE_NAME: 12,
      TABLE_ITEM_SPECIFIER: 12,
      '[': 12,
    },
    reference_p_end: {
      CELL: 13,
      NAME: 13,
      TABLE_NAME: 13,
      TABLE_ITEM_SPECIFIER: 13,
      '[': 13,
    },
    'array-element': {
      STRING: 14,
      NUMBER: 15,
      LOGIC: 16,
      ERROR: 17,
    },
    '(array-list)1_': {
      ARRAY_SEPARATOR: 18,
      '}': 19,
    },
    'array-list': {
      STRING: 20,
      NUMBER: 20,
      LOGIC: 20,
      ERROR: 20,
    },
    array: {
      '{': 21,
    },
    function: {
      FUNCTION: 22,
    },
    argument: {
      ARGUMENT_SEPARATOR: 23,
      ')': 23,
      '(': 24,
      NUMBER: 24,
      STRING: 24,
      LOGIC: 24,
      ERROR: 24,
      CELL: 24,
      NAME: 24,
      TABLE_NAME: 24,
      TABLE_ITEM_SPECIFIER: 24,
      '[': 24,
      FUNCTION: 24,
      '{': 24,
      '@': 24,
      '+': 24,
      '-': 24,
    },
    '(arguments)1_': {
      ARGUMENT_SEPARATOR: 25,
      ')': 26,
    },
    arguments: {
      '(': 27,
      NUMBER: 27,
      STRING: 27,
      LOGIC: 27,
      ERROR: 27,
      CELL: 27,
      NAME: 27,
      TABLE_NAME: 27,
      TABLE_ITEM_SPECIFIER: 27,
      '[': 27,
      FUNCTION: 27,
      '{': 27,
      '@': 27,
      '+': 27,
      '-': 27,
      ARGUMENT_SEPARATOR: 27,
      ')': 27,
    },
    'structure-reference': {
      TABLE_NAME: 28,
      TABLE_ITEM_SPECIFIER: 29,
      '[': 29,
    },
    'table-specifier': {
      TABLE_ITEM_SPECIFIER: 30,
      '[': 31,
    },
    '_1(table-this-row)': {
      TABLE_COLUMN_SPECIFIER: 32,
      ']': 33,
    },
    'table-this-row': {
      'TABLE_@': 34,
    },
    'table-specifier-inner': {
      'TABLE_@': 35,
      TABLE_COLUMN_SPECIFIER: 36,
      TABLE_ITEM_SPECIFIER: 36,
    },
    'table-specifier-item': {
      TABLE_COLUMN_SPECIFIER: 37,
      TABLE_ITEM_SPECIFIER: 38,
    },
    '(table-column-specifier)1_': {
      SPECIFIER_SEPARATOR: 39,
      ']': 40,
    },
    'table-column-specifier': {
      TABLE_COLUMN_SPECIFIER: 41,
      TABLE_ITEM_SPECIFIER: 41,
    },
    '(exp)1_': {
      '=': 42,
      '<=': 43,
      '>=': 44,
      '<>': 45,
      '>': 46,
      '<': 47,
      $EOF: 48,
      ')': 48,
      ARGUMENT_SEPARATOR: 48,
    },
    exp: {
      '(': 49,
      NUMBER: 49,
      STRING: 49,
      LOGIC: 49,
      ERROR: 49,
      CELL: 49,
      NAME: 49,
      TABLE_NAME: 49,
      TABLE_ITEM_SPECIFIER: 49,
      '[': 49,
      FUNCTION: 49,
      '{': 49,
      '@': 49,
      '+': 49,
      '-': 49,
    },
    '(exp_p_2)1_': {
      '&': 50,
      '=': 51,
      '<=': 51,
      '>=': 51,
      '<>': 51,
      '>': 51,
      '<': 51,
      $EOF: 51,
      ')': 51,
      ARGUMENT_SEPARATOR: 51,
    },
    exp_p_2: {
      '(': 52,
      NUMBER: 52,
      STRING: 52,
      LOGIC: 52,
      ERROR: 52,
      CELL: 52,
      NAME: 52,
      TABLE_NAME: 52,
      TABLE_ITEM_SPECIFIER: 52,
      '[': 52,
      FUNCTION: 52,
      '{': 52,
      '@': 52,
      '+': 52,
      '-': 52,
    },
    '(exp_p_3)1_': {
      '+': 53,
      '-': 54,
      '&': 55,
      '=': 55,
      '<=': 55,
      '>=': 55,
      '<>': 55,
      '>': 55,
      '<': 55,
      $EOF: 55,
      ')': 55,
      ARGUMENT_SEPARATOR: 55,
    },
    exp_p_3: {
      '(': 56,
      NUMBER: 56,
      STRING: 56,
      LOGIC: 56,
      ERROR: 56,
      CELL: 56,
      NAME: 56,
      TABLE_NAME: 56,
      TABLE_ITEM_SPECIFIER: 56,
      '[': 56,
      FUNCTION: 56,
      '{': 56,
      '@': 56,
      '+': 56,
      '-': 56,
    },
    '(exp_p_4)1_': {
      '*': 57,
      '/': 58,
      '+': 59,
      '-': 59,
      '&': 59,
      '=': 59,
      '<=': 59,
      '>=': 59,
      '<>': 59,
      '>': 59,
      '<': 59,
      $EOF: 59,
      ')': 59,
      ARGUMENT_SEPARATOR: 59,
    },
    exp_p_4: {
      '(': 60,
      NUMBER: 60,
      STRING: 60,
      LOGIC: 60,
      ERROR: 60,
      CELL: 60,
      NAME: 60,
      TABLE_NAME: 60,
      TABLE_ITEM_SPECIFIER: 60,
      '[': 60,
      FUNCTION: 60,
      '{': 60,
      '@': 60,
      '+': 60,
      '-': 60,
    },
    '(exp_p_5)1_': {
      '^': 61,
      '*': 62,
      '/': 62,
      '+': 62,
      '-': 62,
      '&': 62,
      '=': 62,
      '<=': 62,
      '>=': 62,
      '<>': 62,
      '>': 62,
      '<': 62,
      $EOF: 62,
      ')': 62,
      ARGUMENT_SEPARATOR: 62,
    },
    exp_p_5: {
      '(': 63,
      NUMBER: 63,
      STRING: 63,
      LOGIC: 63,
      ERROR: 63,
      CELL: 63,
      NAME: 63,
      TABLE_NAME: 63,
      TABLE_ITEM_SPECIFIER: 63,
      '[': 63,
      FUNCTION: 63,
      '{': 63,
      '@': 63,
      '+': 63,
      '-': 63,
    },
    '(exp_p_6)1_': {
      '%': 64,
      '^': 65,
      '*': 65,
      '/': 65,
      '+': 65,
      '-': 65,
      '&': 65,
      '=': 65,
      '<=': 65,
      '>=': 65,
      '<>': 65,
      '>': 65,
      '<': 65,
      $EOF: 65,
      ')': 65,
      ARGUMENT_SEPARATOR: 65,
    },
    exp_p_6: {
      '(': 66,
      NUMBER: 66,
      STRING: 66,
      LOGIC: 66,
      ERROR: 66,
      CELL: 66,
      NAME: 66,
      TABLE_NAME: 66,
      TABLE_ITEM_SPECIFIER: 66,
      '[': 66,
      FUNCTION: 66,
      '{': 66,
      '@': 66,
      '+': 66,
      '-': 66,
    },
    exp_p_7: {
      '(': 67,
      NUMBER: 67,
      STRING: 67,
      LOGIC: 67,
      ERROR: 67,
      CELL: 67,
      NAME: 67,
      TABLE_NAME: 67,
      TABLE_ITEM_SPECIFIER: 67,
      '[': 67,
      FUNCTION: 67,
      '{': 67,
      '@': 67,
      '+': 68,
      '-': 69,
    },
    exp_p_8: {
      '(': 70,
      NUMBER: 70,
      STRING: 70,
      LOGIC: 70,
      ERROR: 70,
      CELL: 70,
      NAME: 70,
      TABLE_NAME: 70,
      TABLE_ITEM_SPECIFIER: 70,
      '[': 70,
      FUNCTION: 70,
      '{': 70,
      '@': 71,
    },
    '(reference)1_': {
      REF_UNION_OPERATOR: 72,
      '%': 73,
      '^': 73,
      '*': 73,
      '/': 73,
      '+': 73,
      '-': 73,
      '&': 73,
      '=': 73,
      '<=': 73,
      '>=': 73,
      '<>': 73,
      '>': 73,
      '<': 73,
      $EOF: 73,
      ')': 73,
      ARGUMENT_SEPARATOR: 73,
    },
    reference: {
      CELL: 74,
      NAME: 74,
      TABLE_NAME: 74,
      TABLE_ITEM_SPECIFIER: 74,
      '[': 74,
    },
    '(reference_p_10)1_': {
      CELL: 75,
      NAME: 75,
      TABLE_NAME: 75,
      TABLE_ITEM_SPECIFIER: 75,
      '[': 75,
      REF_UNION_OPERATOR: 76,
      '%': 76,
      '^': 76,
      '*': 76,
      '/': 76,
      '+': 76,
      '-': 76,
      '&': 76,
      '=': 76,
      '<=': 76,
      '>=': 76,
      '<>': 76,
      '>': 76,
      '<': 76,
      $EOF: 76,
      ')': 76,
      ARGUMENT_SEPARATOR: 76,
    },
    reference_p_10: {
      CELL: 77,
      NAME: 77,
      TABLE_NAME: 77,
      TABLE_ITEM_SPECIFIER: 77,
      '[': 77,
    },
    '(reference_p_11)1_': {
      REF_EXPAND_OPERATOR: 78,
      CELL: 79,
      NAME: 79,
      TABLE_NAME: 79,
      TABLE_ITEM_SPECIFIER: 79,
      '[': 79,
      REF_UNION_OPERATOR: 79,
      '%': 79,
      '^': 79,
      '*': 79,
      '/': 79,
      '+': 79,
      '-': 79,
      '&': 79,
      '=': 79,
      '<=': 79,
      '>=': 79,
      '<>': 79,
      '>': 79,
      '<': 79,
      $EOF: 79,
      ')': 79,
      ARGUMENT_SEPARATOR: 79,
    },
    reference_p_11: {
      CELL: 80,
      NAME: 80,
      TABLE_NAME: 80,
      TABLE_ITEM_SPECIFIER: 80,
      '[': 80,
    },
  };
  parser.prioritySymbolMap = {
    exp_p_end: 'exp',
    exp_p_1: 'exp',
    exp_p_2: 'exp',
    exp_p_3: 'exp',
    exp_p_4: 'exp',
    exp_p_5: 'exp',
    exp_p_6: 'exp',
    exp_p_7: 'exp',
    exp_p_8: 'exp',
    reference_p_end: 'reference',
    reference_p_9: 'reference',
    reference_p_10: 'reference',
    reference_p_11: 'reference',
  };

  class AstNode {
    constructor(cfg) {
      Object.assign(this, cfg);
      if (cfg.children) {
        this.setChildren(cfg.children);
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }
      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;
      for (const c of cs) {
        c.parent = this;
      }
    }

    toJSON() {
      const ret = {};
      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          ret[k] = this[k];
        }
      }
      return ret;
    }
  }

  parser.parse = function parse(input, options) {
    const recoveryTokens = [];
    const terminalNodes = [];

    function isExtraSymbol(ast) {
      return ast.children && !ast.children.length;
    }

    function peekStack(stack, n) {
      n = n || 1;
      return stack[stack.length - n];
    }

    function getTableVal(row, col) {
      return table[row] && table[row][col];
    }

    function getOriginalSymbol(s) {
      let uncompressed = lexer.mapReverseSymbol(s);
      return prioritySymbolMap[uncompressed] || uncompressed;
    }

    options = options || {};
    let error;
    var {
      onErrorRecovery,
      onAction,
      lexerOptions = {},
      transformNode,
    } = options;

    function checkLabel(node, parent) {
      if (node.label || parent.label) {
        if (node.label === parent.label) {
          return node.children;
        }
        return node;
      }
      return node.children;
    }

    function defaultTransformNode({ node, parent }) {
      if (node.token || node.error || node.symbol !== parent.symbol) {
        return node;
      }
      if (parent.children.length === 1) {
        // do not check label
        // replace label!
        parent.label = node.label;
        return node.children;
      }
      if (node.children.length > 1) {
        return node;
      }
      // drill down to token
      if (node.children[0]?.token) {
        // do not check label
        // parent.label = node.label;
        return node.children;
      }
      return checkLabel(node, parent);
    }

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformNode;
    }

    var {
      lexer,
      table,
      productions,
      prioritySymbolMap,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;

    lexer.options = lexerOptions;
    const startSymbol = getProductionSymbol(productions[0]);
    var symbolStack = [startSymbol];
    const astStack = [
      new AstNode({
        children: [],
      }),
    ];
    lexer.resetInput(input);
    let token;
    let next;

    function getError() {
      const expected = getExpected();
      const tips = [];
      if (expected.length) {
        tips.push("'" + expected.join("', '") + "' expected.");
      }
      if (lexer.token) {
        tips.push("current token: '" + lexer.token + "'.");
      }
      const tip = tips.join('\n');
      return {
        errorMessage: [
          'syntax error at line ' +
            lexer.lineNumber +
            ':\n' +
            lexer.showDebugInfo(),
          ...tips,
        ].join('\n'),
        tip,
      };
    }

    function cleanAst(ast) {
      if (!transformNode) {
        return ast;
      }
      if (ast.children) {
        let children;
        let childrenChanged;
        while (true) {
          let changed = false;
          let index = 0;
          children = [];
          for (const c of ast.children) {
            const node = transformNode({
              node: c,
              index,
              parent: ast,
              defaultTransformNode,
            });
            if (Array.isArray(node)) {
              children.push(...node);
            } else if (node) {
              children.push(node);
            }
            changed = changed || node !== c;
            index++;
          }
          if (!changed) {
            break;
          } else {
            ast.setChildren(children);
            childrenChanged = true;
          }
        }
        if (childrenChanged && ast.parent) {
          cleanAst(ast.parent);
        } else {
          for (const c of children) {
            cleanAst(c);
          }
        }
      }
      return ast;
    }

    function getAst(raw) {
      let ast = astStack[0];
      ast = ast?.children?.[0];
      ast = ast?.children?.[0];
      if (ast) {
        ast.parent = null;
      }
      if (raw) {
        return ast;
      }
      return ast && cleanAst(ast);
    }

    let topSymbol;

    let errorNode;

    let lastSymbol;

    function popSymbolStack() {
      const last = symbolStack.pop();
      if (typeof last === 'string') {
        lastSymbol = last;
      }
    }

    let getExpected = function () {
      const s = topSymbol || lastSymbol;
      const ret = (table[s] && Object.keys(table[s])) || [];
      return ret.map((r) => lexer.mapReverseSymbol(r));
    };

    function closeAstWhenError() {
      errorNode = new AstNode({
        type: 'token',
        error,
        ...error.lexer,
      });
      peekStack(astStack).addChild(errorNode);
      while (astStack.length !== 1) {
        const ast = astStack.pop();
        if (ast.symbol && isExtraSymbol(ast)) {
          const topAst = peekStack(astStack);
          topAst.children.pop();
          topAst.addChildren(ast.children);
        }
      }
    }

    let production;

    while (1) {
      topSymbol = peekStack(symbolStack);

      if (!topSymbol) {
        break;
      }

      while (
        isProductionEndFlag(topSymbol) ||
        isProductionReductionFlag(topSymbol)
      ) {
        let ast = astStack.pop();
        if (isProductionReductionFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstNode({
            type: 'symbol',
            symbol: ast.symbol,
            children: [ast],
            label: ast.label,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
        if (!topSymbol) {
          break;
        }
      }

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          recoveryTokens.push(token);
        }
        if (topSymbol === token.t) {
          symbolStack.pop();
          const terminalNode = new AstNode(token);
          terminalNode.type = 'token';
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = null;
        } else if ((next = getTableVal(topSymbol, token.t)) !== undefined) {
          popSymbolStack();
          production = productions[next];

          if (productionSkipEndSet.has(next)) {
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat().reverse(),
            );
          } else {
            const newAst = new AstNode({
              type: 'symbol',
              symbol: getOriginalSymbol(topSymbol),
              label: getOriginalSymbol(getProductionLabel(production)),
              children: [],
            });
            peekStack(astStack).addChild(newAst);
            astStack.push(newAst);
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat(productionEndFlag).reverse(),
            );
          }
        } else {
          error = {
            recovery: false,
            ...getError(),
            expected: getExpected(),
            symbol: lexer.mapReverseSymbol(topSymbol),
            lexer: lexer.toJSON(),
          };
          if (onErrorRecovery) {
            const recommendedAction = {};
            const nextToken = lexer.peek();

            // should delete
            if (
              topSymbol === nextToken.t ||
              getTableVal(topSymbol, nextToken.t) !== undefined
            ) {
              recommendedAction.action = 'del';
            } else if (error.expected.length) {
              recommendedAction.action = 'add';
            }

            const errorNode = new AstNode({
              error,
              type: 'token',
              ...error.lexer,
            });
            peekStack(astStack).addChild(errorNode);

            const recovery =
              onErrorRecovery(
                {
                  errorNode,
                  parseTree: getAst(true),
                },
                recommendedAction,
              ) || {};
            const { action } = recovery;

            peekStack(astStack).children.pop();

            if (!action) {
              closeAstWhenError();
              break;
            }

            if (action === 'del') {
              error.recovery = true;
              recoveryTokens.pop();
              token = null;
            } else if (action === 'add') {
              error.recovery = true;
              token = {
                ...token,
                token: recovery.token,
                text: recovery.text,
                t: lexer.mapSymbol(recovery.token),
              };
              recoveryTokens.push(token);
            }
          } else {
            closeAstWhenError();
            break;
          }
        }
      }

      topSymbol = peekStack(symbolStack);

      while (topSymbol && typeof topSymbol === 'function') {
        if (onAction) {
          onAction({
            token: lexer.toJSON(),
            action: topSymbol,
            parseTree: getAst(true),
          });
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
      }

      if (!symbolStack.length) {
        break;
      }
    }

    if (!error && lexer.token !== Lexer.STATIC.EOF_TOKEN) {
      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [Lexer.STATIC.EOF_TOKEN];
        lexer.lex();
      }
      error = {
        ...getError(),
        expected: getExpected(),
        symbol: lexer.mapReverseSymbol(topSymbol || lastSymbol),
        lexer: lexer.toJSON(),
      };
      closeAstWhenError();
    }

    const ast = getAst();

    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  return parser;
})();

export default formulaParser;
