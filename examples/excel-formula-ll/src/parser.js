/*
Generated By kison v0.4.29

Generate time: Thu Sep 16 2021 12:55:23 GMT+0800 (中国标准时间)
*/
var formulaParser = (function(undefined) {
  var my = {
    markType: function(self, type, enter = true) {
      const { userData } = self;
      userData[type] = userData[type] || 0;
      if (enter) {
        ++userData[type];
      } else if (userData.inArray) {
        --userData[type];
      }
    },
    last: function(arr) {
      return arr && arr[arr.length - 1];
    }
  };
  function mix(to, from) {
    for (var f in from) {
      to[f] = from[f];
    }
  }
  function isArray(obj) {
    return "[object Array]" === Object.prototype.toString.call(obj);
  }
  function each(object, fn, context) {
    if (object) {
      var key,
        val,
        length,
        i = 0;

      context = context || null;

      if (!isArray(object)) {
        for (key in object) {
          // can not use hasOwnProperty
          if (fn.call(context, object[key], key, object) === false) {
            break;
          }
        }
      } else {
        length = object.length;
        for (val = object[0]; i < length; val = object[++i]) {
          if (fn.call(context, val, i, object) === false) {
            break;
          }
        }
      }
    }
  }
  function inArray(item, arr) {
    for (var i = 0, l = arr.length; i < l; i++) {
      if (arr[i] === item) {
        return true;
      }
    }
    return false;
  }
  var Lexer = function(cfg) {
    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == "boolean";
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const ruleIndexMap = (this.ruleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      filter: 3,
      state: 4
    });

    this.rules = [];
    this.defaultEnv = undefined;
    mix(this, cfg);
    this.rules = this.rules.concat();
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN
    });
    const errorRuleCompress = (this.errorRuleCompress = []);
    errorRuleCompress[ruleIndexMap.token] = errorRule.token;
    errorRuleCompress[ruleIndexMap.regexp] = errorRule.regexp;
    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function(obj, p, disableSticky) {
      const pattern = obj[p];
      if (pattern.test) {
        let source = pattern.source;
        if (source.startsWith("^")) {
          source = source.slice(1);
        }
        var flags = Lexer.supportSticky && !disableSticky ? "gy" : "g";
        if (pattern.multiline) flags += "m";
        if (pattern.ignoreCase) flags += "i";
        if (pattern.unicode) flags += "u";
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === "object") {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    transformRules: function() {
      if (Lexer.supportSticky) {
        const regIndex = this.isCompress ? this.ruleIndexMap.regexp : "regexp";
        for (const r of this.rules) {
          this.transformRegExp(r, regIndex);
        }
      }
    },
    matchAny: function() {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function(rule) {
      this.rules.push(rule);
    },
    resetInput: function(input) {
      this.token = undefined;
      this.tokensQueue = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = "";
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = "";
      this.text = "";
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    mapEndSymbol: function() {
      return this.mapSymbol(Lexer.STATIC.EOF_TOKEN);
    },
    mapHiddenSymbol: function() {
      return this.mapSymbol(Lexer.STATIC.HIDDEN_TOKEN);
    },
    getRuleItem: function(rule, itemType) {
      if (this.isCompress) {
        return rule[this.ruleIndexMap[itemType]];
      } else {
        return rule[itemType];
      }
    },
    getCurrentRules: function() {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];
      each(this.rules, r => {
        var filter = this.getRuleItem(r, "filter");
        if (filter) {
          if (filter.call(this)) {
            rules.push(r);
          }
          return;
        }
        var state = this.getRuleItem(r, "state");
        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (inArray(currentState, state)) {
          rules.push(r);
        }
      });
      if (this.isCompress) {
        rules.push(this.errorRuleCompress);
      } else {
        rules.push(this.errorRule);
      }
      return rules;
    },
    peekState: function(n) {
      n = n || 1;
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function(state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function(num) {
      num = num || 1;
      var ret;
      while (num--) {
        ret = this.stateStack.pop();
      }
      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function() {
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { matched, match, input } = this;

      matched = matched.slice(0, matched.length - match.length);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") +
          matched
            .slice(0 - DEBUG_CONTEXT_LIMIT)
            .split("\n")
            .join(" "),
        next = match + input.slice(this.end);
      //#JSCOVERAGE_ENDIF
      next =
        next
          .slice(0, DEBUG_CONTEXT_LIMIT)
          .split("\n")
          .join(" ") + (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
      return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
    },
    mapSymbol: function(t) {
      var { symbolMap } = this;
      if (!symbolMap) {
        return t;
      }
      // force string, see util.clone iphone5s ios7 bug
      return symbolMap[t] || (symbolMap[t] = this.genShortId("symbol"));
    },
    mapReverseSymbol: function(rs) {
      var { symbolMap, reverseSymbolMap } = this;
      if (!reverseSymbolMap && symbolMap) {
        reverseSymbolMap = this.reverseSymbolMap = {};
        for (var i in symbolMap) {
          reverseSymbolMap[symbolMap[i]] = i;
        }
      }
      if (reverseSymbolMap) {
        return reverseSymbolMap[rs] || rs;
      } else {
        return rs;
      }
    },
    mapState: function(s) {
      var { stateMap } = this;
      if (!stateMap) {
        return s;
      }
      return stateMap[s] || (stateMap[s] = this.genShortId("state"));
    },
    mapReverseState: function(rs) {
      var { stateMap, reverseStateMap } = this;
      if (!reverseStateMap && stateMap) {
        reverseStateMap = this.reverseStateMap = {};
        for (var i in stateMap) {
          reverseStateMap[stateMap[i]] = i;
        }
      }
      if (reverseStateMap) {
        return reverseStateMap[rs] || rs;
      } else {
        return rs;
      }
    },
    toJSON: function() {
      return {
        text: this.text,
        firstLine: this.firstLine,
        firstColumn: this.firstColumn,
        lastLine: this.lastLine,
        lastColumn: this.lastColumn,
        token: this.token,
        start: this.start,
        end: this.end
      };
    },
    peek: function() {
      const token = this._lex(true);
      this.tokensQueue.push(token);
      if (token.token === Lexer.STATIC.HIDDEN_TOKEN) {
        return this.peek();
      }
      return token;
    },
    matchRegExp: function(regexp) {
      if (regexp.test) {
        regexp.lastIndex = this.end;
        const ret = regexp.exec(this.input);
        if (ret && ret.index !== this.end) {
          return null;
        }
        return ret;
      }
      return regexp.call(this, this);
    },
    lex: function() {
      const token = this._lex();
      this.tokens.push(token);
      if (token.token === Lexer.STATIC.HIDDEN_TOKEN) {
        return this.lex();
      }
      return token;
    },
    nextChar: function(index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function(index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function(search) {
      let { input, end } = this;
      const l = search.length;
      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }
      return true;
    },
    nextCharAt: function(index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function() {
      return this.input.length - this.end;
    },
    getChar: function(index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);
        if (code === undefined || isNaN(code)) {
          return "";
        }
        return String.fromCodePoint(code);
      }
      return this.input.charAt(index);
    },
    getCharCode: function(index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }
      return this.input.charCodeAt(index);
    },
    _lex: function(skipQueue) {
      if (!skipQueue) {
        const { tokensQueue } = this;
        while (tokensQueue.length) {
          const token = tokensQueue.shift();
          return token;
        }
      }
      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();

      var { input } = this;

      var { env = this.defaultEnv } = this.options;

      this.match = this.text = "";

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          t: this.mapEndSymbol(),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        var regexp = this.getRuleItem(rule, "regexp"),
          token = this.getRuleItem(rule, "token"),
          action = this.getRuleItem(rule, "action");

        if (
          typeof regexp !== "function" &&
          regexp &&
          env &&
          typeof regexp.test !== "function"
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        }

        //#JSCOVERAGE_ENDIF
        if ((m = this.matchRegExp(regexp))) {
          this.start = this.end;
          this.end += m[0].length;
          lines = m[0].split("\n");
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: this.start,
            end: this.end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length
          };

          mix(this, position);

          var match;
          // for error report
          match = this.match = m[0];

          // all matches
          this.matches = m;
          // may change by user
          this.text = match;
          // matched content utils now
          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              token: this.token,
              t: ret,
              ...position
            };
          } else {
            // ignore
            return this._lex(skipQueue);
          }
        }
      }
    }
  };
  Lexer.STATIC = {
    INITIAL_STATE: "I",
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: "$EOF",
    UNKNOWN_TOKEN: "$UNKNOWN",
    HIDDEN_TOKEN: "$HIDDEN"
  };
  var lexer = new Lexer({
    rules: [
      [
        "$HIDDEN",
        /\s+/g,
        undefined,
        undefined,
        ["inside structure reference", "I"]
      ],
      [
        "(",
        /\(/g,
        function() {
          if (this.tokens[this.tokens.length - 1]?.token === "FUNCTION") {
            return;
          }
          this.userData.markParen.push({ func: false });
        }
      ],
      [
        ")",
        /\)/g,
        function() {
          const { userData } = this;
          userData.markParen = userData.markParen || [];
          userData.markParen.pop();
        }
      ],
      [
        "{",
        /\{/g,
        function() {
          // array constants
          my.markType(this, "a");
        }
      ],
      [
        "}",
        /\}/g,
        function() {
          my.markType(this, "a", false);
        }
      ],
      [
        "SPECIFIER_SEPARATOR",
        /,/g,
        undefined,
        undefined,
        ["inside structure reference"]
      ],
      [
        "TABLE_ITEM_SPECIFIER",
        /\[#('.|[^\]#])+\]/g,
        undefined,
        undefined,
        ["inside structure reference", "I"]
      ],
      ["TABLE_@", /@/g, undefined, undefined, ["inside structure reference"]],
      [
        "TABLE_COLUMN_SPECIFIER",
        /(?:(?:(?:\[(?:'.|[^\]'#])+\])(?:\:(?:\[(?:'.|[^\]'#])+\]))?)|(?:'.|[^\]#'])+)/g,
        undefined,
        undefined,
        ["inside structure reference"]
      ],
      [
        "[",
        /\[/g,
        function() {
          this.pushState("inside structure reference");
        },
        undefined,
        ["inside structure reference", "I"]
      ],
      [
        "]",
        /\]/g,
        function() {
          this.popState();
        },
        undefined,
        ["inside structure reference"]
      ],
      [
        "ARRAY_SEPARATOR",
        {
          en: /[,;]/g,
          de: /[\\;]/g
        },
        undefined,
        function() {
          return !!this.userData.a;
        }
      ],
      [
        "REF_UNION_OPERATOR",
        /,/g,
        undefined,
        function() {
          const lastItem = my.last(this.userData.markParen);
          return !lastItem || !lastItem.func;
        }
      ],
      ["REF_EXPAND_OPERATOR", /:/g],
      [
        "ARGUMENT_SEPARATOR",
        {
          en: /,/g,
          de: /;/g
        }
      ],
      [
        "STRING",
        /"(?:""|[^"])*"/g,
        function() {
          this.text = this.text.slice(1, -1).replace(/""/g, '"');
        }
      ],
      [
        "FUNCTION",
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[(])/g,
        function() {
          const { userData } = this;
          userData.markParen = userData.markParen || [];
          userData.markParen.push({ func: true });
        }
      ],
      ["ERROR", /#[A-Z0-9\/]+(!|\?)? /g],
      [
        "CELL",
        /(?:(?:(?:'(?:''|[^'])*')|(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))?))!)?(?:(?:(?:\$?[A-Za-z]+\$?[0-9]+)(?:\s*\:\s*(?:\$?[A-Za-z]+\$?[0-9]+))?#?)|(?:\d+\:\d+))/g
      ],
      ["LOGIC", /(TRUE|FALSE)(?=\b)/gi],
      [
        "TABLE_NAME",
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)(?=[\[])/g
      ],
      [
        "NAME",
        /(?:(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*)(?:\.(?:[_A-Za-z一-龥]+[_A-Za-z_0-9一-龥]*))*)/g
      ],
      [
        "NUMBER",
        {
          en: /(?:0|[1-9][0-9]*)?\.(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g,
          de: /(?:0|[1-9][0-9]*)?,(?:[0-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g
        }
      ],
      ["NUMBER", /(?:0|[1-9][0-9]*)(?:[eE][+-]?[0-9]+)?/g],
      ["=", /=/g],
      ["<=", /<=/g],
      [">=", />=/g],
      ["<>", /<>/g],
      [">", />/g],
      ["<", /</g],
      ["+", /\+/g],
      ["-", /\-/g],
      ["*", /\*/g],
      ["/", /\//g],
      ["^", /\^/g],
      ["&", /&/g],
      ["%", /%/g],
      ["@", /@/g]
    ],
    isCompress: 1,
    defaultEnv: "en"
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;
    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }
      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }
    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);
    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack
      },
      tokens: lexer.tokens
    };
  }
  var parser = {
    productions: [
      ["formula", ["equalExp"]],
      ["(equalExp)1_", ["=", "addExp", 1, "(equalExp)1_"]],
      ["(equalExp)1_", ["<=", "addExp", 1, "(equalExp)1_"]],
      ["(equalExp)1_", [">=", "addExp", 1, "(equalExp)1_"]],
      ["(equalExp)1_", ["<>", "addExp", 1, "(equalExp)1_"]],
      ["(equalExp)1_", [">", "addExp", 1, "(equalExp)1_"]],
      ["(equalExp)1_", ["<", "addExp", 1, "(equalExp)1_"]],
      ["(equalExp)1_", []],
      ["equalExp", ["addExp", 1, "(equalExp)1_"]],
      ["(addExp)1_", ["+", "mulExp", 1, "(addExp)1_"]],
      ["(addExp)1_", ["-", "mulExp", 1, "(addExp)1_"]],
      ["(addExp)1_", []],
      ["addExp", ["mulExp", 1, "(addExp)1_"]],
      ["(mulExp)1_", ["*", "expoExp", 1, "(mulExp)1_"]],
      ["(mulExp)1_", ["/", "expoExp", 1, "(mulExp)1_"]],
      ["(mulExp)1_", []],
      ["mulExp", ["expoExp", 1, "(mulExp)1_"]],
      ["(expoExp)1_", ["^", "concatExp", 1, "(expoExp)1_"]],
      ["(expoExp)1_", []],
      ["expoExp", ["concatExp", 1, "(expoExp)1_"]],
      ["(concatExp)1_", ["&", "percentExp", 1, "(concatExp)1_"]],
      ["(concatExp)1_", []],
      ["concatExp", ["percentExp", 1, "(concatExp)1_"]],
      ["(percentExp)1_", ["%", 1, "(percentExp)1_"]],
      ["(percentExp)1_", []],
      ["percentExp", ["prefix-exp", 1, "(percentExp)1_"]],
      ["prefix-exp", ["-", "prefix-exp"]],
      ["prefix-exp", ["+", "prefix-exp"]],
      ["prefix-exp", ["@", "prefix-exp"]],
      ["prefix-exp", ["atom-exp"]],
      ["atom-exp", ["(", "equalExp", ")"]],
      ["atom-exp", ["NUMBER"]],
      ["atom-exp", ["STRING"]],
      ["atom-exp", ["LOGIC"]],
      ["atom-exp", ["ERROR"]],
      ["atom-exp", ["reference"]],
      ["atom-exp", ["function"]],
      ["atom-exp", ["array"]],
      ["reference-item", ["CELL"]],
      ["reference-item", ["NAME"]],
      ["reference-item", ["structure-reference"]],
      ["reference", ["union-reference"]],
      [
        "(union-reference)1_",
        ["REF_UNION_OPERATOR", "intersect-reference", 1, "(union-reference)1_"]
      ],
      ["(union-reference)1_", []],
      ["union-reference", ["intersect-reference", 1, "(union-reference)1_"]],
      [
        "(intersect-reference)1_",
        ["expand-reference", 1, "(intersect-reference)1_"]
      ],
      ["(intersect-reference)1_", []],
      [
        "intersect-reference",
        ["expand-reference", 1, "(intersect-reference)1_"]
      ],
      [
        "(expand-reference)1_",
        ["REF_EXPAND_OPERATOR", "reference-item", 1, "(expand-reference)1_"]
      ],
      ["(expand-reference)1_", []],
      ["expand-reference", ["reference-item", 1, "(expand-reference)1_"]],
      ["array-element", ["STRING"]],
      ["array-element", ["NUMBER"]],
      ["array-element", ["LOGIC"]],
      ["array-element", ["ERROR"]],
      [
        "(array-list)1_",
        ["ARRAY_SEPARATOR", "array-element", "(array-list)1_"]
      ],
      ["(array-list)1_", []],
      ["array-list", ["array-element", "(array-list)1_"]],
      ["array", ["{", "array-list", "}"]],
      ["function", ["FUNCTION", "(", "arguments", ")"]],
      ["argument", []],
      ["argument", ["equalExp"]],
      ["(arguments)1_", ["ARGUMENT_SEPARATOR", "argument", "(arguments)1_"]],
      ["(arguments)1_", []],
      ["arguments", ["argument", "(arguments)1_"]],
      ["structure-reference", ["TABLE_NAME", "table-specifier"]],
      ["structure-reference", ["table-specifier"]],
      ["table-specifier", ["TABLE_ITEM_SPECIFIER"]],
      ["table-specifier", ["[", "table-specifier-inner", "]"]],
      ["_1(table-this-row)", ["TABLE_COLUMN_SPECIFIER"]],
      ["_1(table-this-row)", []],
      ["table-this-row", ["TABLE_@", "_1(table-this-row)"]],
      ["table-specifier-inner", ["table-this-row"]],
      ["table-specifier-inner", ["table-column-specifier"]],
      ["table-specifier-item", ["TABLE_COLUMN_SPECIFIER"]],
      ["table-specifier-item", ["TABLE_ITEM_SPECIFIER"]],
      [
        "(table-column-specifier)1_",
        [
          "SPECIFIER_SEPARATOR",
          "table-specifier-item",
          "(table-column-specifier)1_"
        ]
      ],
      ["(table-column-specifier)1_", []],
      [
        "table-column-specifier",
        ["table-specifier-item", "(table-column-specifier)1_"]
      ]
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3
    },
    getProductionItemByType: function(p, itemType) {
      if (this.isCompress) {
        return p[this.productionIndexMap[itemType]];
      }
      return p[itemType];
    },
    getProductionSymbol: function(p) {
      return this.getProductionItemByType(p, "symbol");
    },
    getProductionRhs: function(p) {
      return this.getProductionItemByType(p, "rhs");
    },
    getProductionAction: function(p) {
      return this.getProductionItemByType(p, "action");
    },
    getProductionLabel: function(p) {
      return this.getProductionItemByType(p, "label");
    },
    isCompress: 1
  };
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  const productionSkipEndSet = new Set([
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    9,
    10,
    11,
    13,
    14,
    15,
    17,
    18,
    20,
    21,
    23,
    24,
    42,
    43,
    45,
    46,
    48,
    49,
    55,
    56,
    62,
    63,
    69,
    70,
    76,
    77
  ]);
  const productionEndFlag = 2;
  const productionReductionFlag = 1;
  const isProductionEndFlag = function(t) {
    return t === productionEndFlag;
  };
  const isProductionReductionFlag = function(t) {
    return t === productionReductionFlag;
  };
  parser.table = {
    formula: {
      "-": 0,
      "+": 0,
      "@": 0,
      "(": 0,
      NUMBER: 0,
      STRING: 0,
      LOGIC: 0,
      ERROR: 0,
      CELL: 0,
      NAME: 0,
      TABLE_NAME: 0,
      TABLE_ITEM_SPECIFIER: 0,
      "[": 0,
      FUNCTION: 0,
      "{": 0
    },
    "(equalExp)1_": {
      "=": 1,
      "<=": 2,
      ">=": 3,
      "<>": 4,
      ">": 5,
      "<": 6,
      $EOF: 7,
      ")": 7,
      ARGUMENT_SEPARATOR: 7
    },
    equalExp: {
      "-": 8,
      "+": 8,
      "@": 8,
      "(": 8,
      NUMBER: 8,
      STRING: 8,
      LOGIC: 8,
      ERROR: 8,
      CELL: 8,
      NAME: 8,
      TABLE_NAME: 8,
      TABLE_ITEM_SPECIFIER: 8,
      "[": 8,
      FUNCTION: 8,
      "{": 8
    },
    "(addExp)1_": {
      "+": 9,
      "-": 10,
      "=": 11,
      "<=": 11,
      ">=": 11,
      "<>": 11,
      ">": 11,
      "<": 11,
      $EOF: 11,
      ")": 11,
      ARGUMENT_SEPARATOR: 11
    },
    addExp: {
      "-": 12,
      "+": 12,
      "@": 12,
      "(": 12,
      NUMBER: 12,
      STRING: 12,
      LOGIC: 12,
      ERROR: 12,
      CELL: 12,
      NAME: 12,
      TABLE_NAME: 12,
      TABLE_ITEM_SPECIFIER: 12,
      "[": 12,
      FUNCTION: 12,
      "{": 12
    },
    "(mulExp)1_": {
      "*": 13,
      "/": 14,
      "+": 15,
      "-": 15,
      "=": 15,
      "<=": 15,
      ">=": 15,
      "<>": 15,
      ">": 15,
      "<": 15,
      $EOF: 15,
      ")": 15,
      ARGUMENT_SEPARATOR: 15
    },
    mulExp: {
      "-": 16,
      "+": 16,
      "@": 16,
      "(": 16,
      NUMBER: 16,
      STRING: 16,
      LOGIC: 16,
      ERROR: 16,
      CELL: 16,
      NAME: 16,
      TABLE_NAME: 16,
      TABLE_ITEM_SPECIFIER: 16,
      "[": 16,
      FUNCTION: 16,
      "{": 16
    },
    "(expoExp)1_": {
      "^": 17,
      "*": 18,
      "/": 18,
      "+": 18,
      "-": 18,
      "=": 18,
      "<=": 18,
      ">=": 18,
      "<>": 18,
      ">": 18,
      "<": 18,
      $EOF: 18,
      ")": 18,
      ARGUMENT_SEPARATOR: 18
    },
    expoExp: {
      "-": 19,
      "+": 19,
      "@": 19,
      "(": 19,
      NUMBER: 19,
      STRING: 19,
      LOGIC: 19,
      ERROR: 19,
      CELL: 19,
      NAME: 19,
      TABLE_NAME: 19,
      TABLE_ITEM_SPECIFIER: 19,
      "[": 19,
      FUNCTION: 19,
      "{": 19
    },
    "(concatExp)1_": {
      "&": 20,
      "^": 21,
      "*": 21,
      "/": 21,
      "+": 21,
      "-": 21,
      "=": 21,
      "<=": 21,
      ">=": 21,
      "<>": 21,
      ">": 21,
      "<": 21,
      $EOF: 21,
      ")": 21,
      ARGUMENT_SEPARATOR: 21
    },
    concatExp: {
      "-": 22,
      "+": 22,
      "@": 22,
      "(": 22,
      NUMBER: 22,
      STRING: 22,
      LOGIC: 22,
      ERROR: 22,
      CELL: 22,
      NAME: 22,
      TABLE_NAME: 22,
      TABLE_ITEM_SPECIFIER: 22,
      "[": 22,
      FUNCTION: 22,
      "{": 22
    },
    "(percentExp)1_": {
      "%": 23,
      "&": 24,
      "^": 24,
      "*": 24,
      "/": 24,
      "+": 24,
      "-": 24,
      "=": 24,
      "<=": 24,
      ">=": 24,
      "<>": 24,
      ">": 24,
      "<": 24,
      $EOF: 24,
      ")": 24,
      ARGUMENT_SEPARATOR: 24
    },
    percentExp: {
      "-": 25,
      "+": 25,
      "@": 25,
      "(": 25,
      NUMBER: 25,
      STRING: 25,
      LOGIC: 25,
      ERROR: 25,
      CELL: 25,
      NAME: 25,
      TABLE_NAME: 25,
      TABLE_ITEM_SPECIFIER: 25,
      "[": 25,
      FUNCTION: 25,
      "{": 25
    },
    "prefix-exp": {
      "-": 26,
      "+": 27,
      "@": 28,
      "(": 29,
      NUMBER: 29,
      STRING: 29,
      LOGIC: 29,
      ERROR: 29,
      CELL: 29,
      NAME: 29,
      TABLE_NAME: 29,
      TABLE_ITEM_SPECIFIER: 29,
      "[": 29,
      FUNCTION: 29,
      "{": 29
    },
    "atom-exp": {
      "(": 30,
      NUMBER: 31,
      STRING: 32,
      LOGIC: 33,
      ERROR: 34,
      CELL: 35,
      NAME: 35,
      TABLE_NAME: 35,
      TABLE_ITEM_SPECIFIER: 35,
      "[": 35,
      FUNCTION: 36,
      "{": 37
    },
    "reference-item": {
      CELL: 38,
      NAME: 39,
      TABLE_NAME: 40,
      TABLE_ITEM_SPECIFIER: 40,
      "[": 40
    },
    reference: {
      CELL: 41,
      NAME: 41,
      TABLE_NAME: 41,
      TABLE_ITEM_SPECIFIER: 41,
      "[": 41
    },
    "(union-reference)1_": {
      REF_UNION_OPERATOR: 42,
      "%": 43,
      "&": 43,
      "^": 43,
      "*": 43,
      "/": 43,
      "+": 43,
      "-": 43,
      "=": 43,
      "<=": 43,
      ">=": 43,
      "<>": 43,
      ">": 43,
      "<": 43,
      $EOF: 43,
      ")": 43,
      ARGUMENT_SEPARATOR: 43
    },
    "union-reference": {
      CELL: 44,
      NAME: 44,
      TABLE_NAME: 44,
      TABLE_ITEM_SPECIFIER: 44,
      "[": 44
    },
    "(intersect-reference)1_": {
      CELL: 45,
      NAME: 45,
      TABLE_NAME: 45,
      TABLE_ITEM_SPECIFIER: 45,
      "[": 45,
      REF_UNION_OPERATOR: 46,
      "%": 46,
      "&": 46,
      "^": 46,
      "*": 46,
      "/": 46,
      "+": 46,
      "-": 46,
      "=": 46,
      "<=": 46,
      ">=": 46,
      "<>": 46,
      ">": 46,
      "<": 46,
      $EOF: 46,
      ")": 46,
      ARGUMENT_SEPARATOR: 46
    },
    "intersect-reference": {
      CELL: 47,
      NAME: 47,
      TABLE_NAME: 47,
      TABLE_ITEM_SPECIFIER: 47,
      "[": 47
    },
    "(expand-reference)1_": {
      REF_EXPAND_OPERATOR: 48,
      CELL: 49,
      NAME: 49,
      TABLE_NAME: 49,
      TABLE_ITEM_SPECIFIER: 49,
      "[": 49,
      REF_UNION_OPERATOR: 49,
      "%": 49,
      "&": 49,
      "^": 49,
      "*": 49,
      "/": 49,
      "+": 49,
      "-": 49,
      "=": 49,
      "<=": 49,
      ">=": 49,
      "<>": 49,
      ">": 49,
      "<": 49,
      $EOF: 49,
      ")": 49,
      ARGUMENT_SEPARATOR: 49
    },
    "expand-reference": {
      CELL: 50,
      NAME: 50,
      TABLE_NAME: 50,
      TABLE_ITEM_SPECIFIER: 50,
      "[": 50
    },
    "array-element": {
      STRING: 51,
      NUMBER: 52,
      LOGIC: 53,
      ERROR: 54
    },
    "(array-list)1_": {
      ARRAY_SEPARATOR: 55,
      "}": 56
    },
    "array-list": {
      STRING: 57,
      NUMBER: 57,
      LOGIC: 57,
      ERROR: 57
    },
    array: {
      "{": 58
    },
    function: {
      FUNCTION: 59
    },
    argument: {
      ARGUMENT_SEPARATOR: 60,
      ")": 60,
      "-": 61,
      "+": 61,
      "@": 61,
      "(": 61,
      NUMBER: 61,
      STRING: 61,
      LOGIC: 61,
      ERROR: 61,
      CELL: 61,
      NAME: 61,
      TABLE_NAME: 61,
      TABLE_ITEM_SPECIFIER: 61,
      "[": 61,
      FUNCTION: 61,
      "{": 61
    },
    "(arguments)1_": {
      ARGUMENT_SEPARATOR: 62,
      ")": 63
    },
    arguments: {
      "-": 64,
      "+": 64,
      "@": 64,
      "(": 64,
      NUMBER: 64,
      STRING: 64,
      LOGIC: 64,
      ERROR: 64,
      CELL: 64,
      NAME: 64,
      TABLE_NAME: 64,
      TABLE_ITEM_SPECIFIER: 64,
      "[": 64,
      FUNCTION: 64,
      "{": 64,
      ARGUMENT_SEPARATOR: 64,
      ")": 64
    },
    "structure-reference": {
      TABLE_NAME: 65,
      TABLE_ITEM_SPECIFIER: 66,
      "[": 66
    },
    "table-specifier": {
      TABLE_ITEM_SPECIFIER: 67,
      "[": 68
    },
    "_1(table-this-row)": {
      TABLE_COLUMN_SPECIFIER: 69,
      "]": 70
    },
    "table-this-row": {
      "TABLE_@": 71
    },
    "table-specifier-inner": {
      "TABLE_@": 72,
      TABLE_COLUMN_SPECIFIER: 73,
      TABLE_ITEM_SPECIFIER: 73
    },
    "table-specifier-item": {
      TABLE_COLUMN_SPECIFIER: 74,
      TABLE_ITEM_SPECIFIER: 75
    },
    "(table-column-specifier)1_": {
      SPECIFIER_SEPARATOR: 76,
      "]": 77
    },
    "table-column-specifier": {
      TABLE_COLUMN_SPECIFIER: 78,
      TABLE_ITEM_SPECIFIER: 78
    }
  };

  class AstNode {
    constructor(cfg) {
      Object.assign(this, cfg);
      if (cfg.children) {
        this.setChildren(cfg.children);
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }
      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;
      for (const c of cs) {
        c.parent = this;
      }
    }

    toJSON() {
      const ret = {};
      for (const k of Object.keys(this)) {
        if (k !== "parent" && k !== "t") {
          ret[k] = this[k];
        }
      }
      return ret;
    }
  }

  parser.parse = function parse(input, options) {
    const recoveryTokens = [];
    const terminalNodes = [];

    function isExtraSymbol(ast) {
      return ast.children && !ast.children.length;
    }

    function peekStack(stack, n) {
      n = n || 1;
      return stack[stack.length - n];
    }

    function getTableVal(row, col) {
      return table[row] && table[row][col];
    }

    function noop() {}

    function getOriginalSymbol(s) {
      return lexer.mapReverseSymbol(s);
    }

    options = options || {};
    let error;
    var {
      onErrorRecovery,
      onAction,
      lexerOptions = {},
      transformNode
    } = options;

    function checkSymbolLabel(node, parent) {
      if (node.label || parent.label) {
        if (node.label === parent.label) {
          return node.children;
        } else {
          return node;
        }
      }
      if (node.symbol === parent.symbol) {
        return node.children;
      }
      return node;
    }

    function defaultTransformNode({ node, parent }) {
      if (node.token || node.error) {
        return node;
      }
      if (node.children?.length > 1) {
        if (parent.children.length === 1 && node.symbol === parent.symbol) {
          return node.children;
        }
        return node;
      }
      return checkSymbolLabel(node, parent);
    }

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformNode;
    }

    var {
      lexer,
      table,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel
    } = parser;

    lexer.options = lexerOptions;
    const startSymbol = getProductionSymbol(productions[0]);
    var symbolStack = [startSymbol];
    const astStack = [
      new AstNode({
        children: []
      })
    ];
    lexer.resetInput(input);
    let token;
    let next;

    function getError() {
      const expected = getExpected();
      const tips = [];
      if (expected.length) {
        tips.push("'" + expected.join("', '") + "' expected.");
      }
      if (lexer.token) {
        tips.push("current token: '" + lexer.token + "'.");
      }
      const tip = tips.join("\n");
      return {
        errorMessage: [
          "syntax error at line " +
            lexer.lineNumber +
            ":\n" +
            lexer.showDebugInfo(),
          ...tips
        ].join("\n"),
        tip
      };
    }

    function cleanAst(ast) {
      if (!transformNode) {
        return ast;
      }
      if (ast.children) {
        let children;
        let childrenChanged;
        while (true) {
          let changed = false;
          let index = 0;
          children = [];
          for (const c of ast.children) {
            const node = transformNode({
              node: c,
              index,
              parent: ast,
              defaultTransformNode
            });
            if (Array.isArray(node)) {
              children.push(...node);
            } else if (node) {
              children.push(node);
            }
            changed = changed || node !== c;
            index++;
          }
          if (!changed) {
            break;
          } else {
            ast.setChildren(children);
            childrenChanged = true;
          }
        }
        if (childrenChanged && ast.parent) {
          cleanAst(ast.parent);
        } else {
          for (const c of children) {
            cleanAst(c);
          }
        }
      }
      return ast;
    }

    function getAst(raw) {
      const ast =
        astStack[0] && astStack[0].children && astStack[0].children[0];
      if (ast) {
        astStack[0].children.forEach(a => delete a.parent);
      }
      if (raw) {
        return ast;
      }
      return ast && cleanAst(ast);
    }

    let topSymbol;

    let errorNode;

    let lastSymbol;

    function popSymbolStack() {
      const last = symbolStack.pop();
      if (typeof last === "string") {
        lastSymbol = last;
      }
    }

    let getExpected = function() {
      const s = topSymbol || lastSymbol;
      const ret = (table[s] && Object.keys(table[s])) || [];
      return ret.map(r => lexer.mapReverseSymbol(r));
    };

    function closeAstWhenError() {
      errorNode = new AstNode({
        error,
        ...error.lexer
      });
      peekStack(astStack).addChild(errorNode);
      while (astStack.length !== 1) {
        const ast = astStack.pop();
        if (ast.symbol && isExtraSymbol(ast)) {
          const topAst = peekStack(astStack);
          topAst.children.pop();
          topAst.addChildren(ast.children);
        }
      }
    }

    let production;

    while (1) {
      topSymbol = peekStack(symbolStack);

      if (!topSymbol) {
        break;
      }

      while (
        isProductionEndFlag(topSymbol) ||
        isProductionReductionFlag(topSymbol)
      ) {
        let ast = astStack.pop();
        if (isProductionReductionFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstNode({
            symbol: ast.symbol,
            children: [ast],
            label: ast.label
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
        if (!topSymbol) {
          break;
        }
      }

      if (typeof topSymbol === "string") {
        if (!token) {
          token = lexer.lex();
          recoveryTokens.push(token);
        }
        if (topSymbol === token.t) {
          symbolStack.pop();
          const terminalNode = new AstNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = null;
        } else if ((next = getTableVal(topSymbol, token.t)) !== undefined) {
          popSymbolStack();
          production = productions[next];

          if (productionSkipEndSet.has(next)) {
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production)
                .concat()
                .reverse()
            );
          } else {
            const newAst = new AstNode({
              symbol: getOriginalSymbol(topSymbol),
              label: getProductionLabel(production),
              children: []
            });
            peekStack(astStack).addChild(newAst);
            astStack.push(newAst);
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production)
                .concat(productionEndFlag)
                .reverse()
            );
          }
        } else {
          error = {
            recovery: false,
            ...getError(),
            expected: getExpected(),
            symbol: lexer.mapReverseSymbol(topSymbol),
            lexer: lexer.toJSON()
          };
          if (onErrorRecovery) {
            const recommendedAction = {};
            const nextToken = lexer.peek();

            // should delete
            if (
              topSymbol === nextToken.t ||
              getTableVal(topSymbol, nextToken.t) !== undefined
            ) {
              recommendedAction.action = "del";
            } else if (error.expected.length) {
              recommendedAction.action = "add";
            }

            const errorNode = new AstNode({
              error,
              ...error.lexer
            });

            peekStack(astStack).addChild(errorNode);

            const recovery =
              onErrorRecovery(
                {
                  errorNode,
                  parseTree: getAst(true)
                },
                recommendedAction
              ) || {};
            const { action } = recovery;

            peekStack(astStack).children.pop();

            if (!action) {
              closeAstWhenError();
              break;
            }

            if (action === "del") {
              error.recovery = true;
              recoveryTokens.pop();
              token = null;
            } else if (action === "add") {
              error.recovery = true;
              token = {
                ...token,
                token: recovery.token,
                text: recovery.text,
                t: lexer.mapSymbol(recovery.token)
              };
              recoveryTokens.push(token);
            }
          } else {
            closeAstWhenError();
            break;
          }
        }
      }

      topSymbol = peekStack(symbolStack);

      while (topSymbol && typeof topSymbol === "function") {
        if (onAction) {
          onAction({
            lexer,
            action: topSymbol,
            parseTree: getAst(true)
          });
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
      }

      if (!symbolStack.length) {
        break;
      }
    }

    if (!error && lexer.token !== Lexer.STATIC.EOF_TOKEN) {
      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [Lexer.STATIC.EOF_TOKEN];
        lexer.lex();
      }
      error = {
        ...getError(),
        expected: getExpected(),
        symbol: lexer.mapReverseSymbol(topSymbol || lastSymbol),
        lexer: lexer.toJSON()
      };
      closeAstWhenError();
    }

    const ast = getAst();

    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes
    };
  };
  return parser;
})();

export default formulaParser;
