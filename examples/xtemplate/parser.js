
/*
Generated By kison v0.4.0

Generate time: Wed Jun 23 2021 12:55:34 GMT+0800 (中国标准时间)
*/
  var parser = (function(undefined){
  function mix(to, from) {
  for (var f in from) {
    to[f] = from[f];
  }
}
function isArray(obj) {
  return "[object Array]" === Object.prototype.toString.call(obj);
}
function each(object, fn, context) {
  if (object) {
    var key,
      val,
      length,
      i = 0;

    context = context || null;

    if (!isArray(object)) {
      for (key in object) {
        // can not use hasOwnProperty
        if (fn.call(context, object[key], key, object) === false) {
          break;
        }
      }
    } else {
      length = object.length;
      for (val = object[0]; i < length; val = object[++i]) {
        if (fn.call(context, val, i, object) === false) {
          break;
        }
      }
    }
  }
}
function inArray(item, arr) {
  for (var i = 0, l = arr.length; i < l; i++) {
    if (arr[i] === item) {
      return true;
    }
  }
  return false;
}
var Lexer = function Lexer(cfg) {
  var self = this;

  /*
     lex rules.
     @type {Object[]}
     @example
     [
     {
     regexp:'\\w+',
     state:['xx'],
     token:'c',
     // this => lex
     action:function(){}
     }
     ]
     */
  self.rules = [];
  self.tokensQueue = [];

  mix(self, cfg);

  self.userData = {};

  self.errorRule = {
    regexp: /^./,
    token: Lexer.STATIC.UNKNOWN_TOKEN
  };

  /*
     Input languages
     @type {String}
     */

  self.resetInput(self.input);

  this.ruleIndexMap = {
    token: 0,
    regexp: 1,
    action: 2,
    filter: 3,
    state: 4
  };
};
Lexer.prototype = {
  resetInput: function(input) {
    mix(this, {
      userData: {},
      input: input,
      matched: "",
      stateStack: [Lexer.STATIC.INITIAL_STATE],
      match: "",
      text: "",
      firstLine: 1,
      lineNumber: 1,
      lastLine: 1,
      start: 0,
      end: 0,
      firstColumn: 1,
      lastColumn: 1
    });
  },
  mapEndSymbol: function() {
    return this.mapSymbol(Lexer.STATIC.EOF_TOKEN);
  },
  mapHiddenSymbol: function() {
    return this.mapSymbol(Lexer.STATIC.HIDDEN_TOKEN);
  },
  getRuleItem: function(rule, itemType) {
    if (this.isCompress) {
      return rule[this.ruleIndexMap[itemType]];
    } else {
      return rule[itemType];
    }
  },
  getCurrentRules: function() {
    var self = this,
      currentState = self.stateStack[self.stateStack.length - 1],
      rules = [];
    if (self.mapState) {
      currentState = self.mapState(currentState);
    }
    each(self.rules, function(r) {
      var filter = self.getRuleItem(r, "filter");
      if (filter) {
        if (filter.call(self)) {
          rules.push(r);
        }
        return;
      }
      var state = self.getRuleItem(r, "state");
      if (!state) {
        if (currentState === Lexer.STATIC.INITIAL_STATE) {
          rules.push(r);
        }
      } else if (inArray(currentState, state)) {
        rules.push(r);
      }
    });
    rules.push(self.errorRule);
    return rules;
  },
  peekState: function(n) {
    n = n || 1;
    return this.stateStack[this.stateStack.length - n];
  },
  pushState: function(state) {
    this.stateStack.push(state);
  },
  popState: function(num) {
    num = num || 1;
    var ret;
    while (num--) {
      ret = this.stateStack.pop();
    }
    return ret;
  },
  showDebugInfo: function() {
    var self = this,
      DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT,
      matched = self.matched,
      match = self.match,
      input = self.input;
    matched = matched.slice(0, matched.length - match.length);
    var past =
        (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") +
        matched.slice(0 - DEBUG_CONTEXT_LIMIT).replace(/\n/g, " "),
      next = match + input;
    //#JSCOVERAGE_ENDIF
    next =
      next.slice(0, DEBUG_CONTEXT_LIMIT).replace(/\n/g, " ") +
      (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
    return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
  },
  mapSymbol: function(t) {
    return this.symbolMap[t];
  },
  mapReverseSymbol: function(rs) {
    var self = this,
      symbolMap = self.symbolMap,
      i,
      reverseSymbolMap = self.reverseSymbolMap;
    if (!reverseSymbolMap && symbolMap) {
      reverseSymbolMap = self.reverseSymbolMap = {};
      for (i in symbolMap) {
        reverseSymbolMap[symbolMap[i]] = i;
      }
    }
    if (reverseSymbolMap) {
      return reverseSymbolMap[rs] || rs;
    } else {
      return rs;
    }
  },
  toJSON: function() {
    return {
      text: this.text,
      firstLine: this.firstLine,
      firstColumn: this.firstColumn,
      lastLine: this.lastLine,
      lastColumn: this.lastColumn,
      token: this.token,
      start: this.start,
      end: this.end
    };
  },
  peek: function(skipHidden) {
    const token = this.lex(skipHidden, true);
    if (this.tokensQueue.indexOf(token) === -1) {
      this.tokensQueue.push(token);
    }
    return token;
  },
  lex: function(skipHidden, reserveQueue) {
    if (skipHidden === undefined) {
      skipHidden = true;
    }
    const { tokensQueue } = this;
    if (reserveQueue) {
      for (let i = 0; i < tokensQueue.length; i++) {
        const token = tokensQueue[i];
        if (skipHidden && token.t === this.mapHiddenSymbol()) {
          continue;
        }
        return token;
      }
    } else {
      while (tokensQueue.length) {
        const token = tokensQueue.shift();
        if (skipHidden && token.t === this.mapHiddenSymbol()) {
          continue;
        }
        return token;
      }
    }
    var self = this,
      env = self.env,
      input = self.input,
      i,
      rule,
      m,
      ret,
      lines,
      rules = self.getCurrentRules();

    self.match = self.text = "";

    if (!input) {
      return {
        t: self.mapEndSymbol(),
        token: Lexer.STATIC.EOF_TOKEN,
        start: self.end,
        end: self.end,
        firstLine: self.lastLine,
        firstColumn: self.lastColumn,
        lastLine: self.lastLine,
        lastColumn: self.lastColumn
      };
    }

    for (i = 0; i < rules.length; i++) {
      rule = rules[i];
      var regexp = self.getRuleItem(rule, "regexp"),
        token = self.getRuleItem(rule, "token"),
        action = self.getRuleItem(rule, "action");

      if (env && typeof regexp.test !== "function") {
        regexp = regexp[env];
      }

      if (!regexp) {
        continue;
      }

      //#JSCOVERAGE_ENDIF
      if ((m = input.match(regexp))) {
        self.start = self.end;
        self.end += m[0].length;
        lines = m[0].match(/\n.*/g);
        if (lines) {
          self.lineNumber += lines.length;
        }
        const position = {
          start: self.start,
          end: self.end,
          firstLine: self.lastLine,
          lastLine: self.lineNumber,
          firstColumn: self.lastColumn,
          lastColumn: lines
            ? lines[lines.length - 1].length - 1
            : self.lastColumn + m[0].length
        };
        mix(self, position);
        var match;
        // for error report
        match = self.match = m[0];

        // all matches
        self.matches = m;
        // may change by user
        self.text = match;
        // matched content utils now
        self.matched += match;
        ret = action && action.call(self);
        if (ret === undefined) {
          ret = token;
        } else {
          ret = self.mapSymbol(ret);
        }
        input = input.slice(match.length);
        self.input = input;

        if (ret) {
          self.token = self.mapReverseSymbol(ret);
          if (ret === self.mapHiddenSymbol() && skipHidden) {
            return self.lex();
          }
          return {
            text: self.text,
            token: self.token,
            t: ret,
            ...position
          };
        } else {
          // ignore
          return self.lex();
        }
      }
    }
  }
};
Lexer.STATIC = {
  INITIAL_STATE: "I",
  DEBUG_CONTEXT_LIMIT: 20,
  EOF_TOKEN: "$EOF",
  UNKNOWN_TOKEN: "$UNKNOWN",
  HIDDEN_TOKEN: "$HIDDEN"
};
var lexer = new Lexer({
  rules: [
    [
      undefined,
      /^[\s\S]*?(?={{)/,
      function() {
        var self = this,
          text = self.text,
          m,
          n = 0;

        if ((m = text.match(/\\+$/))) {
          n = m[0].length;
        }
        if (n % 2) {
          self.pushState("et");
          text = text.slice(0, -1);
        } else {
          self.pushState("t");
        }
        if (n) {
          text = text.replace(/\\+$/g, function(m) {
            return new Array(m.length / 2 + 1).join("\\");
          });
        }
        // https://github.com/kissyteam/kissy/issues/330
        // return even empty
        self.text = text;
        return "CONTENT";
      }
    ],
    ["a", /^[\s\S]+/],
    [
      "a",
      /^[\s\S]{2,}?(?:(?={{)|$)/,
      function() {
        this.popState();
      },
      undefined,
      ["et"]
    ],
    [
      "b",
      /^{{{?(?:#|@)/,
      function() {
        var self = this,
          text = self.text;
        if (text.length === 4) {
          self.pushState("p");
        } else {
          self.pushState("e");
        }
      },
      undefined,
      ["t"]
    ],
    [
      "c",
      /^{{{?\//,
      function() {
        var self = this,
          text = self.text;
        if (text.length === 4) {
          self.pushState("p");
        } else {
          self.pushState("e");
        }
      },
      undefined,
      ["t"]
    ],
    [
      "d",
      /^{{\s*else\s*}}/,
      function() {
        this.popState();
      },
      undefined,
      ["t"]
    ],
    [
      undefined,
      /^{{![\s\S]*?}}/,
      function() {
        this.popState();
      },
      undefined,
      ["t"]
    ],
    [
      "a",
      /^{{%([\s\S]*?)%}}/,
      function() {
        // return to content mode
        this.text = this.matches[1] || "";
        this.popState();
      },
      undefined,
      ["t"]
    ],
    [
      "e",
      /^{{{?/,
      function() {
        var self = this,
          text = self.text;
        if (text.length === 3) {
          self.pushState("p");
        } else {
          self.pushState("e");
        }
      },
      undefined,
      ["t"]
    ],
    [undefined, /^\s+/, undefined, undefined, ["p", "e"]],
    ["f", /^,/, undefined, undefined, ["p", "e"]],
    [
      "g",
      /^}}}/,
      function() {
        this.popState(2);
      },
      undefined,
      ["p"]
    ],
    [
      "g",
      /^}}/,
      function() {
        this.popState(2);
      },
      undefined,
      ["e"]
    ],
    ["h", /^\(/, undefined, undefined, ["p", "e"]],
    ["i", /^\)/, undefined, undefined, ["p", "e"]],
    ["j", /^\|\|/, undefined, undefined, ["p", "e"]],
    ["k", /^&&/, undefined, undefined, ["p", "e"]],
    ["l", /^===/, undefined, undefined, ["p", "e"]],
    ["m", /^!==/, undefined, undefined, ["p", "e"]],
    ["n", /^>=/, undefined, undefined, ["p", "e"]],
    ["o", /^<=/, undefined, undefined, ["p", "e"]],
    ["p", /^>/, undefined, undefined, ["p", "e"]],
    ["q", /^</, undefined, undefined, ["p", "e"]],
    ["r", /^\+/, undefined, undefined, ["p", "e"]],
    ["s", /^-/, undefined, undefined, ["p", "e"]],
    ["t", /^\*/, undefined, undefined, ["p", "e"]],
    ["u", /^\//, undefined, undefined, ["p", "e"]],
    ["v", /^%/, undefined, undefined, ["p", "e"]],
    ["w", /^!/, undefined, undefined, ["p", "e"]],
    [
      "x",
      /^"(\\[\s\S]|[^\\"])*"/,
      function() {
        this.text = this.text.slice(1, -1).replace(/\\"/g, '"');
      },
      undefined,
      ["p", "e"]
    ],
    [
      "x",
      /^'(\\[\s\S]|[^\\'])*'/,
      function() {
        this.text = this.text.slice(1, -1).replace(/\\'/g, "'");
      },
      undefined,
      ["p", "e"]
    ],
    ["y", /^true/, undefined, undefined, ["p", "e"]],
    ["y", /^false/, undefined, undefined, ["p", "e"]],
    ["z", /^\d+(?:\.\d+)?(?:e-?\d+)?/i, undefined, undefined, ["p", "e"]],
    ["aa", /^=/, undefined, undefined, ["p", "e"]],
    [
      "ab",
      /^\.\./,
      function() {
        // wait for '/'
        this.pushState("ws");
      },
      undefined,
      ["p", "e"]
    ],
    [
      "ac",
      /^\//,
      function() {
        this.popState();
      },
      undefined,
      ["ws"]
    ],
    ["ac", /^\./, undefined, undefined, ["p", "e"]],
    ["ad", /^\[/, undefined, undefined, ["p", "e"]],
    ["ae", /^\]/, undefined, undefined, ["p", "e"]],
    ["ab", /^[a-zA-Z0-9_$]+/, undefined, undefined, ["p", "e"]]
  ],
  isCompress: true
});
var parser = {
  productions: [
    ["af", ["ag"]],
    [
      "ag",
      ["ah", "d", "ah"],
      function() {
        return new this.yy.ProgramNode(this.lexer.lineNumber, this.$1, this.$3);
      }
    ],
    [
      "ag",
      ["ah"],
      function() {
        return new this.yy.ProgramNode(this.lexer.lineNumber, this.$1);
      }
    ],
    [
      "ah",
      ["ai"],
      function() {
        return [this.$1];
      }
    ],
    [
      "ah",
      ["ah", "ai"],
      function() {
        this.$1.push(this.$2);
      }
    ],
    [
      "ai",
      ["b", "aj", "g", "ag", "c", "ak", "g"],
      function() {
        return new this.yy.BlockStatement(
          this.lexer.lineNumber,
          this.$2,
          this.$4,
          this.$6,
          this.$1.length !== 4
        );
      }
    ],
    [
      "ai",
      ["e", "al", "g"],
      function() {
        return new this.yy.ExpressionStatement(
          this.lexer.lineNumber,
          this.$2,
          this.$1.length !== 3
        );
      }
    ],
    [
      "ai",
      ["a"],
      function() {
        return new this.yy.ContentStatement(this.lexer.lineNumber, this.$1);
      }
    ],
    [
      "aj",
      ["ak", "h", "am", "f", "an", "i"],
      function() {
        return new this.yy.Function(
          this.lexer.lineNumber,
          this.$1,
          this.$3,
          this.$5
        );
      }
    ],
    [
      "aj",
      ["ak", "h", "am", "i"],
      function() {
        return new this.yy.Function(this.lexer.lineNumber, this.$1, this.$3);
      }
    ],
    [
      "aj",
      ["ak", "h", "an", "i"],
      function() {
        return new this.yy.Function(
          this.lexer.lineNumber,
          this.$1,
          null,
          this.$3
        );
      }
    ],
    [
      "aj",
      ["ak", "h", "i"],
      function() {
        return new this.yy.Function(this.lexer.lineNumber, this.$1);
      }
    ],
    [
      "am",
      ["am", "f", "ao"],
      function() {
        this.$1.push(this.$3);
      }
    ],
    [
      "am",
      ["ao"],
      function() {
        return [this.$1];
      }
    ],
    ["ao", ["al"]],
    ["al", ["ap"]],
    ["ap", ["aq"]],
    [
      "ap",
      ["ap", "j", "aq"],
      function() {
        return new this.yy.ConditionalOrExpression(this.$1, this.$3);
      }
    ],
    ["aq", ["ar"]],
    [
      "aq",
      ["aq", "k", "ar"],
      function() {
        return new this.yy.ConditionalAndExpression(this.$1, this.$3);
      }
    ],
    ["ar", ["as"]],
    [
      "ar",
      ["ar", "l", "as"],
      function() {
        return new this.yy.EqualityExpression(this.$1, "===", this.$3);
      }
    ],
    [
      "ar",
      ["ar", "m", "as"],
      function() {
        return new this.yy.EqualityExpression(this.$1, "!==", this.$3);
      }
    ],
    ["as", ["at"]],
    [
      "as",
      ["as", "q", "at"],
      function() {
        return new this.yy.RelationalExpression(this.$1, "<", this.$3);
      }
    ],
    [
      "as",
      ["as", "p", "at"],
      function() {
        return new this.yy.RelationalExpression(this.$1, ">", this.$3);
      }
    ],
    [
      "as",
      ["as", "o", "at"],
      function() {
        return new this.yy.RelationalExpression(this.$1, "<=", this.$3);
      }
    ],
    [
      "as",
      ["as", "n", "at"],
      function() {
        return new this.yy.RelationalExpression(this.$1, ">=", this.$3);
      }
    ],
    ["at", ["au"]],
    [
      "at",
      ["at", "r", "au"],
      function() {
        return new this.yy.AdditiveExpression(this.$1, "+", this.$3);
      }
    ],
    [
      "at",
      ["at", "s", "au"],
      function() {
        return new this.yy.AdditiveExpression(this.$1, "-", this.$3);
      }
    ],
    ["au", ["av"]],
    [
      "au",
      ["au", "t", "av"],
      function() {
        return new this.yy.MultiplicativeExpression(this.$1, "*", this.$3);
      }
    ],
    [
      "au",
      ["au", "u", "av"],
      function() {
        return new this.yy.MultiplicativeExpression(this.$1, "/", this.$3);
      }
    ],
    [
      "au",
      ["au", "v", "av"],
      function() {
        return new this.yy.MultiplicativeExpression(this.$1, "%", this.$3);
      }
    ],
    [
      "av",
      ["w", "av"],
      function() {
        return new this.yy.UnaryExpression(this.$1, this.$2);
      }
    ],
    [
      "av",
      ["s", "av"],
      function() {
        return new this.yy.UnaryExpression(this.$1, this.$2);
      }
    ],
    ["av", ["aw"]],
    ["aw", ["aj"]],
    [
      "aw",
      ["x"],
      function() {
        return new this.yy.String(this.lexer.lineNumber, this.$1);
      }
    ],
    [
      "aw",
      ["z"],
      function() {
        return new this.yy.Number(this.lexer.lineNumber, this.$1);
      }
    ],
    [
      "aw",
      ["y"],
      function() {
        return new this.yy.Boolean(this.lexer.lineNumber, this.$1);
      }
    ],
    ["aw", ["ak"]],
    [
      "aw",
      ["h", "al", "i"],
      function() {
        return this.$2;
      }
    ],
    [
      "an",
      ["an", "f", "ax"],
      function() {
        var hash = this.$1,
          seg = this.$3;
        hash.value[seg[0]] = seg[1];
      }
    ],
    [
      "an",
      ["ax"],
      function() {
        var hash = new this.yy.Hash(this.lexer.lineNumber),
          $1 = this.$1;
        hash.value[$1[0]] = $1[1];
        return hash;
      }
    ],
    [
      "ax",
      ["ab", "aa", "al"],
      function() {
        return [this.$1, this.$3];
      }
    ],
    [
      "ak",
      ["ay"],
      function() {
        return new this.yy.Id(this.lexer.lineNumber, this.$1);
      }
    ],
    [
      "ay",
      ["ay", "ac", "ab"],
      function() {
        this.$1.push(this.$3);
      }
    ],
    [
      "ay",
      ["ay", "ad", "al", "ae"],
      function() {
        this.$1.push(this.$3);
      }
    ],
    [
      "ay",
      ["ab"],
      function() {
        return [this.$1];
      }
    ]
  ],
  productionIndexMap: {
    symbol: 0,
    rhs: 1,
    action: 2,
    label: 3
  },
  getProductionItemByType: function(p, itemType) {
    if (this.isCompress) {
      return p[this.productionIndexMap[itemType]];
    }
    return p[itemType];
  },
  getProductionSymbol: function(p) {
    return this.getProductionItemByType(p, "symbol");
  },
  getProductionRhs: function(p) {
    return this.getProductionItemByType(p, "rhs");
  },
  getProductionAction: function(p) {
    return this.getProductionItemByType(p, "action");
  },
  getProductionLabel: function(p) {
    return this.getProductionItemByType(p, "label");
  },
  isCompress: 1
};
parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
parser.getProductionRhs = parser.getProductionRhs.bind(parser);
parser.getProductionAction = parser.getProductionAction.bind(parser);
parser.getProductionLabel = parser.getProductionLabel.bind(parser);
parser.lexer = lexer;
lexer.symbolMap = {
  $UNKNOWN: "$UNKNOWN",
  $HIDDEN: "$HIDDEN",
  $EOF: "$EOF",
  CONTENT: "a",
  OPEN_BLOCK: "b",
  OPEN_CLOSE_BLOCK: "c",
  INVERSE: "d",
  OPEN_TPL: "e",
  COMMA: "f",
  CLOSE: "g",
  LPAREN: "h",
  RPAREN: "i",
  OR: "j",
  AND: "k",
  LOGIC_EQUALS: "l",
  LOGIC_NOT_EQUALS: "m",
  GE: "n",
  LE: "o",
  GT: "p",
  LT: "q",
  PLUS: "r",
  MINUS: "s",
  MULTIPLY: "t",
  DIVIDE: "u",
  MODULUS: "v",
  NOT: "w",
  STRING: "x",
  BOOLEAN: "y",
  NUMBER: "z",
  EQUALS: "aa",
  ID: "ab",
  SEP: "ac",
  REF_START: "ad",
  REF_END: "ae",
  $START: "af",
  program: "ag",
  statements: "ah",
  statement: "ai",
  function: "aj",
  id: "ak",
  expression: "al",
  params: "am",
  hash: "an",
  param: "ao",
  conditionalOrExpression: "ap",
  conditionalAndExpression: "aq",
  equalityExpression: "ar",
  relationalExpression: "as",
  additiveExpression: "at",
  multiplicativeExpression: "au",
  unaryExpression: "av",
  primaryExpression: "aw",
  hashSegment: "ax",
  idSegments: "ay"
};
function peekStack(stack, n) {
  n = n || 1;
  return stack[stack.length - n];
}
var GrammarConst = {
  SHIFT_TYPE: 1,
  REDUCE_TYPE: 2,
  ACCEPT_TYPE: 0,
  TYPE_INDEX: 0,
  PRODUCTION_INDEX: 1,
  TO_INDEX: 2
};
parser.table = {
  gotos: {
    "0": {
      ag: 4,
      ah: 5,
      ai: 6
    },
    "2": {
      aj: 8,
      ak: 9,
      ay: 10
    },
    "3": {
      aj: 17,
      ak: 18,
      al: 19,
      ap: 20,
      aq: 21,
      ar: 22,
      as: 23,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "5": {
      ai: 29
    },
    "11": {
      aj: 17,
      ak: 18,
      al: 34,
      ap: 20,
      aq: 21,
      ar: 22,
      as: 23,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "12": {
      aj: 17,
      ak: 18,
      av: 35,
      aw: 27,
      ay: 10
    },
    "13": {
      aj: 17,
      ak: 18,
      av: 36,
      aw: 27,
      ay: 10
    },
    "28": {
      ah: 51,
      ai: 6
    },
    "30": {
      ag: 52,
      ah: 5,
      ai: 6
    },
    "31": {
      aj: 17,
      ak: 18,
      al: 55,
      am: 56,
      an: 57,
      ao: 58,
      ap: 20,
      aq: 21,
      ar: 22,
      as: 23,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ax: 59,
      ay: 10
    },
    "33": {
      aj: 17,
      ak: 18,
      al: 61,
      ap: 20,
      aq: 21,
      ar: 22,
      as: 23,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "38": {
      aj: 17,
      ak: 18,
      aq: 63,
      ar: 22,
      as: 23,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "39": {
      aj: 17,
      ak: 18,
      ar: 64,
      as: 23,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "40": {
      aj: 17,
      ak: 18,
      as: 65,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "41": {
      aj: 17,
      ak: 18,
      as: 66,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "42": {
      aj: 17,
      ak: 18,
      at: 67,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "43": {
      aj: 17,
      ak: 18,
      at: 68,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "44": {
      aj: 17,
      ak: 18,
      at: 69,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "45": {
      aj: 17,
      ak: 18,
      at: 70,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "46": {
      aj: 17,
      ak: 18,
      au: 71,
      av: 26,
      aw: 27,
      ay: 10
    },
    "47": {
      aj: 17,
      ak: 18,
      au: 72,
      av: 26,
      aw: 27,
      ay: 10
    },
    "48": {
      aj: 17,
      ak: 18,
      av: 73,
      aw: 27,
      ay: 10
    },
    "49": {
      aj: 17,
      ak: 18,
      av: 74,
      aw: 27,
      ay: 10
    },
    "50": {
      aj: 17,
      ak: 18,
      av: 75,
      aw: 27,
      ay: 10
    },
    "51": {
      ai: 29
    },
    "76": {
      ak: 83,
      ay: 10
    },
    "77": {
      aj: 17,
      ak: 18,
      al: 84,
      ap: 20,
      aq: 21,
      ar: 22,
      as: 23,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ay: 10
    },
    "78": {
      aj: 17,
      ak: 18,
      al: 55,
      an: 85,
      ao: 86,
      ap: 20,
      aq: 21,
      ar: 22,
      as: 23,
      at: 24,
      au: 25,
      av: 26,
      aw: 27,
      ax: 59,
      ay: 10
    },
    "80": {
      ax: 88
    }
  },
  action: {
    "0": {
      a: [1, undefined, 1],
      b: [1, undefined, 2],
      e: [1, undefined, 3]
    },
    "1": {
      $EOF: [2, 7],
      d: [2, 7],
      b: [2, 7],
      e: [2, 7],
      a: [2, 7],
      c: [2, 7]
    },
    "2": {
      ab: [1, undefined, 7]
    },
    "3": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "4": {
      $EOF: [0]
    },
    "5": {
      $EOF: [2, 2],
      c: [2, 2],
      a: [1, undefined, 1],
      b: [1, undefined, 2],
      d: [1, undefined, 28],
      e: [1, undefined, 3]
    },
    "6": {
      $EOF: [2, 3],
      d: [2, 3],
      b: [2, 3],
      e: [2, 3],
      a: [2, 3],
      c: [2, 3]
    },
    "7": {
      h: [2, 50],
      ac: [2, 50],
      ad: [2, 50],
      g: [2, 50],
      j: [2, 50],
      k: [2, 50],
      l: [2, 50],
      m: [2, 50],
      n: [2, 50],
      o: [2, 50],
      p: [2, 50],
      q: [2, 50],
      r: [2, 50],
      s: [2, 50],
      t: [2, 50],
      u: [2, 50],
      v: [2, 50],
      i: [2, 50],
      ae: [2, 50],
      f: [2, 50]
    },
    "8": {
      g: [1, undefined, 30]
    },
    "9": {
      h: [1, undefined, 31]
    },
    "10": {
      h: [2, 47],
      g: [2, 47],
      j: [2, 47],
      k: [2, 47],
      l: [2, 47],
      m: [2, 47],
      n: [2, 47],
      o: [2, 47],
      p: [2, 47],
      q: [2, 47],
      r: [2, 47],
      s: [2, 47],
      t: [2, 47],
      u: [2, 47],
      v: [2, 47],
      i: [2, 47],
      f: [2, 47],
      ae: [2, 47],
      ac: [1, undefined, 32],
      ad: [1, undefined, 33]
    },
    "11": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "12": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "13": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "14": {
      g: [2, 39],
      j: [2, 39],
      k: [2, 39],
      l: [2, 39],
      m: [2, 39],
      n: [2, 39],
      o: [2, 39],
      p: [2, 39],
      q: [2, 39],
      r: [2, 39],
      s: [2, 39],
      t: [2, 39],
      u: [2, 39],
      v: [2, 39],
      i: [2, 39],
      f: [2, 39],
      ae: [2, 39]
    },
    "15": {
      g: [2, 41],
      j: [2, 41],
      k: [2, 41],
      l: [2, 41],
      m: [2, 41],
      n: [2, 41],
      o: [2, 41],
      p: [2, 41],
      q: [2, 41],
      r: [2, 41],
      s: [2, 41],
      t: [2, 41],
      u: [2, 41],
      v: [2, 41],
      i: [2, 41],
      f: [2, 41],
      ae: [2, 41]
    },
    "16": {
      g: [2, 40],
      j: [2, 40],
      k: [2, 40],
      l: [2, 40],
      m: [2, 40],
      n: [2, 40],
      o: [2, 40],
      p: [2, 40],
      q: [2, 40],
      r: [2, 40],
      s: [2, 40],
      t: [2, 40],
      u: [2, 40],
      v: [2, 40],
      i: [2, 40],
      f: [2, 40],
      ae: [2, 40]
    },
    "17": {
      g: [2, 38],
      j: [2, 38],
      k: [2, 38],
      l: [2, 38],
      m: [2, 38],
      n: [2, 38],
      o: [2, 38],
      p: [2, 38],
      q: [2, 38],
      r: [2, 38],
      s: [2, 38],
      t: [2, 38],
      u: [2, 38],
      v: [2, 38],
      i: [2, 38],
      f: [2, 38],
      ae: [2, 38]
    },
    "18": {
      g: [2, 42],
      j: [2, 42],
      k: [2, 42],
      l: [2, 42],
      m: [2, 42],
      n: [2, 42],
      o: [2, 42],
      p: [2, 42],
      q: [2, 42],
      r: [2, 42],
      s: [2, 42],
      t: [2, 42],
      u: [2, 42],
      v: [2, 42],
      i: [2, 42],
      f: [2, 42],
      ae: [2, 42],
      h: [1, undefined, 31]
    },
    "19": {
      g: [1, undefined, 37]
    },
    "20": {
      g: [2, 15],
      i: [2, 15],
      f: [2, 15],
      ae: [2, 15],
      j: [1, undefined, 38]
    },
    "21": {
      g: [2, 16],
      j: [2, 16],
      i: [2, 16],
      f: [2, 16],
      ae: [2, 16],
      k: [1, undefined, 39]
    },
    "22": {
      g: [2, 18],
      j: [2, 18],
      k: [2, 18],
      i: [2, 18],
      f: [2, 18],
      ae: [2, 18],
      l: [1, undefined, 40],
      m: [1, undefined, 41]
    },
    "23": {
      g: [2, 20],
      j: [2, 20],
      k: [2, 20],
      l: [2, 20],
      m: [2, 20],
      i: [2, 20],
      f: [2, 20],
      ae: [2, 20],
      n: [1, undefined, 42],
      o: [1, undefined, 43],
      p: [1, undefined, 44],
      q: [1, undefined, 45]
    },
    "24": {
      g: [2, 23],
      j: [2, 23],
      k: [2, 23],
      l: [2, 23],
      m: [2, 23],
      n: [2, 23],
      o: [2, 23],
      p: [2, 23],
      q: [2, 23],
      i: [2, 23],
      f: [2, 23],
      ae: [2, 23],
      r: [1, undefined, 46],
      s: [1, undefined, 47]
    },
    "25": {
      g: [2, 28],
      j: [2, 28],
      k: [2, 28],
      l: [2, 28],
      m: [2, 28],
      n: [2, 28],
      o: [2, 28],
      p: [2, 28],
      q: [2, 28],
      r: [2, 28],
      s: [2, 28],
      i: [2, 28],
      f: [2, 28],
      ae: [2, 28],
      t: [1, undefined, 48],
      u: [1, undefined, 49],
      v: [1, undefined, 50]
    },
    "26": {
      g: [2, 31],
      j: [2, 31],
      k: [2, 31],
      l: [2, 31],
      m: [2, 31],
      n: [2, 31],
      o: [2, 31],
      p: [2, 31],
      q: [2, 31],
      r: [2, 31],
      s: [2, 31],
      t: [2, 31],
      u: [2, 31],
      v: [2, 31],
      i: [2, 31],
      f: [2, 31],
      ae: [2, 31]
    },
    "27": {
      g: [2, 37],
      j: [2, 37],
      k: [2, 37],
      l: [2, 37],
      m: [2, 37],
      n: [2, 37],
      o: [2, 37],
      p: [2, 37],
      q: [2, 37],
      r: [2, 37],
      s: [2, 37],
      t: [2, 37],
      u: [2, 37],
      v: [2, 37],
      i: [2, 37],
      f: [2, 37],
      ae: [2, 37]
    },
    "28": {
      a: [1, undefined, 1],
      b: [1, undefined, 2],
      e: [1, undefined, 3]
    },
    "29": {
      $EOF: [2, 4],
      d: [2, 4],
      b: [2, 4],
      e: [2, 4],
      a: [2, 4],
      c: [2, 4]
    },
    "30": {
      a: [1, undefined, 1],
      b: [1, undefined, 2],
      e: [1, undefined, 3]
    },
    "31": {
      h: [1, undefined, 11],
      i: [1, undefined, 53],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 54]
    },
    "32": {
      ab: [1, undefined, 60]
    },
    "33": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "34": {
      i: [1, undefined, 62]
    },
    "35": {
      g: [2, 36],
      j: [2, 36],
      k: [2, 36],
      l: [2, 36],
      m: [2, 36],
      n: [2, 36],
      o: [2, 36],
      p: [2, 36],
      q: [2, 36],
      r: [2, 36],
      s: [2, 36],
      t: [2, 36],
      u: [2, 36],
      v: [2, 36],
      i: [2, 36],
      f: [2, 36],
      ae: [2, 36]
    },
    "36": {
      g: [2, 35],
      j: [2, 35],
      k: [2, 35],
      l: [2, 35],
      m: [2, 35],
      n: [2, 35],
      o: [2, 35],
      p: [2, 35],
      q: [2, 35],
      r: [2, 35],
      s: [2, 35],
      t: [2, 35],
      u: [2, 35],
      v: [2, 35],
      i: [2, 35],
      f: [2, 35],
      ae: [2, 35]
    },
    "37": {
      $EOF: [2, 6],
      d: [2, 6],
      b: [2, 6],
      e: [2, 6],
      a: [2, 6],
      c: [2, 6]
    },
    "38": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "39": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "40": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "41": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "42": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "43": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "44": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "45": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "46": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "47": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "48": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "49": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "50": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "51": {
      $EOF: [2, 1],
      c: [2, 1],
      a: [1, undefined, 1],
      b: [1, undefined, 2],
      e: [1, undefined, 3]
    },
    "52": {
      c: [1, undefined, 76]
    },
    "53": {
      g: [2, 11],
      j: [2, 11],
      k: [2, 11],
      l: [2, 11],
      m: [2, 11],
      n: [2, 11],
      o: [2, 11],
      p: [2, 11],
      q: [2, 11],
      r: [2, 11],
      s: [2, 11],
      t: [2, 11],
      u: [2, 11],
      v: [2, 11],
      i: [2, 11],
      f: [2, 11],
      ae: [2, 11]
    },
    "54": {
      f: [2, 50],
      h: [2, 50],
      i: [2, 50],
      j: [2, 50],
      k: [2, 50],
      l: [2, 50],
      m: [2, 50],
      n: [2, 50],
      o: [2, 50],
      p: [2, 50],
      q: [2, 50],
      r: [2, 50],
      s: [2, 50],
      t: [2, 50],
      u: [2, 50],
      v: [2, 50],
      ac: [2, 50],
      ad: [2, 50],
      aa: [1, undefined, 77]
    },
    "55": {
      f: [2, 14],
      i: [2, 14]
    },
    "56": {
      f: [1, undefined, 78],
      i: [1, undefined, 79]
    },
    "57": {
      f: [1, undefined, 80],
      i: [1, undefined, 81]
    },
    "58": {
      f: [2, 13],
      i: [2, 13]
    },
    "59": {
      i: [2, 45],
      f: [2, 45]
    },
    "60": {
      h: [2, 48],
      ac: [2, 48],
      ad: [2, 48],
      g: [2, 48],
      j: [2, 48],
      k: [2, 48],
      l: [2, 48],
      m: [2, 48],
      n: [2, 48],
      o: [2, 48],
      p: [2, 48],
      q: [2, 48],
      r: [2, 48],
      s: [2, 48],
      t: [2, 48],
      u: [2, 48],
      v: [2, 48],
      i: [2, 48],
      f: [2, 48],
      ae: [2, 48]
    },
    "61": {
      ae: [1, undefined, 82]
    },
    "62": {
      g: [2, 43],
      j: [2, 43],
      k: [2, 43],
      l: [2, 43],
      m: [2, 43],
      n: [2, 43],
      o: [2, 43],
      p: [2, 43],
      q: [2, 43],
      r: [2, 43],
      s: [2, 43],
      t: [2, 43],
      u: [2, 43],
      v: [2, 43],
      i: [2, 43],
      f: [2, 43],
      ae: [2, 43]
    },
    "63": {
      g: [2, 17],
      j: [2, 17],
      i: [2, 17],
      f: [2, 17],
      ae: [2, 17],
      k: [1, undefined, 39]
    },
    "64": {
      g: [2, 19],
      j: [2, 19],
      k: [2, 19],
      i: [2, 19],
      f: [2, 19],
      ae: [2, 19],
      l: [1, undefined, 40],
      m: [1, undefined, 41]
    },
    "65": {
      g: [2, 21],
      j: [2, 21],
      k: [2, 21],
      l: [2, 21],
      m: [2, 21],
      i: [2, 21],
      f: [2, 21],
      ae: [2, 21],
      n: [1, undefined, 42],
      o: [1, undefined, 43],
      p: [1, undefined, 44],
      q: [1, undefined, 45]
    },
    "66": {
      g: [2, 22],
      j: [2, 22],
      k: [2, 22],
      l: [2, 22],
      m: [2, 22],
      i: [2, 22],
      f: [2, 22],
      ae: [2, 22],
      n: [1, undefined, 42],
      o: [1, undefined, 43],
      p: [1, undefined, 44],
      q: [1, undefined, 45]
    },
    "67": {
      g: [2, 27],
      j: [2, 27],
      k: [2, 27],
      l: [2, 27],
      m: [2, 27],
      n: [2, 27],
      o: [2, 27],
      p: [2, 27],
      q: [2, 27],
      i: [2, 27],
      f: [2, 27],
      ae: [2, 27],
      r: [1, undefined, 46],
      s: [1, undefined, 47]
    },
    "68": {
      g: [2, 26],
      j: [2, 26],
      k: [2, 26],
      l: [2, 26],
      m: [2, 26],
      n: [2, 26],
      o: [2, 26],
      p: [2, 26],
      q: [2, 26],
      i: [2, 26],
      f: [2, 26],
      ae: [2, 26],
      r: [1, undefined, 46],
      s: [1, undefined, 47]
    },
    "69": {
      g: [2, 25],
      j: [2, 25],
      k: [2, 25],
      l: [2, 25],
      m: [2, 25],
      n: [2, 25],
      o: [2, 25],
      p: [2, 25],
      q: [2, 25],
      i: [2, 25],
      f: [2, 25],
      ae: [2, 25],
      r: [1, undefined, 46],
      s: [1, undefined, 47]
    },
    "70": {
      g: [2, 24],
      j: [2, 24],
      k: [2, 24],
      l: [2, 24],
      m: [2, 24],
      n: [2, 24],
      o: [2, 24],
      p: [2, 24],
      q: [2, 24],
      i: [2, 24],
      f: [2, 24],
      ae: [2, 24],
      r: [1, undefined, 46],
      s: [1, undefined, 47]
    },
    "71": {
      g: [2, 29],
      j: [2, 29],
      k: [2, 29],
      l: [2, 29],
      m: [2, 29],
      n: [2, 29],
      o: [2, 29],
      p: [2, 29],
      q: [2, 29],
      r: [2, 29],
      s: [2, 29],
      i: [2, 29],
      f: [2, 29],
      ae: [2, 29],
      t: [1, undefined, 48],
      u: [1, undefined, 49],
      v: [1, undefined, 50]
    },
    "72": {
      g: [2, 30],
      j: [2, 30],
      k: [2, 30],
      l: [2, 30],
      m: [2, 30],
      n: [2, 30],
      o: [2, 30],
      p: [2, 30],
      q: [2, 30],
      r: [2, 30],
      s: [2, 30],
      i: [2, 30],
      f: [2, 30],
      ae: [2, 30],
      t: [1, undefined, 48],
      u: [1, undefined, 49],
      v: [1, undefined, 50]
    },
    "73": {
      g: [2, 32],
      j: [2, 32],
      k: [2, 32],
      l: [2, 32],
      m: [2, 32],
      n: [2, 32],
      o: [2, 32],
      p: [2, 32],
      q: [2, 32],
      r: [2, 32],
      s: [2, 32],
      t: [2, 32],
      u: [2, 32],
      v: [2, 32],
      i: [2, 32],
      f: [2, 32],
      ae: [2, 32]
    },
    "74": {
      g: [2, 33],
      j: [2, 33],
      k: [2, 33],
      l: [2, 33],
      m: [2, 33],
      n: [2, 33],
      o: [2, 33],
      p: [2, 33],
      q: [2, 33],
      r: [2, 33],
      s: [2, 33],
      t: [2, 33],
      u: [2, 33],
      v: [2, 33],
      i: [2, 33],
      f: [2, 33],
      ae: [2, 33]
    },
    "75": {
      g: [2, 34],
      j: [2, 34],
      k: [2, 34],
      l: [2, 34],
      m: [2, 34],
      n: [2, 34],
      o: [2, 34],
      p: [2, 34],
      q: [2, 34],
      r: [2, 34],
      s: [2, 34],
      t: [2, 34],
      u: [2, 34],
      v: [2, 34],
      i: [2, 34],
      f: [2, 34],
      ae: [2, 34]
    },
    "76": {
      ab: [1, undefined, 7]
    },
    "77": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 7]
    },
    "78": {
      h: [1, undefined, 11],
      s: [1, undefined, 12],
      w: [1, undefined, 13],
      x: [1, undefined, 14],
      y: [1, undefined, 15],
      z: [1, undefined, 16],
      ab: [1, undefined, 54]
    },
    "79": {
      g: [2, 9],
      j: [2, 9],
      k: [2, 9],
      l: [2, 9],
      m: [2, 9],
      n: [2, 9],
      o: [2, 9],
      p: [2, 9],
      q: [2, 9],
      r: [2, 9],
      s: [2, 9],
      t: [2, 9],
      u: [2, 9],
      v: [2, 9],
      i: [2, 9],
      f: [2, 9],
      ae: [2, 9]
    },
    "80": {
      ab: [1, undefined, 87]
    },
    "81": {
      g: [2, 10],
      j: [2, 10],
      k: [2, 10],
      l: [2, 10],
      m: [2, 10],
      n: [2, 10],
      o: [2, 10],
      p: [2, 10],
      q: [2, 10],
      r: [2, 10],
      s: [2, 10],
      t: [2, 10],
      u: [2, 10],
      v: [2, 10],
      i: [2, 10],
      f: [2, 10],
      ae: [2, 10]
    },
    "82": {
      h: [2, 49],
      ac: [2, 49],
      ad: [2, 49],
      g: [2, 49],
      j: [2, 49],
      k: [2, 49],
      l: [2, 49],
      m: [2, 49],
      n: [2, 49],
      o: [2, 49],
      p: [2, 49],
      q: [2, 49],
      r: [2, 49],
      s: [2, 49],
      t: [2, 49],
      u: [2, 49],
      v: [2, 49],
      i: [2, 49],
      f: [2, 49],
      ae: [2, 49]
    },
    "83": {
      g: [1, undefined, 89]
    },
    "84": {
      i: [2, 46],
      f: [2, 46]
    },
    "85": {
      f: [1, undefined, 80],
      i: [1, undefined, 90]
    },
    "86": {
      f: [2, 12],
      i: [2, 12]
    },
    "87": {
      aa: [1, undefined, 77]
    },
    "88": {
      i: [2, 44],
      f: [2, 44]
    },
    "89": {
      $EOF: [2, 5],
      d: [2, 5],
      b: [2, 5],
      e: [2, 5],
      a: [2, 5],
      c: [2, 5]
    },
    "90": {
      g: [2, 8],
      j: [2, 8],
      k: [2, 8],
      l: [2, 8],
      m: [2, 8],
      n: [2, 8],
      o: [2, 8],
      p: [2, 8],
      q: [2, 8],
      r: [2, 8],
      s: [2, 8],
      t: [2, 8],
      u: [2, 8],
      v: [2, 8],
      i: [2, 8],
      f: [2, 8],
      ae: [2, 8]
    }
  }
};
parser.parse = function parse(input, options) {
  options = options || {};
  var { onErrorRecovery } = options;
  var filename = options.filename;
  var state, token, ret, action, $;
  var self = this;
  var { getProductionSymbol, getProductionRhs, getProductionAction } = self;
  var lexer = self.lexer;
  var table = self.table;
  var gotos = table.gotos;
  var tableAction = table.action;
  var productions = self.productions;
  // for debug info
  var prefix = filename ? "in file: " + filename + " " : "";
  var valueStack = [];
  var stateStack = [0];
  var symbolStack = [];
  lexer.resetInput(input);
  while (1) {
    // retrieve state number from top of stack
    state = peekStack(stateStack);
    if (!token) {
      token = lexer.lex();
    }
    if (token) {
      // read action for current state and first input
      action = tableAction[state] && tableAction[state][token.t];
    } else {
      action = null;
    }

    if (!action) {
      const map = [];
      map[GrammarConst.SHIFT_TYPE] = "shift";
      map[GrammarConst.REDUCE_TYPE] = "reduce";
      map[GrammarConst.ACCEPT_TYPE] = "accept";
      var expectedInfo = [];
      var expected = {};
      if (tableAction[state]) {
        each(tableAction[state], function(v, symbolForState) {
          action = v[GrammarConst.TYPE_INDEX];
          const actionStr = map[action];
          const arr = (expected[actionStr] = expected[actionStr] || []);
          const s = self.lexer.mapReverseSymbol(symbolForState);
          arr.push(s);
          expectedInfo.push(actionStr + ":" + s);
        });
      }
      const error =
        prefix +
        "syntax error at line " +
        lexer.lineNumber +
        ":\n" +
        lexer.showDebugInfo() +
        "\n" +
        "expect " +
        expectedInfo.join(", ");
      throw new Error(error);
    }

    switch (action[GrammarConst.TYPE_INDEX]) {
      case GrammarConst.SHIFT_TYPE:
        symbolStack.push(token.t);
        valueStack.push(lexer.text);
        // push state
        stateStack.push(action[GrammarConst.TO_INDEX]);
        // allow to read more
        token = null;
        break;

      case GrammarConst.REDUCE_TYPE:
        var production = productions[action[GrammarConst.PRODUCTION_INDEX]];
        var reducedSymbol = getProductionSymbol(production);
        var reducedAction = getProductionAction(production);
        var reducedRhs = getProductionRhs(production);
        var len = reducedRhs.length;
        $ = peekStack(valueStack, len); // default to $ = $1
        ret = undefined;
        self.$ = $;
        for (var i = 0; i < len; i++) {
          self["$" + (len - i)] = peekStack(valueStack, i + 1);
        }
        if (reducedAction) {
          ret = reducedAction.call(self);
        }
        if (ret !== undefined) {
          $ = ret;
        } else {
          $ = self.$;
        }
        var reverseIndex = len * -1;
        stateStack.splice(reverseIndex, len);
        valueStack.splice(reverseIndex, len);
        symbolStack.splice(reverseIndex, len);
        symbolStack.push(reducedSymbol);
        valueStack.push($);
        var newState = gotos[peekStack(stateStack)][reducedSymbol];
        stateStack.push(newState);
        break;

      case GrammarConst.ACCEPT_TYPE:
        return $;
    }
  }
};

  return parser;
  })();

  if(typeof module !== 'undefined') {
    module.exports = parser;
  }
