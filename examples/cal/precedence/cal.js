
/*
Generated By kison v0.4.0

Generate time: Wed Jun 23 2021 12:55:38 GMT+0800 (中国标准时间)
*/
  var cal = (function(undefined){
  function mix(to, from) {
  for (var f in from) {
    to[f] = from[f];
  }
}
function isArray(obj) {
  return "[object Array]" === Object.prototype.toString.call(obj);
}
function each(object, fn, context) {
  if (object) {
    var key,
      val,
      length,
      i = 0;

    context = context || null;

    if (!isArray(object)) {
      for (key in object) {
        // can not use hasOwnProperty
        if (fn.call(context, object[key], key, object) === false) {
          break;
        }
      }
    } else {
      length = object.length;
      for (val = object[0]; i < length; val = object[++i]) {
        if (fn.call(context, val, i, object) === false) {
          break;
        }
      }
    }
  }
}
function inArray(item, arr) {
  for (var i = 0, l = arr.length; i < l; i++) {
    if (arr[i] === item) {
      return true;
    }
  }
  return false;
}
var Lexer = function Lexer(cfg) {
  var self = this;

  /*
     lex rules.
     @type {Object[]}
     @example
     [
     {
     regexp:'\\w+',
     state:['xx'],
     token:'c',
     // this => lex
     action:function(){}
     }
     ]
     */
  self.rules = [];
  self.tokensQueue = [];

  mix(self, cfg);

  self.userData = {};

  self.errorRule = {
    regexp: /^./,
    token: Lexer.STATIC.UNKNOWN_TOKEN
  };

  /*
     Input languages
     @type {String}
     */

  self.resetInput(self.input);

  this.ruleIndexMap = {
    token: 0,
    regexp: 1,
    action: 2,
    filter: 3,
    state: 4
  };
};
Lexer.prototype = {
  resetInput: function(input) {
    mix(this, {
      userData: {},
      input: input,
      matched: "",
      stateStack: [Lexer.STATIC.INITIAL_STATE],
      match: "",
      text: "",
      firstLine: 1,
      lineNumber: 1,
      lastLine: 1,
      start: 0,
      end: 0,
      firstColumn: 1,
      lastColumn: 1
    });
  },
  mapEndSymbol: function() {
    return this.mapSymbol(Lexer.STATIC.EOF_TOKEN);
  },
  mapHiddenSymbol: function() {
    return this.mapSymbol(Lexer.STATIC.HIDDEN_TOKEN);
  },
  getRuleItem: function(rule, itemType) {
    if (this.isCompress) {
      return rule[this.ruleIndexMap[itemType]];
    } else {
      return rule[itemType];
    }
  },
  getCurrentRules: function() {
    var self = this,
      currentState = self.stateStack[self.stateStack.length - 1],
      rules = [];
    if (self.mapState) {
      currentState = self.mapState(currentState);
    }
    each(self.rules, function(r) {
      var filter = self.getRuleItem(r, "filter");
      if (filter) {
        if (filter.call(self)) {
          rules.push(r);
        }
        return;
      }
      var state = self.getRuleItem(r, "state");
      if (!state) {
        if (currentState === Lexer.STATIC.INITIAL_STATE) {
          rules.push(r);
        }
      } else if (inArray(currentState, state)) {
        rules.push(r);
      }
    });
    rules.push(self.errorRule);
    return rules;
  },
  peekState: function(n) {
    n = n || 1;
    return this.stateStack[this.stateStack.length - n];
  },
  pushState: function(state) {
    this.stateStack.push(state);
  },
  popState: function(num) {
    num = num || 1;
    var ret;
    while (num--) {
      ret = this.stateStack.pop();
    }
    return ret;
  },
  showDebugInfo: function() {
    var self = this,
      DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT,
      matched = self.matched,
      match = self.match,
      input = self.input;
    matched = matched.slice(0, matched.length - match.length);
    var past =
        (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") +
        matched.slice(0 - DEBUG_CONTEXT_LIMIT).replace(/\n/g, " "),
      next = match + input;
    //#JSCOVERAGE_ENDIF
    next =
      next.slice(0, DEBUG_CONTEXT_LIMIT).replace(/\n/g, " ") +
      (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
    return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
  },
  mapSymbol: function(t) {
    var self = this,
      symbolMap = self.symbolMap;
    if (!symbolMap) {
      return t;
    }
    // force string, see util.clone iphone5s ios7 bug
    return symbolMap[t] || (symbolMap[t] = self.genShortId("symbol"));
  },
  mapReverseSymbol: function(rs) {
    var self = this,
      symbolMap = self.symbolMap,
      i,
      reverseSymbolMap = self.reverseSymbolMap;
    if (!reverseSymbolMap && symbolMap) {
      reverseSymbolMap = self.reverseSymbolMap = {};
      for (i in symbolMap) {
        reverseSymbolMap[symbolMap[i]] = i;
      }
    }
    if (reverseSymbolMap) {
      return reverseSymbolMap[rs] || rs;
    } else {
      return rs;
    }
  },
  toJSON: function() {
    return {
      text: this.text,
      firstLine: this.firstLine,
      firstColumn: this.firstColumn,
      lastLine: this.lastLine,
      lastColumn: this.lastColumn,
      token: this.token,
      start: this.start,
      end: this.end
    };
  },
  peek: function(skipHidden) {
    const token = this.lex(skipHidden, true);
    if (this.tokensQueue.indexOf(token) === -1) {
      this.tokensQueue.push(token);
    }
    return token;
  },
  lex: function(skipHidden, reserveQueue) {
    if (skipHidden === undefined) {
      skipHidden = true;
    }
    const { tokensQueue } = this;
    if (reserveQueue) {
      for (let i = 0; i < tokensQueue.length; i++) {
        const token = tokensQueue[i];
        if (skipHidden && token.t === this.mapHiddenSymbol()) {
          continue;
        }
        return token;
      }
    } else {
      while (tokensQueue.length) {
        const token = tokensQueue.shift();
        if (skipHidden && token.t === this.mapHiddenSymbol()) {
          continue;
        }
        return token;
      }
    }
    var self = this,
      env = self.env,
      input = self.input,
      i,
      rule,
      m,
      ret,
      lines,
      rules = self.getCurrentRules();

    self.match = self.text = "";

    if (!input) {
      return {
        t: self.mapEndSymbol(),
        token: Lexer.STATIC.EOF_TOKEN,
        start: self.end,
        end: self.end,
        firstLine: self.lastLine,
        firstColumn: self.lastColumn,
        lastLine: self.lastLine,
        lastColumn: self.lastColumn
      };
    }

    for (i = 0; i < rules.length; i++) {
      rule = rules[i];
      var regexp = self.getRuleItem(rule, "regexp"),
        token = self.getRuleItem(rule, "token"),
        action = self.getRuleItem(rule, "action");

      if (env && typeof regexp.test !== "function") {
        regexp = regexp[env];
      }

      if (!regexp) {
        continue;
      }

      //#JSCOVERAGE_ENDIF
      if ((m = input.match(regexp))) {
        self.start = self.end;
        self.end += m[0].length;
        lines = m[0].match(/\n.*/g);
        if (lines) {
          self.lineNumber += lines.length;
        }
        const position = {
          start: self.start,
          end: self.end,
          firstLine: self.lastLine,
          lastLine: self.lineNumber,
          firstColumn: self.lastColumn,
          lastColumn: lines
            ? lines[lines.length - 1].length - 1
            : self.lastColumn + m[0].length
        };
        mix(self, position);
        var match;
        // for error report
        match = self.match = m[0];

        // all matches
        self.matches = m;
        // may change by user
        self.text = match;
        // matched content utils now
        self.matched += match;
        ret = action && action.call(self);
        if (ret === undefined) {
          ret = token;
        } else {
          ret = self.mapSymbol(ret);
        }
        input = input.slice(match.length);
        self.input = input;

        if (ret) {
          self.token = self.mapReverseSymbol(ret);
          if (ret === self.mapHiddenSymbol() && skipHidden) {
            return self.lex();
          }
          return {
            text: self.text,
            token: self.token,
            t: ret,
            ...position
          };
        } else {
          // ignore
          return self.lex();
        }
      }
    }
  }
};
Lexer.STATIC = {
  INITIAL_STATE: "I",
  DEBUG_CONTEXT_LIMIT: 20,
  EOF_TOKEN: "$EOF",
  UNKNOWN_TOKEN: "$UNKNOWN",
  HIDDEN_TOKEN: "$HIDDEN"
};
var lexer = new Lexer({
  rules: [
    {
      regexp: /^\s+/,
      token: "$HIDDEN"
    },
    {
      regexp: /^[0-9]+(\.[0-9]+)?\b/,
      token: "NUMBER"
    },
    {
      regexp: /^\+/,
      token: "+"
    },
    {
      regexp: /^-/,
      token: "-"
    },
    {
      regexp: /^\(/,
      token: "("
    },
    {
      regexp: /^\)/,
      token: ")"
    },
    {
      regexp: /^\*/,
      token: "*"
    },
    {
      regexp: /^\//,
      token: "/"
    },
    {
      regexp: /^\^/,
      token: "^"
    },
    {
      regexp: /^./,
      token: "ERROR_LA"
    }
  ],
  isCompress: false
});
var parser = {
  productions: [
    ["$START", ["Exp"]],
    ["Exp", ["primaryExpression"]],
    [
      "Exp",
      ["Exp", "+", "Exp"],
      function() {
        return { v: this.$1.v + this.$3.v, l: this.$1, r: this.$3, op: "+" };
      }
    ],
    [
      "Exp",
      ["Exp", "^", "Exp"],
      function() {
        return {
          v: Math.pow(this.$1.v, this.$3.v),
          l: this.$1,
          r: this.$3,
          op: "^"
        };
      }
    ],
    [
      "Exp",
      ["Exp", "-", "Exp"],
      function() {
        return { v: this.$1.v - this.$3.v, l: this.$1, r: this.$3, op: "-" };
      }
    ],
    [
      "Exp",
      ["Exp", "*", "Exp"],
      function() {
        return { v: this.$1.v * this.$3.v, l: this.$1, r: this.$3, op: "*" };
      }
    ],
    [
      "Exp",
      ["Exp", "/", "Exp"],
      function() {
        return { v: this.$1.v / this.$3.v, l: this.$1, r: this.$3, op: "/" };
      }
    ],
    [
      "primaryExpression",
      ["(", "Exp", ")"],
      function() {
        return this.$2;
      }
    ],
    [
      "primaryExpression",
      ["NUMBER"],
      function() {
        return { v: Number(this.$1) };
      }
    ]
  ],
  productionIndexMap: {
    symbol: 0,
    rhs: 1,
    action: 2,
    label: 3
  },
  getProductionItemByType: function(p, itemType) {
    if (this.isCompress) {
      return p[this.productionIndexMap[itemType]];
    }
    return p[itemType];
  },
  getProductionSymbol: function(p) {
    return this.getProductionItemByType(p, "symbol");
  },
  getProductionRhs: function(p) {
    return this.getProductionItemByType(p, "rhs");
  },
  getProductionAction: function(p) {
    return this.getProductionItemByType(p, "action");
  },
  getProductionLabel: function(p) {
    return this.getProductionItemByType(p, "label");
  },
  isCompress: 1
};
parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
parser.getProductionRhs = parser.getProductionRhs.bind(parser);
parser.getProductionAction = parser.getProductionAction.bind(parser);
parser.getProductionLabel = parser.getProductionLabel.bind(parser);
parser.lexer = lexer;
function peekStack(stack, n) {
  n = n || 1;
  return stack[stack.length - n];
}
var GrammarConst = {
  SHIFT_TYPE: 1,
  REDUCE_TYPE: 2,
  ACCEPT_TYPE: 0,
  TYPE_INDEX: 0,
  PRODUCTION_INDEX: 1,
  TO_INDEX: 2
};
parser.table = {
  gotos: {
    "0": {
      Exp: 3,
      primaryExpression: 4
    },
    "2": {
      Exp: 5,
      primaryExpression: 4
    },
    "6": {
      Exp: 12,
      primaryExpression: 4
    },
    "7": {
      Exp: 13,
      primaryExpression: 4
    },
    "8": {
      Exp: 14,
      primaryExpression: 4
    },
    "9": {
      Exp: 15,
      primaryExpression: 4
    },
    "10": {
      Exp: 16,
      primaryExpression: 4
    }
  },
  action: {
    "0": {
      NUMBER: [1, undefined, 1],
      "(": [1, undefined, 2]
    },
    "1": {
      $EOF: [2, 8],
      "*": [2, 8],
      "+": [2, 8],
      "-": [2, 8],
      "/": [2, 8],
      "^": [2, 8],
      ")": [2, 8]
    },
    "2": {
      NUMBER: [1, undefined, 1],
      "(": [1, undefined, 2]
    },
    "3": {
      $EOF: [0],
      "+": [1, undefined, 6],
      "-": [1, undefined, 7],
      "*": [1, undefined, 8],
      "/": [1, undefined, 9],
      "^": [1, undefined, 10]
    },
    "4": {
      $EOF: [2, 1],
      "*": [2, 1],
      "+": [2, 1],
      "-": [2, 1],
      "/": [2, 1],
      "^": [2, 1],
      ")": [2, 1]
    },
    "5": {
      "+": [1, undefined, 6],
      "-": [1, undefined, 7],
      ")": [1, undefined, 11],
      "*": [1, undefined, 8],
      "/": [1, undefined, 9],
      "^": [1, undefined, 10]
    },
    "6": {
      NUMBER: [1, undefined, 1],
      "(": [1, undefined, 2]
    },
    "7": {
      NUMBER: [1, undefined, 1],
      "(": [1, undefined, 2]
    },
    "8": {
      NUMBER: [1, undefined, 1],
      "(": [1, undefined, 2]
    },
    "9": {
      NUMBER: [1, undefined, 1],
      "(": [1, undefined, 2]
    },
    "10": {
      NUMBER: [1, undefined, 1],
      "(": [1, undefined, 2]
    },
    "11": {
      $EOF: [2, 7],
      "*": [2, 7],
      "+": [2, 7],
      "-": [2, 7],
      "/": [2, 7],
      "^": [2, 7],
      ")": [2, 7]
    },
    "12": {
      $EOF: [2, 2],
      "*": [1, undefined, 8],
      "+": [2, 2],
      "-": [2, 2],
      "/": [1, undefined, 9],
      "^": [1, undefined, 10],
      ")": [2, 2]
    },
    "13": {
      $EOF: [2, 4],
      "*": [1, undefined, 8],
      "+": [2, 4],
      "-": [2, 4],
      "/": [1, undefined, 9],
      "^": [1, undefined, 10],
      ")": [2, 4]
    },
    "14": {
      $EOF: [2, 5],
      "*": [2, 5],
      "+": [2, 5],
      "-": [2, 5],
      "/": [2, 5],
      "^": [1, undefined, 10],
      ")": [2, 5]
    },
    "15": {
      $EOF: [2, 6],
      "*": [2, 6],
      "+": [2, 6],
      "-": [2, 6],
      "/": [2, 6],
      "^": [1, undefined, 10],
      ")": [2, 6]
    },
    "16": {
      $EOF: [2, 3],
      "*": [2, 3],
      "+": [2, 3],
      "-": [2, 3],
      "/": [2, 3],
      "^": [1, undefined, 10],
      ")": [2, 3]
    }
  }
};
parser.parse = function parse(input, options) {
  options = options || {};
  var { onErrorRecovery } = options;
  var filename = options.filename;
  var state, token, ret, action, $;
  var self = this;
  var { getProductionSymbol, getProductionRhs, getProductionAction } = self;
  var lexer = self.lexer;
  var table = self.table;
  var gotos = table.gotos;
  var tableAction = table.action;
  var productions = self.productions;
  // for debug info
  var prefix = filename ? "in file: " + filename + " " : "";
  var valueStack = [];
  var stateStack = [0];
  var symbolStack = [];
  lexer.resetInput(input);
  while (1) {
    // retrieve state number from top of stack
    state = peekStack(stateStack);
    if (!token) {
      token = lexer.lex();
    }
    if (token) {
      // read action for current state and first input
      action = tableAction[state] && tableAction[state][token.t];
    } else {
      action = null;
    }

    if (!action) {
      const map = [];
      map[GrammarConst.SHIFT_TYPE] = "shift";
      map[GrammarConst.REDUCE_TYPE] = "reduce";
      map[GrammarConst.ACCEPT_TYPE] = "accept";
      var expectedInfo = [];
      var expected = {};
      if (tableAction[state]) {
        each(tableAction[state], function(v, symbolForState) {
          action = v[GrammarConst.TYPE_INDEX];
          const actionStr = map[action];
          const arr = (expected[actionStr] = expected[actionStr] || []);
          const s = self.lexer.mapReverseSymbol(symbolForState);
          arr.push(s);
          expectedInfo.push(actionStr + ":" + s);
        });
      }
      const error =
        prefix +
        "syntax error at line " +
        lexer.lineNumber +
        ":\n" +
        lexer.showDebugInfo() +
        "\n" +
        "expect " +
        expectedInfo.join(", ");
      throw new Error(error);
    }

    switch (action[GrammarConst.TYPE_INDEX]) {
      case GrammarConst.SHIFT_TYPE:
        symbolStack.push(token.t);
        valueStack.push(lexer.text);
        // push state
        stateStack.push(action[GrammarConst.TO_INDEX]);
        // allow to read more
        token = null;
        break;

      case GrammarConst.REDUCE_TYPE:
        var production = productions[action[GrammarConst.PRODUCTION_INDEX]];
        var reducedSymbol = getProductionSymbol(production);
        var reducedAction = getProductionAction(production);
        var reducedRhs = getProductionRhs(production);
        var len = reducedRhs.length;
        $ = peekStack(valueStack, len); // default to $ = $1
        ret = undefined;
        self.$ = $;
        for (var i = 0; i < len; i++) {
          self["$" + (len - i)] = peekStack(valueStack, i + 1);
        }
        if (reducedAction) {
          ret = reducedAction.call(self);
        }
        if (ret !== undefined) {
          $ = ret;
        } else {
          $ = self.$;
        }
        var reverseIndex = len * -1;
        stateStack.splice(reverseIndex, len);
        valueStack.splice(reverseIndex, len);
        symbolStack.splice(reverseIndex, len);
        symbolStack.push(reducedSymbol);
        valueStack.push($);
        var newState = gotos[peekStack(stateStack)][reducedSymbol];
        stateStack.push(newState);
        break;

      case GrammarConst.ACCEPT_TYPE:
        return $;
    }
  }
};

  return parser;
  })();

    export default cal;
