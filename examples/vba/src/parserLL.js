/*
Generated By kison v0.5.5

Generate time: Wed Oct 13 2021 13:24:33 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var AstNode = class AstNode {
    parent = null;
    symbol = undefined;
    label = undefined;
    type = undefined;

    constructor(cfg) {
      Object.assign(this, cfg);
      if (cfg.children) {
        this.setChildren(cfg.children);
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }
      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;
      for (const c of cs) {
        c.parent = this;
      }
    }

    toJSON() {
      const ret = {};
      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          ret[k] = this[k];
        }
      }
      return ret;
    }
  };
  var filterRhs = function (rhs) {
    return rhs.filter((r) => typeof r === 'string');
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n) {
    n = n || 1;
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s);
    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (error, astStack) {
    const errorNode = new AstNode({
      type: 'token',
      error,
      ...error.lexer,
    });
    peekStack(astStack).addChild(errorNode);
    while (astStack.length !== 1) {
      const ast = astStack.pop();
      if (ast.symbol && isExtraAstNode(ast)) {
        const topAst = peekStack(astStack);
        topAst.children.pop();
        topAst.addChildren(ast.children);
      }
    }
    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;
    if (recoveryTokens[recoveryTokens.length - 1]?.token === EOF_TOKEN) {
      eof = recoveryTokens.pop();
    }
    recoveryTokens.push(token);
    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (getExpected) {
    const expected = getExpected();
    const tips = [];
    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }
    tips.push("current token: '" + lexer.getCurrentToken().token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          lexer.lineNumber +
          ':\n' +
          lexer.showDebugInfo(),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }
    if (ast.children) {
      let children;
      let childrenChanged;
      while (true) {
        let changed = false;
        let index = 0;
        children = [];
        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });
          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }
          changed = changed || node !== c;
          index++;
        }
        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }
      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          cleanAst(c, transformNode);
        }
      }
    }
    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    let ast = astStack[0];
    ast = ast?.children?.[0];
    ast = ast?.children?.[0];
    if (ast) {
      ast.parent = null;
    }
    if (raw) {
      return ast;
    }
    return ast && cleanAst(ast, transformNode);
  };
  var checkProductionLabelIsSame = function (node, parent) {
    if (node.label || parent.label) {
      if (node.label === parent.label) {
        return node.children;
      }
      return node;
    }
    return node.children;
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.token || node.error || node.symbol !== parent.symbol) {
      return node;
    }
    if (parent.children.length === 1) {
      // do not check label
      // replace label!
      parent.label = node.label;
      return node.children;
    }
    if (node.children.length > 1) {
      return node;
    }
    // drill down to token
    if (node.children[0]?.token) {
      // do not check label
      // parent.label = node.label;
      return node.children;
    }
    return checkProductionLabelIsSame(node, parent);
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isOneOrMoreSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && s.endsWith('+');
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && s.endsWith('?');
  };
  var normalizeSymbol = function (s) {
    return isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
      ? s.slice(0, -1)
      : s;
  };
  var isZeroOrMoreSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && s.endsWith('*');
  };
  var rootSmUnit = undefined;
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var productionsBySymbol = {};
  var cachedStateMatchMap = undefined;
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var Lexer = function (cfg) {
    this.nextTokens = [];
    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const ruleIndexMap = (this.ruleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      filter: 3,
      state: 4,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([
      STATIC.EOF_TOKEN,
      STATIC.UNKNOWN_TOKEN,
      STATIC.HIDDEN_TOKEN,
    ]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();

    this.regexpIndex = this.isCompress ? this.ruleIndexMap.regexp : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;

    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });
    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    }
    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[ruleIndexMap.token] = errorRule.token;
      errorRuleCompress[ruleIndexMap.regexp] = errorRule.regexp;
    }
    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];
      if (pattern.test) {
        let source = pattern.source;
        if (source.startsWith('^')) {
          source = source.slice(1);
        }
        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;
        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = undefined;
      this.tokensQueue = [];
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.ruleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];
      for (const r of this.rules) {
        var filter = this.getRuleItem(r, 'filter');
        if (filter) {
          if (filter.call(this)) {
            rules.push(r);
          }
          continue;
        }
        var state = this.getRuleItem(r, 'state');
        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }
      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n) {
      n = n || 1;
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num) {
      num = num || 1;
      var ret;
      while (num--) {
        ret = this.stateStack.pop();
      }
      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function () {
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { matched, match, input } = this;

      matched = matched.slice(0, matched.length - match.length);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? '...' : '') +
          matched
            .slice(0 - DEBUG_CONTEXT_LIMIT)
            .split('\n')
            .join(' '),
        next = match + input.slice(this.end);
      //#JSCOVERAGE_ENDIF
      next =
        next.slice(0, DEBUG_CONTEXT_LIMIT).split('\n').join(' ') +
        (next.length > DEBUG_CONTEXT_LIMIT ? '...' : '');
      return past + next + '\n' + new Array(past.length + 1).join('-') + '^';
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (regexp) {
      if (regexp.test) {
        regexp.lastIndex = this.end;
        const ret = regexp.exec(this.input);
        if (ret && ret.index !== this.end) {
          return null;
        }
        return ret;
      }
      return regexp.call(this, this);
    },
    pushToken: function (token) {
      const tokens = this.tokens;
      if (tokens[tokens.length - 1]?.token === Lexer.STATIC.EOF_TOKEN) {
        tokens.pop();
      }
      tokens.push(token);
    },
    lex: function () {
      const { EOF_TOKEN, HIDDEN_TOKEN } = Lexer.STATIC;

      const token = this.nextToken();
      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];
      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }
      this.tokens.push(token);
      if (token.token === HIDDEN_TOKEN || !token.token) {
        return this.lex();
      }
      return token;
    },
    getCurrentToken: function () {
      if (this.tokens[this.tokens.length - 1]) {
        return this.tokens[this.tokens.length - 1];
      }
      return this.lex();
    },
    getLastToken: function () {
      return this.tokens[this.tokens.length - 2] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;
      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }
      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);
        if (code === undefined || isNaN(code)) {
          return '';
        }
        return String.fromCodePoint(code);
      }
      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }
      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }
      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();

      var { input } = this;

      var { env = this.defaultEnv } = this.options;

      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        var regexp = this.getRuleItem(rule, 'regexp'),
          token = this.getRuleItem(rule, 'token'),
          action = this.getRuleItem(rule, 'action');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        }

        //#JSCOVERAGE_ENDIF
        if ((m = this.matchRegExp(regexp))) {
          this.start = this.end;
          this.end += m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: this.start,
            end: this.end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          Object.assign(this, position);

          var match;
          // for error report
          match = this.match = m[0];

          // all matches
          this.matches = m;
          // may change by user
          this.text = match;
          // matched content utils now
          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
    HIDDEN_TOKEN: '$HIDDEN',
  };
  var lexer = new Lexer({
    rules: [
      ['ACCESS', /ACCESS/gi],
      ['ADDRESSOF', /ADDRESSOF/gi],
      ['ALIAS', /ALIAS/gi],
      ['AND', /AND/gi],
      ['ATTRIBUTE', /ATTRIBUTE/gi],
      ['APPACTIVATE', /APPACTIVATE/gi],
      ['APPEND', /APPEND/gi],
      ['AS', /AS/gi],
      ['BEGIN', /BEGIN/gi],
      ['BEEP', /BEEP/gi],
      ['BINARY', /BINARY/gi],
      ['BOOLEAN', /BOOLEAN/gi],
      ['BYVAL', /BYVAL/gi],
      ['BYREF', /BYREF/gi],
      ['BYTE', /BYTE/gi],
      ['CALL', /CALL/gi],
      ['CASE', /CASE/gi],
      ['CHDIR', /CHDIR/gi],
      ['CHDRIVE', /CHDRIVE/gi],
      ['CLASS', /CLASS/gi],
      ['CLOSE', /CLOSE/gi],
      ['COLLECTION', /COLLECTION/gi],
      ['CONST', /CONST/gi],
      ['DATABASE', /DATABASE/gi],
      ['DATE', /DATE/gi],
      ['DECLARE', /DECLARE/gi],
      ['DEFBOOL', /DEFBOOL/gi],
      ['DEFBYTE', /DEFBYTE/gi],
      ['DEFDATE', /DEFDATE/gi],
      ['DEFDBL', /DEFDBL/gi],
      ['DEFDEC', /DEFDEC/gi],
      ['DEFCUR', /DEFCUR/gi],
      ['DEFINT', /DEFINT/gi],
      ['DEFLNG', /DEFLNG/gi],
      ['DEFOBJ', /DEFOBJ/gi],
      ['DEFSNG', /DEFSNG/gi],
      ['DEFSTR', /DEFSTR/gi],
      ['DEFVAR', /DEFVAR/gi],
      ['DELETESETTING', /DELETESETTING/gi],
      ['DIM', /DIM/gi],
      ['DO', /DO/gi],
      ['DOUBLE', /DOUBLE/gi],
      ['EACH', /EACH/gi],
      ['ELSE', /ELSE/gi],
      ['ELSEIF', /ELSEIF/gi],
      ['END_ENUM', /END ENUM/gi],
      ['END_FUNCTION', /END FUNCTION/gi],
      ['END_IF', /END IF/gi],
      ['END_PROPERTY', /END PROPERTY/gi],
      ['END_SELECT', /END SELECT/gi],
      ['END_SUB', /END SUB/gi],
      ['END_TYPE', /END TYPE/gi],
      ['END_WITH', /END WITH/gi],
      ['END', /END/gi],
      ['ENUM', /ENUM/gi],
      ['EQV', /EQV/gi],
      ['ERASE', /ERASE/gi],
      ['ERROR', /ERROR/gi],
      ['EVENT', /EVENT/gi],
      ['EXIT_DO', /EXIT DO/gi],
      ['EXIT_FOR', /EXIT FOR/gi],
      ['EXIT_FUNCTION', /EXIT FUNCTION/gi],
      ['EXIT_PROPERTY', /EXIT PROPERTY/gi],
      ['EXIT_SUB', /EXIT SUB/gi],
      ['FALSE', /FALSE/gi],
      ['FILECOPY', /FILECOPY/gi],
      ['FRIEND', /FRIEND/gi],
      ['FOR', /FOR/gi],
      ['FUNCTION', /FUNCTION/gi],
      ['GET', /GET/gi],
      ['GLOBAL', /GLOBAL/gi],
      ['GOSUB', /GOSUB/gi],
      ['GOTO', /GOTO/gi],
      ['IF', /IF/gi],
      ['IMP', /IMP/gi],
      ['IMPLEMENTS', /IMPLEMENTS/gi],
      ['IN', /IN/gi],
      ['INPUT', /INPUT/gi],
      ['IS', /IS/gi],
      ['INTEGER', /INTEGER/gi],
      ['KILL', /KILL/gi],
      ['LOAD', /LOAD/gi],
      ['LOCK', /LOCK/gi],
      ['LONG', /LONG/gi],
      ['LOOP', /LOOP/gi],
      ['LEN', /LEN/gi],
      ['LET', /LET/gi],
      ['LIB', /LIB/gi],
      ['LIKE', /LIKE/gi],
      ['LINE_INPUT', /LINE INPUT/gi],
      ['LOCK_READ', /LOCK READ/gi],
      ['LOCK_WRITE', /LOCK WRITE/gi],
      ['LOCK_READ_WRITE', /LOCK READ WRITE/gi],
      ['LSET', /LSET/gi],
      ['MACRO_CONST', /#CONST/gi],
      ['MACRO_IF', /#IF/gi],
      ['MACRO_ELSEIF', /#ELSEIF/gi],
      ['MACRO_ELSE', /#ELSE/gi],
      ['MACRO_END_IF', /#END IF/gi],
      ['ME', /ME/gi],
      ['MID', /MID/gi],
      ['MKDIR', /MKDIR/gi],
      ['MOD', /MOD/gi],
      ['NAME', /NAME/gi],
      ['NEXT', /NEXT/gi],
      ['NEW', /NEW/gi],
      ['NOT', /NOT/gi],
      ['NOTHING', /NOTHING/gi],
      ['NULL', /NULL/gi],
      ['ON', /ON/gi],
      ['ON_ERROR', /ON ERROR/gi],
      ['ON_LOCAL_ERROR', /ON LOCAL ERROR/gi],
      ['OPEN', /OPEN/gi],
      ['OPTIONAL', /OPTIONAL/gi],
      ['OPTION_BASE', /OPTION BASE/gi],
      ['OPTION_EXPLICIT', /OPTION EXPLICIT/gi],
      ['OPTION_COMPARE', /OPTION COMPARE/gi],
      ['OPTION_PRIVATE_MODULE', /OPTION PRIVATE MODULE/gi],
      ['OR', /OR/gi],
      ['OUTPUT', /OUTPUT/gi],
      ['PARAMARRAY', /PARAMARRAY/gi],
      ['PRESERVE', /PRESERVE/gi],
      ['PRINT', /PRINT/gi],
      ['PRIVATE', /PRIVATE/gi],
      ['PROPERTY_GET', /PROPERTY GET/gi],
      ['PROPERTY_LET', /PROPERTY LET/gi],
      ['PROPERTY_SET', /PROPERTY SET/gi],
      ['PTRSAFE', /PTRSAFE/gi],
      ['PUBLIC', /PUBLIC/gi],
      ['PUT', /PUT/gi],
      ['RANDOM', /RANDOM/gi],
      ['RANDOMIZE', /RANDOMIZE/gi],
      ['RAISEEVENT', /RAISEEVENT/gi],
      ['READ', /READ/gi],
      ['READ_WRITE', /READ WRITE/gi],
      ['REDIM', /REDIM/gi],
      ['REM', /REM/gi],
      ['RESET', /RESET/gi],
      ['RESUME', /RESUME/gi],
      ['RETURN', /RETURN/gi],
      ['RMDIR', /RMDIR/gi],
      ['RSET', /RSET/gi],
      ['SAVEPICTURE', /SAVEPICTURE/gi],
      ['SAVESETTING', /SAVESETTING/gi],
      ['SEEK', /SEEK/gi],
      ['SELECT', /SELECT/gi],
      ['SENDKEYS', /SENDKEYS/gi],
      ['SET', /SET/gi],
      ['SETATTR', /SETATTR/gi],
      ['SHARED', /SHARED/gi],
      ['SINGLE', /SINGLE/gi],
      ['SPC', /SPC/gi],
      ['STATIC', /STATIC/gi],
      ['STEP', /STEP/gi],
      ['STOP', /STOP/gi],
      ['STRING', /STRING/gi],
      ['SUB', /SUB/gi],
      ['TAB', /TAB/gi],
      ['TEXT', /TEXT/gi],
      ['THEN', /THEN/gi],
      ['TIME', /TIME/gi],
      ['TO', /TO/gi],
      ['TRUE', /TRUE/gi],
      ['TYPE', /TYPE/gi],
      ['TYPEOF', /TYPEOF/gi],
      ['UNLOAD', /UNLOAD/gi],
      ['UNLOCK', /UNLOCK/gi],
      ['UNTIL', /UNTIL/gi],
      ['VARIANT', /VARIANT/gi],
      ['VERSION', /VERSION/gi],
      ['WEND', /WEND/gi],
      ['WHILE', /WHILE/gi],
      ['WIDTH', /WIDTH/gi],
      ['WITH', /WITH/gi],
      ['WITHEVENTS', /WITHEVENTS/gi],
      ['WRITE', /WRITE/gi],
      ['XOR', /XOR/gi],
      ['AMPERSAND', /&/g],
      ['ASSIGN', /:=/g],
      ['DIV', /\//g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS', /\-/g],
      ['MINUS_EQ', /\-=/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS', /\+/g],
      ['PLUS_EQ', /\+=/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['$HIDDEN', /\s+/g],
      ['STRINGLITERAL', /"[^"\r\n]*"/g],
      ['INTEGERLITERAL', /(\+|-)?[0-9]+/g],
      ['IDENTIFIER', /\w[\w\d]*/g],
      ['moduleBodyElement+', /moduleBodyElement\+/g],
      ["'|'", /'\|'/g],
      ['blockStmt+', /blockStmt\+/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      [',', /,/g],
      [';', /;/g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;
    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }
      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }
    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);
    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      ['progam', ['moduleBody']],
      ['progam', []],
      [
        '(zeroMore_moduleBodyElement_1)1_',
        ['moduleBodyElement', '(zeroMore_moduleBodyElement_1)1_'],
      ],
      ['(zeroMore_moduleBodyElement_1)1_', []],
      ['zeroMore_moduleBodyElement_1', ['(zeroMore_moduleBodyElement_1)1_']],
      ['moduleBody', ['moduleBodyElement', 'zeroMore_moduleBodyElement_1']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      ['subStmt', ['visibility', '_1(subStmt)']],
      ['_2(subStmt)', ['END_SUB']],
      ['_2(subStmt)', ['block', 'END_SUB']],
      ['subStmt', ['STATIC', 'SUB', 'IDENTIFIER', '_2(subStmt)']],
      ['_3(subStmt)', ['END_SUB']],
      ['_3(subStmt)', ['block', 'END_SUB']],
      ['subStmt', ['SUB', 'IDENTIFIER', '_3(subStmt)']],
      ['_1(_1(subStmt))', ['block', 'END_SUB']],
      ['_1(_1(subStmt))', ['END_SUB']],
      ['_1(subStmt)', ['SUB', 'IDENTIFIER', '_1(_1(subStmt))']],
      ['_2(_1(subStmt))', ['block', 'END_SUB']],
      ['_2(_1(subStmt))', ['END_SUB']],
      ['_1(subStmt)', ['STATIC', 'SUB', 'IDENTIFIER', '_2(_1(subStmt))']],
      ['_1(_2(subStmt))', ['block', 'END_SUB']],
      ['_1(_2(subStmt))', ['END_SUB']],
      ['_2(subStmt)', ['argList', '_1(_2(subStmt))']],
      ['_1(_3(subStmt))', ['block', 'END_SUB']],
      ['_1(_3(subStmt))', ['END_SUB']],
      ['_3(subStmt)', ['argList', '_1(_3(subStmt))']],
      ['_1(_1(_1(subStmt)))', ['END_SUB']],
      ['_1(_1(_1(subStmt)))', ['block', 'END_SUB']],
      ['_1(_1(subStmt))', ['argList', '_1(_1(_1(subStmt)))']],
      ['_1(_2(_1(subStmt)))', ['END_SUB']],
      ['_1(_2(_1(subStmt)))', ['block', 'END_SUB']],
      ['_2(_1(subStmt))', ['argList', '_1(_2(_1(subStmt)))']],
      ['(zeroMore_blockStmt_2)1_', ['blockStmt', '(zeroMore_blockStmt_2)1_']],
      ['(zeroMore_blockStmt_2)1_', []],
      ['zeroMore_blockStmt_2', ['(zeroMore_blockStmt_2)1_']],
      ['block', ['blockStmt', 'zeroMore_blockStmt_2']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        '(zeroMore_iCS_B_ProcedureCall_14_group_2_3)1_',
        [
          'iCS_B_ProcedureCall_14_group_2',
          '(zeroMore_iCS_B_ProcedureCall_14_group_2_3)1_',
        ],
      ],
      ['(zeroMore_iCS_B_ProcedureCall_14_group_2_3)1_', []],
      [
        'zeroMore_iCS_B_ProcedureCall_14_group_2_3',
        ['(zeroMore_iCS_B_ProcedureCall_14_group_2_3)1_'],
      ],
      [
        '_1(iCS_B_ProcedureCall)',
        ['zeroMore_iCS_B_ProcedureCall_14_group_2_3'],
      ],
      [
        '_1(iCS_B_ProcedureCall)',
        ['argsCall', 'zeroMore_iCS_B_ProcedureCall_14_group_2_3'],
      ],
      ['iCS_B_ProcedureCall', ['IDENTIFIER', '_1(iCS_B_ProcedureCall)']],
      [
        '(zeroMore_argsCall_15_group_0_4)1_',
        ['argsCall_15_group_0', '(zeroMore_argsCall_15_group_0_4)1_'],
      ],
      ['(zeroMore_argsCall_15_group_0_4)1_', []],
      [
        'zeroMore_argsCall_15_group_0_4',
        ['(zeroMore_argsCall_15_group_0_4)1_'],
      ],
      [
        '(zeroMore_argsCall_15_group_7_5)1_',
        ['argsCall_15_group_7', '(zeroMore_argsCall_15_group_7_5)1_'],
      ],
      ['(zeroMore_argsCall_15_group_7_5)1_', []],
      [
        'zeroMore_argsCall_15_group_7_5',
        ['(zeroMore_argsCall_15_group_7_5)1_'],
      ],
      [
        'argsCall',
        [
          'zeroMore_argsCall_15_group_0_4',
          'argCall',
          'zeroMore_argsCall_15_group_7_5',
        ],
      ],
      [
        'argsCall',
        [
          'zeroMore_argsCall_16_group_0_6',
          'argCall',
          'zeroMore_argsCall_16_group_7_7',
        ],
      ],
      [
        'argsCall',
        [
          'zeroMore_argsCall_17_group_0_8',
          'argCall',
          'zeroMore_argsCall_17_group_7_9',
        ],
      ],
      [
        'argsCall',
        [
          'zeroMore_argsCall_18_group_0_10',
          'argCall',
          'zeroMore_argsCall_18_group_7_11',
        ],
      ],
      [
        '(zeroMore_argsCall_16_group_0_6)1_',
        ['argsCall_16_group_0', '(zeroMore_argsCall_16_group_0_6)1_'],
      ],
      ['(zeroMore_argsCall_16_group_0_6)1_', []],
      [
        'zeroMore_argsCall_16_group_0_6',
        ['(zeroMore_argsCall_16_group_0_6)1_'],
      ],
      [
        '(zeroMore_argsCall_16_group_7_7)1_',
        ['argsCall_16_group_7', '(zeroMore_argsCall_16_group_7_7)1_'],
      ],
      ['(zeroMore_argsCall_16_group_7_7)1_', []],
      [
        'zeroMore_argsCall_16_group_7_7',
        ['(zeroMore_argsCall_16_group_7_7)1_'],
      ],
      [
        '(zeroMore_argsCall_17_group_0_8)1_',
        ['argsCall_17_group_0', '(zeroMore_argsCall_17_group_0_8)1_'],
      ],
      ['(zeroMore_argsCall_17_group_0_8)1_', []],
      [
        'zeroMore_argsCall_17_group_0_8',
        ['(zeroMore_argsCall_17_group_0_8)1_'],
      ],
      [
        '(zeroMore_argsCall_17_group_7_9)1_',
        ['argsCall_17_group_7', '(zeroMore_argsCall_17_group_7_9)1_'],
      ],
      ['(zeroMore_argsCall_17_group_7_9)1_', []],
      [
        'zeroMore_argsCall_17_group_7_9',
        ['(zeroMore_argsCall_17_group_7_9)1_'],
      ],
      [
        '(zeroMore_argsCall_18_group_0_10)1_',
        ['argsCall_18_group_0', '(zeroMore_argsCall_18_group_0_10)1_'],
      ],
      ['(zeroMore_argsCall_18_group_0_10)1_', []],
      [
        'zeroMore_argsCall_18_group_0_10',
        ['(zeroMore_argsCall_18_group_0_10)1_'],
      ],
      [
        '(zeroMore_argsCall_18_group_7_11)1_',
        ['argsCall_18_group_7', '(zeroMore_argsCall_18_group_7_11)1_'],
      ],
      ['(zeroMore_argsCall_18_group_7_11)1_', []],
      [
        'zeroMore_argsCall_18_group_7_11',
        ['(zeroMore_argsCall_18_group_7_11)1_'],
      ],
      ['_1(argCall)', ['valueStmt']],
      ['_1(argCall)', ['RPAREN', 'valueStmt']],
      ['argCall', ['LPAREN', '_1(argCall)']],
      ['_2(argCall)', ['valueStmt']],
      ['_2(argCall)', ['RPAREN', 'valueStmt']],
      ['argCall', ['BYREF', '_2(argCall)']],
      ['_3(argCall)', []],
      ['argCall', ['RPAREN', 'valueStmt', '_3(argCall)']],
      ['_4(argCall)', []],
      ['argCall', ['valueStmt', '_4(argCall)']],
      ['_5(argCall)', ['valueStmt']],
      ['_5(argCall)', ['RPAREN', 'valueStmt']],
      ['argCall', ['BYVAL', '_5(argCall)']],
      ['_6(argCall)', ['valueStmt']],
      ['_6(argCall)', ['RPAREN', 'valueStmt']],
      ['argCall', ['PARAMARRAY', '_6(argCall)']],
      ['_1(_1(argCall))', ['RPAREN', 'valueStmt']],
      ['_1(_1(argCall))', ['valueStmt']],
      ['_1(argCall)', ['PARAMARRAY', '_1(_1(argCall))']],
      ['_2(_1(argCall))', ['RPAREN', 'valueStmt']],
      ['_2(_1(argCall))', ['valueStmt']],
      ['_1(argCall)', ['BYVAL', '_2(_1(argCall))']],
      ['_3(_1(argCall))', ['RPAREN', 'valueStmt']],
      ['_3(_1(argCall))', ['valueStmt']],
      ['_1(argCall)', ['BYREF', '_3(_1(argCall))']],
      ['_1(dictionaryCallStmt)', []],
      ['_1(dictionaryCallStmt)', ['typeHint']],
      ['dictionaryCallStmt', ['!', 'IDENTIFIER', '_1(dictionaryCallStmt)']],
      ['_1(variableStmt)', ['variableListStmt']],
      ['_1(variableStmt)', ['WITHEVENTS', 'variableListStmt']],
      ['variableStmt', ['DIM', 'STATIC', 'visibility', '_1(variableStmt)']],
      [
        '(zeroMore_variableListStmt_24_group_1_12)1_',
        [
          'variableListStmt_24_group_1',
          '(zeroMore_variableListStmt_24_group_1_12)1_',
        ],
      ],
      ['(zeroMore_variableListStmt_24_group_1_12)1_', []],
      [
        'zeroMore_variableListStmt_24_group_1_12',
        ['(zeroMore_variableListStmt_24_group_1_12)1_'],
      ],
      [
        'variableListStmt',
        ['variableSubStmt', 'zeroMore_variableListStmt_24_group_1_12'],
      ],
      ['_1(variableSubStmt)', []],
      ['_1(variableSubStmt)', ['asTypeClause']],
      ['variableSubStmt', ['IDENTIFIER', '_1(variableSubStmt)']],
      ['_1(_1(variableSubStmt))', ['asTypeClause']],
      ['_1(_1(variableSubStmt))', []],
      ['_1(variableSubStmt)', ['typeHint', '_1(_1(variableSubStmt))']],
      ['_2(_1(variableSubStmt))', ['asTypeClause']],
      ['_2(_1(variableSubStmt))', []],
      [
        '_1(variableSubStmt)',
        ['variableSubStmt_25_group_1', '_2(_1(variableSubStmt))'],
      ],
      ['_1(_2(_1(variableSubStmt)))', []],
      ['_1(_2(_1(variableSubStmt)))', ['asTypeClause']],
      ['_2(_1(variableSubStmt))', ['typeHint', '_1(_2(_1(variableSubStmt)))']],
      [
        '(zeroMore_subscripts_26_group_1_13)1_',
        ['subscripts_26_group_1', '(zeroMore_subscripts_26_group_1_13)1_'],
      ],
      ['(zeroMore_subscripts_26_group_1_13)1_', []],
      [
        'zeroMore_subscripts_26_group_1_13',
        ['(zeroMore_subscripts_26_group_1_13)1_'],
      ],
      ['subscripts', ['subscript_', 'zeroMore_subscripts_26_group_1_13']],
      ['subscript_', ['subscript__27_group_0', 'valueStmt']],
      ['subscript_', ['valueStmt']],
      ['_1(argList)', ['RPAREN']],
      ['_1(argList)', ['argList_28_group_1', 'RPAREN']],
      ['argList', ['LPAREN', '_1(argList)']],
      ['valueStmt', ['literal']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['_paren', ['LPAREN', 'RPAREN']],
      ['arg', ['OPTIONAL', '_1(arg)']],
      ['arg', ['BYVAL', '_2(arg)']],
      ['_3(arg)', []],
      ['_3(arg)', ['argDefaultValue']],
      ['arg', ['PARAMARRAY', 'IDENTIFIER', '_3(arg)']],
      ['_4(arg)', []],
      ['_4(arg)', ['argDefaultValue']],
      ['arg', ['IDENTIFIER', '_4(arg)']],
      ['arg', ['BYREF', '_5(arg)']],
      ['_1(_1(arg))', ['argDefaultValue']],
      ['_1(_1(arg))', []],
      ['_1(arg)', ['IDENTIFIER', '_1(_1(arg))']],
      ['_2(_1(arg))', ['argDefaultValue']],
      ['_2(_1(arg))', []],
      ['_1(arg)', ['PARAMARRAY', 'IDENTIFIER', '_2(_1(arg))']],
      ['_1(arg)', ['BYREF', '_3(_1(arg))']],
      ['_1(arg)', ['BYVAL', '_4(_1(arg))']],
      ['_1(_2(arg))', ['argDefaultValue']],
      ['_1(_2(arg))', []],
      ['_2(arg)', ['IDENTIFIER', '_1(_2(arg))']],
      ['_2(_2(arg))', ['argDefaultValue']],
      ['_2(_2(arg))', []],
      ['_2(arg)', ['PARAMARRAY', 'IDENTIFIER', '_2(_2(arg))']],
      ['_1(_3(arg))', ['argDefaultValue']],
      ['_1(_3(arg))', []],
      ['_3(arg)', ['asTypeClause', '_1(_3(arg))']],
      ['_2(_3(arg))', ['argDefaultValue']],
      ['_2(_3(arg))', []],
      ['_3(arg)', ['_paren', '_2(_3(arg))']],
      ['_3(_3(arg))', ['argDefaultValue']],
      ['_3(_3(arg))', []],
      ['_3(arg)', ['typeHint', '_3(_3(arg))']],
      ['_1(_4(arg))', ['argDefaultValue']],
      ['_1(_4(arg))', []],
      ['_4(arg)', ['asTypeClause', '_1(_4(arg))']],
      ['_2(_4(arg))', ['argDefaultValue']],
      ['_2(_4(arg))', []],
      ['_4(arg)', ['_paren', '_2(_4(arg))']],
      ['_3(_4(arg))', ['argDefaultValue']],
      ['_3(_4(arg))', []],
      ['_4(arg)', ['typeHint', '_3(_4(arg))']],
      ['_1(_5(arg))', ['argDefaultValue']],
      ['_1(_5(arg))', []],
      ['_5(arg)', ['IDENTIFIER', '_1(_5(arg))']],
      ['_2(_5(arg))', ['argDefaultValue']],
      ['_2(_5(arg))', []],
      ['_5(arg)', ['PARAMARRAY', 'IDENTIFIER', '_2(_5(arg))']],
      ['_1(_1(_1(arg)))', []],
      ['_1(_1(_1(arg)))', ['argDefaultValue']],
      ['_1(_1(arg))', ['typeHint', '_1(_1(_1(arg)))']],
      ['_2(_1(_1(arg)))', []],
      ['_2(_1(_1(arg)))', ['argDefaultValue']],
      ['_1(_1(arg))', ['_paren', '_2(_1(_1(arg)))']],
      ['_3(_1(_1(arg)))', []],
      ['_3(_1(_1(arg)))', ['argDefaultValue']],
      ['_1(_1(arg))', ['asTypeClause', '_3(_1(_1(arg)))']],
      ['_1(_2(_1(arg)))', []],
      ['_1(_2(_1(arg)))', ['argDefaultValue']],
      ['_2(_1(arg))', ['typeHint', '_1(_2(_1(arg)))']],
      ['_2(_2(_1(arg)))', []],
      ['_2(_2(_1(arg)))', ['argDefaultValue']],
      ['_2(_1(arg))', ['_paren', '_2(_2(_1(arg)))']],
      ['_3(_2(_1(arg)))', []],
      ['_3(_2(_1(arg)))', ['argDefaultValue']],
      ['_2(_1(arg))', ['asTypeClause', '_3(_2(_1(arg)))']],
      ['_1(_3(_1(arg)))', []],
      ['_1(_3(_1(arg)))', ['argDefaultValue']],
      ['_3(_1(arg))', ['PARAMARRAY', 'IDENTIFIER', '_1(_3(_1(arg)))']],
      ['_2(_3(_1(arg)))', []],
      ['_2(_3(_1(arg)))', ['argDefaultValue']],
      ['_3(_1(arg))', ['IDENTIFIER', '_2(_3(_1(arg)))']],
      ['_1(_4(_1(arg)))', []],
      ['_1(_4(_1(arg)))', ['argDefaultValue']],
      ['_4(_1(arg))', ['PARAMARRAY', 'IDENTIFIER', '_1(_4(_1(arg)))']],
      ['_2(_4(_1(arg)))', []],
      ['_2(_4(_1(arg)))', ['argDefaultValue']],
      ['_4(_1(arg))', ['IDENTIFIER', '_2(_4(_1(arg)))']],
      ['_1(_1(_2(arg)))', []],
      ['_1(_1(_2(arg)))', ['argDefaultValue']],
      ['_1(_2(arg))', ['typeHint', '_1(_1(_2(arg)))']],
      ['_2(_1(_2(arg)))', []],
      ['_2(_1(_2(arg)))', ['argDefaultValue']],
      ['_1(_2(arg))', ['_paren', '_2(_1(_2(arg)))']],
      ['_3(_1(_2(arg)))', []],
      ['_3(_1(_2(arg)))', ['argDefaultValue']],
      ['_1(_2(arg))', ['asTypeClause', '_3(_1(_2(arg)))']],
      ['_1(_2(_2(arg)))', []],
      ['_1(_2(_2(arg)))', ['argDefaultValue']],
      ['_2(_2(arg))', ['typeHint', '_1(_2(_2(arg)))']],
      ['_2(_2(_2(arg)))', []],
      ['_2(_2(_2(arg)))', ['argDefaultValue']],
      ['_2(_2(arg))', ['_paren', '_2(_2(_2(arg)))']],
      ['_3(_2(_2(arg)))', []],
      ['_3(_2(_2(arg)))', ['argDefaultValue']],
      ['_2(_2(arg))', ['asTypeClause', '_3(_2(_2(arg)))']],
      ['_1(_2(_3(arg)))', []],
      ['_1(_2(_3(arg)))', ['argDefaultValue']],
      ['_2(_3(arg))', ['asTypeClause', '_1(_2(_3(arg)))']],
      ['_1(_3(_3(arg)))', []],
      ['_1(_3(_3(arg)))', ['argDefaultValue']],
      ['_3(_3(arg))', ['_paren', '_1(_3(_3(arg)))']],
      ['_2(_3(_3(arg)))', []],
      ['_2(_3(_3(arg)))', ['argDefaultValue']],
      ['_3(_3(arg))', ['asTypeClause', '_2(_3(_3(arg)))']],
      ['_1(_2(_4(arg)))', []],
      ['_1(_2(_4(arg)))', ['argDefaultValue']],
      ['_2(_4(arg))', ['asTypeClause', '_1(_2(_4(arg)))']],
      ['_1(_3(_4(arg)))', []],
      ['_1(_3(_4(arg)))', ['argDefaultValue']],
      ['_3(_4(arg))', ['_paren', '_1(_3(_4(arg)))']],
      ['_2(_3(_4(arg)))', []],
      ['_2(_3(_4(arg)))', ['argDefaultValue']],
      ['_3(_4(arg))', ['asTypeClause', '_2(_3(_4(arg)))']],
      ['_1(_1(_5(arg)))', []],
      ['_1(_1(_5(arg)))', ['argDefaultValue']],
      ['_1(_5(arg))', ['typeHint', '_1(_1(_5(arg)))']],
      ['_2(_1(_5(arg)))', []],
      ['_2(_1(_5(arg)))', ['argDefaultValue']],
      ['_1(_5(arg))', ['_paren', '_2(_1(_5(arg)))']],
      ['_3(_1(_5(arg)))', []],
      ['_3(_1(_5(arg)))', ['argDefaultValue']],
      ['_1(_5(arg))', ['asTypeClause', '_3(_1(_5(arg)))']],
      ['_1(_2(_5(arg)))', []],
      ['_1(_2(_5(arg)))', ['argDefaultValue']],
      ['_2(_5(arg))', ['typeHint', '_1(_2(_5(arg)))']],
      ['_2(_2(_5(arg)))', []],
      ['_2(_2(_5(arg)))', ['argDefaultValue']],
      ['_2(_5(arg))', ['_paren', '_2(_2(_5(arg)))']],
      ['_3(_2(_5(arg)))', []],
      ['_3(_2(_5(arg)))', ['argDefaultValue']],
      ['_2(_5(arg))', ['asTypeClause', '_3(_2(_5(arg)))']],
      ['_1(_1(_1(_1(arg))))', ['argDefaultValue']],
      ['_1(_1(_1(_1(arg))))', []],
      ['_1(_1(_1(arg)))', ['asTypeClause', '_1(_1(_1(_1(arg))))']],
      ['_2(_1(_1(_1(arg))))', ['argDefaultValue']],
      ['_2(_1(_1(_1(arg))))', []],
      ['_1(_1(_1(arg)))', ['_paren', '_2(_1(_1(_1(arg))))']],
      ['_1(_2(_1(_1(arg))))', ['argDefaultValue']],
      ['_1(_2(_1(_1(arg))))', []],
      ['_2(_1(_1(arg)))', ['asTypeClause', '_1(_2(_1(_1(arg))))']],
      ['_1(_1(_2(_1(arg))))', ['argDefaultValue']],
      ['_1(_1(_2(_1(arg))))', []],
      ['_1(_2(_1(arg)))', ['asTypeClause', '_1(_1(_2(_1(arg))))']],
      ['_2(_1(_2(_1(arg))))', ['argDefaultValue']],
      ['_2(_1(_2(_1(arg))))', []],
      ['_1(_2(_1(arg)))', ['_paren', '_2(_1(_2(_1(arg))))']],
      ['_1(_2(_2(_1(arg))))', ['argDefaultValue']],
      ['_1(_2(_2(_1(arg))))', []],
      ['_2(_2(_1(arg)))', ['asTypeClause', '_1(_2(_2(_1(arg))))']],
      ['_1(_1(_3(_1(arg))))', ['argDefaultValue']],
      ['_1(_1(_3(_1(arg))))', []],
      ['_1(_3(_1(arg)))', ['asTypeClause', '_1(_1(_3(_1(arg))))']],
      ['_2(_1(_3(_1(arg))))', ['argDefaultValue']],
      ['_2(_1(_3(_1(arg))))', []],
      ['_1(_3(_1(arg)))', ['_paren', '_2(_1(_3(_1(arg))))']],
      ['_3(_1(_3(_1(arg))))', ['argDefaultValue']],
      ['_3(_1(_3(_1(arg))))', []],
      ['_1(_3(_1(arg)))', ['typeHint', '_3(_1(_3(_1(arg))))']],
      ['_1(_2(_3(_1(arg))))', ['argDefaultValue']],
      ['_1(_2(_3(_1(arg))))', []],
      ['_2(_3(_1(arg)))', ['asTypeClause', '_1(_2(_3(_1(arg))))']],
      ['_2(_2(_3(_1(arg))))', ['argDefaultValue']],
      ['_2(_2(_3(_1(arg))))', []],
      ['_2(_3(_1(arg)))', ['_paren', '_2(_2(_3(_1(arg))))']],
      ['_3(_2(_3(_1(arg))))', ['argDefaultValue']],
      ['_3(_2(_3(_1(arg))))', []],
      ['_2(_3(_1(arg)))', ['typeHint', '_3(_2(_3(_1(arg))))']],
      ['_1(_1(_4(_1(arg))))', ['argDefaultValue']],
      ['_1(_1(_4(_1(arg))))', []],
      ['_1(_4(_1(arg)))', ['asTypeClause', '_1(_1(_4(_1(arg))))']],
      ['_2(_1(_4(_1(arg))))', ['argDefaultValue']],
      ['_2(_1(_4(_1(arg))))', []],
      ['_1(_4(_1(arg)))', ['_paren', '_2(_1(_4(_1(arg))))']],
      ['_3(_1(_4(_1(arg))))', ['argDefaultValue']],
      ['_3(_1(_4(_1(arg))))', []],
      ['_1(_4(_1(arg)))', ['typeHint', '_3(_1(_4(_1(arg))))']],
      ['_1(_2(_4(_1(arg))))', ['argDefaultValue']],
      ['_1(_2(_4(_1(arg))))', []],
      ['_2(_4(_1(arg)))', ['asTypeClause', '_1(_2(_4(_1(arg))))']],
      ['_2(_2(_4(_1(arg))))', ['argDefaultValue']],
      ['_2(_2(_4(_1(arg))))', []],
      ['_2(_4(_1(arg)))', ['_paren', '_2(_2(_4(_1(arg))))']],
      ['_3(_2(_4(_1(arg))))', ['argDefaultValue']],
      ['_3(_2(_4(_1(arg))))', []],
      ['_2(_4(_1(arg)))', ['typeHint', '_3(_2(_4(_1(arg))))']],
      ['_1(_1(_1(_2(arg))))', ['argDefaultValue']],
      ['_1(_1(_1(_2(arg))))', []],
      ['_1(_1(_2(arg)))', ['asTypeClause', '_1(_1(_1(_2(arg))))']],
      ['_2(_1(_1(_2(arg))))', ['argDefaultValue']],
      ['_2(_1(_1(_2(arg))))', []],
      ['_1(_1(_2(arg)))', ['_paren', '_2(_1(_1(_2(arg))))']],
      ['_1(_2(_1(_2(arg))))', ['argDefaultValue']],
      ['_1(_2(_1(_2(arg))))', []],
      ['_2(_1(_2(arg)))', ['asTypeClause', '_1(_2(_1(_2(arg))))']],
      ['_1(_1(_2(_2(arg))))', ['argDefaultValue']],
      ['_1(_1(_2(_2(arg))))', []],
      ['_1(_2(_2(arg)))', ['asTypeClause', '_1(_1(_2(_2(arg))))']],
      ['_2(_1(_2(_2(arg))))', ['argDefaultValue']],
      ['_2(_1(_2(_2(arg))))', []],
      ['_1(_2(_2(arg)))', ['_paren', '_2(_1(_2(_2(arg))))']],
      ['_1(_2(_2(_2(arg))))', ['argDefaultValue']],
      ['_1(_2(_2(_2(arg))))', []],
      ['_2(_2(_2(arg)))', ['asTypeClause', '_1(_2(_2(_2(arg))))']],
      ['_1(_1(_3(_3(arg))))', ['argDefaultValue']],
      ['_1(_1(_3(_3(arg))))', []],
      ['_1(_3(_3(arg)))', ['asTypeClause', '_1(_1(_3(_3(arg))))']],
      ['_1(_1(_3(_4(arg))))', ['argDefaultValue']],
      ['_1(_1(_3(_4(arg))))', []],
      ['_1(_3(_4(arg)))', ['asTypeClause', '_1(_1(_3(_4(arg))))']],
      ['_1(_1(_1(_5(arg))))', ['argDefaultValue']],
      ['_1(_1(_1(_5(arg))))', []],
      ['_1(_1(_5(arg)))', ['asTypeClause', '_1(_1(_1(_5(arg))))']],
      ['_2(_1(_1(_5(arg))))', ['argDefaultValue']],
      ['_2(_1(_1(_5(arg))))', []],
      ['_1(_1(_5(arg)))', ['_paren', '_2(_1(_1(_5(arg))))']],
      ['_1(_2(_1(_5(arg))))', ['argDefaultValue']],
      ['_1(_2(_1(_5(arg))))', []],
      ['_2(_1(_5(arg)))', ['asTypeClause', '_1(_2(_1(_5(arg))))']],
      ['_1(_1(_2(_5(arg))))', ['argDefaultValue']],
      ['_1(_1(_2(_5(arg))))', []],
      ['_1(_2(_5(arg)))', ['asTypeClause', '_1(_1(_2(_5(arg))))']],
      ['_2(_1(_2(_5(arg))))', ['argDefaultValue']],
      ['_2(_1(_2(_5(arg))))', []],
      ['_1(_2(_5(arg)))', ['_paren', '_2(_1(_2(_5(arg))))']],
      ['_1(_2(_2(_5(arg))))', ['argDefaultValue']],
      ['_1(_2(_2(_5(arg))))', []],
      ['_2(_2(_5(arg)))', ['asTypeClause', '_1(_2(_2(_5(arg))))']],
      ['_1(_2(_1(_1(_1(arg)))))', []],
      ['_1(_2(_1(_1(_1(arg)))))', ['argDefaultValue']],
      ['_2(_1(_1(_1(arg))))', ['asTypeClause', '_1(_2(_1(_1(_1(arg)))))']],
      ['_1(_2(_1(_2(_1(arg)))))', []],
      ['_1(_2(_1(_2(_1(arg)))))', ['argDefaultValue']],
      ['_2(_1(_2(_1(arg))))', ['asTypeClause', '_1(_2(_1(_2(_1(arg)))))']],
      ['_1(_2(_1(_3(_1(arg)))))', []],
      ['_1(_2(_1(_3(_1(arg)))))', ['argDefaultValue']],
      ['_2(_1(_3(_1(arg))))', ['asTypeClause', '_1(_2(_1(_3(_1(arg)))))']],
      ['_1(_3(_1(_3(_1(arg)))))', []],
      ['_1(_3(_1(_3(_1(arg)))))', ['argDefaultValue']],
      ['_3(_1(_3(_1(arg))))', ['_paren', '_1(_3(_1(_3(_1(arg)))))']],
      ['_2(_3(_1(_3(_1(arg)))))', []],
      ['_2(_3(_1(_3(_1(arg)))))', ['argDefaultValue']],
      ['_3(_1(_3(_1(arg))))', ['asTypeClause', '_2(_3(_1(_3(_1(arg)))))']],
      ['_1(_2(_2(_3(_1(arg)))))', []],
      ['_1(_2(_2(_3(_1(arg)))))', ['argDefaultValue']],
      ['_2(_2(_3(_1(arg))))', ['asTypeClause', '_1(_2(_2(_3(_1(arg)))))']],
      ['_1(_3(_2(_3(_1(arg)))))', []],
      ['_1(_3(_2(_3(_1(arg)))))', ['argDefaultValue']],
      ['_3(_2(_3(_1(arg))))', ['_paren', '_1(_3(_2(_3(_1(arg)))))']],
      ['_2(_3(_2(_3(_1(arg)))))', []],
      ['_2(_3(_2(_3(_1(arg)))))', ['argDefaultValue']],
      ['_3(_2(_3(_1(arg))))', ['asTypeClause', '_2(_3(_2(_3(_1(arg)))))']],
      ['_1(_2(_1(_4(_1(arg)))))', []],
      ['_1(_2(_1(_4(_1(arg)))))', ['argDefaultValue']],
      ['_2(_1(_4(_1(arg))))', ['asTypeClause', '_1(_2(_1(_4(_1(arg)))))']],
      ['_1(_3(_1(_4(_1(arg)))))', []],
      ['_1(_3(_1(_4(_1(arg)))))', ['argDefaultValue']],
      ['_3(_1(_4(_1(arg))))', ['_paren', '_1(_3(_1(_4(_1(arg)))))']],
      ['_2(_3(_1(_4(_1(arg)))))', []],
      ['_2(_3(_1(_4(_1(arg)))))', ['argDefaultValue']],
      ['_3(_1(_4(_1(arg))))', ['asTypeClause', '_2(_3(_1(_4(_1(arg)))))']],
      ['_1(_2(_2(_4(_1(arg)))))', []],
      ['_1(_2(_2(_4(_1(arg)))))', ['argDefaultValue']],
      ['_2(_2(_4(_1(arg))))', ['asTypeClause', '_1(_2(_2(_4(_1(arg)))))']],
      ['_1(_3(_2(_4(_1(arg)))))', []],
      ['_1(_3(_2(_4(_1(arg)))))', ['argDefaultValue']],
      ['_3(_2(_4(_1(arg))))', ['_paren', '_1(_3(_2(_4(_1(arg)))))']],
      ['_2(_3(_2(_4(_1(arg)))))', []],
      ['_2(_3(_2(_4(_1(arg)))))', ['argDefaultValue']],
      ['_3(_2(_4(_1(arg))))', ['asTypeClause', '_2(_3(_2(_4(_1(arg)))))']],
      ['_1(_2(_1(_1(_2(arg)))))', []],
      ['_1(_2(_1(_1(_2(arg)))))', ['argDefaultValue']],
      ['_2(_1(_1(_2(arg))))', ['asTypeClause', '_1(_2(_1(_1(_2(arg)))))']],
      ['_1(_2(_1(_2(_2(arg)))))', []],
      ['_1(_2(_1(_2(_2(arg)))))', ['argDefaultValue']],
      ['_2(_1(_2(_2(arg))))', ['asTypeClause', '_1(_2(_1(_2(_2(arg)))))']],
      ['_1(_2(_1(_1(_5(arg)))))', []],
      ['_1(_2(_1(_1(_5(arg)))))', ['argDefaultValue']],
      ['_2(_1(_1(_5(arg))))', ['asTypeClause', '_1(_2(_1(_1(_5(arg)))))']],
      ['_1(_2(_1(_2(_5(arg)))))', []],
      ['_1(_2(_1(_2(_5(arg)))))', ['argDefaultValue']],
      ['_2(_1(_2(_5(arg))))', ['asTypeClause', '_1(_2(_1(_2(_5(arg)))))']],
      ['_1(_1(_3(_1(_3(_1(arg))))))', ['argDefaultValue']],
      ['_1(_1(_3(_1(_3(_1(arg))))))', []],
      [
        '_1(_3(_1(_3(_1(arg)))))',
        ['asTypeClause', '_1(_1(_3(_1(_3(_1(arg))))))'],
      ],
      ['_1(_1(_3(_2(_3(_1(arg))))))', ['argDefaultValue']],
      ['_1(_1(_3(_2(_3(_1(arg))))))', []],
      [
        '_1(_3(_2(_3(_1(arg)))))',
        ['asTypeClause', '_1(_1(_3(_2(_3(_1(arg))))))'],
      ],
      ['_1(_1(_3(_1(_4(_1(arg))))))', ['argDefaultValue']],
      ['_1(_1(_3(_1(_4(_1(arg))))))', []],
      [
        '_1(_3(_1(_4(_1(arg)))))',
        ['asTypeClause', '_1(_1(_3(_1(_4(_1(arg))))))'],
      ],
      ['_1(_1(_3(_2(_4(_1(arg))))))', ['argDefaultValue']],
      ['_1(_1(_3(_2(_4(_1(arg))))))', []],
      [
        '_1(_3(_2(_4(_1(arg)))))',
        ['asTypeClause', '_1(_1(_3(_2(_4(_1(arg))))))'],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', '_1(asTypeClause)']],
      ['_1(_1(asTypeClause))', ['fieldLength']],
      ['_1(_1(asTypeClause))', []],
      ['_1(asTypeClause)', ['type_', '_1(_1(asTypeClause))']],
      ['_2(_1(asTypeClause))', ['fieldLength']],
      ['_2(_1(asTypeClause))', []],
      ['_1(asTypeClause)', ['NEW', 'type_', '_2(_1(asTypeClause))']],
      ['_1(type_)', []],
      ['_1(type_)', ['_paren']],
      ['type_', ['baseType', '_1(type_)']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['COLLECTION']],
      ['baseType', ['DATE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType', [['STRING', "'('", 'MULT', 'valueStmt', "')'?"]]],
      ['_1(fieldLength)', ['IDENTIFIER']],
      ['_1(fieldLength)', ['INTEGERLITERAL']],
      ['fieldLength', ['MULT', '_1(fieldLength)']],
      ['iCS_B_ProcedureCall_14_group_2', ['LPAREN', 'subscripts', 'RPAREN']],
      ['argsCall_15_group_0', ['argCall', ',']],
      ['argsCall_15_group_0', [',']],
      ['_1(argsCall_15_group_7)', []],
      ['_1(argsCall_15_group_7)', ['argCall']],
      ['argsCall_15_group_7', [',', '_1(argsCall_15_group_7)']],
      ['argsCall_16_group_0', ['argCall', ',']],
      ['argsCall_16_group_0', [',']],
      ['_1(argsCall_16_group_7)', []],
      ['_1(argsCall_16_group_7)', ['argCall']],
      ['argsCall_16_group_7', [';', '_1(argsCall_16_group_7)']],
      ['argsCall_17_group_0', ['argCall', ';']],
      ['argsCall_17_group_0', [';']],
      ['_1(argsCall_17_group_7)', []],
      ['_1(argsCall_17_group_7)', ['argCall']],
      ['argsCall_17_group_7', [',', '_1(argsCall_17_group_7)']],
      ['argsCall_18_group_0', ['argCall', ';']],
      ['argsCall_18_group_0', [';']],
      ['_1(argsCall_18_group_7)', []],
      ['_1(argsCall_18_group_7)', ['argCall']],
      ['argsCall_18_group_7', [';', '_1(argsCall_18_group_7)']],
      ['variableListStmt_24_group_1', [',', 'variableSubStmt']],
      ['_1(variableSubStmt_25_group_1)', ['RPAREN']],
      ['_1(variableSubStmt_25_group_1)', ['subscripts', 'RPAREN']],
      [
        'variableSubStmt_25_group_1',
        ['LPAREN', '_1(variableSubStmt_25_group_1)'],
      ],
      ['subscripts_26_group_1', [',', 'subscript_']],
      ['subscript__27_group_0', ['valueStmt', 'TO']],
      [
        '(zeroMore_argList_28_group_1_124_group_1_14)1_',
        [
          'argList_28_group_1_124_group_1',
          '(zeroMore_argList_28_group_1_124_group_1_14)1_',
        ],
      ],
      ['(zeroMore_argList_28_group_1_124_group_1_14)1_', []],
      [
        'zeroMore_argList_28_group_1_124_group_1_14',
        ['(zeroMore_argList_28_group_1_124_group_1_14)1_'],
      ],
      [
        'argList_28_group_1',
        ['arg', 'zeroMore_argList_28_group_1_124_group_1_14'],
      ],
      ['argList_28_group_1_124_group_1', [',', 'arg']],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
    },
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p[this.productionIndexMap[itemType]];
      }
      return p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    isCompress: 1,
  };
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {};
  productionSkipAstNodeSet = new Set([
    3, 4, 5, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
    32, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55,
    60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
    79, 81, 82, 84, 86, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102,
    103, 104, 106, 107, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121,
    122, 123, 124, 125, 126, 127, 131, 132, 143, 146, 147, 149, 150, 153, 154,
    155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
    170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,
    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,
    200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
    215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
    230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
    245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
    260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
    275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
    290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304,
    305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
    320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
    335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
    350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
    365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
    380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
    395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
    410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
    425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 440, 441,
    442, 443, 444, 445, 446, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468,
    469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483,
    484, 485, 486, 487, 488, 489, 490, 491, 492,
  ]);
  parser.table = {
    $START: {
      PRIVATE: 0,
      PUBLIC: 0,
      FRIEND: 0,
      GLOBAL: 0,
      STATIC: 0,
      SUB: 0,
      $EOF: 0,
    },
    progam: {
      PRIVATE: 1,
      PUBLIC: 1,
      FRIEND: 1,
      GLOBAL: 1,
      STATIC: 1,
      SUB: 1,
      $EOF: 2,
    },
    '(zeroMore_moduleBodyElement_1)1_': {
      PRIVATE: 3,
      PUBLIC: 3,
      FRIEND: 3,
      GLOBAL: 3,
      STATIC: 3,
      SUB: 3,
      $EOF: 4,
    },
    zeroMore_moduleBodyElement_1: {
      PRIVATE: 5,
      PUBLIC: 5,
      FRIEND: 5,
      GLOBAL: 5,
      STATIC: 5,
      SUB: 5,
      $EOF: 5,
    },
    moduleBody: {
      PRIVATE: 6,
      PUBLIC: 6,
      FRIEND: 6,
      GLOBAL: 6,
      STATIC: 6,
      SUB: 6,
    },
    moduleBodyElement: {
      PRIVATE: 7,
      PUBLIC: 7,
      FRIEND: 7,
      GLOBAL: 7,
      STATIC: 7,
      SUB: 7,
    },
    visibility: {
      PRIVATE: 8,
      PUBLIC: 9,
      FRIEND: 10,
      GLOBAL: 11,
    },
    subStmt: {
      PRIVATE: 12,
      PUBLIC: 12,
      FRIEND: 12,
      GLOBAL: 12,
      STATIC: 15,
      SUB: 18,
    },
    '_2(subStmt)': {
      END_SUB: 13,
      DIM: 14,
      IDENTIFIER: 14,
      LPAREN: 27,
    },
    '_3(subStmt)': {
      END_SUB: 16,
      DIM: 17,
      IDENTIFIER: 17,
      LPAREN: 30,
    },
    '_1(_1(subStmt))': {
      DIM: 19,
      IDENTIFIER: 19,
      END_SUB: 20,
      LPAREN: 33,
    },
    '_1(subStmt)': {
      SUB: 21,
      STATIC: 24,
    },
    '_2(_1(subStmt))': {
      DIM: 22,
      IDENTIFIER: 22,
      END_SUB: 23,
      LPAREN: 36,
    },
    '_1(_2(subStmt))': {
      DIM: 25,
      IDENTIFIER: 25,
      END_SUB: 26,
    },
    '_1(_3(subStmt))': {
      DIM: 28,
      IDENTIFIER: 28,
      END_SUB: 29,
    },
    '_1(_1(_1(subStmt)))': {
      END_SUB: 31,
      DIM: 32,
      IDENTIFIER: 32,
    },
    '_1(_2(_1(subStmt)))': {
      END_SUB: 34,
      DIM: 35,
      IDENTIFIER: 35,
    },
    '(zeroMore_blockStmt_2)1_': {
      DIM: 37,
      IDENTIFIER: 37,
      END_SUB: 38,
    },
    zeroMore_blockStmt_2: {
      DIM: 39,
      IDENTIFIER: 39,
      END_SUB: 39,
    },
    block: {
      DIM: 40,
      IDENTIFIER: 40,
    },
    blockStmt: {
      DIM: 41,
      IDENTIFIER: 42,
    },
    implicitCallStmt_InBlock: {
      IDENTIFIER: 43,
    },
    '(zeroMore_iCS_B_ProcedureCall_14_group_2_3)1_': {
      LPAREN: 44,
      DIM: 45,
      IDENTIFIER: 45,
      END_SUB: 45,
    },
    zeroMore_iCS_B_ProcedureCall_14_group_2_3: {
      LPAREN: 46,
      DIM: 46,
      IDENTIFIER: 46,
      END_SUB: 46,
    },
    '_1(iCS_B_ProcedureCall)': {
      LPAREN: 48,
      DIM: 47,
      IDENTIFIER: 47,
      END_SUB: 47,
      ',': 48,
      BYREF: 48,
      RPAREN: 48,
      INTEGERLITERAL: 48,
      STRINGLITERAL: 48,
      BYVAL: 48,
      PARAMARRAY: 48,
      ';': 48,
    },
    iCS_B_ProcedureCall: {
      IDENTIFIER: 49,
    },
    '(zeroMore_argsCall_15_group_0_4)1_': {
      LPAREN: 51,
      BYREF: 51,
      RPAREN: 51,
      INTEGERLITERAL: 51,
      STRINGLITERAL: 51,
      BYVAL: 51,
      PARAMARRAY: 51,
      ',': 50,
    },
    zeroMore_argsCall_15_group_0_4: {
      LPAREN: 52,
      BYREF: 52,
      RPAREN: 52,
      INTEGERLITERAL: 52,
      STRINGLITERAL: 52,
      BYVAL: 52,
      PARAMARRAY: 52,
      ',': 52,
    },
    '(zeroMore_argsCall_15_group_7_5)1_': {
      ',': 53,
      LPAREN: 54,
      DIM: 54,
      IDENTIFIER: 54,
      END_SUB: 54,
    },
    zeroMore_argsCall_15_group_7_5: {
      ',': 55,
      LPAREN: 55,
      DIM: 55,
      IDENTIFIER: 55,
      END_SUB: 55,
    },
    argsCall: {
      LPAREN: 59,
      BYREF: 59,
      RPAREN: 59,
      INTEGERLITERAL: 59,
      STRINGLITERAL: 59,
      BYVAL: 59,
      PARAMARRAY: 59,
      ',': 57,
      ';': 59,
    },
    '(zeroMore_argsCall_16_group_0_6)1_': {
      LPAREN: 61,
      BYREF: 61,
      RPAREN: 61,
      INTEGERLITERAL: 61,
      STRINGLITERAL: 61,
      BYVAL: 61,
      PARAMARRAY: 61,
      ',': 60,
    },
    zeroMore_argsCall_16_group_0_6: {
      LPAREN: 62,
      BYREF: 62,
      RPAREN: 62,
      INTEGERLITERAL: 62,
      STRINGLITERAL: 62,
      BYVAL: 62,
      PARAMARRAY: 62,
      ',': 62,
    },
    '(zeroMore_argsCall_16_group_7_7)1_': {
      ';': 63,
      LPAREN: 64,
      DIM: 64,
      IDENTIFIER: 64,
      END_SUB: 64,
    },
    zeroMore_argsCall_16_group_7_7: {
      ';': 65,
      LPAREN: 65,
      DIM: 65,
      IDENTIFIER: 65,
      END_SUB: 65,
    },
    '(zeroMore_argsCall_17_group_0_8)1_': {
      LPAREN: 67,
      BYREF: 67,
      RPAREN: 67,
      INTEGERLITERAL: 67,
      STRINGLITERAL: 67,
      BYVAL: 67,
      PARAMARRAY: 67,
      ';': 66,
    },
    zeroMore_argsCall_17_group_0_8: {
      LPAREN: 68,
      BYREF: 68,
      RPAREN: 68,
      INTEGERLITERAL: 68,
      STRINGLITERAL: 68,
      BYVAL: 68,
      PARAMARRAY: 68,
      ';': 68,
    },
    '(zeroMore_argsCall_17_group_7_9)1_': {
      ',': 69,
      LPAREN: 70,
      DIM: 70,
      IDENTIFIER: 70,
      END_SUB: 70,
    },
    zeroMore_argsCall_17_group_7_9: {
      ',': 71,
      LPAREN: 71,
      DIM: 71,
      IDENTIFIER: 71,
      END_SUB: 71,
    },
    '(zeroMore_argsCall_18_group_0_10)1_': {
      LPAREN: 73,
      BYREF: 73,
      RPAREN: 73,
      INTEGERLITERAL: 73,
      STRINGLITERAL: 73,
      BYVAL: 73,
      PARAMARRAY: 73,
      ';': 72,
    },
    zeroMore_argsCall_18_group_0_10: {
      LPAREN: 74,
      BYREF: 74,
      RPAREN: 74,
      INTEGERLITERAL: 74,
      STRINGLITERAL: 74,
      BYVAL: 74,
      PARAMARRAY: 74,
      ';': 74,
    },
    '(zeroMore_argsCall_18_group_7_11)1_': {
      ';': 75,
      LPAREN: 76,
      DIM: 76,
      IDENTIFIER: 76,
      END_SUB: 76,
    },
    zeroMore_argsCall_18_group_7_11: {
      ';': 77,
      LPAREN: 77,
      DIM: 77,
      IDENTIFIER: 77,
      END_SUB: 77,
    },
    '_1(argCall)': {
      INTEGERLITERAL: 78,
      STRINGLITERAL: 78,
      RPAREN: 79,
      PARAMARRAY: 96,
      BYVAL: 99,
      BYREF: 102,
    },
    argCall: {
      LPAREN: 80,
      BYREF: 83,
      RPAREN: 85,
      INTEGERLITERAL: 87,
      STRINGLITERAL: 87,
      BYVAL: 90,
      PARAMARRAY: 93,
    },
    '_2(argCall)': {
      INTEGERLITERAL: 81,
      STRINGLITERAL: 81,
      RPAREN: 82,
    },
    '_3(argCall)': {
      ',': 84,
      LPAREN: 84,
      DIM: 84,
      IDENTIFIER: 84,
      END_SUB: 84,
      ';': 84,
    },
    '_4(argCall)': {
      ',': 86,
      LPAREN: 86,
      DIM: 86,
      IDENTIFIER: 86,
      END_SUB: 86,
      ';': 86,
    },
    '_5(argCall)': {
      INTEGERLITERAL: 88,
      STRINGLITERAL: 88,
      RPAREN: 89,
    },
    '_6(argCall)': {
      INTEGERLITERAL: 91,
      STRINGLITERAL: 91,
      RPAREN: 92,
    },
    '_1(_1(argCall))': {
      RPAREN: 94,
      INTEGERLITERAL: 95,
      STRINGLITERAL: 95,
    },
    '_2(_1(argCall))': {
      RPAREN: 97,
      INTEGERLITERAL: 98,
      STRINGLITERAL: 98,
    },
    '_3(_1(argCall))': {
      RPAREN: 100,
      INTEGERLITERAL: 101,
      STRINGLITERAL: 101,
    },
    '_1(dictionaryCallStmt)': {
      '&': 104,
      '%': 104,
      '#': 104,
      '!': 104,
      '@': 104,
      $: 104,
    },
    dictionaryCallStmt: {
      '!': 105,
    },
    '_1(variableStmt)': {
      IDENTIFIER: 106,
      WITHEVENTS: 107,
    },
    variableStmt: {
      DIM: 108,
    },
    '(zeroMore_variableListStmt_24_group_1_12)1_': {
      ',': 109,
      DIM: 110,
      IDENTIFIER: 110,
      END_SUB: 110,
    },
    zeroMore_variableListStmt_24_group_1_12: {
      ',': 111,
      DIM: 111,
      IDENTIFIER: 111,
      END_SUB: 111,
    },
    variableListStmt: {
      IDENTIFIER: 112,
    },
    '_1(variableSubStmt)': {
      ',': 113,
      DIM: 113,
      IDENTIFIER: 113,
      END_SUB: 113,
      AS: 114,
      '&': 118,
      '%': 118,
      '#': 118,
      '!': 118,
      '@': 118,
      $: 118,
      LPAREN: 121,
    },
    variableSubStmt: {
      IDENTIFIER: 115,
    },
    '_1(_1(variableSubStmt))': {
      AS: 116,
      ',': 117,
      DIM: 117,
      IDENTIFIER: 117,
      END_SUB: 117,
    },
    '_2(_1(variableSubStmt))': {
      AS: 119,
      ',': 120,
      DIM: 120,
      IDENTIFIER: 120,
      END_SUB: 120,
      '&': 124,
      '%': 124,
      '#': 124,
      '!': 124,
      '@': 124,
      $: 124,
    },
    '_1(_2(_1(variableSubStmt)))': {
      ',': 122,
      DIM: 122,
      IDENTIFIER: 122,
      END_SUB: 122,
      AS: 123,
    },
    '(zeroMore_subscripts_26_group_1_13)1_': {
      ',': 125,
      RPAREN: 126,
    },
    zeroMore_subscripts_26_group_1_13: {
      ',': 127,
      RPAREN: 127,
    },
    subscripts: {
      INTEGERLITERAL: 128,
      STRINGLITERAL: 128,
    },
    subscript_: {
      INTEGERLITERAL: 130,
      STRINGLITERAL: 130,
    },
    '_1(argList)': {
      RPAREN: 131,
      OPTIONAL: 132,
      BYVAL: 132,
      PARAMARRAY: 132,
      IDENTIFIER: 132,
      BYREF: 132,
    },
    argList: {
      LPAREN: 133,
    },
    valueStmt: {
      INTEGERLITERAL: 134,
      STRINGLITERAL: 134,
    },
    literal: {
      INTEGERLITERAL: 135,
      STRINGLITERAL: 136,
    },
    typeHint: {
      '&': 137,
      '%': 138,
      '#': 139,
      '!': 140,
      '@': 141,
      $: 142,
    },
    _paren: {
      LPAREN: 143,
    },
    arg: {
      OPTIONAL: 144,
      BYVAL: 145,
      PARAMARRAY: 148,
      IDENTIFIER: 151,
      BYREF: 152,
    },
    '_3(arg)': {
      ',': 146,
      RPAREN: 146,
      EQ: 147,
      AS: 169,
      LPAREN: 172,
      '&': 175,
      '%': 175,
      '#': 175,
      '!': 175,
      '@': 175,
      $: 175,
    },
    '_4(arg)': {
      ',': 149,
      RPAREN: 149,
      EQ: 150,
      AS: 178,
      LPAREN: 181,
      '&': 184,
      '%': 184,
      '#': 184,
      '!': 184,
      '@': 184,
      $: 184,
    },
    '_1(_1(arg))': {
      EQ: 153,
      ',': 154,
      RPAREN: 154,
      '&': 193,
      '%': 193,
      '#': 193,
      '!': 193,
      '@': 193,
      $: 193,
      LPAREN: 196,
      AS: 199,
    },
    '_1(arg)': {
      IDENTIFIER: 155,
      PARAMARRAY: 158,
      BYREF: 159,
      BYVAL: 160,
    },
    '_2(_1(arg))': {
      EQ: 156,
      ',': 157,
      RPAREN: 157,
      '&': 202,
      '%': 202,
      '#': 202,
      '!': 202,
      '@': 202,
      $: 202,
      LPAREN: 205,
      AS: 208,
    },
    '_1(_2(arg))': {
      EQ: 161,
      ',': 162,
      RPAREN: 162,
      '&': 223,
      '%': 223,
      '#': 223,
      '!': 223,
      '@': 223,
      $: 223,
      LPAREN: 226,
      AS: 229,
    },
    '_2(arg)': {
      IDENTIFIER: 163,
      PARAMARRAY: 166,
    },
    '_2(_2(arg))': {
      EQ: 164,
      ',': 165,
      RPAREN: 165,
      '&': 232,
      '%': 232,
      '#': 232,
      '!': 232,
      '@': 232,
      $: 232,
      LPAREN: 235,
      AS: 238,
    },
    '_1(_3(arg))': {
      EQ: 167,
      ',': 168,
      RPAREN: 168,
    },
    '_2(_3(arg))': {
      EQ: 170,
      ',': 171,
      RPAREN: 171,
      AS: 241,
    },
    '_3(_3(arg))': {
      EQ: 173,
      ',': 174,
      RPAREN: 174,
      LPAREN: 244,
      AS: 247,
    },
    '_1(_4(arg))': {
      EQ: 176,
      ',': 177,
      RPAREN: 177,
    },
    '_2(_4(arg))': {
      EQ: 179,
      ',': 180,
      RPAREN: 180,
      AS: 250,
    },
    '_3(_4(arg))': {
      EQ: 182,
      ',': 183,
      RPAREN: 183,
      LPAREN: 253,
      AS: 256,
    },
    '_1(_5(arg))': {
      EQ: 185,
      ',': 186,
      RPAREN: 186,
      '&': 259,
      '%': 259,
      '#': 259,
      '!': 259,
      '@': 259,
      $: 259,
      LPAREN: 262,
      AS: 265,
    },
    '_5(arg)': {
      IDENTIFIER: 187,
      PARAMARRAY: 190,
    },
    '_2(_5(arg))': {
      EQ: 188,
      ',': 189,
      RPAREN: 189,
      '&': 268,
      '%': 268,
      '#': 268,
      '!': 268,
      '@': 268,
      $: 268,
      LPAREN: 271,
      AS: 274,
    },
    '_1(_1(_1(arg)))': {
      ',': 191,
      RPAREN: 191,
      EQ: 192,
      AS: 277,
      LPAREN: 280,
    },
    '_2(_1(_1(arg)))': {
      ',': 194,
      RPAREN: 194,
      EQ: 195,
      AS: 283,
    },
    '_3(_1(_1(arg)))': {
      ',': 197,
      RPAREN: 197,
      EQ: 198,
    },
    '_1(_2(_1(arg)))': {
      ',': 200,
      RPAREN: 200,
      EQ: 201,
      AS: 286,
      LPAREN: 289,
    },
    '_2(_2(_1(arg)))': {
      ',': 203,
      RPAREN: 203,
      EQ: 204,
      AS: 292,
    },
    '_3(_2(_1(arg)))': {
      ',': 206,
      RPAREN: 206,
      EQ: 207,
    },
    '_1(_3(_1(arg)))': {
      ',': 209,
      RPAREN: 209,
      EQ: 210,
      AS: 295,
      LPAREN: 298,
      '&': 301,
      '%': 301,
      '#': 301,
      '!': 301,
      '@': 301,
      $: 301,
    },
    '_3(_1(arg))': {
      PARAMARRAY: 211,
      IDENTIFIER: 214,
    },
    '_2(_3(_1(arg)))': {
      ',': 212,
      RPAREN: 212,
      EQ: 213,
      AS: 304,
      LPAREN: 307,
      '&': 310,
      '%': 310,
      '#': 310,
      '!': 310,
      '@': 310,
      $: 310,
    },
    '_1(_4(_1(arg)))': {
      ',': 215,
      RPAREN: 215,
      EQ: 216,
      AS: 313,
      LPAREN: 316,
      '&': 319,
      '%': 319,
      '#': 319,
      '!': 319,
      '@': 319,
      $: 319,
    },
    '_4(_1(arg))': {
      PARAMARRAY: 217,
      IDENTIFIER: 220,
    },
    '_2(_4(_1(arg)))': {
      ',': 218,
      RPAREN: 218,
      EQ: 219,
      AS: 322,
      LPAREN: 325,
      '&': 328,
      '%': 328,
      '#': 328,
      '!': 328,
      '@': 328,
      $: 328,
    },
    '_1(_1(_2(arg)))': {
      ',': 221,
      RPAREN: 221,
      EQ: 222,
      AS: 331,
      LPAREN: 334,
    },
    '_2(_1(_2(arg)))': {
      ',': 224,
      RPAREN: 224,
      EQ: 225,
      AS: 337,
    },
    '_3(_1(_2(arg)))': {
      ',': 227,
      RPAREN: 227,
      EQ: 228,
    },
    '_1(_2(_2(arg)))': {
      ',': 230,
      RPAREN: 230,
      EQ: 231,
      AS: 340,
      LPAREN: 343,
    },
    '_2(_2(_2(arg)))': {
      ',': 233,
      RPAREN: 233,
      EQ: 234,
      AS: 346,
    },
    '_3(_2(_2(arg)))': {
      ',': 236,
      RPAREN: 236,
      EQ: 237,
    },
    '_1(_2(_3(arg)))': {
      ',': 239,
      RPAREN: 239,
      EQ: 240,
    },
    '_1(_3(_3(arg)))': {
      ',': 242,
      RPAREN: 242,
      EQ: 243,
      AS: 349,
    },
    '_2(_3(_3(arg)))': {
      ',': 245,
      RPAREN: 245,
      EQ: 246,
    },
    '_1(_2(_4(arg)))': {
      ',': 248,
      RPAREN: 248,
      EQ: 249,
    },
    '_1(_3(_4(arg)))': {
      ',': 251,
      RPAREN: 251,
      EQ: 252,
      AS: 352,
    },
    '_2(_3(_4(arg)))': {
      ',': 254,
      RPAREN: 254,
      EQ: 255,
    },
    '_1(_1(_5(arg)))': {
      ',': 257,
      RPAREN: 257,
      EQ: 258,
      AS: 355,
      LPAREN: 358,
    },
    '_2(_1(_5(arg)))': {
      ',': 260,
      RPAREN: 260,
      EQ: 261,
      AS: 361,
    },
    '_3(_1(_5(arg)))': {
      ',': 263,
      RPAREN: 263,
      EQ: 264,
    },
    '_1(_2(_5(arg)))': {
      ',': 266,
      RPAREN: 266,
      EQ: 267,
      AS: 364,
      LPAREN: 367,
    },
    '_2(_2(_5(arg)))': {
      ',': 269,
      RPAREN: 269,
      EQ: 270,
      AS: 370,
    },
    '_3(_2(_5(arg)))': {
      ',': 272,
      RPAREN: 272,
      EQ: 273,
    },
    '_1(_1(_1(_1(arg))))': {
      EQ: 275,
      ',': 276,
      RPAREN: 276,
    },
    '_2(_1(_1(_1(arg))))': {
      EQ: 278,
      ',': 279,
      RPAREN: 279,
      AS: 373,
    },
    '_1(_2(_1(_1(arg))))': {
      EQ: 281,
      ',': 282,
      RPAREN: 282,
    },
    '_1(_1(_2(_1(arg))))': {
      EQ: 284,
      ',': 285,
      RPAREN: 285,
    },
    '_2(_1(_2(_1(arg))))': {
      EQ: 287,
      ',': 288,
      RPAREN: 288,
      AS: 376,
    },
    '_1(_2(_2(_1(arg))))': {
      EQ: 290,
      ',': 291,
      RPAREN: 291,
    },
    '_1(_1(_3(_1(arg))))': {
      EQ: 293,
      ',': 294,
      RPAREN: 294,
    },
    '_2(_1(_3(_1(arg))))': {
      EQ: 296,
      ',': 297,
      RPAREN: 297,
      AS: 379,
    },
    '_3(_1(_3(_1(arg))))': {
      EQ: 299,
      ',': 300,
      RPAREN: 300,
      LPAREN: 382,
      AS: 385,
    },
    '_1(_2(_3(_1(arg))))': {
      EQ: 302,
      ',': 303,
      RPAREN: 303,
    },
    '_2(_2(_3(_1(arg))))': {
      EQ: 305,
      ',': 306,
      RPAREN: 306,
      AS: 388,
    },
    '_3(_2(_3(_1(arg))))': {
      EQ: 308,
      ',': 309,
      RPAREN: 309,
      LPAREN: 391,
      AS: 394,
    },
    '_1(_1(_4(_1(arg))))': {
      EQ: 311,
      ',': 312,
      RPAREN: 312,
    },
    '_2(_1(_4(_1(arg))))': {
      EQ: 314,
      ',': 315,
      RPAREN: 315,
      AS: 397,
    },
    '_3(_1(_4(_1(arg))))': {
      EQ: 317,
      ',': 318,
      RPAREN: 318,
      LPAREN: 400,
      AS: 403,
    },
    '_1(_2(_4(_1(arg))))': {
      EQ: 320,
      ',': 321,
      RPAREN: 321,
    },
    '_2(_2(_4(_1(arg))))': {
      EQ: 323,
      ',': 324,
      RPAREN: 324,
      AS: 406,
    },
    '_3(_2(_4(_1(arg))))': {
      EQ: 326,
      ',': 327,
      RPAREN: 327,
      LPAREN: 409,
      AS: 412,
    },
    '_1(_1(_1(_2(arg))))': {
      EQ: 329,
      ',': 330,
      RPAREN: 330,
    },
    '_2(_1(_1(_2(arg))))': {
      EQ: 332,
      ',': 333,
      RPAREN: 333,
      AS: 415,
    },
    '_1(_2(_1(_2(arg))))': {
      EQ: 335,
      ',': 336,
      RPAREN: 336,
    },
    '_1(_1(_2(_2(arg))))': {
      EQ: 338,
      ',': 339,
      RPAREN: 339,
    },
    '_2(_1(_2(_2(arg))))': {
      EQ: 341,
      ',': 342,
      RPAREN: 342,
      AS: 418,
    },
    '_1(_2(_2(_2(arg))))': {
      EQ: 344,
      ',': 345,
      RPAREN: 345,
    },
    '_1(_1(_3(_3(arg))))': {
      EQ: 347,
      ',': 348,
      RPAREN: 348,
    },
    '_1(_1(_3(_4(arg))))': {
      EQ: 350,
      ',': 351,
      RPAREN: 351,
    },
    '_1(_1(_1(_5(arg))))': {
      EQ: 353,
      ',': 354,
      RPAREN: 354,
    },
    '_2(_1(_1(_5(arg))))': {
      EQ: 356,
      ',': 357,
      RPAREN: 357,
      AS: 421,
    },
    '_1(_2(_1(_5(arg))))': {
      EQ: 359,
      ',': 360,
      RPAREN: 360,
    },
    '_1(_1(_2(_5(arg))))': {
      EQ: 362,
      ',': 363,
      RPAREN: 363,
    },
    '_2(_1(_2(_5(arg))))': {
      EQ: 365,
      ',': 366,
      RPAREN: 366,
      AS: 424,
    },
    '_1(_2(_2(_5(arg))))': {
      EQ: 368,
      ',': 369,
      RPAREN: 369,
    },
    '_1(_2(_1(_1(_1(arg)))))': {
      ',': 371,
      RPAREN: 371,
      EQ: 372,
    },
    '_1(_2(_1(_2(_1(arg)))))': {
      ',': 374,
      RPAREN: 374,
      EQ: 375,
    },
    '_1(_2(_1(_3(_1(arg)))))': {
      ',': 377,
      RPAREN: 377,
      EQ: 378,
    },
    '_1(_3(_1(_3(_1(arg)))))': {
      ',': 380,
      RPAREN: 380,
      EQ: 381,
      AS: 427,
    },
    '_2(_3(_1(_3(_1(arg)))))': {
      ',': 383,
      RPAREN: 383,
      EQ: 384,
    },
    '_1(_2(_2(_3(_1(arg)))))': {
      ',': 386,
      RPAREN: 386,
      EQ: 387,
    },
    '_1(_3(_2(_3(_1(arg)))))': {
      ',': 389,
      RPAREN: 389,
      EQ: 390,
      AS: 430,
    },
    '_2(_3(_2(_3(_1(arg)))))': {
      ',': 392,
      RPAREN: 392,
      EQ: 393,
    },
    '_1(_2(_1(_4(_1(arg)))))': {
      ',': 395,
      RPAREN: 395,
      EQ: 396,
    },
    '_1(_3(_1(_4(_1(arg)))))': {
      ',': 398,
      RPAREN: 398,
      EQ: 399,
      AS: 433,
    },
    '_2(_3(_1(_4(_1(arg)))))': {
      ',': 401,
      RPAREN: 401,
      EQ: 402,
    },
    '_1(_2(_2(_4(_1(arg)))))': {
      ',': 404,
      RPAREN: 404,
      EQ: 405,
    },
    '_1(_3(_2(_4(_1(arg)))))': {
      ',': 407,
      RPAREN: 407,
      EQ: 408,
      AS: 436,
    },
    '_2(_3(_2(_4(_1(arg)))))': {
      ',': 410,
      RPAREN: 410,
      EQ: 411,
    },
    '_1(_2(_1(_1(_2(arg)))))': {
      ',': 413,
      RPAREN: 413,
      EQ: 414,
    },
    '_1(_2(_1(_2(_2(arg)))))': {
      ',': 416,
      RPAREN: 416,
      EQ: 417,
    },
    '_1(_2(_1(_1(_5(arg)))))': {
      ',': 419,
      RPAREN: 419,
      EQ: 420,
    },
    '_1(_2(_1(_2(_5(arg)))))': {
      ',': 422,
      RPAREN: 422,
      EQ: 423,
    },
    '_1(_1(_3(_1(_3(_1(arg))))))': {
      EQ: 425,
      ',': 426,
      RPAREN: 426,
    },
    '_1(_1(_3(_2(_3(_1(arg))))))': {
      EQ: 428,
      ',': 429,
      RPAREN: 429,
    },
    '_1(_1(_3(_1(_4(_1(arg))))))': {
      EQ: 431,
      ',': 432,
      RPAREN: 432,
    },
    '_1(_1(_3(_2(_4(_1(arg))))))': {
      EQ: 434,
      ',': 435,
      RPAREN: 435,
    },
    argDefaultValue: {
      EQ: 437,
    },
    asTypeClause: {
      AS: 438,
    },
    '_1(_1(asTypeClause))': {
      MULT: 439,
      ',': 440,
      DIM: 440,
      IDENTIFIER: 440,
      END_SUB: 440,
      EQ: 440,
      RPAREN: 440,
    },
    '_1(asTypeClause)': {
      BOOLEAN: 441,
      BYTE: 441,
      COLLECTION: 441,
      DATE: 441,
      DOUBLE: 441,
      INTEGER: 441,
      LONG: 441,
      SINGLE: 441,
      VARIANT: 441,
      LPAREN: 441,
      MULT: 441,
      ',': 441,
      DIM: 441,
      IDENTIFIER: 441,
      END_SUB: 441,
      EQ: 441,
      RPAREN: 441,
      NEW: 444,
    },
    '_2(_1(asTypeClause))': {
      MULT: 442,
      ',': 443,
      DIM: 443,
      IDENTIFIER: 443,
      END_SUB: 443,
      EQ: 443,
      RPAREN: 443,
    },
    '_1(type_)': {
      MULT: 445,
      ',': 445,
      DIM: 445,
      IDENTIFIER: 445,
      END_SUB: 445,
      EQ: 445,
      RPAREN: 445,
      LPAREN: 446,
    },
    type_: {
      BOOLEAN: 447,
      BYTE: 447,
      COLLECTION: 447,
      DATE: 447,
      DOUBLE: 447,
      INTEGER: 447,
      LONG: 447,
      SINGLE: 447,
      VARIANT: 447,
      LPAREN: 447,
      MULT: 447,
      ',': 447,
      DIM: 447,
      IDENTIFIER: 447,
      END_SUB: 447,
      EQ: 447,
      RPAREN: 447,
    },
    baseType: {
      BOOLEAN: 448,
      BYTE: 449,
      COLLECTION: 450,
      DATE: 451,
      DOUBLE: 452,
      INTEGER: 453,
      LONG: 454,
      SINGLE: 455,
      VARIANT: 456,
      LPAREN: 457,
      MULT: 457,
      ',': 457,
      DIM: 457,
      IDENTIFIER: 457,
      END_SUB: 457,
      EQ: 457,
      RPAREN: 457,
    },
    '_1(fieldLength)': {
      IDENTIFIER: 458,
      INTEGERLITERAL: 459,
    },
    fieldLength: {
      MULT: 460,
    },
    iCS_B_ProcedureCall_14_group_2: {
      LPAREN: 461,
    },
    argsCall_15_group_0: {
      LPAREN: 462,
      BYREF: 462,
      RPAREN: 462,
      INTEGERLITERAL: 462,
      STRINGLITERAL: 462,
      BYVAL: 462,
      PARAMARRAY: 462,
      ',': 463,
    },
    '_1(argsCall_15_group_7)': {
      ',': 464,
      LPAREN: 465,
      DIM: 464,
      IDENTIFIER: 464,
      END_SUB: 464,
      BYREF: 465,
      RPAREN: 465,
      INTEGERLITERAL: 465,
      STRINGLITERAL: 465,
      BYVAL: 465,
      PARAMARRAY: 465,
    },
    argsCall_15_group_7: {
      ',': 466,
    },
    argsCall_16_group_0: {
      LPAREN: 467,
      BYREF: 467,
      RPAREN: 467,
      INTEGERLITERAL: 467,
      STRINGLITERAL: 467,
      BYVAL: 467,
      PARAMARRAY: 467,
      ',': 468,
    },
    '_1(argsCall_16_group_7)': {
      ';': 469,
      LPAREN: 470,
      DIM: 469,
      IDENTIFIER: 469,
      END_SUB: 469,
      BYREF: 470,
      RPAREN: 470,
      INTEGERLITERAL: 470,
      STRINGLITERAL: 470,
      BYVAL: 470,
      PARAMARRAY: 470,
    },
    argsCall_16_group_7: {
      ';': 471,
    },
    argsCall_17_group_0: {
      LPAREN: 472,
      BYREF: 472,
      RPAREN: 472,
      INTEGERLITERAL: 472,
      STRINGLITERAL: 472,
      BYVAL: 472,
      PARAMARRAY: 472,
      ';': 473,
    },
    '_1(argsCall_17_group_7)': {
      ',': 474,
      LPAREN: 475,
      DIM: 474,
      IDENTIFIER: 474,
      END_SUB: 474,
      BYREF: 475,
      RPAREN: 475,
      INTEGERLITERAL: 475,
      STRINGLITERAL: 475,
      BYVAL: 475,
      PARAMARRAY: 475,
    },
    argsCall_17_group_7: {
      ',': 476,
    },
    argsCall_18_group_0: {
      LPAREN: 477,
      BYREF: 477,
      RPAREN: 477,
      INTEGERLITERAL: 477,
      STRINGLITERAL: 477,
      BYVAL: 477,
      PARAMARRAY: 477,
      ';': 478,
    },
    '_1(argsCall_18_group_7)': {
      ';': 479,
      LPAREN: 480,
      DIM: 479,
      IDENTIFIER: 479,
      END_SUB: 479,
      BYREF: 480,
      RPAREN: 480,
      INTEGERLITERAL: 480,
      STRINGLITERAL: 480,
      BYVAL: 480,
      PARAMARRAY: 480,
    },
    argsCall_18_group_7: {
      ';': 481,
    },
    variableListStmt_24_group_1: {
      ',': 482,
    },
    '_1(variableSubStmt_25_group_1)': {
      RPAREN: 483,
      INTEGERLITERAL: 484,
      STRINGLITERAL: 484,
    },
    variableSubStmt_25_group_1: {
      LPAREN: 485,
    },
    subscripts_26_group_1: {
      ',': 486,
    },
    subscript__27_group_0: {
      INTEGERLITERAL: 487,
      STRINGLITERAL: 487,
    },
    '(zeroMore_argList_28_group_1_124_group_1_14)1_': {
      ',': 488,
      RPAREN: 489,
    },
    zeroMore_argList_28_group_1_124_group_1_14: {
      ',': 490,
      RPAREN: 490,
    },
    argList_28_group_1: {
      OPTIONAL: 491,
      BYVAL: 491,
      PARAMARRAY: 491,
      IDENTIFIER: 491,
      BYREF: 491,
    },
    argList_28_group_1_124_group_1: {
      ',': 492,
    },
  };
  parser.parse = function parse(input, options) {
    const recoveryTokens = [];
    const terminalNodes = [];

    const { EOF_TOKEN } = Lexer.STATIC;

    function getTableVal(row, col) {
      return table[row] && table[row][col];
    }
    function isSymbolName(s) {
      return !!table[s];
    }

    options = options || {};
    let error;
    var {
      onErrorRecovery,
      onAction,
      lexerOptions = {},
      transformNode,
    } = options;

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    var {
      lexer,
      table,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;

    lexer.options = lexerOptions;
    const startSymbol = getProductionSymbol(productions[0]);

    symbolStack = [startSymbol];

    const astStack = [
      new AstNode({
        children: [],
      }),
    ];
    lexer.resetInput(input);
    let token;
    let next;

    let topSymbol;

    let errorNode;

    function popSymbolStack() {
      symbolStack.pop();
    }

    let getExpected = function () {
      const s = topSymbol;
      if (!isSymbolName(s)) {
        return [lexer.mapReverseSymbol(s)];
      }
      const ret = (table[s] && Object.keys(table[s])) || [];
      return ret.map((r) => lexer.mapReverseSymbol(r));
    };

    let production;

    while (1) {
      topSymbol = peekStack(symbolStack);

      if (!topSymbol) {
        break;
      }

      while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
        let ast = astStack.pop();
        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstNode({
            type: 'symbol',
            symbol: ast.symbol,
            children: [ast],
            label: ast.label,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
        if (!topSymbol) {
          break;
        }
      }

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }
        if (topSymbol === token.t) {
          symbolStack.pop();
          const terminalNode = new AstNode(token);
          terminalNode.type = 'token';
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        } else if ((next = getTableVal(topSymbol, token.t)) !== undefined) {
          popSymbolStack();
          production = productions[next];

          if (productionSkipAstNodeSet?.has(next)) {
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat().reverse(),
            );
          } else {
            const newAst = new AstNode({
              type: 'symbol',
              symbol: getOriginalSymbol(topSymbol),
              label: getOriginalSymbol(getProductionLabel(production)),
              children: [],
            });
            peekStack(astStack).addChild(newAst);
            astStack.push(newAst);
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat(productionEndFlag).reverse(),
            );
          }
        } else {
          error = {
            recovery: false,
            ...getParseError(getExpected),
            expected: getExpected(),
            symbol: peekStack(astStack).symbol,
            lexer: lexer.toJSON(),
          };
          if (onErrorRecovery) {
            const recommendedAction = {};
            lexer.stash();
            const nextToken = lexer.lex();
            lexer.stashPop();
            // should delete
            if (
              topSymbol === nextToken.t ||
              getTableVal(topSymbol, nextToken.t) !== undefined
            ) {
              recommendedAction.action = 'del';
            } else if (error.expected.length) {
              recommendedAction.action = 'add';
            }

            const localErrorNode = new AstNode({
              error,
              type: 'token',
              ...error.lexer,
            });
            peekStack(astStack).addChild(localErrorNode);

            const recovery =
              onErrorRecovery(
                {
                  errorNode: localErrorNode,
                  parseTree: getAstRootNode(astStack, transformNode, true),
                },
                recommendedAction,
              ) || {};

            const { action } = recovery;

            peekStack(astStack).children.pop();

            if (!action) {
              errorNode = closeAstWhenError(error, astStack);
              break;
            }

            if (action === 'del') {
              error.recovery = true;
              const deleteToken = recoveryTokens.pop();
              deleteToken.recovery = 'del';
              token = null;
            } else if (action === 'add') {
              error.recovery = true;
              token = {
                ...token,
                token: recovery.token,
                text: recovery.text,
                t: lexer.mapSymbol(recovery.token),
                recovery: 'add',
              };
              lexer.pushToken(token);
              pushRecoveryTokens(recoveryTokens, token);
            }
          } else {
            errorNode = closeAstWhenError(error, astStack);
            break;
          }
        }
      }

      topSymbol = peekStack(symbolStack);

      while (topSymbol && typeof topSymbol === 'function') {
        if (onAction) {
          onAction({
            token: lexer.getLastToken(),
            action: topSymbol,
            parseTree: getAstRootNode(astStack, transformNode, true),
          });
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
      }

      if (!symbolStack.length) {
        break;
      }
    }

    if (!error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];
        lexer.lex();
      }
      error = {
        ...getParseError(getExpected),
        expected: getExpected(),
        symbol: peekStack(astStack)?.symbol,
        lexer: lexer.toJSON(),
      };
      errorNode = closeAstWhenError(error, astStack);
    }

    const ast = getAstRootNode(astStack, transformNode);

    symbolStack = [];

    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  return parser;
})();

export default vbaParser;
