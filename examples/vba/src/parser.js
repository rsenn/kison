/*
Generated By kison v0.5.32

Generate time: Fri Nov 26 2021 14:25:20 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token =
      recommendedAction.action === 'add'
        ? lexer.peekTokens()[0]
        : lexer.getCurrentToken();
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      ['ALIAS', /ALIAS\b/gi],
      ['AND', /AND\b/gi],
      ['ATTRIBUTE', /ATTRIBUTE\b/gi],
      ['AS', /AS\b/gi],
      ['BEGIN', /BEGIN\b/gi],
      ['BOOLEAN', /BOOLEAN\b/gi],
      ['BYVAL', /BYVAL\b/gi],
      ['BYREF', /BYREF\b/gi],
      ['BYTE', /BYTE\b/gi],
      ['CALL', /CALL\b/gi],
      ['CASE', /CASE\b/gi],
      ['CONST', /CONST\b/gi],
      ['DECLARE', /DECLARE\b/gi],
      ['DEFBOOL', /DEFBOOL\b/gi],
      ['DEFBYTE', /DEFBYTE\b/gi],
      ['DEFDATE', /DEFDATE\b/gi],
      ['DEFDBL', /DEFDBL\b/gi],
      ['DEFDEC', /DEFDEC\b/gi],
      ['DEFCUR', /DEFCUR\b/gi],
      ['DEFINT', /DEFINT\b/gi],
      ['DEFLNG', /DEFLNG\b/gi],
      ['DEFOBJ', /DEFOBJ\b/gi],
      ['DEFSNG', /DEFSNG\b/gi],
      ['DEFSTR', /DEFSTR\b/gi],
      ['DEFVAR', /DEFVAR\b/gi],
      ['DIM', /DIM\b/gi],
      ['DO', /DO\b/gi],
      ['DOUBLE', /DOUBLE\b/gi],
      ['EACH', /EACH\b/gi],
      ['ELSE', /ELSE\b/gi],
      ['ELSEIF', /ELSEIF\b/gi],
      ['END_ENUM', /END ENUM\b/gi],
      ['END_FUNCTION', /END FUNCTION\b/gi],
      ['END_IF', /END IF\b/gi],
      ['END_PROPERTY', /END PROPERTY\b/gi],
      ['END_SELECT', /END SELECT\b/gi],
      ['END_SUB', /END SUB\b/gi],
      ['END_TYPE', /END TYPE\b/gi],
      ['END_WITH', /END WITH\b/gi],
      ['END', /END\b/gi],
      ['ENUM', /ENUM\b/gi],
      ['EQV', /EQV\b/gi],
      ['ERASE', /ERASE\b/gi],
      ['ERROR', /ERROR\b/gi],
      ['EVENT', /EVENT\b/gi],
      ['EXIT_DO', /EXIT DO\b/gi],
      ['EXIT_FOR', /EXIT FOR\b/gi],
      ['EXIT_FUNCTION', /EXIT FUNCTION\b/gi],
      ['EXIT_PROPERTY', /EXIT PROPERTY\b/gi],
      ['EXIT_SUB', /EXIT SUB\b/gi],
      ['FALSE', /FALSE\b/gi],
      ['FRIEND', /FRIEND\b/gi],
      ['FOR', /FOR\b/gi],
      ['FUNCTION', /FUNCTION\b/gi],
      ['GET', /GET\b/gi],
      ['GLOBAL', /GLOBAL\b/gi],
      ['GOSUB', /GOSUB\b/gi],
      ['GOTO', /GOTO\b/gi],
      ['IF', /IF\b/gi],
      ['IMPLEMENTS', /IMPLEMENTS\b/gi],
      ['IN', /IN\b/gi],
      ['IS', /IS\b/gi],
      ['INTEGER', /INTEGER\b/gi],
      ['LONG', /LONG\b/gi],
      ['LOOP', /LOOP\b/gi],
      ['LEN', /LEN\b/gi],
      ['LET', /LET\b/gi],
      ['LIB', /LIB\b/gi],
      ['LIKE', /LIKE\b/gi],
      ['LSET', /LSET\b/gi],
      ['MACRO_CONST', /#CONST\b/gi],
      ['MACRO_IF', /#IF\b/gi],
      ['MACRO_ELSEIF', /#ELSEIF\b/gi],
      ['MACRO_ELSE', /#ELSE\b/gi],
      ['MACRO_END_IF', /#END IF\b/gi],
      ['MOD', /MOD\b/gi],
      ['NEXT', /NEXT\b/gi],
      ['NEW', /NEW\b/gi],
      ['NOT', /NOT\b/gi],
      ['NOTHING', /NOTHING\b/gi],
      ['NULL', /NULL\b/gi],
      ['ON', /ON\b/gi],
      ['ON_ERROR', /ON ERROR\b/gi],
      ['ON_LOCAL_ERROR', /ON LOCAL ERROR\b/gi],
      ['OPTIONAL', /OPTIONAL\b/gi],
      ['OPTION_BASE', /OPTION BASE\b/gi],
      ['OPTION_EXPLICIT', /OPTION EXPLICIT\b/gi],
      ['OPTION_COMPARE', /OPTION COMPARE\b/gi],
      ['OPTION_PRIVATE_MODULE', /OPTION PRIVATE MODULE\b/gi],
      ['OR', /OR\b/gi],
      ['PARAMARRAY', /PARAMARRAY\b/gi],
      ['PRESERVE', /PRESERVE\b/gi],
      ['PRIVATE', /PRIVATE\b/gi],
      ['PROPERTY_GET', /PROPERTY GET\b/gi],
      ['PROPERTY_LET', /PROPERTY LET\b/gi],
      ['PROPERTY_SET', /PROPERTY SET\b/gi],
      ['PTRSAFE', /PTRSAFE\b/gi],
      ['PUBLIC', /PUBLIC\b/gi],
      ['RAISEEVENT', /RAISEEVENT\b/gi],
      ['REDIM', /REDIM\b/gi],
      ['RESET', /RESET\b/gi],
      ['RESUME', /RESUME\b/gi],
      ['RETURN', /RETURN\b/gi],
      ['SELECT', /SELECT\b/gi],
      ['SET', /SET\b/gi],
      ['SINGLE', /SINGLE\b/gi],
      ['STATIC', /STATIC\b/gi],
      ['STEP', /STEP\b/gi],
      ['STOP', /STOP\b/gi],
      ['STRING', /STRING\b/gi],
      ['SUB', /SUB\b/gi],
      ['THEN', /THEN\b/gi],
      ['TO', /TO\b/gi],
      ['TRUE', /TRUE\b/gi],
      ['TYPEOF', /TYPEOF\b/gi],
      ['UNTIL', /UNTIL\b/gi],
      ['VARIANT', /VARIANT\b/gi],
      ['WEND', /WEND\b/gi],
      ['WHILE', /WHILE\b/gi],
      ['WITH', /WITH\b/gi],
      ['WITHEVENTS', /WITHEVENTS\b/gi],
      ['XOR', /XOR\b/gi],
      ['ASSIGN', /:=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS_EQ', /\-=/g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS_EQ', /\+=/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"[^"\r\n]*"/g],
      ['INTEGERLITERAL', /(\+|-)?[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ['.', /\./g],
      ['iCS_S_MemberCall+', /iCS_S_MemberCall\+/g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1*']],
      [
        'moduleDeclarations_group_def_5',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_5*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_7',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_7*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'RPAREN',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_9', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_9*', 'endOfStatement']],
      ['blockStmt', ['lineLabel']],
      ['blockStmt', ['goToStmt']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['lineLabel', ['ambiguousIdentifier', 'COLON']],
      ['goToStmt', ['GOTO', 'ambiguousIdentifier']],
      ['eraseStmt_group_def_11', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_11*']],
      ['redimStmt_group_def_13', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_13*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_def_15', ['EQ']],
      ['letStmt_group_14', ['letStmt_group_def_15']],
      ['letStmt_group_def_16', ['PLUS_EQ']],
      ['letStmt_group_14', ['letStmt_group_def_16']],
      ['letStmt_group_def_17', ['MINUS_EQ']],
      ['letStmt_group_14', ['letStmt_group_def_17']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_14', 'valueStmt'],
      ],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_19',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_21', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'implicitCallStmt_InStmt?',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_19?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_19?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall',
        [
          'implicitCallStmt_InStmt',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'ambiguousIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_21?',
        ],
      ],
      ['argsCall_group_def_27', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_27*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_29', ['DIM']],
      ['variableStmt_group_28', ['variableStmt_group_def_29']],
      ['variableStmt_group_def_30', ['STATIC']],
      ['variableStmt_group_28', ['variableStmt_group_def_30']],
      ['variableStmt_group_def_31', ['visibility']],
      ['variableStmt_group_28', ['variableStmt_group_def_31']],
      [
        'variableStmt',
        ['variableStmt_group_28', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['variableListStmt_group_def_33', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_33*'],
      ],
      ['variableSubStmt_group_def_35', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_35?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_11*']],
      ['subscript__group_def_38', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_38?', 'valueStmt']],
      ['subscripts_group_def_40', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_40*']],
      ['subscript_', ['subscript__group_def_38?', 'valueStmt']],
      ['argList_group_def_44', [',', 'arg']],
      ['argList_group_def_45', ['arg', 'argList_group_def_44*']],
      ['argList', ['LPAREN', 'argList_group_def_45?', 'RPAREN']],
      ['valueStmt', ['literal']],
      ['valueStmt', ['implicitCallStmt_InStmt']],
      ['valueStmt', ['NEW', 'valueStmt']],
      ['valueStmt', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_47', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_46', ['iCS_S_MembersCall_group_def_47']],
      ['iCS_S_MembersCall_group_def_48', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_46', ['iCS_S_MembersCall_group_def_48']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_46?',
          'iCS_S_MemberCall',
          'iCS_S_MemberCall*',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      ['iCS_S_MemberCall_group_def_51', ['.']],
      ['iCS_S_MemberCall_group_50', ['iCS_S_MemberCall_group_def_51']],
      ['iCS_S_MemberCall_group_def_52', ['!']],
      ['iCS_S_MemberCall_group_50', ['iCS_S_MemberCall_group_def_52']],
      ['iCS_S_MemberCall_group_53', ['iCS_S_MembersCall_group_def_47']],
      ['iCS_S_MemberCall_group_53', ['iCS_S_MembersCall_group_def_48']],
      [
        'iCS_S_MemberCall',
        ['iCS_S_MemberCall_group_50', 'iCS_S_MemberCall_group_53'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      ['dictionaryCallStmt', ['!', 'ambiguousIdentifier', 'typeHint?']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_57', ['BYVAL']],
      ['arg_group_56', ['arg_group_def_57']],
      ['arg_group_def_58', ['BYREF']],
      ['arg_group_56', ['arg_group_def_58']],
      ['arg_group_def_60', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_56?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_60?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type__group_def_62', ['baseType']],
      ['type__group_61', ['type__group_def_62']],
      ['type__group_def_63', ['complexType']],
      ['type__group_61', ['type__group_def_63']],
      ['type_', ['type__group_61', 'arg_group_def_60?']],
      ['complexType_group_66', ['iCS_S_MemberCall_group_def_51']],
      ['complexType_group_66', ['iCS_S_MemberCall_group_def_52']],
      [
        'complexType_group_def_67',
        ['complexType_group_66', 'ambiguousIdentifier'],
      ],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_67*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType_group_def_69', ['MULT', 'valueStmt']],
      ['baseType', ['STRING', 'baseType_group_def_69?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['fieldLength', ['MULT', 'ambiguousIdentifier']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['ERROR']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {};
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 19, 35, 49, 51, 60, 61, 62, 63, 64, 65, 70, 71, 78, 81, 82,
    83, 84, 85, 86, 88, 90, 93, 95, 98, 99, 108, 109, 110, 111, 113, 114, 115,
    116, 117, 118, 135, 136, 137, 138, 139, 143, 144, 145, 146, 148, 149, 150,
    159,
  ]);
  const parserPredictTable = {
    $START: {
      COMMENT: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      NEWLINE: [0],
      REMCOMMENT: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      COMMENT: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      NEWLINE: [1],
      REMCOMMENT: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
      ALIAS: [9],
      AND: [9],
      ATTRIBUTE: [9],
      AS: [9],
      BEGIN: [9],
      BOOLEAN: [9],
      BYVAL: [9],
      BYREF: [9],
      BYTE: [9],
      CALL: [9],
      CASE: [9],
      CONST: [9],
      DECLARE: [9],
      DEFBOOL: [9],
      DEFBYTE: [9],
      DEFDATE: [9],
      DEFDBL: [9],
      DEFDEC: [9],
      DEFCUR: [9],
      DEFINT: [9],
      DEFLNG: [9],
      DEFOBJ: [9],
      DEFSNG: [9],
      DEFSTR: [9],
      DEFVAR: [9],
      DIM: [9],
      DO: [9],
      DOUBLE: [9],
      EACH: [9],
      ELSE: [9],
      ELSEIF: [9],
      END_ENUM: [9],
      END_FUNCTION: [9],
      END_IF: [9],
      END_PROPERTY: [9],
      END_SELECT: [9],
      END_SUB: [9],
      END_TYPE: [9],
      END_WITH: [9],
      END: [9],
      ENUM: [9],
      EQV: [9],
      ERASE: [9],
      ERROR: [9],
      EVENT: [9],
      EXIT_DO: [9],
      EXIT_FOR: [9],
      EXIT_FUNCTION: [9],
      EXIT_PROPERTY: [9],
      EXIT_SUB: [9],
      FALSE: [9],
      FRIEND: [9],
      FOR: [9],
      FUNCTION: [9],
      GET: [9],
      GLOBAL: [9],
      GOSUB: [9],
      GOTO: [9],
      IF: [9],
      IMPLEMENTS: [9],
      IN: [9],
      IS: [9],
      INTEGER: [9],
      LONG: [9],
      LOOP: [9],
      LEN: [9],
      LET: [9],
      LIB: [9],
      LIKE: [9],
      LSET: [9],
      MACRO_CONST: [9],
      MACRO_IF: [9],
      MACRO_ELSEIF: [9],
      MACRO_ELSE: [9],
      MACRO_END_IF: [9],
      MOD: [9],
      NEXT: [9],
      NEW: [9],
      NOT: [9],
      NOTHING: [9],
      NULL: [9],
      ON: [9],
      ON_ERROR: [9],
      ON_LOCAL_ERROR: [9],
      OPTIONAL: [9],
      OPTION_BASE: [9],
      OPTION_EXPLICIT: [9],
      OPTION_COMPARE: [9],
      OPTION_PRIVATE_MODULE: [9],
      OR: [9],
      PARAMARRAY: [9],
      PRESERVE: [9],
      PRIVATE: [9],
      PROPERTY_GET: [9],
      PROPERTY_LET: [9],
      PROPERTY_SET: [9],
      PTRSAFE: [9],
      PUBLIC: [9],
      RAISEEVENT: [9],
      REDIM: [9],
      RESET: [9],
      RESUME: [9],
      RETURN: [9],
      SELECT: [9],
      SET: [9],
      SINGLE: [9],
      STATIC: [9],
      STEP: [9],
      STOP: [9],
      STRING: [9],
      SUB: [9],
      THEN: [9],
      TO: [9],
      TRUE: [9],
      TYPEOF: [9],
      UNTIL: [9],
      VARIANT: [9],
      WEND: [9],
      WHILE: [9],
      WITH: [9],
      WITHEVENTS: [9],
      XOR: [9],
      IDENTIFIER: [9],
      '.': [9],
      '!': [9],
    },
    moduleDeclarations_group_def_5: {
      NEWLINE: [10],
      COMMENT: [10],
      REMCOMMENT: [10],
    },
    moduleDeclarations: {
      COMMENT: [11],
      DIM: [11],
      STATIC: [11],
      PRIVATE: [11],
      PUBLIC: [11],
      FRIEND: [11],
      GLOBAL: [11],
      OPTION_BASE: [11],
      OPTION_COMPARE: [11],
      OPTION_EXPLICIT: [11],
      OPTION_PRIVATE_MODULE: [11],
    },
    moduleDeclarationsElement: {
      COMMENT: [12],
      DIM: [13],
      STATIC: [13],
      PRIVATE: [13],
      PUBLIC: [13],
      FRIEND: [13],
      GLOBAL: [13],
      OPTION_BASE: [14],
      OPTION_COMPARE: [14],
      OPTION_EXPLICIT: [14],
      OPTION_PRIVATE_MODULE: [14],
    },
    moduleOption: {
      OPTION_BASE: [15],
      OPTION_COMPARE: [16],
      OPTION_EXPLICIT: [17],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleBody_group_def_7: {
      NEWLINE: [19],
      COMMENT: [19],
      REMCOMMENT: [19],
    },
    moduleBody: {
      PRIVATE: [20],
      PUBLIC: [20],
      FRIEND: [20],
      GLOBAL: [20],
      STATIC: [20],
      FUNCTION: [20],
      PROPERTY_GET: [20],
      PROPERTY_SET: [20],
      PROPERTY_LET: [20],
      SUB: [20],
    },
    moduleBodyElement: {
      PRIVATE: [21, 22, 23, 24, 25],
      PUBLIC: [21, 22, 23, 24, 25],
      FRIEND: [21, 22, 23, 24, 25],
      GLOBAL: [21, 22, 23, 24, 25],
      STATIC: [21, 22, 23, 24, 25],
      FUNCTION: [21],
      PROPERTY_GET: [22],
      PROPERTY_SET: [23],
      PROPERTY_LET: [24],
      SUB: [25],
    },
    visibility: {
      PRIVATE: [26],
      PUBLIC: [27],
      FRIEND: [28],
      GLOBAL: [29],
    },
    subStmt: {
      PRIVATE: [30],
      PUBLIC: [30],
      FRIEND: [30],
      GLOBAL: [30],
      STATIC: [30],
      SUB: [30],
    },
    propertyGetStmt: {
      PRIVATE: [31],
      PUBLIC: [31],
      FRIEND: [31],
      GLOBAL: [31],
      STATIC: [31],
      PROPERTY_GET: [31],
    },
    propertySetStmt: {
      PRIVATE: [32],
      PUBLIC: [32],
      FRIEND: [32],
      GLOBAL: [32],
      STATIC: [32],
      PROPERTY_SET: [32],
    },
    propertyLetStmt: {
      PRIVATE: [33],
      PUBLIC: [33],
      FRIEND: [33],
      GLOBAL: [33],
      STATIC: [33],
      PROPERTY_LET: [33],
    },
    functionStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      FUNCTION: [34],
    },
    block_group_def_9: {
      NEWLINE: [35],
      COMMENT: [35],
      REMCOMMENT: [35],
      COLON: [35],
      ALIAS: [35],
      AND: [35],
      ATTRIBUTE: [35],
      AS: [35],
      BEGIN: [35],
      BOOLEAN: [35],
      BYVAL: [35],
      BYREF: [35],
      BYTE: [35],
      CALL: [35],
      CASE: [35],
      CONST: [35],
      DECLARE: [35],
      DEFBOOL: [35],
      DEFBYTE: [35],
      DEFDATE: [35],
      DEFDBL: [35],
      DEFDEC: [35],
      DEFCUR: [35],
      DEFINT: [35],
      DEFLNG: [35],
      DEFOBJ: [35],
      DEFSNG: [35],
      DEFSTR: [35],
      DEFVAR: [35],
      DIM: [35],
      DO: [35],
      DOUBLE: [35],
      EACH: [35],
      ELSE: [35],
      ELSEIF: [35],
      END_ENUM: [35],
      END_FUNCTION: [35],
      END_IF: [35],
      END_PROPERTY: [35],
      END_SELECT: [35],
      END_SUB: [35],
      END_TYPE: [35],
      END_WITH: [35],
      END: [35],
      ENUM: [35],
      EQV: [35],
      ERASE: [35],
      ERROR: [35],
      EVENT: [35],
      EXIT_DO: [35],
      EXIT_FOR: [35],
      EXIT_FUNCTION: [35],
      EXIT_PROPERTY: [35],
      EXIT_SUB: [35],
      FALSE: [35],
      FRIEND: [35],
      FOR: [35],
      FUNCTION: [35],
      GET: [35],
      GLOBAL: [35],
      GOSUB: [35],
      GOTO: [35],
      IF: [35],
      IMPLEMENTS: [35],
      IN: [35],
      IS: [35],
      INTEGER: [35],
      LONG: [35],
      LOOP: [35],
      LEN: [35],
      LET: [35],
      LIB: [35],
      LIKE: [35],
      LSET: [35],
      MACRO_CONST: [35],
      MACRO_IF: [35],
      MACRO_ELSEIF: [35],
      MACRO_ELSE: [35],
      MACRO_END_IF: [35],
      MOD: [35],
      NEXT: [35],
      NEW: [35],
      NOT: [35],
      NOTHING: [35],
      NULL: [35],
      ON: [35],
      ON_ERROR: [35],
      ON_LOCAL_ERROR: [35],
      OPTIONAL: [35],
      OPTION_BASE: [35],
      OPTION_EXPLICIT: [35],
      OPTION_COMPARE: [35],
      OPTION_PRIVATE_MODULE: [35],
      OR: [35],
      PARAMARRAY: [35],
      PRESERVE: [35],
      PRIVATE: [35],
      PROPERTY_GET: [35],
      PROPERTY_LET: [35],
      PROPERTY_SET: [35],
      PTRSAFE: [35],
      PUBLIC: [35],
      RAISEEVENT: [35],
      REDIM: [35],
      RESET: [35],
      RESUME: [35],
      RETURN: [35],
      SELECT: [35],
      SET: [35],
      SINGLE: [35],
      STATIC: [35],
      STEP: [35],
      STOP: [35],
      STRING: [35],
      SUB: [35],
      THEN: [35],
      TO: [35],
      TRUE: [35],
      TYPEOF: [35],
      UNTIL: [35],
      VARIANT: [35],
      WEND: [35],
      WHILE: [35],
      WITH: [35],
      WITHEVENTS: [35],
      XOR: [35],
      IDENTIFIER: [35],
      '.': [35],
      '!': [35],
    },
    block: {
      ALIAS: [36],
      AND: [36],
      ATTRIBUTE: [36],
      AS: [36],
      BEGIN: [36],
      BOOLEAN: [36],
      BYVAL: [36],
      BYREF: [36],
      BYTE: [36],
      CALL: [36],
      CASE: [36],
      CONST: [36],
      DECLARE: [36],
      DEFBOOL: [36],
      DEFBYTE: [36],
      DEFDATE: [36],
      DEFDBL: [36],
      DEFDEC: [36],
      DEFCUR: [36],
      DEFINT: [36],
      DEFLNG: [36],
      DEFOBJ: [36],
      DEFSNG: [36],
      DEFSTR: [36],
      DEFVAR: [36],
      DIM: [36],
      DO: [36],
      DOUBLE: [36],
      EACH: [36],
      ELSE: [36],
      ELSEIF: [36],
      END_ENUM: [36],
      END_FUNCTION: [36],
      END_IF: [36],
      END_PROPERTY: [36],
      END_SELECT: [36],
      END_SUB: [36],
      END_TYPE: [36],
      END_WITH: [36],
      END: [36],
      ENUM: [36],
      EQV: [36],
      ERASE: [36],
      ERROR: [36],
      EVENT: [36],
      EXIT_DO: [36],
      EXIT_FOR: [36],
      EXIT_FUNCTION: [36],
      EXIT_PROPERTY: [36],
      EXIT_SUB: [36],
      FALSE: [36],
      FRIEND: [36],
      FOR: [36],
      FUNCTION: [36],
      GET: [36],
      GLOBAL: [36],
      GOSUB: [36],
      GOTO: [36],
      IF: [36],
      IMPLEMENTS: [36],
      IN: [36],
      IS: [36],
      INTEGER: [36],
      LONG: [36],
      LOOP: [36],
      LEN: [36],
      LET: [36],
      LIB: [36],
      LIKE: [36],
      LSET: [36],
      MACRO_CONST: [36],
      MACRO_IF: [36],
      MACRO_ELSEIF: [36],
      MACRO_ELSE: [36],
      MACRO_END_IF: [36],
      MOD: [36],
      NEXT: [36],
      NEW: [36],
      NOT: [36],
      NOTHING: [36],
      NULL: [36],
      ON: [36],
      ON_ERROR: [36],
      ON_LOCAL_ERROR: [36],
      OPTIONAL: [36],
      OPTION_BASE: [36],
      OPTION_EXPLICIT: [36],
      OPTION_COMPARE: [36],
      OPTION_PRIVATE_MODULE: [36],
      OR: [36],
      PARAMARRAY: [36],
      PRESERVE: [36],
      PRIVATE: [36],
      PROPERTY_GET: [36],
      PROPERTY_LET: [36],
      PROPERTY_SET: [36],
      PTRSAFE: [36],
      PUBLIC: [36],
      RAISEEVENT: [36],
      REDIM: [36],
      RESET: [36],
      RESUME: [36],
      RETURN: [36],
      SELECT: [36],
      SET: [36],
      SINGLE: [36],
      STATIC: [36],
      STEP: [36],
      STOP: [36],
      STRING: [36],
      SUB: [36],
      THEN: [36],
      TO: [36],
      TRUE: [36],
      TYPEOF: [36],
      UNTIL: [36],
      VARIANT: [36],
      WEND: [36],
      WHILE: [36],
      WITH: [36],
      WITHEVENTS: [36],
      XOR: [36],
      IDENTIFIER: [36],
      '.': [36],
      '!': [36],
    },
    blockStmt: {
      ALIAS: [37, 44, 46],
      AND: [37, 44, 46],
      ATTRIBUTE: [37, 44, 46],
      AS: [37, 44, 46],
      BEGIN: [37, 44, 46],
      BOOLEAN: [37, 44, 46],
      BYVAL: [37, 44, 46],
      BYREF: [37, 44, 46],
      BYTE: [37, 44, 46],
      CALL: [37, 41, 44, 46],
      CASE: [37, 44, 46],
      CONST: [37, 44, 46],
      DECLARE: [37, 44, 46],
      DEFBOOL: [37, 44, 46],
      DEFBYTE: [37, 44, 46],
      DEFDATE: [37, 44, 46],
      DEFDBL: [37, 44, 46],
      DEFDEC: [37, 44, 46],
      DEFCUR: [37, 44, 46],
      DEFINT: [37, 44, 46],
      DEFLNG: [37, 44, 46],
      DEFOBJ: [37, 44, 46],
      DEFSNG: [37, 44, 46],
      DEFSTR: [37, 44, 46],
      DEFVAR: [37, 44, 46],
      DIM: [37, 44, 45, 46],
      DO: [37, 44, 46],
      DOUBLE: [37, 44, 46],
      EACH: [37, 44, 46],
      ELSE: [37, 44, 46],
      ELSEIF: [37, 44, 46],
      END_ENUM: [37, 44, 46],
      END_FUNCTION: [37, 44, 46],
      END_IF: [37, 44, 46],
      END_PROPERTY: [37, 44, 46],
      END_SELECT: [37, 44, 46],
      END_SUB: [37, 44, 46],
      END_TYPE: [37, 44, 46],
      END_WITH: [37, 44, 46],
      END: [37, 40, 44, 46],
      ENUM: [37, 44, 46],
      EQV: [37, 44, 46],
      ERASE: [37, 39, 44, 46],
      ERROR: [37, 44, 46],
      EVENT: [37, 44, 46],
      EXIT_DO: [37, 40, 44, 46],
      EXIT_FOR: [37, 40, 44, 46],
      EXIT_FUNCTION: [37, 40, 44, 46],
      EXIT_PROPERTY: [37, 40, 44, 46],
      EXIT_SUB: [37, 40, 44, 46],
      FALSE: [37, 44, 46],
      FRIEND: [37, 44, 45, 46],
      FOR: [37, 44, 46],
      FUNCTION: [37, 44, 46],
      GET: [37, 44, 46],
      GLOBAL: [37, 44, 45, 46],
      GOSUB: [37, 44, 46],
      GOTO: [37, 38, 44, 46],
      IF: [37, 44, 46],
      IMPLEMENTS: [37, 44, 46],
      IN: [37, 44, 46],
      IS: [37, 44, 46],
      INTEGER: [37, 44, 46],
      LONG: [37, 44, 46],
      LOOP: [37, 44, 46],
      LEN: [37, 44, 46],
      LET: [37, 44, 46],
      LIB: [37, 44, 46],
      LIKE: [37, 44, 46],
      LSET: [37, 44, 46],
      MACRO_CONST: [37, 44, 46],
      MACRO_IF: [37, 44, 46],
      MACRO_ELSEIF: [37, 44, 46],
      MACRO_ELSE: [37, 44, 46],
      MACRO_END_IF: [37, 44, 46],
      MOD: [37, 44, 46],
      NEXT: [37, 44, 46],
      NEW: [37, 44, 46],
      NOT: [37, 44, 46],
      NOTHING: [37, 44, 46],
      NULL: [37, 44, 46],
      ON: [37, 44, 46],
      ON_ERROR: [37, 44, 46],
      ON_LOCAL_ERROR: [37, 44, 46],
      OPTIONAL: [37, 44, 46],
      OPTION_BASE: [37, 44, 46],
      OPTION_EXPLICIT: [37, 44, 46],
      OPTION_COMPARE: [37, 44, 46],
      OPTION_PRIVATE_MODULE: [37, 44, 46],
      OR: [37, 44, 46],
      PARAMARRAY: [37, 44, 46],
      PRESERVE: [37, 44, 46],
      PRIVATE: [37, 44, 45, 46],
      PROPERTY_GET: [37, 44, 46],
      PROPERTY_LET: [37, 44, 46],
      PROPERTY_SET: [37, 44, 46],
      PTRSAFE: [37, 44, 46],
      PUBLIC: [37, 44, 45, 46],
      RAISEEVENT: [37, 44, 46],
      REDIM: [37, 43, 44, 46],
      RESET: [37, 44, 46],
      RESUME: [37, 44, 46],
      RETURN: [37, 44, 46],
      SELECT: [37, 44, 46],
      SET: [37, 42, 44, 46],
      SINGLE: [37, 44, 46],
      STATIC: [37, 44, 45, 46],
      STEP: [37, 44, 46],
      STOP: [37, 44, 46],
      STRING: [37, 44, 46],
      SUB: [37, 44, 46],
      THEN: [37, 44, 46],
      TO: [37, 44, 46],
      TRUE: [37, 44, 46],
      TYPEOF: [37, 44, 46],
      UNTIL: [37, 44, 46],
      VARIANT: [37, 44, 46],
      WEND: [37, 44, 46],
      WHILE: [37, 44, 46],
      WITH: [37, 44, 46],
      WITHEVENTS: [37, 44, 46],
      XOR: [37, 44, 46],
      IDENTIFIER: [37, 44, 46],
      '.': [44, 46],
      '!': [44, 46],
    },
    lineLabel: {
      ALIAS: [47],
      AND: [47],
      ATTRIBUTE: [47],
      AS: [47],
      BEGIN: [47],
      BOOLEAN: [47],
      BYVAL: [47],
      BYREF: [47],
      BYTE: [47],
      CALL: [47],
      CASE: [47],
      CONST: [47],
      DECLARE: [47],
      DEFBOOL: [47],
      DEFBYTE: [47],
      DEFDATE: [47],
      DEFDBL: [47],
      DEFDEC: [47],
      DEFCUR: [47],
      DEFINT: [47],
      DEFLNG: [47],
      DEFOBJ: [47],
      DEFSNG: [47],
      DEFSTR: [47],
      DEFVAR: [47],
      DIM: [47],
      DO: [47],
      DOUBLE: [47],
      EACH: [47],
      ELSE: [47],
      ELSEIF: [47],
      END_ENUM: [47],
      END_FUNCTION: [47],
      END_IF: [47],
      END_PROPERTY: [47],
      END_SELECT: [47],
      END_SUB: [47],
      END_TYPE: [47],
      END_WITH: [47],
      END: [47],
      ENUM: [47],
      EQV: [47],
      ERASE: [47],
      ERROR: [47],
      EVENT: [47],
      EXIT_DO: [47],
      EXIT_FOR: [47],
      EXIT_FUNCTION: [47],
      EXIT_PROPERTY: [47],
      EXIT_SUB: [47],
      FALSE: [47],
      FRIEND: [47],
      FOR: [47],
      FUNCTION: [47],
      GET: [47],
      GLOBAL: [47],
      GOSUB: [47],
      GOTO: [47],
      IF: [47],
      IMPLEMENTS: [47],
      IN: [47],
      IS: [47],
      INTEGER: [47],
      LONG: [47],
      LOOP: [47],
      LEN: [47],
      LET: [47],
      LIB: [47],
      LIKE: [47],
      LSET: [47],
      MACRO_CONST: [47],
      MACRO_IF: [47],
      MACRO_ELSEIF: [47],
      MACRO_ELSE: [47],
      MACRO_END_IF: [47],
      MOD: [47],
      NEXT: [47],
      NEW: [47],
      NOT: [47],
      NOTHING: [47],
      NULL: [47],
      ON: [47],
      ON_ERROR: [47],
      ON_LOCAL_ERROR: [47],
      OPTIONAL: [47],
      OPTION_BASE: [47],
      OPTION_EXPLICIT: [47],
      OPTION_COMPARE: [47],
      OPTION_PRIVATE_MODULE: [47],
      OR: [47],
      PARAMARRAY: [47],
      PRESERVE: [47],
      PRIVATE: [47],
      PROPERTY_GET: [47],
      PROPERTY_LET: [47],
      PROPERTY_SET: [47],
      PTRSAFE: [47],
      PUBLIC: [47],
      RAISEEVENT: [47],
      REDIM: [47],
      RESET: [47],
      RESUME: [47],
      RETURN: [47],
      SELECT: [47],
      SET: [47],
      SINGLE: [47],
      STATIC: [47],
      STEP: [47],
      STOP: [47],
      STRING: [47],
      SUB: [47],
      THEN: [47],
      TO: [47],
      TRUE: [47],
      TYPEOF: [47],
      UNTIL: [47],
      VARIANT: [47],
      WEND: [47],
      WHILE: [47],
      WITH: [47],
      WITHEVENTS: [47],
      XOR: [47],
      IDENTIFIER: [47],
    },
    goToStmt: {
      GOTO: [48],
    },
    eraseStmt_group_def_11: {
      ',': [49],
    },
    eraseStmt: {
      ERASE: [50],
    },
    redimStmt_group_def_13: {
      ',': [51],
    },
    redimStmt: {
      REDIM: [52],
    },
    redimSubStmt: {
      '.': [53],
      '!': [53],
      ALIAS: [53],
      AND: [53],
      ATTRIBUTE: [53],
      AS: [53],
      BEGIN: [53],
      BOOLEAN: [53],
      BYVAL: [53],
      BYREF: [53],
      BYTE: [53],
      CALL: [53],
      CASE: [53],
      CONST: [53],
      DECLARE: [53],
      DEFBOOL: [53],
      DEFBYTE: [53],
      DEFDATE: [53],
      DEFDBL: [53],
      DEFDEC: [53],
      DEFCUR: [53],
      DEFINT: [53],
      DEFLNG: [53],
      DEFOBJ: [53],
      DEFSNG: [53],
      DEFSTR: [53],
      DEFVAR: [53],
      DIM: [53],
      DO: [53],
      DOUBLE: [53],
      EACH: [53],
      ELSE: [53],
      ELSEIF: [53],
      END_ENUM: [53],
      END_FUNCTION: [53],
      END_IF: [53],
      END_PROPERTY: [53],
      END_SELECT: [53],
      END_SUB: [53],
      END_TYPE: [53],
      END_WITH: [53],
      END: [53],
      ENUM: [53],
      EQV: [53],
      ERASE: [53],
      ERROR: [53],
      EVENT: [53],
      EXIT_DO: [53],
      EXIT_FOR: [53],
      EXIT_FUNCTION: [53],
      EXIT_PROPERTY: [53],
      EXIT_SUB: [53],
      FALSE: [53],
      FRIEND: [53],
      FOR: [53],
      FUNCTION: [53],
      GET: [53],
      GLOBAL: [53],
      GOSUB: [53],
      GOTO: [53],
      IF: [53],
      IMPLEMENTS: [53],
      IN: [53],
      IS: [53],
      INTEGER: [53],
      LONG: [53],
      LOOP: [53],
      LEN: [53],
      LET: [53],
      LIB: [53],
      LIKE: [53],
      LSET: [53],
      MACRO_CONST: [53],
      MACRO_IF: [53],
      MACRO_ELSEIF: [53],
      MACRO_ELSE: [53],
      MACRO_END_IF: [53],
      MOD: [53],
      NEXT: [53],
      NEW: [53],
      NOT: [53],
      NOTHING: [53],
      NULL: [53],
      ON: [53],
      ON_ERROR: [53],
      ON_LOCAL_ERROR: [53],
      OPTIONAL: [53],
      OPTION_BASE: [53],
      OPTION_EXPLICIT: [53],
      OPTION_COMPARE: [53],
      OPTION_PRIVATE_MODULE: [53],
      OR: [53],
      PARAMARRAY: [53],
      PRESERVE: [53],
      PRIVATE: [53],
      PROPERTY_GET: [53],
      PROPERTY_LET: [53],
      PROPERTY_SET: [53],
      PTRSAFE: [53],
      PUBLIC: [53],
      RAISEEVENT: [53],
      REDIM: [53],
      RESET: [53],
      RESUME: [53],
      RETURN: [53],
      SELECT: [53],
      SET: [53],
      SINGLE: [53],
      STATIC: [53],
      STEP: [53],
      STOP: [53],
      STRING: [53],
      SUB: [53],
      THEN: [53],
      TO: [53],
      TRUE: [53],
      TYPEOF: [53],
      UNTIL: [53],
      VARIANT: [53],
      WEND: [53],
      WHILE: [53],
      WITH: [53],
      WITHEVENTS: [53],
      XOR: [53],
      IDENTIFIER: [53],
    },
    exitStmt: {
      EXIT_DO: [54],
      EXIT_FOR: [55],
      EXIT_FUNCTION: [56],
      EXIT_PROPERTY: [57],
      EXIT_SUB: [58],
      END: [59],
    },
    letStmt_group_def_15: {
      EQ: [60],
    },
    letStmt_group_14: {
      EQ: [61],
      PLUS_EQ: [63],
      MINUS_EQ: [65],
    },
    letStmt_group_def_16: {
      PLUS_EQ: [62],
    },
    letStmt_group_def_17: {
      MINUS_EQ: [64],
    },
    letStmt: {
      LET: [66],
      '.': [66],
      '!': [66],
      ALIAS: [66],
      AND: [66],
      ATTRIBUTE: [66],
      AS: [66],
      BEGIN: [66],
      BOOLEAN: [66],
      BYVAL: [66],
      BYREF: [66],
      BYTE: [66],
      CALL: [66],
      CASE: [66],
      CONST: [66],
      DECLARE: [66],
      DEFBOOL: [66],
      DEFBYTE: [66],
      DEFDATE: [66],
      DEFDBL: [66],
      DEFDEC: [66],
      DEFCUR: [66],
      DEFINT: [66],
      DEFLNG: [66],
      DEFOBJ: [66],
      DEFSNG: [66],
      DEFSTR: [66],
      DEFVAR: [66],
      DIM: [66],
      DO: [66],
      DOUBLE: [66],
      EACH: [66],
      ELSE: [66],
      ELSEIF: [66],
      END_ENUM: [66],
      END_FUNCTION: [66],
      END_IF: [66],
      END_PROPERTY: [66],
      END_SELECT: [66],
      END_SUB: [66],
      END_TYPE: [66],
      END_WITH: [66],
      END: [66],
      ENUM: [66],
      EQV: [66],
      ERASE: [66],
      ERROR: [66],
      EVENT: [66],
      EXIT_DO: [66],
      EXIT_FOR: [66],
      EXIT_FUNCTION: [66],
      EXIT_PROPERTY: [66],
      EXIT_SUB: [66],
      FALSE: [66],
      FRIEND: [66],
      FOR: [66],
      FUNCTION: [66],
      GET: [66],
      GLOBAL: [66],
      GOSUB: [66],
      GOTO: [66],
      IF: [66],
      IMPLEMENTS: [66],
      IN: [66],
      IS: [66],
      INTEGER: [66],
      LONG: [66],
      LOOP: [66],
      LEN: [66],
      LIB: [66],
      LIKE: [66],
      LSET: [66],
      MACRO_CONST: [66],
      MACRO_IF: [66],
      MACRO_ELSEIF: [66],
      MACRO_ELSE: [66],
      MACRO_END_IF: [66],
      MOD: [66],
      NEXT: [66],
      NEW: [66],
      NOT: [66],
      NOTHING: [66],
      NULL: [66],
      ON: [66],
      ON_ERROR: [66],
      ON_LOCAL_ERROR: [66],
      OPTIONAL: [66],
      OPTION_BASE: [66],
      OPTION_EXPLICIT: [66],
      OPTION_COMPARE: [66],
      OPTION_PRIVATE_MODULE: [66],
      OR: [66],
      PARAMARRAY: [66],
      PRESERVE: [66],
      PRIVATE: [66],
      PROPERTY_GET: [66],
      PROPERTY_LET: [66],
      PROPERTY_SET: [66],
      PTRSAFE: [66],
      PUBLIC: [66],
      RAISEEVENT: [66],
      REDIM: [66],
      RESET: [66],
      RESUME: [66],
      RETURN: [66],
      SELECT: [66],
      SET: [66],
      SINGLE: [66],
      STATIC: [66],
      STEP: [66],
      STOP: [66],
      STRING: [66],
      SUB: [66],
      THEN: [66],
      TO: [66],
      TRUE: [66],
      TYPEOF: [66],
      UNTIL: [66],
      VARIANT: [66],
      WEND: [66],
      WHILE: [66],
      WITH: [66],
      WITHEVENTS: [66],
      XOR: [66],
      IDENTIFIER: [66],
    },
    setStmt: {
      SET: [67],
    },
    explicitCallStmt: {
      CALL: [68, 69],
    },
    eCS_MemberProcedureCall_group_def_19: {
      LPAREN: [70],
    },
    eCS_MemberProcedureCall_group_def_21: {
      LPAREN: [71],
    },
    eCS_MemberProcedureCall: {
      CALL: [72],
    },
    eCS_ProcedureCall: {
      CALL: [73],
    },
    implicitCallStmt_InBlock: {
      '.': [74],
      '!': [74],
      ALIAS: [74, 75],
      AND: [74, 75],
      ATTRIBUTE: [74, 75],
      AS: [74, 75],
      BEGIN: [74, 75],
      BOOLEAN: [74, 75],
      BYVAL: [74, 75],
      BYREF: [74, 75],
      BYTE: [74, 75],
      CALL: [74, 75],
      CASE: [74, 75],
      CONST: [74, 75],
      DECLARE: [74, 75],
      DEFBOOL: [74, 75],
      DEFBYTE: [74, 75],
      DEFDATE: [74, 75],
      DEFDBL: [74, 75],
      DEFDEC: [74, 75],
      DEFCUR: [74, 75],
      DEFINT: [74, 75],
      DEFLNG: [74, 75],
      DEFOBJ: [74, 75],
      DEFSNG: [74, 75],
      DEFSTR: [74, 75],
      DEFVAR: [74, 75],
      DIM: [74, 75],
      DO: [74, 75],
      DOUBLE: [74, 75],
      EACH: [74, 75],
      ELSE: [74, 75],
      ELSEIF: [74, 75],
      END_ENUM: [74, 75],
      END_FUNCTION: [74, 75],
      END_IF: [74, 75],
      END_PROPERTY: [74, 75],
      END_SELECT: [74, 75],
      END_SUB: [74, 75],
      END_TYPE: [74, 75],
      END_WITH: [74, 75],
      END: [74, 75],
      ENUM: [74, 75],
      EQV: [74, 75],
      ERASE: [74, 75],
      ERROR: [74, 75],
      EVENT: [74, 75],
      EXIT_DO: [74, 75],
      EXIT_FOR: [74, 75],
      EXIT_FUNCTION: [74, 75],
      EXIT_PROPERTY: [74, 75],
      EXIT_SUB: [74, 75],
      FALSE: [74, 75],
      FRIEND: [74, 75],
      FOR: [74, 75],
      FUNCTION: [74, 75],
      GET: [74, 75],
      GLOBAL: [74, 75],
      GOSUB: [74, 75],
      GOTO: [74, 75],
      IF: [74, 75],
      IMPLEMENTS: [74, 75],
      IN: [74, 75],
      IS: [74, 75],
      INTEGER: [74, 75],
      LONG: [74, 75],
      LOOP: [74, 75],
      LEN: [74, 75],
      LET: [74, 75],
      LIB: [74, 75],
      LIKE: [74, 75],
      LSET: [74, 75],
      MACRO_CONST: [74, 75],
      MACRO_IF: [74, 75],
      MACRO_ELSEIF: [74, 75],
      MACRO_ELSE: [74, 75],
      MACRO_END_IF: [74, 75],
      MOD: [74, 75],
      NEXT: [74, 75],
      NEW: [74, 75],
      NOT: [74, 75],
      NOTHING: [74, 75],
      NULL: [74, 75],
      ON: [74, 75],
      ON_ERROR: [74, 75],
      ON_LOCAL_ERROR: [74, 75],
      OPTIONAL: [74, 75],
      OPTION_BASE: [74, 75],
      OPTION_EXPLICIT: [74, 75],
      OPTION_COMPARE: [74, 75],
      OPTION_PRIVATE_MODULE: [74, 75],
      OR: [74, 75],
      PARAMARRAY: [74, 75],
      PRESERVE: [74, 75],
      PRIVATE: [74, 75],
      PROPERTY_GET: [74, 75],
      PROPERTY_LET: [74, 75],
      PROPERTY_SET: [74, 75],
      PTRSAFE: [74, 75],
      PUBLIC: [74, 75],
      RAISEEVENT: [74, 75],
      REDIM: [74, 75],
      RESET: [74, 75],
      RESUME: [74, 75],
      RETURN: [74, 75],
      SELECT: [74, 75],
      SET: [74, 75],
      SINGLE: [74, 75],
      STATIC: [74, 75],
      STEP: [74, 75],
      STOP: [74, 75],
      STRING: [74, 75],
      SUB: [74, 75],
      THEN: [74, 75],
      TO: [74, 75],
      TRUE: [74, 75],
      TYPEOF: [74, 75],
      UNTIL: [74, 75],
      VARIANT: [74, 75],
      WEND: [74, 75],
      WHILE: [74, 75],
      WITH: [74, 75],
      WITHEVENTS: [74, 75],
      XOR: [74, 75],
      IDENTIFIER: [74, 75],
    },
    iCS_B_MemberProcedureCall: {
      '.': [76],
      '!': [76],
      ALIAS: [76],
      AND: [76],
      ATTRIBUTE: [76],
      AS: [76],
      BEGIN: [76],
      BOOLEAN: [76],
      BYVAL: [76],
      BYREF: [76],
      BYTE: [76],
      CALL: [76],
      CASE: [76],
      CONST: [76],
      DECLARE: [76],
      DEFBOOL: [76],
      DEFBYTE: [76],
      DEFDATE: [76],
      DEFDBL: [76],
      DEFDEC: [76],
      DEFCUR: [76],
      DEFINT: [76],
      DEFLNG: [76],
      DEFOBJ: [76],
      DEFSNG: [76],
      DEFSTR: [76],
      DEFVAR: [76],
      DIM: [76],
      DO: [76],
      DOUBLE: [76],
      EACH: [76],
      ELSE: [76],
      ELSEIF: [76],
      END_ENUM: [76],
      END_FUNCTION: [76],
      END_IF: [76],
      END_PROPERTY: [76],
      END_SELECT: [76],
      END_SUB: [76],
      END_TYPE: [76],
      END_WITH: [76],
      END: [76],
      ENUM: [76],
      EQV: [76],
      ERASE: [76],
      ERROR: [76],
      EVENT: [76],
      EXIT_DO: [76],
      EXIT_FOR: [76],
      EXIT_FUNCTION: [76],
      EXIT_PROPERTY: [76],
      EXIT_SUB: [76],
      FALSE: [76],
      FRIEND: [76],
      FOR: [76],
      FUNCTION: [76],
      GET: [76],
      GLOBAL: [76],
      GOSUB: [76],
      GOTO: [76],
      IF: [76],
      IMPLEMENTS: [76],
      IN: [76],
      IS: [76],
      INTEGER: [76],
      LONG: [76],
      LOOP: [76],
      LEN: [76],
      LET: [76],
      LIB: [76],
      LIKE: [76],
      LSET: [76],
      MACRO_CONST: [76],
      MACRO_IF: [76],
      MACRO_ELSEIF: [76],
      MACRO_ELSE: [76],
      MACRO_END_IF: [76],
      MOD: [76],
      NEXT: [76],
      NEW: [76],
      NOT: [76],
      NOTHING: [76],
      NULL: [76],
      ON: [76],
      ON_ERROR: [76],
      ON_LOCAL_ERROR: [76],
      OPTIONAL: [76],
      OPTION_BASE: [76],
      OPTION_EXPLICIT: [76],
      OPTION_COMPARE: [76],
      OPTION_PRIVATE_MODULE: [76],
      OR: [76],
      PARAMARRAY: [76],
      PRESERVE: [76],
      PRIVATE: [76],
      PROPERTY_GET: [76],
      PROPERTY_LET: [76],
      PROPERTY_SET: [76],
      PTRSAFE: [76],
      PUBLIC: [76],
      RAISEEVENT: [76],
      REDIM: [76],
      RESET: [76],
      RESUME: [76],
      RETURN: [76],
      SELECT: [76],
      SET: [76],
      SINGLE: [76],
      STATIC: [76],
      STEP: [76],
      STOP: [76],
      STRING: [76],
      SUB: [76],
      THEN: [76],
      TO: [76],
      TRUE: [76],
      TYPEOF: [76],
      UNTIL: [76],
      VARIANT: [76],
      WEND: [76],
      WHILE: [76],
      WITH: [76],
      WITHEVENTS: [76],
      XOR: [76],
      IDENTIFIER: [76],
    },
    iCS_B_ProcedureCall: {
      ALIAS: [77],
      AND: [77],
      ATTRIBUTE: [77],
      AS: [77],
      BEGIN: [77],
      BOOLEAN: [77],
      BYVAL: [77],
      BYREF: [77],
      BYTE: [77],
      CALL: [77],
      CASE: [77],
      CONST: [77],
      DECLARE: [77],
      DEFBOOL: [77],
      DEFBYTE: [77],
      DEFDATE: [77],
      DEFDBL: [77],
      DEFDEC: [77],
      DEFCUR: [77],
      DEFINT: [77],
      DEFLNG: [77],
      DEFOBJ: [77],
      DEFSNG: [77],
      DEFSTR: [77],
      DEFVAR: [77],
      DIM: [77],
      DO: [77],
      DOUBLE: [77],
      EACH: [77],
      ELSE: [77],
      ELSEIF: [77],
      END_ENUM: [77],
      END_FUNCTION: [77],
      END_IF: [77],
      END_PROPERTY: [77],
      END_SELECT: [77],
      END_SUB: [77],
      END_TYPE: [77],
      END_WITH: [77],
      END: [77],
      ENUM: [77],
      EQV: [77],
      ERASE: [77],
      ERROR: [77],
      EVENT: [77],
      EXIT_DO: [77],
      EXIT_FOR: [77],
      EXIT_FUNCTION: [77],
      EXIT_PROPERTY: [77],
      EXIT_SUB: [77],
      FALSE: [77],
      FRIEND: [77],
      FOR: [77],
      FUNCTION: [77],
      GET: [77],
      GLOBAL: [77],
      GOSUB: [77],
      GOTO: [77],
      IF: [77],
      IMPLEMENTS: [77],
      IN: [77],
      IS: [77],
      INTEGER: [77],
      LONG: [77],
      LOOP: [77],
      LEN: [77],
      LET: [77],
      LIB: [77],
      LIKE: [77],
      LSET: [77],
      MACRO_CONST: [77],
      MACRO_IF: [77],
      MACRO_ELSEIF: [77],
      MACRO_ELSE: [77],
      MACRO_END_IF: [77],
      MOD: [77],
      NEXT: [77],
      NEW: [77],
      NOT: [77],
      NOTHING: [77],
      NULL: [77],
      ON: [77],
      ON_ERROR: [77],
      ON_LOCAL_ERROR: [77],
      OPTIONAL: [77],
      OPTION_BASE: [77],
      OPTION_EXPLICIT: [77],
      OPTION_COMPARE: [77],
      OPTION_PRIVATE_MODULE: [77],
      OR: [77],
      PARAMARRAY: [77],
      PRESERVE: [77],
      PRIVATE: [77],
      PROPERTY_GET: [77],
      PROPERTY_LET: [77],
      PROPERTY_SET: [77],
      PTRSAFE: [77],
      PUBLIC: [77],
      RAISEEVENT: [77],
      REDIM: [77],
      RESET: [77],
      RESUME: [77],
      RETURN: [77],
      SELECT: [77],
      SET: [77],
      SINGLE: [77],
      STATIC: [77],
      STEP: [77],
      STOP: [77],
      STRING: [77],
      SUB: [77],
      THEN: [77],
      TO: [77],
      TRUE: [77],
      TYPEOF: [77],
      UNTIL: [77],
      VARIANT: [77],
      WEND: [77],
      WHILE: [77],
      WITH: [77],
      WITHEVENTS: [77],
      XOR: [77],
      IDENTIFIER: [77],
    },
    argsCall_group_def_27: {
      ',': [78],
    },
    argsCall: {
      ',': [79],
      INTEGERLITERAL: [79],
      STRINGLITERAL: [79],
      NOTHING: [79],
      NULL: [79],
      TRUE: [79],
      FALSE: [79],
      '.': [79],
      '!': [79],
      ALIAS: [79],
      AND: [79],
      ATTRIBUTE: [79],
      AS: [79],
      BEGIN: [79],
      BOOLEAN: [79],
      BYVAL: [79],
      BYREF: [79],
      BYTE: [79],
      CALL: [79],
      CASE: [79],
      CONST: [79],
      DECLARE: [79],
      DEFBOOL: [79],
      DEFBYTE: [79],
      DEFDATE: [79],
      DEFDBL: [79],
      DEFDEC: [79],
      DEFCUR: [79],
      DEFINT: [79],
      DEFLNG: [79],
      DEFOBJ: [79],
      DEFSNG: [79],
      DEFSTR: [79],
      DEFVAR: [79],
      DIM: [79],
      DO: [79],
      DOUBLE: [79],
      EACH: [79],
      ELSE: [79],
      ELSEIF: [79],
      END_ENUM: [79],
      END_FUNCTION: [79],
      END_IF: [79],
      END_PROPERTY: [79],
      END_SELECT: [79],
      END_SUB: [79],
      END_TYPE: [79],
      END_WITH: [79],
      END: [79],
      ENUM: [79],
      EQV: [79],
      ERASE: [79],
      ERROR: [79],
      EVENT: [79],
      EXIT_DO: [79],
      EXIT_FOR: [79],
      EXIT_FUNCTION: [79],
      EXIT_PROPERTY: [79],
      EXIT_SUB: [79],
      FRIEND: [79],
      FOR: [79],
      FUNCTION: [79],
      GET: [79],
      GLOBAL: [79],
      GOSUB: [79],
      GOTO: [79],
      IF: [79],
      IMPLEMENTS: [79],
      IN: [79],
      IS: [79],
      INTEGER: [79],
      LONG: [79],
      LOOP: [79],
      LEN: [79],
      LET: [79],
      LIB: [79],
      LIKE: [79],
      LSET: [79],
      MACRO_CONST: [79],
      MACRO_IF: [79],
      MACRO_ELSEIF: [79],
      MACRO_ELSE: [79],
      MACRO_END_IF: [79],
      MOD: [79],
      NEXT: [79],
      NEW: [79],
      NOT: [79],
      ON: [79],
      ON_ERROR: [79],
      ON_LOCAL_ERROR: [79],
      OPTIONAL: [79],
      OPTION_BASE: [79],
      OPTION_EXPLICIT: [79],
      OPTION_COMPARE: [79],
      OPTION_PRIVATE_MODULE: [79],
      OR: [79],
      PARAMARRAY: [79],
      PRESERVE: [79],
      PRIVATE: [79],
      PROPERTY_GET: [79],
      PROPERTY_LET: [79],
      PROPERTY_SET: [79],
      PTRSAFE: [79],
      PUBLIC: [79],
      RAISEEVENT: [79],
      REDIM: [79],
      RESET: [79],
      RESUME: [79],
      RETURN: [79],
      SELECT: [79],
      SET: [79],
      SINGLE: [79],
      STATIC: [79],
      STEP: [79],
      STOP: [79],
      STRING: [79],
      SUB: [79],
      THEN: [79],
      TO: [79],
      TYPEOF: [79],
      UNTIL: [79],
      VARIANT: [79],
      WEND: [79],
      WHILE: [79],
      WITH: [79],
      WITHEVENTS: [79],
      XOR: [79],
      IDENTIFIER: [79],
    },
    argCall: {
      INTEGERLITERAL: [80],
      STRINGLITERAL: [80],
      NOTHING: [80],
      NULL: [80],
      TRUE: [80],
      FALSE: [80],
      '.': [80],
      '!': [80],
      ALIAS: [80],
      AND: [80],
      ATTRIBUTE: [80],
      AS: [80],
      BEGIN: [80],
      BOOLEAN: [80],
      BYVAL: [80],
      BYREF: [80],
      BYTE: [80],
      CALL: [80],
      CASE: [80],
      CONST: [80],
      DECLARE: [80],
      DEFBOOL: [80],
      DEFBYTE: [80],
      DEFDATE: [80],
      DEFDBL: [80],
      DEFDEC: [80],
      DEFCUR: [80],
      DEFINT: [80],
      DEFLNG: [80],
      DEFOBJ: [80],
      DEFSNG: [80],
      DEFSTR: [80],
      DEFVAR: [80],
      DIM: [80],
      DO: [80],
      DOUBLE: [80],
      EACH: [80],
      ELSE: [80],
      ELSEIF: [80],
      END_ENUM: [80],
      END_FUNCTION: [80],
      END_IF: [80],
      END_PROPERTY: [80],
      END_SELECT: [80],
      END_SUB: [80],
      END_TYPE: [80],
      END_WITH: [80],
      END: [80],
      ENUM: [80],
      EQV: [80],
      ERASE: [80],
      ERROR: [80],
      EVENT: [80],
      EXIT_DO: [80],
      EXIT_FOR: [80],
      EXIT_FUNCTION: [80],
      EXIT_PROPERTY: [80],
      EXIT_SUB: [80],
      FRIEND: [80],
      FOR: [80],
      FUNCTION: [80],
      GET: [80],
      GLOBAL: [80],
      GOSUB: [80],
      GOTO: [80],
      IF: [80],
      IMPLEMENTS: [80],
      IN: [80],
      IS: [80],
      INTEGER: [80],
      LONG: [80],
      LOOP: [80],
      LEN: [80],
      LET: [80],
      LIB: [80],
      LIKE: [80],
      LSET: [80],
      MACRO_CONST: [80],
      MACRO_IF: [80],
      MACRO_ELSEIF: [80],
      MACRO_ELSE: [80],
      MACRO_END_IF: [80],
      MOD: [80],
      NEXT: [80],
      NEW: [80],
      NOT: [80],
      ON: [80],
      ON_ERROR: [80],
      ON_LOCAL_ERROR: [80],
      OPTIONAL: [80],
      OPTION_BASE: [80],
      OPTION_EXPLICIT: [80],
      OPTION_COMPARE: [80],
      OPTION_PRIVATE_MODULE: [80],
      OR: [80],
      PARAMARRAY: [80],
      PRESERVE: [80],
      PRIVATE: [80],
      PROPERTY_GET: [80],
      PROPERTY_LET: [80],
      PROPERTY_SET: [80],
      PTRSAFE: [80],
      PUBLIC: [80],
      RAISEEVENT: [80],
      REDIM: [80],
      RESET: [80],
      RESUME: [80],
      RETURN: [80],
      SELECT: [80],
      SET: [80],
      SINGLE: [80],
      STATIC: [80],
      STEP: [80],
      STOP: [80],
      STRING: [80],
      SUB: [80],
      THEN: [80],
      TO: [80],
      TYPEOF: [80],
      UNTIL: [80],
      VARIANT: [80],
      WEND: [80],
      WHILE: [80],
      WITH: [80],
      WITHEVENTS: [80],
      XOR: [80],
      IDENTIFIER: [80],
    },
    variableStmt_group_def_29: {
      DIM: [81],
    },
    variableStmt_group_28: {
      DIM: [82],
      STATIC: [84],
      PRIVATE: [86],
      PUBLIC: [86],
      FRIEND: [86],
      GLOBAL: [86],
    },
    variableStmt_group_def_30: {
      STATIC: [83],
    },
    variableStmt_group_def_31: {
      PRIVATE: [85],
      PUBLIC: [85],
      FRIEND: [85],
      GLOBAL: [85],
    },
    variableStmt: {
      DIM: [87],
      STATIC: [87],
      PRIVATE: [87],
      PUBLIC: [87],
      FRIEND: [87],
      GLOBAL: [87],
    },
    variableListStmt_group_def_33: {
      ',': [88],
    },
    variableListStmt: {
      ALIAS: [89],
      AND: [89],
      ATTRIBUTE: [89],
      AS: [89],
      BEGIN: [89],
      BOOLEAN: [89],
      BYVAL: [89],
      BYREF: [89],
      BYTE: [89],
      CALL: [89],
      CASE: [89],
      CONST: [89],
      DECLARE: [89],
      DEFBOOL: [89],
      DEFBYTE: [89],
      DEFDATE: [89],
      DEFDBL: [89],
      DEFDEC: [89],
      DEFCUR: [89],
      DEFINT: [89],
      DEFLNG: [89],
      DEFOBJ: [89],
      DEFSNG: [89],
      DEFSTR: [89],
      DEFVAR: [89],
      DIM: [89],
      DO: [89],
      DOUBLE: [89],
      EACH: [89],
      ELSE: [89],
      ELSEIF: [89],
      END_ENUM: [89],
      END_FUNCTION: [89],
      END_IF: [89],
      END_PROPERTY: [89],
      END_SELECT: [89],
      END_SUB: [89],
      END_TYPE: [89],
      END_WITH: [89],
      END: [89],
      ENUM: [89],
      EQV: [89],
      ERASE: [89],
      ERROR: [89],
      EVENT: [89],
      EXIT_DO: [89],
      EXIT_FOR: [89],
      EXIT_FUNCTION: [89],
      EXIT_PROPERTY: [89],
      EXIT_SUB: [89],
      FALSE: [89],
      FRIEND: [89],
      FOR: [89],
      FUNCTION: [89],
      GET: [89],
      GLOBAL: [89],
      GOSUB: [89],
      GOTO: [89],
      IF: [89],
      IMPLEMENTS: [89],
      IN: [89],
      IS: [89],
      INTEGER: [89],
      LONG: [89],
      LOOP: [89],
      LEN: [89],
      LET: [89],
      LIB: [89],
      LIKE: [89],
      LSET: [89],
      MACRO_CONST: [89],
      MACRO_IF: [89],
      MACRO_ELSEIF: [89],
      MACRO_ELSE: [89],
      MACRO_END_IF: [89],
      MOD: [89],
      NEXT: [89],
      NEW: [89],
      NOT: [89],
      NOTHING: [89],
      NULL: [89],
      ON: [89],
      ON_ERROR: [89],
      ON_LOCAL_ERROR: [89],
      OPTIONAL: [89],
      OPTION_BASE: [89],
      OPTION_EXPLICIT: [89],
      OPTION_COMPARE: [89],
      OPTION_PRIVATE_MODULE: [89],
      OR: [89],
      PARAMARRAY: [89],
      PRESERVE: [89],
      PRIVATE: [89],
      PROPERTY_GET: [89],
      PROPERTY_LET: [89],
      PROPERTY_SET: [89],
      PTRSAFE: [89],
      PUBLIC: [89],
      RAISEEVENT: [89],
      REDIM: [89],
      RESET: [89],
      RESUME: [89],
      RETURN: [89],
      SELECT: [89],
      SET: [89],
      SINGLE: [89],
      STATIC: [89],
      STEP: [89],
      STOP: [89],
      STRING: [89],
      SUB: [89],
      THEN: [89],
      TO: [89],
      TRUE: [89],
      TYPEOF: [89],
      UNTIL: [89],
      VARIANT: [89],
      WEND: [89],
      WHILE: [89],
      WITH: [89],
      WITHEVENTS: [89],
      XOR: [89],
      IDENTIFIER: [89],
    },
    variableSubStmt_group_def_35: {
      LPAREN: [90],
    },
    variableSubStmt: {
      ALIAS: [91],
      AND: [91],
      ATTRIBUTE: [91],
      AS: [91],
      BEGIN: [91],
      BOOLEAN: [91],
      BYVAL: [91],
      BYREF: [91],
      BYTE: [91],
      CALL: [91],
      CASE: [91],
      CONST: [91],
      DECLARE: [91],
      DEFBOOL: [91],
      DEFBYTE: [91],
      DEFDATE: [91],
      DEFDBL: [91],
      DEFDEC: [91],
      DEFCUR: [91],
      DEFINT: [91],
      DEFLNG: [91],
      DEFOBJ: [91],
      DEFSNG: [91],
      DEFSTR: [91],
      DEFVAR: [91],
      DIM: [91],
      DO: [91],
      DOUBLE: [91],
      EACH: [91],
      ELSE: [91],
      ELSEIF: [91],
      END_ENUM: [91],
      END_FUNCTION: [91],
      END_IF: [91],
      END_PROPERTY: [91],
      END_SELECT: [91],
      END_SUB: [91],
      END_TYPE: [91],
      END_WITH: [91],
      END: [91],
      ENUM: [91],
      EQV: [91],
      ERASE: [91],
      ERROR: [91],
      EVENT: [91],
      EXIT_DO: [91],
      EXIT_FOR: [91],
      EXIT_FUNCTION: [91],
      EXIT_PROPERTY: [91],
      EXIT_SUB: [91],
      FALSE: [91],
      FRIEND: [91],
      FOR: [91],
      FUNCTION: [91],
      GET: [91],
      GLOBAL: [91],
      GOSUB: [91],
      GOTO: [91],
      IF: [91],
      IMPLEMENTS: [91],
      IN: [91],
      IS: [91],
      INTEGER: [91],
      LONG: [91],
      LOOP: [91],
      LEN: [91],
      LET: [91],
      LIB: [91],
      LIKE: [91],
      LSET: [91],
      MACRO_CONST: [91],
      MACRO_IF: [91],
      MACRO_ELSEIF: [91],
      MACRO_ELSE: [91],
      MACRO_END_IF: [91],
      MOD: [91],
      NEXT: [91],
      NEW: [91],
      NOT: [91],
      NOTHING: [91],
      NULL: [91],
      ON: [91],
      ON_ERROR: [91],
      ON_LOCAL_ERROR: [91],
      OPTIONAL: [91],
      OPTION_BASE: [91],
      OPTION_EXPLICIT: [91],
      OPTION_COMPARE: [91],
      OPTION_PRIVATE_MODULE: [91],
      OR: [91],
      PARAMARRAY: [91],
      PRESERVE: [91],
      PRIVATE: [91],
      PROPERTY_GET: [91],
      PROPERTY_LET: [91],
      PROPERTY_SET: [91],
      PTRSAFE: [91],
      PUBLIC: [91],
      RAISEEVENT: [91],
      REDIM: [91],
      RESET: [91],
      RESUME: [91],
      RETURN: [91],
      SELECT: [91],
      SET: [91],
      SINGLE: [91],
      STATIC: [91],
      STEP: [91],
      STOP: [91],
      STRING: [91],
      SUB: [91],
      THEN: [91],
      TO: [91],
      TRUE: [91],
      TYPEOF: [91],
      UNTIL: [91],
      VARIANT: [91],
      WEND: [91],
      WHILE: [91],
      WITH: [91],
      WITHEVENTS: [91],
      XOR: [91],
      IDENTIFIER: [91],
    },
    indexes: {
      INTEGERLITERAL: [92],
      STRINGLITERAL: [92],
      NOTHING: [92],
      NULL: [92],
      TRUE: [92],
      FALSE: [92],
      '.': [92],
      '!': [92],
      ALIAS: [92],
      AND: [92],
      ATTRIBUTE: [92],
      AS: [92],
      BEGIN: [92],
      BOOLEAN: [92],
      BYVAL: [92],
      BYREF: [92],
      BYTE: [92],
      CALL: [92],
      CASE: [92],
      CONST: [92],
      DECLARE: [92],
      DEFBOOL: [92],
      DEFBYTE: [92],
      DEFDATE: [92],
      DEFDBL: [92],
      DEFDEC: [92],
      DEFCUR: [92],
      DEFINT: [92],
      DEFLNG: [92],
      DEFOBJ: [92],
      DEFSNG: [92],
      DEFSTR: [92],
      DEFVAR: [92],
      DIM: [92],
      DO: [92],
      DOUBLE: [92],
      EACH: [92],
      ELSE: [92],
      ELSEIF: [92],
      END_ENUM: [92],
      END_FUNCTION: [92],
      END_IF: [92],
      END_PROPERTY: [92],
      END_SELECT: [92],
      END_SUB: [92],
      END_TYPE: [92],
      END_WITH: [92],
      END: [92],
      ENUM: [92],
      EQV: [92],
      ERASE: [92],
      ERROR: [92],
      EVENT: [92],
      EXIT_DO: [92],
      EXIT_FOR: [92],
      EXIT_FUNCTION: [92],
      EXIT_PROPERTY: [92],
      EXIT_SUB: [92],
      FRIEND: [92],
      FOR: [92],
      FUNCTION: [92],
      GET: [92],
      GLOBAL: [92],
      GOSUB: [92],
      GOTO: [92],
      IF: [92],
      IMPLEMENTS: [92],
      IN: [92],
      IS: [92],
      INTEGER: [92],
      LONG: [92],
      LOOP: [92],
      LEN: [92],
      LET: [92],
      LIB: [92],
      LIKE: [92],
      LSET: [92],
      MACRO_CONST: [92],
      MACRO_IF: [92],
      MACRO_ELSEIF: [92],
      MACRO_ELSE: [92],
      MACRO_END_IF: [92],
      MOD: [92],
      NEXT: [92],
      NEW: [92],
      NOT: [92],
      ON: [92],
      ON_ERROR: [92],
      ON_LOCAL_ERROR: [92],
      OPTIONAL: [92],
      OPTION_BASE: [92],
      OPTION_EXPLICIT: [92],
      OPTION_COMPARE: [92],
      OPTION_PRIVATE_MODULE: [92],
      OR: [92],
      PARAMARRAY: [92],
      PRESERVE: [92],
      PRIVATE: [92],
      PROPERTY_GET: [92],
      PROPERTY_LET: [92],
      PROPERTY_SET: [92],
      PTRSAFE: [92],
      PUBLIC: [92],
      RAISEEVENT: [92],
      REDIM: [92],
      RESET: [92],
      RESUME: [92],
      RETURN: [92],
      SELECT: [92],
      SET: [92],
      SINGLE: [92],
      STATIC: [92],
      STEP: [92],
      STOP: [92],
      STRING: [92],
      SUB: [92],
      THEN: [92],
      TO: [92],
      TYPEOF: [92],
      UNTIL: [92],
      VARIANT: [92],
      WEND: [92],
      WHILE: [92],
      WITH: [92],
      WITHEVENTS: [92],
      XOR: [92],
      IDENTIFIER: [92],
    },
    subscript__group_def_38: {
      INTEGERLITERAL: [93],
      STRINGLITERAL: [93],
      NOTHING: [93],
      NULL: [93],
      TRUE: [93],
      FALSE: [93],
      '.': [93],
      '!': [93],
      ALIAS: [93],
      AND: [93],
      ATTRIBUTE: [93],
      AS: [93],
      BEGIN: [93],
      BOOLEAN: [93],
      BYVAL: [93],
      BYREF: [93],
      BYTE: [93],
      CALL: [93],
      CASE: [93],
      CONST: [93],
      DECLARE: [93],
      DEFBOOL: [93],
      DEFBYTE: [93],
      DEFDATE: [93],
      DEFDBL: [93],
      DEFDEC: [93],
      DEFCUR: [93],
      DEFINT: [93],
      DEFLNG: [93],
      DEFOBJ: [93],
      DEFSNG: [93],
      DEFSTR: [93],
      DEFVAR: [93],
      DIM: [93],
      DO: [93],
      DOUBLE: [93],
      EACH: [93],
      ELSE: [93],
      ELSEIF: [93],
      END_ENUM: [93],
      END_FUNCTION: [93],
      END_IF: [93],
      END_PROPERTY: [93],
      END_SELECT: [93],
      END_SUB: [93],
      END_TYPE: [93],
      END_WITH: [93],
      END: [93],
      ENUM: [93],
      EQV: [93],
      ERASE: [93],
      ERROR: [93],
      EVENT: [93],
      EXIT_DO: [93],
      EXIT_FOR: [93],
      EXIT_FUNCTION: [93],
      EXIT_PROPERTY: [93],
      EXIT_SUB: [93],
      FRIEND: [93],
      FOR: [93],
      FUNCTION: [93],
      GET: [93],
      GLOBAL: [93],
      GOSUB: [93],
      GOTO: [93],
      IF: [93],
      IMPLEMENTS: [93],
      IN: [93],
      IS: [93],
      INTEGER: [93],
      LONG: [93],
      LOOP: [93],
      LEN: [93],
      LET: [93],
      LIB: [93],
      LIKE: [93],
      LSET: [93],
      MACRO_CONST: [93],
      MACRO_IF: [93],
      MACRO_ELSEIF: [93],
      MACRO_ELSE: [93],
      MACRO_END_IF: [93],
      MOD: [93],
      NEXT: [93],
      NEW: [93],
      NOT: [93],
      ON: [93],
      ON_ERROR: [93],
      ON_LOCAL_ERROR: [93],
      OPTIONAL: [93],
      OPTION_BASE: [93],
      OPTION_EXPLICIT: [93],
      OPTION_COMPARE: [93],
      OPTION_PRIVATE_MODULE: [93],
      OR: [93],
      PARAMARRAY: [93],
      PRESERVE: [93],
      PRIVATE: [93],
      PROPERTY_GET: [93],
      PROPERTY_LET: [93],
      PROPERTY_SET: [93],
      PTRSAFE: [93],
      PUBLIC: [93],
      RAISEEVENT: [93],
      REDIM: [93],
      RESET: [93],
      RESUME: [93],
      RETURN: [93],
      SELECT: [93],
      SET: [93],
      SINGLE: [93],
      STATIC: [93],
      STEP: [93],
      STOP: [93],
      STRING: [93],
      SUB: [93],
      THEN: [93],
      TO: [93],
      TYPEOF: [93],
      UNTIL: [93],
      VARIANT: [93],
      WEND: [93],
      WHILE: [93],
      WITH: [93],
      WITHEVENTS: [93],
      XOR: [93],
      IDENTIFIER: [93],
    },
    subscript_: {
      INTEGERLITERAL: [94, 97],
      STRINGLITERAL: [94, 97],
      NOTHING: [94, 97],
      NULL: [94, 97],
      TRUE: [94, 97],
      FALSE: [94, 97],
      '.': [94, 97],
      '!': [94, 97],
      ALIAS: [94, 97],
      AND: [94, 97],
      ATTRIBUTE: [94, 97],
      AS: [94, 97],
      BEGIN: [94, 97],
      BOOLEAN: [94, 97],
      BYVAL: [94, 97],
      BYREF: [94, 97],
      BYTE: [94, 97],
      CALL: [94, 97],
      CASE: [94, 97],
      CONST: [94, 97],
      DECLARE: [94, 97],
      DEFBOOL: [94, 97],
      DEFBYTE: [94, 97],
      DEFDATE: [94, 97],
      DEFDBL: [94, 97],
      DEFDEC: [94, 97],
      DEFCUR: [94, 97],
      DEFINT: [94, 97],
      DEFLNG: [94, 97],
      DEFOBJ: [94, 97],
      DEFSNG: [94, 97],
      DEFSTR: [94, 97],
      DEFVAR: [94, 97],
      DIM: [94, 97],
      DO: [94, 97],
      DOUBLE: [94, 97],
      EACH: [94, 97],
      ELSE: [94, 97],
      ELSEIF: [94, 97],
      END_ENUM: [94, 97],
      END_FUNCTION: [94, 97],
      END_IF: [94, 97],
      END_PROPERTY: [94, 97],
      END_SELECT: [94, 97],
      END_SUB: [94, 97],
      END_TYPE: [94, 97],
      END_WITH: [94, 97],
      END: [94, 97],
      ENUM: [94, 97],
      EQV: [94, 97],
      ERASE: [94, 97],
      ERROR: [94, 97],
      EVENT: [94, 97],
      EXIT_DO: [94, 97],
      EXIT_FOR: [94, 97],
      EXIT_FUNCTION: [94, 97],
      EXIT_PROPERTY: [94, 97],
      EXIT_SUB: [94, 97],
      FRIEND: [94, 97],
      FOR: [94, 97],
      FUNCTION: [94, 97],
      GET: [94, 97],
      GLOBAL: [94, 97],
      GOSUB: [94, 97],
      GOTO: [94, 97],
      IF: [94, 97],
      IMPLEMENTS: [94, 97],
      IN: [94, 97],
      IS: [94, 97],
      INTEGER: [94, 97],
      LONG: [94, 97],
      LOOP: [94, 97],
      LEN: [94, 97],
      LET: [94, 97],
      LIB: [94, 97],
      LIKE: [94, 97],
      LSET: [94, 97],
      MACRO_CONST: [94, 97],
      MACRO_IF: [94, 97],
      MACRO_ELSEIF: [94, 97],
      MACRO_ELSE: [94, 97],
      MACRO_END_IF: [94, 97],
      MOD: [94, 97],
      NEXT: [94, 97],
      NEW: [94, 97],
      NOT: [94, 97],
      ON: [94, 97],
      ON_ERROR: [94, 97],
      ON_LOCAL_ERROR: [94, 97],
      OPTIONAL: [94, 97],
      OPTION_BASE: [94, 97],
      OPTION_EXPLICIT: [94, 97],
      OPTION_COMPARE: [94, 97],
      OPTION_PRIVATE_MODULE: [94, 97],
      OR: [94, 97],
      PARAMARRAY: [94, 97],
      PRESERVE: [94, 97],
      PRIVATE: [94, 97],
      PROPERTY_GET: [94, 97],
      PROPERTY_LET: [94, 97],
      PROPERTY_SET: [94, 97],
      PTRSAFE: [94, 97],
      PUBLIC: [94, 97],
      RAISEEVENT: [94, 97],
      REDIM: [94, 97],
      RESET: [94, 97],
      RESUME: [94, 97],
      RETURN: [94, 97],
      SELECT: [94, 97],
      SET: [94, 97],
      SINGLE: [94, 97],
      STATIC: [94, 97],
      STEP: [94, 97],
      STOP: [94, 97],
      STRING: [94, 97],
      SUB: [94, 97],
      THEN: [94, 97],
      TO: [94, 97],
      TYPEOF: [94, 97],
      UNTIL: [94, 97],
      VARIANT: [94, 97],
      WEND: [94, 97],
      WHILE: [94, 97],
      WITH: [94, 97],
      WITHEVENTS: [94, 97],
      XOR: [94, 97],
      IDENTIFIER: [94, 97],
    },
    subscripts_group_def_40: {
      ',': [95],
    },
    subscripts: {
      INTEGERLITERAL: [96],
      STRINGLITERAL: [96],
      NOTHING: [96],
      NULL: [96],
      TRUE: [96],
      FALSE: [96],
      NEW: [96],
      ALIAS: [96],
      AND: [96],
      ATTRIBUTE: [96],
      AS: [96],
      BEGIN: [96],
      BOOLEAN: [96],
      BYVAL: [96],
      BYREF: [96],
      BYTE: [96],
      CALL: [96],
      CASE: [96],
      CONST: [96],
      DECLARE: [96],
      DEFBOOL: [96],
      DEFBYTE: [96],
      DEFDATE: [96],
      DEFDBL: [96],
      DEFDEC: [96],
      DEFCUR: [96],
      DEFINT: [96],
      DEFLNG: [96],
      DEFOBJ: [96],
      DEFSNG: [96],
      DEFSTR: [96],
      DEFVAR: [96],
      DIM: [96],
      DO: [96],
      DOUBLE: [96],
      EACH: [96],
      ELSE: [96],
      ELSEIF: [96],
      END_ENUM: [96],
      END_FUNCTION: [96],
      END_IF: [96],
      END_PROPERTY: [96],
      END_SELECT: [96],
      END_SUB: [96],
      END_TYPE: [96],
      END_WITH: [96],
      END: [96],
      ENUM: [96],
      EQV: [96],
      ERASE: [96],
      ERROR: [96],
      EVENT: [96],
      EXIT_DO: [96],
      EXIT_FOR: [96],
      EXIT_FUNCTION: [96],
      EXIT_PROPERTY: [96],
      EXIT_SUB: [96],
      FRIEND: [96],
      FOR: [96],
      FUNCTION: [96],
      GET: [96],
      GLOBAL: [96],
      GOSUB: [96],
      GOTO: [96],
      IF: [96],
      IMPLEMENTS: [96],
      IN: [96],
      IS: [96],
      INTEGER: [96],
      LONG: [96],
      LOOP: [96],
      LEN: [96],
      LET: [96],
      LIB: [96],
      LIKE: [96],
      LSET: [96],
      MACRO_CONST: [96],
      MACRO_IF: [96],
      MACRO_ELSEIF: [96],
      MACRO_ELSE: [96],
      MACRO_END_IF: [96],
      MOD: [96],
      NEXT: [96],
      NOT: [96],
      ON: [96],
      ON_ERROR: [96],
      ON_LOCAL_ERROR: [96],
      OPTIONAL: [96],
      OPTION_BASE: [96],
      OPTION_EXPLICIT: [96],
      OPTION_COMPARE: [96],
      OPTION_PRIVATE_MODULE: [96],
      OR: [96],
      PARAMARRAY: [96],
      PRESERVE: [96],
      PRIVATE: [96],
      PROPERTY_GET: [96],
      PROPERTY_LET: [96],
      PROPERTY_SET: [96],
      PTRSAFE: [96],
      PUBLIC: [96],
      RAISEEVENT: [96],
      REDIM: [96],
      RESET: [96],
      RESUME: [96],
      RETURN: [96],
      SELECT: [96],
      SET: [96],
      SINGLE: [96],
      STATIC: [96],
      STEP: [96],
      STOP: [96],
      STRING: [96],
      SUB: [96],
      THEN: [96],
      TO: [96],
      TYPEOF: [96],
      UNTIL: [96],
      VARIANT: [96],
      WEND: [96],
      WHILE: [96],
      WITH: [96],
      WITHEVENTS: [96],
      XOR: [96],
      IDENTIFIER: [96],
      '.': [96],
      '!': [96],
    },
    argList_group_def_44: {
      ',': [98],
    },
    argList_group_def_45: {
      OPTIONAL: [99],
      PARAMARRAY: [99],
      ALIAS: [99],
      AND: [99],
      ATTRIBUTE: [99],
      AS: [99],
      BEGIN: [99],
      BOOLEAN: [99],
      BYVAL: [99],
      BYREF: [99],
      BYTE: [99],
      CALL: [99],
      CASE: [99],
      CONST: [99],
      DECLARE: [99],
      DEFBOOL: [99],
      DEFBYTE: [99],
      DEFDATE: [99],
      DEFDBL: [99],
      DEFDEC: [99],
      DEFCUR: [99],
      DEFINT: [99],
      DEFLNG: [99],
      DEFOBJ: [99],
      DEFSNG: [99],
      DEFSTR: [99],
      DEFVAR: [99],
      DIM: [99],
      DO: [99],
      DOUBLE: [99],
      EACH: [99],
      ELSE: [99],
      ELSEIF: [99],
      END_ENUM: [99],
      END_FUNCTION: [99],
      END_IF: [99],
      END_PROPERTY: [99],
      END_SELECT: [99],
      END_SUB: [99],
      END_TYPE: [99],
      END_WITH: [99],
      END: [99],
      ENUM: [99],
      EQV: [99],
      ERASE: [99],
      ERROR: [99],
      EVENT: [99],
      EXIT_DO: [99],
      EXIT_FOR: [99],
      EXIT_FUNCTION: [99],
      EXIT_PROPERTY: [99],
      EXIT_SUB: [99],
      FALSE: [99],
      FRIEND: [99],
      FOR: [99],
      FUNCTION: [99],
      GET: [99],
      GLOBAL: [99],
      GOSUB: [99],
      GOTO: [99],
      IF: [99],
      IMPLEMENTS: [99],
      IN: [99],
      IS: [99],
      INTEGER: [99],
      LONG: [99],
      LOOP: [99],
      LEN: [99],
      LET: [99],
      LIB: [99],
      LIKE: [99],
      LSET: [99],
      MACRO_CONST: [99],
      MACRO_IF: [99],
      MACRO_ELSEIF: [99],
      MACRO_ELSE: [99],
      MACRO_END_IF: [99],
      MOD: [99],
      NEXT: [99],
      NEW: [99],
      NOT: [99],
      NOTHING: [99],
      NULL: [99],
      ON: [99],
      ON_ERROR: [99],
      ON_LOCAL_ERROR: [99],
      OPTION_BASE: [99],
      OPTION_EXPLICIT: [99],
      OPTION_COMPARE: [99],
      OPTION_PRIVATE_MODULE: [99],
      OR: [99],
      PRESERVE: [99],
      PRIVATE: [99],
      PROPERTY_GET: [99],
      PROPERTY_LET: [99],
      PROPERTY_SET: [99],
      PTRSAFE: [99],
      PUBLIC: [99],
      RAISEEVENT: [99],
      REDIM: [99],
      RESET: [99],
      RESUME: [99],
      RETURN: [99],
      SELECT: [99],
      SET: [99],
      SINGLE: [99],
      STATIC: [99],
      STEP: [99],
      STOP: [99],
      STRING: [99],
      SUB: [99],
      THEN: [99],
      TO: [99],
      TRUE: [99],
      TYPEOF: [99],
      UNTIL: [99],
      VARIANT: [99],
      WEND: [99],
      WHILE: [99],
      WITH: [99],
      WITHEVENTS: [99],
      XOR: [99],
      IDENTIFIER: [99],
    },
    argList: {
      LPAREN: [100],
    },
    valueStmt: {
      INTEGERLITERAL: [101],
      STRINGLITERAL: [101],
      NOTHING: [101, 102, 104],
      NULL: [101, 102, 104],
      TRUE: [101, 102, 104],
      FALSE: [101, 102, 104],
      '.': [102],
      '!': [102],
      ALIAS: [102, 104],
      AND: [102, 104],
      ATTRIBUTE: [102, 104],
      AS: [102, 104],
      BEGIN: [102, 104],
      BOOLEAN: [102, 104],
      BYVAL: [102, 104],
      BYREF: [102, 104],
      BYTE: [102, 104],
      CALL: [102, 104],
      CASE: [102, 104],
      CONST: [102, 104],
      DECLARE: [102, 104],
      DEFBOOL: [102, 104],
      DEFBYTE: [102, 104],
      DEFDATE: [102, 104],
      DEFDBL: [102, 104],
      DEFDEC: [102, 104],
      DEFCUR: [102, 104],
      DEFINT: [102, 104],
      DEFLNG: [102, 104],
      DEFOBJ: [102, 104],
      DEFSNG: [102, 104],
      DEFSTR: [102, 104],
      DEFVAR: [102, 104],
      DIM: [102, 104],
      DO: [102, 104],
      DOUBLE: [102, 104],
      EACH: [102, 104],
      ELSE: [102, 104],
      ELSEIF: [102, 104],
      END_ENUM: [102, 104],
      END_FUNCTION: [102, 104],
      END_IF: [102, 104],
      END_PROPERTY: [102, 104],
      END_SELECT: [102, 104],
      END_SUB: [102, 104],
      END_TYPE: [102, 104],
      END_WITH: [102, 104],
      END: [102, 104],
      ENUM: [102, 104],
      EQV: [102, 104],
      ERASE: [102, 104],
      ERROR: [102, 104],
      EVENT: [102, 104],
      EXIT_DO: [102, 104],
      EXIT_FOR: [102, 104],
      EXIT_FUNCTION: [102, 104],
      EXIT_PROPERTY: [102, 104],
      EXIT_SUB: [102, 104],
      FRIEND: [102, 104],
      FOR: [102, 104],
      FUNCTION: [102, 104],
      GET: [102, 104],
      GLOBAL: [102, 104],
      GOSUB: [102, 104],
      GOTO: [102, 104],
      IF: [102, 104],
      IMPLEMENTS: [102, 104],
      IN: [102, 104],
      IS: [102, 104],
      INTEGER: [102, 104],
      LONG: [102, 104],
      LOOP: [102, 104],
      LEN: [102, 104],
      LET: [102, 104],
      LIB: [102, 104],
      LIKE: [102, 104],
      LSET: [102, 104],
      MACRO_CONST: [102, 104],
      MACRO_IF: [102, 104],
      MACRO_ELSEIF: [102, 104],
      MACRO_ELSE: [102, 104],
      MACRO_END_IF: [102, 104],
      MOD: [102, 104],
      NEXT: [102, 104],
      NEW: [102, 103, 104],
      NOT: [102, 104],
      ON: [102, 104],
      ON_ERROR: [102, 104],
      ON_LOCAL_ERROR: [102, 104],
      OPTIONAL: [102, 104],
      OPTION_BASE: [102, 104],
      OPTION_EXPLICIT: [102, 104],
      OPTION_COMPARE: [102, 104],
      OPTION_PRIVATE_MODULE: [102, 104],
      OR: [102, 104],
      PARAMARRAY: [102, 104],
      PRESERVE: [102, 104],
      PRIVATE: [102, 104],
      PROPERTY_GET: [102, 104],
      PROPERTY_LET: [102, 104],
      PROPERTY_SET: [102, 104],
      PTRSAFE: [102, 104],
      PUBLIC: [102, 104],
      RAISEEVENT: [102, 104],
      REDIM: [102, 104],
      RESET: [102, 104],
      RESUME: [102, 104],
      RETURN: [102, 104],
      SELECT: [102, 104],
      SET: [102, 104],
      SINGLE: [102, 104],
      STATIC: [102, 104],
      STEP: [102, 104],
      STOP: [102, 104],
      STRING: [102, 104],
      SUB: [102, 104],
      THEN: [102, 104],
      TO: [102, 104],
      TYPEOF: [102, 104],
      UNTIL: [102, 104],
      VARIANT: [102, 104],
      WEND: [102, 104],
      WHILE: [102, 104],
      WITH: [102, 104],
      WITHEVENTS: [102, 104],
      XOR: [102, 104],
      IDENTIFIER: [102, 104],
    },
    implicitCallStmt_InStmt: {
      ALIAS: [105, 106, 107],
      AND: [105, 106, 107],
      ATTRIBUTE: [105, 106, 107],
      AS: [105, 106, 107],
      BEGIN: [105, 106, 107],
      BOOLEAN: [105, 106, 107],
      BYVAL: [105, 106, 107],
      BYREF: [105, 106, 107],
      BYTE: [105, 106, 107],
      CALL: [105, 106, 107],
      CASE: [105, 106, 107],
      CONST: [105, 106, 107],
      DECLARE: [105, 106, 107],
      DEFBOOL: [105, 106, 107],
      DEFBYTE: [105, 106, 107],
      DEFDATE: [105, 106, 107],
      DEFDBL: [105, 106, 107],
      DEFDEC: [105, 106, 107],
      DEFCUR: [105, 106, 107],
      DEFINT: [105, 106, 107],
      DEFLNG: [105, 106, 107],
      DEFOBJ: [105, 106, 107],
      DEFSNG: [105, 106, 107],
      DEFSTR: [105, 106, 107],
      DEFVAR: [105, 106, 107],
      DIM: [105, 106, 107],
      DO: [105, 106, 107],
      DOUBLE: [105, 106, 107],
      EACH: [105, 106, 107],
      ELSE: [105, 106, 107],
      ELSEIF: [105, 106, 107],
      END_ENUM: [105, 106, 107],
      END_FUNCTION: [105, 106, 107],
      END_IF: [105, 106, 107],
      END_PROPERTY: [105, 106, 107],
      END_SELECT: [105, 106, 107],
      END_SUB: [105, 106, 107],
      END_TYPE: [105, 106, 107],
      END_WITH: [105, 106, 107],
      END: [105, 106, 107],
      ENUM: [105, 106, 107],
      EQV: [105, 106, 107],
      ERASE: [105, 106, 107],
      ERROR: [105, 106, 107],
      EVENT: [105, 106, 107],
      EXIT_DO: [105, 106, 107],
      EXIT_FOR: [105, 106, 107],
      EXIT_FUNCTION: [105, 106, 107],
      EXIT_PROPERTY: [105, 106, 107],
      EXIT_SUB: [105, 106, 107],
      FALSE: [105, 106, 107],
      FRIEND: [105, 106, 107],
      FOR: [105, 106, 107],
      FUNCTION: [105, 106, 107],
      GET: [105, 106, 107],
      GLOBAL: [105, 106, 107],
      GOSUB: [105, 106, 107],
      GOTO: [105, 106, 107],
      IF: [105, 106, 107],
      IMPLEMENTS: [105, 106, 107],
      IN: [105, 106, 107],
      IS: [105, 106, 107],
      INTEGER: [105, 106, 107],
      LONG: [105, 106, 107],
      LOOP: [105, 106, 107],
      LEN: [105, 106, 107],
      LET: [105, 106, 107],
      LIB: [105, 106, 107],
      LIKE: [105, 106, 107],
      LSET: [105, 106, 107],
      MACRO_CONST: [105, 106, 107],
      MACRO_IF: [105, 106, 107],
      MACRO_ELSEIF: [105, 106, 107],
      MACRO_ELSE: [105, 106, 107],
      MACRO_END_IF: [105, 106, 107],
      MOD: [105, 106, 107],
      NEXT: [105, 106, 107],
      NEW: [105, 106, 107],
      NOT: [105, 106, 107],
      NOTHING: [105, 106, 107],
      NULL: [105, 106, 107],
      ON: [105, 106, 107],
      ON_ERROR: [105, 106, 107],
      ON_LOCAL_ERROR: [105, 106, 107],
      OPTIONAL: [105, 106, 107],
      OPTION_BASE: [105, 106, 107],
      OPTION_EXPLICIT: [105, 106, 107],
      OPTION_COMPARE: [105, 106, 107],
      OPTION_PRIVATE_MODULE: [105, 106, 107],
      OR: [105, 106, 107],
      PARAMARRAY: [105, 106, 107],
      PRESERVE: [105, 106, 107],
      PRIVATE: [105, 106, 107],
      PROPERTY_GET: [105, 106, 107],
      PROPERTY_LET: [105, 106, 107],
      PROPERTY_SET: [105, 106, 107],
      PTRSAFE: [105, 106, 107],
      PUBLIC: [105, 106, 107],
      RAISEEVENT: [105, 106, 107],
      REDIM: [105, 106, 107],
      RESET: [105, 106, 107],
      RESUME: [105, 106, 107],
      RETURN: [105, 106, 107],
      SELECT: [105, 106, 107],
      SET: [105, 106, 107],
      SINGLE: [105, 106, 107],
      STATIC: [105, 106, 107],
      STEP: [105, 106, 107],
      STOP: [105, 106, 107],
      STRING: [105, 106, 107],
      SUB: [105, 106, 107],
      THEN: [105, 106, 107],
      TO: [105, 106, 107],
      TRUE: [105, 106, 107],
      TYPEOF: [105, 106, 107],
      UNTIL: [105, 106, 107],
      VARIANT: [105, 106, 107],
      WEND: [105, 106, 107],
      WHILE: [105, 106, 107],
      WITH: [105, 106, 107],
      WITHEVENTS: [105, 106, 107],
      XOR: [105, 106, 107],
      IDENTIFIER: [105, 106, 107],
      '.': [105],
      '!': [105],
    },
    iCS_S_MembersCall_group_def_47: {
      ALIAS: [108],
      AND: [108],
      ATTRIBUTE: [108],
      AS: [108],
      BEGIN: [108],
      BOOLEAN: [108],
      BYVAL: [108],
      BYREF: [108],
      BYTE: [108],
      CALL: [108],
      CASE: [108],
      CONST: [108],
      DECLARE: [108],
      DEFBOOL: [108],
      DEFBYTE: [108],
      DEFDATE: [108],
      DEFDBL: [108],
      DEFDEC: [108],
      DEFCUR: [108],
      DEFINT: [108],
      DEFLNG: [108],
      DEFOBJ: [108],
      DEFSNG: [108],
      DEFSTR: [108],
      DEFVAR: [108],
      DIM: [108],
      DO: [108],
      DOUBLE: [108],
      EACH: [108],
      ELSE: [108],
      ELSEIF: [108],
      END_ENUM: [108],
      END_FUNCTION: [108],
      END_IF: [108],
      END_PROPERTY: [108],
      END_SELECT: [108],
      END_SUB: [108],
      END_TYPE: [108],
      END_WITH: [108],
      END: [108],
      ENUM: [108],
      EQV: [108],
      ERASE: [108],
      ERROR: [108],
      EVENT: [108],
      EXIT_DO: [108],
      EXIT_FOR: [108],
      EXIT_FUNCTION: [108],
      EXIT_PROPERTY: [108],
      EXIT_SUB: [108],
      FALSE: [108],
      FRIEND: [108],
      FOR: [108],
      FUNCTION: [108],
      GET: [108],
      GLOBAL: [108],
      GOSUB: [108],
      GOTO: [108],
      IF: [108],
      IMPLEMENTS: [108],
      IN: [108],
      IS: [108],
      INTEGER: [108],
      LONG: [108],
      LOOP: [108],
      LEN: [108],
      LET: [108],
      LIB: [108],
      LIKE: [108],
      LSET: [108],
      MACRO_CONST: [108],
      MACRO_IF: [108],
      MACRO_ELSEIF: [108],
      MACRO_ELSE: [108],
      MACRO_END_IF: [108],
      MOD: [108],
      NEXT: [108],
      NEW: [108],
      NOT: [108],
      NOTHING: [108],
      NULL: [108],
      ON: [108],
      ON_ERROR: [108],
      ON_LOCAL_ERROR: [108],
      OPTIONAL: [108],
      OPTION_BASE: [108],
      OPTION_EXPLICIT: [108],
      OPTION_COMPARE: [108],
      OPTION_PRIVATE_MODULE: [108],
      OR: [108],
      PARAMARRAY: [108],
      PRESERVE: [108],
      PRIVATE: [108],
      PROPERTY_GET: [108],
      PROPERTY_LET: [108],
      PROPERTY_SET: [108],
      PTRSAFE: [108],
      PUBLIC: [108],
      RAISEEVENT: [108],
      REDIM: [108],
      RESET: [108],
      RESUME: [108],
      RETURN: [108],
      SELECT: [108],
      SET: [108],
      SINGLE: [108],
      STATIC: [108],
      STEP: [108],
      STOP: [108],
      STRING: [108],
      SUB: [108],
      THEN: [108],
      TO: [108],
      TRUE: [108],
      TYPEOF: [108],
      UNTIL: [108],
      VARIANT: [108],
      WEND: [108],
      WHILE: [108],
      WITH: [108],
      WITHEVENTS: [108],
      XOR: [108],
      IDENTIFIER: [108],
    },
    iCS_S_MembersCall_group_46: {
      ALIAS: [109, 111],
      AND: [109, 111],
      ATTRIBUTE: [109, 111],
      AS: [109, 111],
      BEGIN: [109, 111],
      BOOLEAN: [109, 111],
      BYVAL: [109, 111],
      BYREF: [109, 111],
      BYTE: [109, 111],
      CALL: [109, 111],
      CASE: [109, 111],
      CONST: [109, 111],
      DECLARE: [109, 111],
      DEFBOOL: [109, 111],
      DEFBYTE: [109, 111],
      DEFDATE: [109, 111],
      DEFDBL: [109, 111],
      DEFDEC: [109, 111],
      DEFCUR: [109, 111],
      DEFINT: [109, 111],
      DEFLNG: [109, 111],
      DEFOBJ: [109, 111],
      DEFSNG: [109, 111],
      DEFSTR: [109, 111],
      DEFVAR: [109, 111],
      DIM: [109, 111],
      DO: [109, 111],
      DOUBLE: [109, 111],
      EACH: [109, 111],
      ELSE: [109, 111],
      ELSEIF: [109, 111],
      END_ENUM: [109, 111],
      END_FUNCTION: [109, 111],
      END_IF: [109, 111],
      END_PROPERTY: [109, 111],
      END_SELECT: [109, 111],
      END_SUB: [109, 111],
      END_TYPE: [109, 111],
      END_WITH: [109, 111],
      END: [109, 111],
      ENUM: [109, 111],
      EQV: [109, 111],
      ERASE: [109, 111],
      ERROR: [109, 111],
      EVENT: [109, 111],
      EXIT_DO: [109, 111],
      EXIT_FOR: [109, 111],
      EXIT_FUNCTION: [109, 111],
      EXIT_PROPERTY: [109, 111],
      EXIT_SUB: [109, 111],
      FALSE: [109, 111],
      FRIEND: [109, 111],
      FOR: [109, 111],
      FUNCTION: [109, 111],
      GET: [109, 111],
      GLOBAL: [109, 111],
      GOSUB: [109, 111],
      GOTO: [109, 111],
      IF: [109, 111],
      IMPLEMENTS: [109, 111],
      IN: [109, 111],
      IS: [109, 111],
      INTEGER: [109, 111],
      LONG: [109, 111],
      LOOP: [109, 111],
      LEN: [109, 111],
      LET: [109, 111],
      LIB: [109, 111],
      LIKE: [109, 111],
      LSET: [109, 111],
      MACRO_CONST: [109, 111],
      MACRO_IF: [109, 111],
      MACRO_ELSEIF: [109, 111],
      MACRO_ELSE: [109, 111],
      MACRO_END_IF: [109, 111],
      MOD: [109, 111],
      NEXT: [109, 111],
      NEW: [109, 111],
      NOT: [109, 111],
      NOTHING: [109, 111],
      NULL: [109, 111],
      ON: [109, 111],
      ON_ERROR: [109, 111],
      ON_LOCAL_ERROR: [109, 111],
      OPTIONAL: [109, 111],
      OPTION_BASE: [109, 111],
      OPTION_EXPLICIT: [109, 111],
      OPTION_COMPARE: [109, 111],
      OPTION_PRIVATE_MODULE: [109, 111],
      OR: [109, 111],
      PARAMARRAY: [109, 111],
      PRESERVE: [109, 111],
      PRIVATE: [109, 111],
      PROPERTY_GET: [109, 111],
      PROPERTY_LET: [109, 111],
      PROPERTY_SET: [109, 111],
      PTRSAFE: [109, 111],
      PUBLIC: [109, 111],
      RAISEEVENT: [109, 111],
      REDIM: [109, 111],
      RESET: [109, 111],
      RESUME: [109, 111],
      RETURN: [109, 111],
      SELECT: [109, 111],
      SET: [109, 111],
      SINGLE: [109, 111],
      STATIC: [109, 111],
      STEP: [109, 111],
      STOP: [109, 111],
      STRING: [109, 111],
      SUB: [109, 111],
      THEN: [109, 111],
      TO: [109, 111],
      TRUE: [109, 111],
      TYPEOF: [109, 111],
      UNTIL: [109, 111],
      VARIANT: [109, 111],
      WEND: [109, 111],
      WHILE: [109, 111],
      WITH: [109, 111],
      WITHEVENTS: [109, 111],
      XOR: [109, 111],
      IDENTIFIER: [109, 111],
    },
    iCS_S_MembersCall_group_def_48: {
      ALIAS: [110],
      AND: [110],
      ATTRIBUTE: [110],
      AS: [110],
      BEGIN: [110],
      BOOLEAN: [110],
      BYVAL: [110],
      BYREF: [110],
      BYTE: [110],
      CALL: [110],
      CASE: [110],
      CONST: [110],
      DECLARE: [110],
      DEFBOOL: [110],
      DEFBYTE: [110],
      DEFDATE: [110],
      DEFDBL: [110],
      DEFDEC: [110],
      DEFCUR: [110],
      DEFINT: [110],
      DEFLNG: [110],
      DEFOBJ: [110],
      DEFSNG: [110],
      DEFSTR: [110],
      DEFVAR: [110],
      DIM: [110],
      DO: [110],
      DOUBLE: [110],
      EACH: [110],
      ELSE: [110],
      ELSEIF: [110],
      END_ENUM: [110],
      END_FUNCTION: [110],
      END_IF: [110],
      END_PROPERTY: [110],
      END_SELECT: [110],
      END_SUB: [110],
      END_TYPE: [110],
      END_WITH: [110],
      END: [110],
      ENUM: [110],
      EQV: [110],
      ERASE: [110],
      ERROR: [110],
      EVENT: [110],
      EXIT_DO: [110],
      EXIT_FOR: [110],
      EXIT_FUNCTION: [110],
      EXIT_PROPERTY: [110],
      EXIT_SUB: [110],
      FALSE: [110],
      FRIEND: [110],
      FOR: [110],
      FUNCTION: [110],
      GET: [110],
      GLOBAL: [110],
      GOSUB: [110],
      GOTO: [110],
      IF: [110],
      IMPLEMENTS: [110],
      IN: [110],
      IS: [110],
      INTEGER: [110],
      LONG: [110],
      LOOP: [110],
      LEN: [110],
      LET: [110],
      LIB: [110],
      LIKE: [110],
      LSET: [110],
      MACRO_CONST: [110],
      MACRO_IF: [110],
      MACRO_ELSEIF: [110],
      MACRO_ELSE: [110],
      MACRO_END_IF: [110],
      MOD: [110],
      NEXT: [110],
      NEW: [110],
      NOT: [110],
      NOTHING: [110],
      NULL: [110],
      ON: [110],
      ON_ERROR: [110],
      ON_LOCAL_ERROR: [110],
      OPTIONAL: [110],
      OPTION_BASE: [110],
      OPTION_EXPLICIT: [110],
      OPTION_COMPARE: [110],
      OPTION_PRIVATE_MODULE: [110],
      OR: [110],
      PARAMARRAY: [110],
      PRESERVE: [110],
      PRIVATE: [110],
      PROPERTY_GET: [110],
      PROPERTY_LET: [110],
      PROPERTY_SET: [110],
      PTRSAFE: [110],
      PUBLIC: [110],
      RAISEEVENT: [110],
      REDIM: [110],
      RESET: [110],
      RESUME: [110],
      RETURN: [110],
      SELECT: [110],
      SET: [110],
      SINGLE: [110],
      STATIC: [110],
      STEP: [110],
      STOP: [110],
      STRING: [110],
      SUB: [110],
      THEN: [110],
      TO: [110],
      TRUE: [110],
      TYPEOF: [110],
      UNTIL: [110],
      VARIANT: [110],
      WEND: [110],
      WHILE: [110],
      WITH: [110],
      WITHEVENTS: [110],
      XOR: [110],
      IDENTIFIER: [110],
    },
    iCS_S_MembersCall: {
      ALIAS: [112],
      AND: [112],
      ATTRIBUTE: [112],
      AS: [112],
      BEGIN: [112],
      BOOLEAN: [112],
      BYVAL: [112],
      BYREF: [112],
      BYTE: [112],
      CALL: [112],
      CASE: [112],
      CONST: [112],
      DECLARE: [112],
      DEFBOOL: [112],
      DEFBYTE: [112],
      DEFDATE: [112],
      DEFDBL: [112],
      DEFDEC: [112],
      DEFCUR: [112],
      DEFINT: [112],
      DEFLNG: [112],
      DEFOBJ: [112],
      DEFSNG: [112],
      DEFSTR: [112],
      DEFVAR: [112],
      DIM: [112],
      DO: [112],
      DOUBLE: [112],
      EACH: [112],
      ELSE: [112],
      ELSEIF: [112],
      END_ENUM: [112],
      END_FUNCTION: [112],
      END_IF: [112],
      END_PROPERTY: [112],
      END_SELECT: [112],
      END_SUB: [112],
      END_TYPE: [112],
      END_WITH: [112],
      END: [112],
      ENUM: [112],
      EQV: [112],
      ERASE: [112],
      ERROR: [112],
      EVENT: [112],
      EXIT_DO: [112],
      EXIT_FOR: [112],
      EXIT_FUNCTION: [112],
      EXIT_PROPERTY: [112],
      EXIT_SUB: [112],
      FALSE: [112],
      FRIEND: [112],
      FOR: [112],
      FUNCTION: [112],
      GET: [112],
      GLOBAL: [112],
      GOSUB: [112],
      GOTO: [112],
      IF: [112],
      IMPLEMENTS: [112],
      IN: [112],
      IS: [112],
      INTEGER: [112],
      LONG: [112],
      LOOP: [112],
      LEN: [112],
      LET: [112],
      LIB: [112],
      LIKE: [112],
      LSET: [112],
      MACRO_CONST: [112],
      MACRO_IF: [112],
      MACRO_ELSEIF: [112],
      MACRO_ELSE: [112],
      MACRO_END_IF: [112],
      MOD: [112],
      NEXT: [112],
      NEW: [112],
      NOT: [112],
      NOTHING: [112],
      NULL: [112],
      ON: [112],
      ON_ERROR: [112],
      ON_LOCAL_ERROR: [112],
      OPTIONAL: [112],
      OPTION_BASE: [112],
      OPTION_EXPLICIT: [112],
      OPTION_COMPARE: [112],
      OPTION_PRIVATE_MODULE: [112],
      OR: [112],
      PARAMARRAY: [112],
      PRESERVE: [112],
      PRIVATE: [112],
      PROPERTY_GET: [112],
      PROPERTY_LET: [112],
      PROPERTY_SET: [112],
      PTRSAFE: [112],
      PUBLIC: [112],
      RAISEEVENT: [112],
      REDIM: [112],
      RESET: [112],
      RESUME: [112],
      RETURN: [112],
      SELECT: [112],
      SET: [112],
      SINGLE: [112],
      STATIC: [112],
      STEP: [112],
      STOP: [112],
      STRING: [112],
      SUB: [112],
      THEN: [112],
      TO: [112],
      TRUE: [112],
      TYPEOF: [112],
      UNTIL: [112],
      VARIANT: [112],
      WEND: [112],
      WHILE: [112],
      WITH: [112],
      WITHEVENTS: [112],
      XOR: [112],
      IDENTIFIER: [112],
      '.': [112],
      '!': [112],
    },
    iCS_S_MemberCall_group_def_51: {
      '.': [113],
    },
    iCS_S_MemberCall_group_50: {
      '.': [114],
      '!': [116],
    },
    iCS_S_MemberCall_group_def_52: {
      '!': [115],
    },
    iCS_S_MemberCall_group_53: {
      ALIAS: [117, 118],
      AND: [117, 118],
      ATTRIBUTE: [117, 118],
      AS: [117, 118],
      BEGIN: [117, 118],
      BOOLEAN: [117, 118],
      BYVAL: [117, 118],
      BYREF: [117, 118],
      BYTE: [117, 118],
      CALL: [117, 118],
      CASE: [117, 118],
      CONST: [117, 118],
      DECLARE: [117, 118],
      DEFBOOL: [117, 118],
      DEFBYTE: [117, 118],
      DEFDATE: [117, 118],
      DEFDBL: [117, 118],
      DEFDEC: [117, 118],
      DEFCUR: [117, 118],
      DEFINT: [117, 118],
      DEFLNG: [117, 118],
      DEFOBJ: [117, 118],
      DEFSNG: [117, 118],
      DEFSTR: [117, 118],
      DEFVAR: [117, 118],
      DIM: [117, 118],
      DO: [117, 118],
      DOUBLE: [117, 118],
      EACH: [117, 118],
      ELSE: [117, 118],
      ELSEIF: [117, 118],
      END_ENUM: [117, 118],
      END_FUNCTION: [117, 118],
      END_IF: [117, 118],
      END_PROPERTY: [117, 118],
      END_SELECT: [117, 118],
      END_SUB: [117, 118],
      END_TYPE: [117, 118],
      END_WITH: [117, 118],
      END: [117, 118],
      ENUM: [117, 118],
      EQV: [117, 118],
      ERASE: [117, 118],
      ERROR: [117, 118],
      EVENT: [117, 118],
      EXIT_DO: [117, 118],
      EXIT_FOR: [117, 118],
      EXIT_FUNCTION: [117, 118],
      EXIT_PROPERTY: [117, 118],
      EXIT_SUB: [117, 118],
      FALSE: [117, 118],
      FRIEND: [117, 118],
      FOR: [117, 118],
      FUNCTION: [117, 118],
      GET: [117, 118],
      GLOBAL: [117, 118],
      GOSUB: [117, 118],
      GOTO: [117, 118],
      IF: [117, 118],
      IMPLEMENTS: [117, 118],
      IN: [117, 118],
      IS: [117, 118],
      INTEGER: [117, 118],
      LONG: [117, 118],
      LOOP: [117, 118],
      LEN: [117, 118],
      LET: [117, 118],
      LIB: [117, 118],
      LIKE: [117, 118],
      LSET: [117, 118],
      MACRO_CONST: [117, 118],
      MACRO_IF: [117, 118],
      MACRO_ELSEIF: [117, 118],
      MACRO_ELSE: [117, 118],
      MACRO_END_IF: [117, 118],
      MOD: [117, 118],
      NEXT: [117, 118],
      NEW: [117, 118],
      NOT: [117, 118],
      NOTHING: [117, 118],
      NULL: [117, 118],
      ON: [117, 118],
      ON_ERROR: [117, 118],
      ON_LOCAL_ERROR: [117, 118],
      OPTIONAL: [117, 118],
      OPTION_BASE: [117, 118],
      OPTION_EXPLICIT: [117, 118],
      OPTION_COMPARE: [117, 118],
      OPTION_PRIVATE_MODULE: [117, 118],
      OR: [117, 118],
      PARAMARRAY: [117, 118],
      PRESERVE: [117, 118],
      PRIVATE: [117, 118],
      PROPERTY_GET: [117, 118],
      PROPERTY_LET: [117, 118],
      PROPERTY_SET: [117, 118],
      PTRSAFE: [117, 118],
      PUBLIC: [117, 118],
      RAISEEVENT: [117, 118],
      REDIM: [117, 118],
      RESET: [117, 118],
      RESUME: [117, 118],
      RETURN: [117, 118],
      SELECT: [117, 118],
      SET: [117, 118],
      SINGLE: [117, 118],
      STATIC: [117, 118],
      STEP: [117, 118],
      STOP: [117, 118],
      STRING: [117, 118],
      SUB: [117, 118],
      THEN: [117, 118],
      TO: [117, 118],
      TRUE: [117, 118],
      TYPEOF: [117, 118],
      UNTIL: [117, 118],
      VARIANT: [117, 118],
      WEND: [117, 118],
      WHILE: [117, 118],
      WITH: [117, 118],
      WITHEVENTS: [117, 118],
      XOR: [117, 118],
      IDENTIFIER: [117, 118],
    },
    iCS_S_MemberCall: {
      '.': [119],
      '!': [119],
    },
    iCS_S_ProcedureOrArrayCall: {
      ALIAS: [120],
      AND: [120],
      ATTRIBUTE: [120],
      AS: [120],
      BEGIN: [120],
      BOOLEAN: [120],
      BYVAL: [120],
      BYREF: [120],
      BYTE: [120],
      CALL: [120],
      CASE: [120],
      CONST: [120],
      DECLARE: [120],
      DEFBOOL: [120],
      DEFBYTE: [120],
      DEFDATE: [120],
      DEFDBL: [120],
      DEFDEC: [120],
      DEFCUR: [120],
      DEFINT: [120],
      DEFLNG: [120],
      DEFOBJ: [120],
      DEFSNG: [120],
      DEFSTR: [120],
      DEFVAR: [120],
      DIM: [120],
      DO: [120],
      DOUBLE: [120],
      EACH: [120],
      ELSE: [120],
      ELSEIF: [120],
      END_ENUM: [120],
      END_FUNCTION: [120],
      END_IF: [120],
      END_PROPERTY: [120],
      END_SELECT: [120],
      END_SUB: [120],
      END_TYPE: [120],
      END_WITH: [120],
      END: [120],
      ENUM: [120],
      EQV: [120],
      ERASE: [120],
      ERROR: [120],
      EVENT: [120],
      EXIT_DO: [120],
      EXIT_FOR: [120],
      EXIT_FUNCTION: [120],
      EXIT_PROPERTY: [120],
      EXIT_SUB: [120],
      FALSE: [120],
      FRIEND: [120],
      FOR: [120],
      FUNCTION: [120],
      GET: [120],
      GLOBAL: [120],
      GOSUB: [120],
      GOTO: [120],
      IF: [120],
      IMPLEMENTS: [120],
      IN: [120],
      IS: [120],
      INTEGER: [120],
      LONG: [120],
      LOOP: [120],
      LEN: [120],
      LET: [120],
      LIB: [120],
      LIKE: [120],
      LSET: [120],
      MACRO_CONST: [120],
      MACRO_IF: [120],
      MACRO_ELSEIF: [120],
      MACRO_ELSE: [120],
      MACRO_END_IF: [120],
      MOD: [120],
      NEXT: [120],
      NEW: [120],
      NOT: [120],
      NOTHING: [120],
      NULL: [120],
      ON: [120],
      ON_ERROR: [120],
      ON_LOCAL_ERROR: [120],
      OPTIONAL: [120],
      OPTION_BASE: [120],
      OPTION_EXPLICIT: [120],
      OPTION_COMPARE: [120],
      OPTION_PRIVATE_MODULE: [120],
      OR: [120],
      PARAMARRAY: [120],
      PRESERVE: [120],
      PRIVATE: [120],
      PROPERTY_GET: [120],
      PROPERTY_LET: [120],
      PROPERTY_SET: [120],
      PTRSAFE: [120],
      PUBLIC: [120],
      RAISEEVENT: [120],
      REDIM: [120],
      RESET: [120],
      RESUME: [120],
      RETURN: [120],
      SELECT: [120],
      SET: [120],
      SINGLE: [120],
      STATIC: [120],
      STEP: [120],
      STOP: [120],
      STRING: [120],
      SUB: [120],
      THEN: [120],
      TO: [120],
      TRUE: [120],
      TYPEOF: [120],
      UNTIL: [120],
      VARIANT: [120],
      WEND: [120],
      WHILE: [120],
      WITH: [120],
      WITHEVENTS: [120],
      XOR: [120],
      IDENTIFIER: [120],
    },
    iCS_S_VariableOrProcedureCall: {
      ALIAS: [121],
      AND: [121],
      ATTRIBUTE: [121],
      AS: [121],
      BEGIN: [121],
      BOOLEAN: [121],
      BYVAL: [121],
      BYREF: [121],
      BYTE: [121],
      CALL: [121],
      CASE: [121],
      CONST: [121],
      DECLARE: [121],
      DEFBOOL: [121],
      DEFBYTE: [121],
      DEFDATE: [121],
      DEFDBL: [121],
      DEFDEC: [121],
      DEFCUR: [121],
      DEFINT: [121],
      DEFLNG: [121],
      DEFOBJ: [121],
      DEFSNG: [121],
      DEFSTR: [121],
      DEFVAR: [121],
      DIM: [121],
      DO: [121],
      DOUBLE: [121],
      EACH: [121],
      ELSE: [121],
      ELSEIF: [121],
      END_ENUM: [121],
      END_FUNCTION: [121],
      END_IF: [121],
      END_PROPERTY: [121],
      END_SELECT: [121],
      END_SUB: [121],
      END_TYPE: [121],
      END_WITH: [121],
      END: [121],
      ENUM: [121],
      EQV: [121],
      ERASE: [121],
      ERROR: [121],
      EVENT: [121],
      EXIT_DO: [121],
      EXIT_FOR: [121],
      EXIT_FUNCTION: [121],
      EXIT_PROPERTY: [121],
      EXIT_SUB: [121],
      FALSE: [121],
      FRIEND: [121],
      FOR: [121],
      FUNCTION: [121],
      GET: [121],
      GLOBAL: [121],
      GOSUB: [121],
      GOTO: [121],
      IF: [121],
      IMPLEMENTS: [121],
      IN: [121],
      IS: [121],
      INTEGER: [121],
      LONG: [121],
      LOOP: [121],
      LEN: [121],
      LET: [121],
      LIB: [121],
      LIKE: [121],
      LSET: [121],
      MACRO_CONST: [121],
      MACRO_IF: [121],
      MACRO_ELSEIF: [121],
      MACRO_ELSE: [121],
      MACRO_END_IF: [121],
      MOD: [121],
      NEXT: [121],
      NEW: [121],
      NOT: [121],
      NOTHING: [121],
      NULL: [121],
      ON: [121],
      ON_ERROR: [121],
      ON_LOCAL_ERROR: [121],
      OPTIONAL: [121],
      OPTION_BASE: [121],
      OPTION_EXPLICIT: [121],
      OPTION_COMPARE: [121],
      OPTION_PRIVATE_MODULE: [121],
      OR: [121],
      PARAMARRAY: [121],
      PRESERVE: [121],
      PRIVATE: [121],
      PROPERTY_GET: [121],
      PROPERTY_LET: [121],
      PROPERTY_SET: [121],
      PTRSAFE: [121],
      PUBLIC: [121],
      RAISEEVENT: [121],
      REDIM: [121],
      RESET: [121],
      RESUME: [121],
      RETURN: [121],
      SELECT: [121],
      SET: [121],
      SINGLE: [121],
      STATIC: [121],
      STEP: [121],
      STOP: [121],
      STRING: [121],
      SUB: [121],
      THEN: [121],
      TO: [121],
      TRUE: [121],
      TYPEOF: [121],
      UNTIL: [121],
      VARIANT: [121],
      WEND: [121],
      WHILE: [121],
      WITH: [121],
      WITHEVENTS: [121],
      XOR: [121],
      IDENTIFIER: [121],
    },
    dictionaryCallStmt: {
      '!': [122],
    },
    literal: {
      INTEGERLITERAL: [123],
      STRINGLITERAL: [124],
      NOTHING: [125],
      NULL: [126],
      TRUE: [127],
      FALSE: [128],
    },
    typeHint: {
      '&': [129],
      '%': [130],
      '#': [131],
      '!': [132],
      '@': [133],
      $: [134],
    },
    arg_group_def_57: {
      BYVAL: [135],
    },
    arg_group_56: {
      BYVAL: [136],
      BYREF: [138],
    },
    arg_group_def_58: {
      BYREF: [137],
    },
    arg_group_def_60: {
      LPAREN: [139],
    },
    arg: {
      OPTIONAL: [140],
      BYVAL: [140],
      BYREF: [140],
      PARAMARRAY: [140],
      ALIAS: [140],
      AND: [140],
      ATTRIBUTE: [140],
      AS: [140],
      BEGIN: [140],
      BOOLEAN: [140],
      BYTE: [140],
      CALL: [140],
      CASE: [140],
      CONST: [140],
      DECLARE: [140],
      DEFBOOL: [140],
      DEFBYTE: [140],
      DEFDATE: [140],
      DEFDBL: [140],
      DEFDEC: [140],
      DEFCUR: [140],
      DEFINT: [140],
      DEFLNG: [140],
      DEFOBJ: [140],
      DEFSNG: [140],
      DEFSTR: [140],
      DEFVAR: [140],
      DIM: [140],
      DO: [140],
      DOUBLE: [140],
      EACH: [140],
      ELSE: [140],
      ELSEIF: [140],
      END_ENUM: [140],
      END_FUNCTION: [140],
      END_IF: [140],
      END_PROPERTY: [140],
      END_SELECT: [140],
      END_SUB: [140],
      END_TYPE: [140],
      END_WITH: [140],
      END: [140],
      ENUM: [140],
      EQV: [140],
      ERASE: [140],
      ERROR: [140],
      EVENT: [140],
      EXIT_DO: [140],
      EXIT_FOR: [140],
      EXIT_FUNCTION: [140],
      EXIT_PROPERTY: [140],
      EXIT_SUB: [140],
      FALSE: [140],
      FRIEND: [140],
      FOR: [140],
      FUNCTION: [140],
      GET: [140],
      GLOBAL: [140],
      GOSUB: [140],
      GOTO: [140],
      IF: [140],
      IMPLEMENTS: [140],
      IN: [140],
      IS: [140],
      INTEGER: [140],
      LONG: [140],
      LOOP: [140],
      LEN: [140],
      LET: [140],
      LIB: [140],
      LIKE: [140],
      LSET: [140],
      MACRO_CONST: [140],
      MACRO_IF: [140],
      MACRO_ELSEIF: [140],
      MACRO_ELSE: [140],
      MACRO_END_IF: [140],
      MOD: [140],
      NEXT: [140],
      NEW: [140],
      NOT: [140],
      NOTHING: [140],
      NULL: [140],
      ON: [140],
      ON_ERROR: [140],
      ON_LOCAL_ERROR: [140],
      OPTION_BASE: [140],
      OPTION_EXPLICIT: [140],
      OPTION_COMPARE: [140],
      OPTION_PRIVATE_MODULE: [140],
      OR: [140],
      PRESERVE: [140],
      PRIVATE: [140],
      PROPERTY_GET: [140],
      PROPERTY_LET: [140],
      PROPERTY_SET: [140],
      PTRSAFE: [140],
      PUBLIC: [140],
      RAISEEVENT: [140],
      REDIM: [140],
      RESET: [140],
      RESUME: [140],
      RETURN: [140],
      SELECT: [140],
      SET: [140],
      SINGLE: [140],
      STATIC: [140],
      STEP: [140],
      STOP: [140],
      STRING: [140],
      SUB: [140],
      THEN: [140],
      TO: [140],
      TRUE: [140],
      TYPEOF: [140],
      UNTIL: [140],
      VARIANT: [140],
      WEND: [140],
      WHILE: [140],
      WITH: [140],
      WITHEVENTS: [140],
      XOR: [140],
      IDENTIFIER: [140],
    },
    argDefaultValue: {
      EQ: [141],
    },
    asTypeClause: {
      AS: [142],
    },
    type__group_def_62: {
      BOOLEAN: [143],
      BYTE: [143],
      DOUBLE: [143],
      INTEGER: [143],
      LONG: [143],
      SINGLE: [143],
      VARIANT: [143],
      STRING: [143],
    },
    type__group_61: {
      BOOLEAN: [144, 146],
      BYTE: [144, 146],
      DOUBLE: [144, 146],
      INTEGER: [144, 146],
      LONG: [144, 146],
      SINGLE: [144, 146],
      VARIANT: [144, 146],
      STRING: [144, 146],
      ALIAS: [146],
      AND: [146],
      ATTRIBUTE: [146],
      AS: [146],
      BEGIN: [146],
      BYVAL: [146],
      BYREF: [146],
      CALL: [146],
      CASE: [146],
      CONST: [146],
      DECLARE: [146],
      DEFBOOL: [146],
      DEFBYTE: [146],
      DEFDATE: [146],
      DEFDBL: [146],
      DEFDEC: [146],
      DEFCUR: [146],
      DEFINT: [146],
      DEFLNG: [146],
      DEFOBJ: [146],
      DEFSNG: [146],
      DEFSTR: [146],
      DEFVAR: [146],
      DIM: [146],
      DO: [146],
      EACH: [146],
      ELSE: [146],
      ELSEIF: [146],
      END_ENUM: [146],
      END_FUNCTION: [146],
      END_IF: [146],
      END_PROPERTY: [146],
      END_SELECT: [146],
      END_SUB: [146],
      END_TYPE: [146],
      END_WITH: [146],
      END: [146],
      ENUM: [146],
      EQV: [146],
      ERASE: [146],
      ERROR: [146],
      EVENT: [146],
      EXIT_DO: [146],
      EXIT_FOR: [146],
      EXIT_FUNCTION: [146],
      EXIT_PROPERTY: [146],
      EXIT_SUB: [146],
      FALSE: [146],
      FRIEND: [146],
      FOR: [146],
      FUNCTION: [146],
      GET: [146],
      GLOBAL: [146],
      GOSUB: [146],
      GOTO: [146],
      IF: [146],
      IMPLEMENTS: [146],
      IN: [146],
      IS: [146],
      LOOP: [146],
      LEN: [146],
      LET: [146],
      LIB: [146],
      LIKE: [146],
      LSET: [146],
      MACRO_CONST: [146],
      MACRO_IF: [146],
      MACRO_ELSEIF: [146],
      MACRO_ELSE: [146],
      MACRO_END_IF: [146],
      MOD: [146],
      NEXT: [146],
      NEW: [146],
      NOT: [146],
      NOTHING: [146],
      NULL: [146],
      ON: [146],
      ON_ERROR: [146],
      ON_LOCAL_ERROR: [146],
      OPTIONAL: [146],
      OPTION_BASE: [146],
      OPTION_EXPLICIT: [146],
      OPTION_COMPARE: [146],
      OPTION_PRIVATE_MODULE: [146],
      OR: [146],
      PARAMARRAY: [146],
      PRESERVE: [146],
      PRIVATE: [146],
      PROPERTY_GET: [146],
      PROPERTY_LET: [146],
      PROPERTY_SET: [146],
      PTRSAFE: [146],
      PUBLIC: [146],
      RAISEEVENT: [146],
      REDIM: [146],
      RESET: [146],
      RESUME: [146],
      RETURN: [146],
      SELECT: [146],
      SET: [146],
      STATIC: [146],
      STEP: [146],
      STOP: [146],
      SUB: [146],
      THEN: [146],
      TO: [146],
      TRUE: [146],
      TYPEOF: [146],
      UNTIL: [146],
      WEND: [146],
      WHILE: [146],
      WITH: [146],
      WITHEVENTS: [146],
      XOR: [146],
      IDENTIFIER: [146],
    },
    type__group_def_63: {
      ALIAS: [145],
      AND: [145],
      ATTRIBUTE: [145],
      AS: [145],
      BEGIN: [145],
      BOOLEAN: [145],
      BYVAL: [145],
      BYREF: [145],
      BYTE: [145],
      CALL: [145],
      CASE: [145],
      CONST: [145],
      DECLARE: [145],
      DEFBOOL: [145],
      DEFBYTE: [145],
      DEFDATE: [145],
      DEFDBL: [145],
      DEFDEC: [145],
      DEFCUR: [145],
      DEFINT: [145],
      DEFLNG: [145],
      DEFOBJ: [145],
      DEFSNG: [145],
      DEFSTR: [145],
      DEFVAR: [145],
      DIM: [145],
      DO: [145],
      DOUBLE: [145],
      EACH: [145],
      ELSE: [145],
      ELSEIF: [145],
      END_ENUM: [145],
      END_FUNCTION: [145],
      END_IF: [145],
      END_PROPERTY: [145],
      END_SELECT: [145],
      END_SUB: [145],
      END_TYPE: [145],
      END_WITH: [145],
      END: [145],
      ENUM: [145],
      EQV: [145],
      ERASE: [145],
      ERROR: [145],
      EVENT: [145],
      EXIT_DO: [145],
      EXIT_FOR: [145],
      EXIT_FUNCTION: [145],
      EXIT_PROPERTY: [145],
      EXIT_SUB: [145],
      FALSE: [145],
      FRIEND: [145],
      FOR: [145],
      FUNCTION: [145],
      GET: [145],
      GLOBAL: [145],
      GOSUB: [145],
      GOTO: [145],
      IF: [145],
      IMPLEMENTS: [145],
      IN: [145],
      IS: [145],
      INTEGER: [145],
      LONG: [145],
      LOOP: [145],
      LEN: [145],
      LET: [145],
      LIB: [145],
      LIKE: [145],
      LSET: [145],
      MACRO_CONST: [145],
      MACRO_IF: [145],
      MACRO_ELSEIF: [145],
      MACRO_ELSE: [145],
      MACRO_END_IF: [145],
      MOD: [145],
      NEXT: [145],
      NEW: [145],
      NOT: [145],
      NOTHING: [145],
      NULL: [145],
      ON: [145],
      ON_ERROR: [145],
      ON_LOCAL_ERROR: [145],
      OPTIONAL: [145],
      OPTION_BASE: [145],
      OPTION_EXPLICIT: [145],
      OPTION_COMPARE: [145],
      OPTION_PRIVATE_MODULE: [145],
      OR: [145],
      PARAMARRAY: [145],
      PRESERVE: [145],
      PRIVATE: [145],
      PROPERTY_GET: [145],
      PROPERTY_LET: [145],
      PROPERTY_SET: [145],
      PTRSAFE: [145],
      PUBLIC: [145],
      RAISEEVENT: [145],
      REDIM: [145],
      RESET: [145],
      RESUME: [145],
      RETURN: [145],
      SELECT: [145],
      SET: [145],
      SINGLE: [145],
      STATIC: [145],
      STEP: [145],
      STOP: [145],
      STRING: [145],
      SUB: [145],
      THEN: [145],
      TO: [145],
      TRUE: [145],
      TYPEOF: [145],
      UNTIL: [145],
      VARIANT: [145],
      WEND: [145],
      WHILE: [145],
      WITH: [145],
      WITHEVENTS: [145],
      XOR: [145],
      IDENTIFIER: [145],
    },
    type_: {
      BOOLEAN: [147],
      BYTE: [147],
      DOUBLE: [147],
      INTEGER: [147],
      LONG: [147],
      SINGLE: [147],
      VARIANT: [147],
      STRING: [147],
      ALIAS: [147],
      AND: [147],
      ATTRIBUTE: [147],
      AS: [147],
      BEGIN: [147],
      BYVAL: [147],
      BYREF: [147],
      CALL: [147],
      CASE: [147],
      CONST: [147],
      DECLARE: [147],
      DEFBOOL: [147],
      DEFBYTE: [147],
      DEFDATE: [147],
      DEFDBL: [147],
      DEFDEC: [147],
      DEFCUR: [147],
      DEFINT: [147],
      DEFLNG: [147],
      DEFOBJ: [147],
      DEFSNG: [147],
      DEFSTR: [147],
      DEFVAR: [147],
      DIM: [147],
      DO: [147],
      EACH: [147],
      ELSE: [147],
      ELSEIF: [147],
      END_ENUM: [147],
      END_FUNCTION: [147],
      END_IF: [147],
      END_PROPERTY: [147],
      END_SELECT: [147],
      END_SUB: [147],
      END_TYPE: [147],
      END_WITH: [147],
      END: [147],
      ENUM: [147],
      EQV: [147],
      ERASE: [147],
      ERROR: [147],
      EVENT: [147],
      EXIT_DO: [147],
      EXIT_FOR: [147],
      EXIT_FUNCTION: [147],
      EXIT_PROPERTY: [147],
      EXIT_SUB: [147],
      FALSE: [147],
      FRIEND: [147],
      FOR: [147],
      FUNCTION: [147],
      GET: [147],
      GLOBAL: [147],
      GOSUB: [147],
      GOTO: [147],
      IF: [147],
      IMPLEMENTS: [147],
      IN: [147],
      IS: [147],
      LOOP: [147],
      LEN: [147],
      LET: [147],
      LIB: [147],
      LIKE: [147],
      LSET: [147],
      MACRO_CONST: [147],
      MACRO_IF: [147],
      MACRO_ELSEIF: [147],
      MACRO_ELSE: [147],
      MACRO_END_IF: [147],
      MOD: [147],
      NEXT: [147],
      NEW: [147],
      NOT: [147],
      NOTHING: [147],
      NULL: [147],
      ON: [147],
      ON_ERROR: [147],
      ON_LOCAL_ERROR: [147],
      OPTIONAL: [147],
      OPTION_BASE: [147],
      OPTION_EXPLICIT: [147],
      OPTION_COMPARE: [147],
      OPTION_PRIVATE_MODULE: [147],
      OR: [147],
      PARAMARRAY: [147],
      PRESERVE: [147],
      PRIVATE: [147],
      PROPERTY_GET: [147],
      PROPERTY_LET: [147],
      PROPERTY_SET: [147],
      PTRSAFE: [147],
      PUBLIC: [147],
      RAISEEVENT: [147],
      REDIM: [147],
      RESET: [147],
      RESUME: [147],
      RETURN: [147],
      SELECT: [147],
      SET: [147],
      STATIC: [147],
      STEP: [147],
      STOP: [147],
      SUB: [147],
      THEN: [147],
      TO: [147],
      TRUE: [147],
      TYPEOF: [147],
      UNTIL: [147],
      WEND: [147],
      WHILE: [147],
      WITH: [147],
      WITHEVENTS: [147],
      XOR: [147],
      IDENTIFIER: [147],
    },
    complexType_group_66: {
      '.': [148],
      '!': [149],
    },
    complexType_group_def_67: {
      '.': [150],
      '!': [150],
    },
    complexType: {
      ALIAS: [151],
      AND: [151],
      ATTRIBUTE: [151],
      AS: [151],
      BEGIN: [151],
      BOOLEAN: [151],
      BYVAL: [151],
      BYREF: [151],
      BYTE: [151],
      CALL: [151],
      CASE: [151],
      CONST: [151],
      DECLARE: [151],
      DEFBOOL: [151],
      DEFBYTE: [151],
      DEFDATE: [151],
      DEFDBL: [151],
      DEFDEC: [151],
      DEFCUR: [151],
      DEFINT: [151],
      DEFLNG: [151],
      DEFOBJ: [151],
      DEFSNG: [151],
      DEFSTR: [151],
      DEFVAR: [151],
      DIM: [151],
      DO: [151],
      DOUBLE: [151],
      EACH: [151],
      ELSE: [151],
      ELSEIF: [151],
      END_ENUM: [151],
      END_FUNCTION: [151],
      END_IF: [151],
      END_PROPERTY: [151],
      END_SELECT: [151],
      END_SUB: [151],
      END_TYPE: [151],
      END_WITH: [151],
      END: [151],
      ENUM: [151],
      EQV: [151],
      ERASE: [151],
      ERROR: [151],
      EVENT: [151],
      EXIT_DO: [151],
      EXIT_FOR: [151],
      EXIT_FUNCTION: [151],
      EXIT_PROPERTY: [151],
      EXIT_SUB: [151],
      FALSE: [151],
      FRIEND: [151],
      FOR: [151],
      FUNCTION: [151],
      GET: [151],
      GLOBAL: [151],
      GOSUB: [151],
      GOTO: [151],
      IF: [151],
      IMPLEMENTS: [151],
      IN: [151],
      IS: [151],
      INTEGER: [151],
      LONG: [151],
      LOOP: [151],
      LEN: [151],
      LET: [151],
      LIB: [151],
      LIKE: [151],
      LSET: [151],
      MACRO_CONST: [151],
      MACRO_IF: [151],
      MACRO_ELSEIF: [151],
      MACRO_ELSE: [151],
      MACRO_END_IF: [151],
      MOD: [151],
      NEXT: [151],
      NEW: [151],
      NOT: [151],
      NOTHING: [151],
      NULL: [151],
      ON: [151],
      ON_ERROR: [151],
      ON_LOCAL_ERROR: [151],
      OPTIONAL: [151],
      OPTION_BASE: [151],
      OPTION_EXPLICIT: [151],
      OPTION_COMPARE: [151],
      OPTION_PRIVATE_MODULE: [151],
      OR: [151],
      PARAMARRAY: [151],
      PRESERVE: [151],
      PRIVATE: [151],
      PROPERTY_GET: [151],
      PROPERTY_LET: [151],
      PROPERTY_SET: [151],
      PTRSAFE: [151],
      PUBLIC: [151],
      RAISEEVENT: [151],
      REDIM: [151],
      RESET: [151],
      RESUME: [151],
      RETURN: [151],
      SELECT: [151],
      SET: [151],
      SINGLE: [151],
      STATIC: [151],
      STEP: [151],
      STOP: [151],
      STRING: [151],
      SUB: [151],
      THEN: [151],
      TO: [151],
      TRUE: [151],
      TYPEOF: [151],
      UNTIL: [151],
      VARIANT: [151],
      WEND: [151],
      WHILE: [151],
      WITH: [151],
      WITHEVENTS: [151],
      XOR: [151],
      IDENTIFIER: [151],
    },
    baseType: {
      BOOLEAN: [152],
      BYTE: [153],
      DOUBLE: [154],
      INTEGER: [155],
      LONG: [156],
      SINGLE: [157],
      VARIANT: [158],
      STRING: [160],
    },
    baseType_group_def_69: {
      MULT: [159],
    },
    fieldLength: {
      MULT: [161, 162],
    },
    ambiguousIdentifier: {
      ALIAS: [163],
      AND: [164],
      ATTRIBUTE: [165],
      AS: [166],
      BEGIN: [167],
      BOOLEAN: [168],
      BYVAL: [169],
      BYREF: [170],
      BYTE: [171],
      CALL: [172],
      CASE: [173],
      CONST: [174],
      DECLARE: [175],
      DEFBOOL: [176],
      DEFBYTE: [177],
      DEFDATE: [178],
      DEFDBL: [179],
      DEFDEC: [180],
      DEFCUR: [181],
      DEFINT: [182],
      DEFLNG: [183],
      DEFOBJ: [184],
      DEFSNG: [185],
      DEFSTR: [186],
      DEFVAR: [187],
      DIM: [188],
      DO: [189],
      DOUBLE: [190],
      EACH: [191],
      ELSE: [192],
      ELSEIF: [193],
      END_ENUM: [194],
      END_FUNCTION: [195],
      END_IF: [196],
      END_PROPERTY: [197],
      END_SELECT: [198],
      END_SUB: [199],
      END_TYPE: [200],
      END_WITH: [201],
      END: [202],
      ENUM: [203],
      EQV: [204],
      ERASE: [205],
      ERROR: [206],
      EVENT: [207],
      EXIT_DO: [208],
      EXIT_FOR: [209],
      EXIT_FUNCTION: [210],
      EXIT_PROPERTY: [211],
      EXIT_SUB: [212],
      FALSE: [213],
      FRIEND: [214],
      FOR: [215],
      FUNCTION: [216],
      GET: [217],
      GLOBAL: [218],
      GOSUB: [219],
      GOTO: [220],
      IF: [221],
      IMPLEMENTS: [222],
      IN: [223],
      IS: [224],
      INTEGER: [225],
      LONG: [226],
      LOOP: [227],
      LEN: [228],
      LET: [229],
      LIB: [230],
      LIKE: [231],
      LSET: [232],
      MACRO_CONST: [233],
      MACRO_IF: [234],
      MACRO_ELSEIF: [235],
      MACRO_ELSE: [236],
      MACRO_END_IF: [237],
      MOD: [238],
      NEXT: [239],
      NEW: [240],
      NOT: [241],
      NOTHING: [242],
      NULL: [243],
      ON: [244],
      ON_ERROR: [245],
      ON_LOCAL_ERROR: [246],
      OPTIONAL: [247],
      OPTION_BASE: [248],
      OPTION_EXPLICIT: [249],
      OPTION_COMPARE: [250],
      OPTION_PRIVATE_MODULE: [251],
      OR: [252],
      PARAMARRAY: [253],
      PRESERVE: [254],
      PRIVATE: [255],
      PROPERTY_GET: [256],
      PROPERTY_LET: [257],
      PROPERTY_SET: [258],
      PTRSAFE: [259],
      PUBLIC: [260],
      RAISEEVENT: [261],
      REDIM: [262],
      RESET: [263],
      RESUME: [264],
      RETURN: [265],
      SELECT: [266],
      SET: [267],
      SINGLE: [268],
      STATIC: [269],
      STEP: [270],
      STOP: [271],
      STRING: [272],
      SUB: [273],
      THEN: [274],
      TO: [275],
      TRUE: [276],
      TYPEOF: [277],
      UNTIL: [278],
      VARIANT: [279],
      WEND: [280],
      WHILE: [281],
      WITH: [282],
      WITHEVENTS: [283],
      XOR: [284],
      IDENTIFIER: [285],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }

        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (
        ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX ||
        ruleIndexes.length === 0
      ) {
        // skip this symbol first
        return returnNext();
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 5,
    15: 6,
    16: 6,
    17: 6,
    18: 6,
    19: 7,
    20: 7,
    21: 8,
    22: 8,
    23: 8,
    24: 8,
    25: 8,
    26: 9,
    27: 9,
    28: 9,
    29: 9,
    30: 10,
    31: 11,
    32: 12,
    33: 13,
    34: 14,
    35: 15,
    36: 15,
    37: 16,
    38: 16,
    39: 16,
    40: 16,
    41: 16,
    42: 16,
    43: 16,
    44: 16,
    45: 16,
    46: 16,
    47: 17,
    48: 18,
    49: 19,
    50: 19,
    51: 20,
    52: 20,
    53: 21,
    54: 22,
    55: 22,
    56: 22,
    57: 22,
    58: 22,
    59: 22,
    60: 23,
    61: 23,
    62: 23,
    63: 23,
    64: 23,
    65: 23,
    66: 23,
    67: 24,
    68: 25,
    69: 25,
    70: 26,
    71: 26,
    72: 26,
    73: 27,
    74: 28,
    75: 28,
    76: 29,
    77: 30,
    78: 31,
    79: 31,
    80: 32,
    81: 33,
    82: 33,
    83: 33,
    84: 33,
    85: 33,
    86: 33,
    87: 33,
    88: 34,
    89: 34,
    90: 35,
    91: 35,
    92: 36,
    93: 37,
    94: 37,
    95: 38,
    96: 38,
    97: 39,
    98: 40,
    99: 40,
    100: 40,
    101: 41,
    102: 41,
    103: 41,
    104: 41,
    105: 42,
    106: 42,
    107: 42,
    108: 43,
    109: 43,
    110: 43,
    111: 43,
    112: 43,
    113: 44,
    114: 44,
    115: 44,
    116: 44,
    117: 44,
    118: 44,
    119: 44,
    120: 45,
    121: 46,
    122: 47,
    123: 48,
    124: 48,
    125: 48,
    126: 48,
    127: 48,
    128: 48,
    129: 49,
    130: 49,
    131: 49,
    132: 49,
    133: 49,
    134: 49,
    135: 50,
    136: 50,
    137: 50,
    138: 50,
    139: 50,
    140: 50,
    141: 51,
    142: 52,
    143: 53,
    144: 53,
    145: 53,
    146: 53,
    147: 53,
    148: 54,
    149: 54,
    150: 54,
    151: 54,
    152: 55,
    153: 55,
    154: 55,
    155: 55,
    156: 55,
    157: 55,
    158: 55,
    159: 55,
    160: 55,
    161: 56,
    162: 56,
    163: 57,
    164: 58,
    165: 59,
    166: 60,
    167: 61,
    168: 62,
    169: 63,
    170: 64,
    171: 65,
    172: 66,
    173: 67,
    174: 68,
    175: 69,
    176: 70,
    177: 71,
    178: 72,
    179: 73,
    180: 74,
    181: 75,
    182: 76,
    183: 77,
    184: 78,
    185: 79,
    186: 80,
    187: 81,
    188: 82,
    189: 83,
    190: 84,
    191: 85,
    192: 86,
    193: 87,
    194: 88,
    195: 89,
    196: 90,
    197: 91,
    198: 92,
    199: 93,
    200: 94,
    201: 95,
    202: 96,
    203: 97,
    204: 98,
    205: 99,
    206: 100,
    207: 101,
    208: 102,
    209: 103,
    210: 104,
    211: 105,
    212: 106,
    213: 107,
    214: 108,
    215: 109,
    216: 110,
    217: 111,
    218: 112,
    219: 113,
    220: 114,
    221: 115,
    222: 116,
    223: 117,
    224: 118,
    225: 119,
    226: 120,
    227: 121,
    228: 122,
    229: 123,
    230: 124,
    231: 125,
    232: 126,
    233: 127,
    234: 128,
    235: 129,
    236: 130,
    237: 131,
    238: 132,
    239: 133,
    240: 134,
    241: 135,
    242: 136,
    243: 137,
    244: 138,
    245: 139,
    246: 140,
    247: 141,
    248: 142,
    249: 143,
    250: 144,
    251: 145,
    252: 146,
    253: 147,
    254: 148,
    255: 149,
    256: 150,
    257: 151,
    258: 152,
    259: 153,
    260: 154,
    261: 155,
    262: 156,
    263: 157,
    264: 158,
    265: 159,
    266: 160,
    267: 161,
    268: 162,
    269: 163,
    270: 164,
    271: 165,
    272: 166,
    273: 167,
    274: 168,
    275: 169,
    276: 170,
    277: 171,
    278: 172,
    279: 173,
    280: 174,
    281: 175,
    282: 176,
    283: 177,
    284: 178,
    285: 179,
  };
  return parser;
})();

export default vbaParser;
