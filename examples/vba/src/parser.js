/*
Generated By kison v0.5.33

Generate time: Tue Nov 30 2021 18:43:41 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token =
      recommendedAction.action === 'add'
        ? lexer.peekTokens()[0]
        : lexer.getCurrentToken();
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      [
        'ALIAS',
        /ALIAS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AND',
        /AND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ATTRIBUTE',
        /ATTRIBUTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AS',
        /AS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BEGIN',
        /BEGIN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BOOLEAN',
        /BOOLEAN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYVAL',
        /BYVAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYREF',
        /BYREF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYTE',
        /BYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CALL',
        /CALL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CASE',
        /CASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CONST',
        /CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DECLARE',
        /DECLARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBOOL',
        /DEFBOOL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBYTE',
        /DEFBYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDATE',
        /DEFDATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDBL',
        /DEFDBL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDEC',
        /DEFDEC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFCUR',
        /DEFCUR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFINT',
        /DEFINT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFLNG',
        /DEFLNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFOBJ',
        /DEFOBJ\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSNG',
        /DEFSNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSTR',
        /DEFSTR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFVAR',
        /DEFVAR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DIM',
        /DIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DO',
        /DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DOUBLE',
        /DOUBLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EACH',
        /EACH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSE',
        /ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSEIF',
        /ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_ENUM',
        /END ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_FUNCTION',
        /END FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_IF',
        /END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_PROPERTY',
        /END PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SELECT',
        /END SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SUB',
        /END SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_TYPE',
        /END TYPE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_WITH',
        /END WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END',
        /END\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ENUM',
        /ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EQV',
        /EQV\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ERASE',
        /ERASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EVENT',
        /EVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_DO',
        /EXIT DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FOR',
        /EXIT FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FUNCTION',
        /EXIT FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_PROPERTY',
        /EXIT PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_SUB',
        /EXIT SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FALSE',
        /FALSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FRIEND',
        /FRIEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FOR',
        /FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FUNCTION',
        /FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GET',
        /GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GLOBAL',
        /GLOBAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOSUB',
        /GOSUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOTO',
        /GOTO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IF',
        /IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMPLEMENTS',
        /IMPLEMENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IN',
        /IN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IS',
        /IS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'INTEGER',
        /INTEGER\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LONG',
        /LONG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LOOP',
        /LOOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LEN',
        /LEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LET',
        /LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIB',
        /LIB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIKE',
        /LIKE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LSET',
        /LSET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_CONST',
        /#CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_IF',
        /#IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSEIF',
        /#ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSE',
        /#ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_END_IF',
        /#END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MOD',
        /MOD\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEXT',
        /NEXT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEW',
        /NEW\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOT',
        /NOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOTHING',
        /NOTHING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NULL',
        /NULL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_ERROR',
        /ON ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_LOCAL_ERROR',
        /ON LOCAL ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON',
        /ON\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTIONAL',
        /OPTIONAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_BASE',
        /OPTION BASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_EXPLICIT',
        /OPTION EXPLICIT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_COMPARE',
        /OPTION COMPARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_PRIVATE_MODULE',
        /OPTION PRIVATE MODULE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OR',
        /OR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PARAMARRAY',
        /PARAMARRAY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRESERVE',
        /PRESERVE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRIVATE',
        /PRIVATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_GET',
        /PROPERTY GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_LET',
        /PROPERTY LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_SET',
        /PROPERTY SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PTRSAFE',
        /PTRSAFE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PUBLIC',
        /PUBLIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RAISEEVENT',
        /RAISEEVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'REDIM',
        /REDIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESET',
        /RESET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESUME',
        /RESUME\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RETURN',
        /RETURN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SELECT',
        /SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SET',
        /SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SINGLE',
        /SINGLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STATIC',
        /STATIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STEP',
        /STEP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STOP',
        /STOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STRING',
        /STRING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SUB',
        /SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'THEN',
        /THEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TO',
        /TO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TRUE',
        /TRUE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TYPEOF',
        /TYPEOF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'UNTIL',
        /UNTIL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'VARIANT',
        /VARIANT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WEND',
        /WEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WHILE',
        /WHILE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITH',
        /WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITHEVENTS',
        /WITHEVENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'XOR',
        /XOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMP',
        /IMP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ['SPACE_DOT', /\s+\./g],
      ['ASSIGN', /:=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['IDIV', /\\/g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS_EQ', /\-=/g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS_EQ', /\+=/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"(""|[^"\r\n])*"/g],
      ['INTEGERLITERAL', /[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ['.', /\./g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1*']],
      [
        'moduleDeclarations_group_def_5',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_5*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_7',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_7*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'RPAREN',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_9', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_9*', 'endOfStatement']],
      ['blockStmt', ['lineLabel']],
      ['blockStmt', ['goToStmt']],
      ['blockStmt', ['onErrorStmt']],
      ['blockStmt', ['withStmt']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['onErrorStmt_group_def_11', ['ambiguousIdentifier']],
      ['onErrorStmt_group_10', ['onErrorStmt_group_def_11']],
      ['onErrorStmt_group_def_12', ['MINUS', 'INTEGERLITERAL']],
      ['onErrorStmt_group_10', ['onErrorStmt_group_def_12']],
      ['onErrorStmt', ['ON_ERROR', 'GOTO', 'onErrorStmt_group_10']],
      ['lineLabel', ['ambiguousIdentifier', 'COLON']],
      ['goToStmt', ['GOTO', 'ambiguousIdentifier']],
      ['eraseStmt_group_def_14', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_14*']],
      ['redimStmt_group_def_16', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_16*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_17', ['letStmt_group_def_18']],
      ['letStmt_group_def_19', ['PLUS_EQ']],
      ['letStmt_group_17', ['letStmt_group_def_19']],
      ['letStmt_group_def_20', ['MINUS_EQ']],
      ['letStmt_group_17', ['letStmt_group_def_20']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_17', 'valueStmt'],
      ],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_22',
        ['implicitCallStmt_InStmt?', '.'],
      ],
      [
        'eCS_MemberProcedureCall_group_21',
        ['eCS_MemberProcedureCall_group_def_22'],
      ],
      ['eCS_MemberProcedureCall_group_def_23', ['SPACE_DOT']],
      [
        'eCS_MemberProcedureCall_group_21',
        ['eCS_MemberProcedureCall_group_def_23'],
      ],
      [
        'eCS_MemberProcedureCall_group_def_25',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_27', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'eCS_MemberProcedureCall_group_21',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_25?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_25?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall',
        [
          'implicitCallStmt_InStmt',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'ambiguousIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_27?',
        ],
      ],
      ['argsCall_group_def_33', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_33*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_35', ['DIM']],
      ['variableStmt_group_34', ['variableStmt_group_def_35']],
      ['variableStmt_group_def_36', ['STATIC']],
      ['variableStmt_group_34', ['variableStmt_group_def_36']],
      ['variableStmt_group_def_37', ['visibility']],
      ['variableStmt_group_34', ['variableStmt_group_def_37']],
      [
        'variableStmt',
        ['variableStmt_group_34', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['withStmt_group_def_39', ['implicitCallStmt_InStmt']],
      ['withStmt_group_38', ['withStmt_group_def_39']],
      ['withStmt_group_def_40', ['NEW', 'type_']],
      ['withStmt_group_38', ['withStmt_group_def_40']],
      [
        'withStmt',
        ['WITH', 'withStmt_group_38', 'endOfStatement', 'block?', 'END_WITH'],
      ],
      ['variableListStmt_group_def_42', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_42*'],
      ],
      ['variableSubStmt_group_def_44', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_44?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_14*']],
      ['subscript__group_def_47', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_47?', 'valueStmt']],
      ['subscripts_group_def_49', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_49*']],
      ['subscript_', ['subscript__group_def_47?', 'valueStmt']],
      ['argList_group_def_53', [',', 'arg']],
      ['argList_group_def_54', ['arg', 'argList_group_def_53*']],
      ['argList', ['LPAREN', 'argList_group_def_54?', 'RPAREN']],
      ['valueStmt_p_end', ['literal']],
      ['valueStmt_p_end', ['implicitCallStmt_InStmt']],
      ['valueStmt_p_end', ['LPAREN', 'valueStmt', 'RPAREN']],
      ['valueStmt_p_end', ['NEW', 'valueStmt']],
      ['valueStmt_p_end', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_57', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_56', ['iCS_S_MembersCall_group_def_57']],
      ['iCS_S_MembersCall_group_def_58', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_56', ['iCS_S_MembersCall_group_def_58']],
      [
        'iCS_S_MembersCall_group_def_59',
        ['iCS_S_MembersCall_group_56', 'iCS_S_MemberCall'],
      ],
      ['iCS_S_MembersCall_group_55', ['iCS_S_MembersCall_group_def_59']],
      ['iCS_S_MembersCall_group_def_60', ['iCS_S_SpaceMemberCall']],
      ['iCS_S_MembersCall_group_55', ['iCS_S_MembersCall_group_def_60']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_55',
          'iCS_S_MemberCall*',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      ['iCS_S_MemberCall_group_62', ['iCS_S_MembersCall_group_def_57']],
      ['iCS_S_MemberCall_group_62', ['iCS_S_MembersCall_group_def_58']],
      ['iCS_S_MemberCall', ['.', 'iCS_S_MemberCall_group_62']],
      ['iCS_S_SpaceMemberCall_group_63', ['iCS_S_MembersCall_group_def_57']],
      ['iCS_S_SpaceMemberCall_group_63', ['iCS_S_MembersCall_group_def_58']],
      [
        'iCS_S_SpaceMemberCall',
        ['SPACE_DOT', 'iCS_S_SpaceMemberCall_group_63'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      ['dictionaryCallStmt', ['!', 'ambiguousIdentifier', 'typeHint?']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_67', ['BYVAL']],
      ['arg_group_66', ['arg_group_def_67']],
      ['arg_group_def_68', ['BYREF']],
      ['arg_group_66', ['arg_group_def_68']],
      ['arg_group_def_70', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_66?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_70?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type__group_def_72', ['baseType']],
      ['type__group_71', ['type__group_def_72']],
      ['type__group_def_73', ['complexType']],
      ['type__group_71', ['type__group_def_73']],
      ['type_', ['type__group_71', 'arg_group_def_70?']],
      ['complexType_group_def_77', ['.']],
      ['complexType_group_76', ['complexType_group_def_77']],
      ['complexType_group_def_78', ['!']],
      ['complexType_group_76', ['complexType_group_def_78']],
      [
        'complexType_group_def_79',
        ['complexType_group_76', 'ambiguousIdentifier'],
      ],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_79*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType', ['STRING', 'baseType_group_def_81?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IMP']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
      ['letStmt_group_def_18', ['EQ']],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['baseType_group_def_81', ['MULT', 'valueStmt']],
      ['fieldLength', ['MULT', 'ambiguousIdentifier']],
      ['(valueStmt)1_', ['IS', 'valueStmt_p_2', 1, '(valueStmt)1_']],
      [
        'valueStmt',
        ['valueStmt_p_2', 1, '(valueStmt)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      ['(valueStmt)1_', ['LIKE', 'valueStmt_p_2', 1, '(valueStmt)1_']],
      ['(valueStmt)1_', ['GEQ', 'valueStmt_p_2', 1, '(valueStmt)1_']],
      ['(valueStmt)1_', ['LEQ', 'valueStmt_p_2', 1, '(valueStmt)1_']],
      ['(valueStmt)1_', ['GT', 'valueStmt_p_2', 1, '(valueStmt)1_']],
      ['(valueStmt)1_', ['LT', 'valueStmt_p_2', 1, '(valueStmt)1_']],
      ['(valueStmt)1_', ['NEQ', 'valueStmt_p_2', 1, '(valueStmt)1_']],
      ['(valueStmt)1_', ['EQ', 'valueStmt_p_2', 1, '(valueStmt)1_']],
      ['(valueStmt_p_2)1_', ['IMP', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_']],
      [
        'valueStmt_p_2',
        ['valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      ['(valueStmt_p_2)1_', ['EQV', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_']],
      ['(valueStmt_p_2)1_', ['XOR', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_']],
      ['(valueStmt_p_2)1_', ['OR', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_']],
      ['(valueStmt_p_2)1_', ['AND', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_']],
      ['(valueStmt_p_3)1_', ['PLUS', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_']],
      [
        'valueStmt_p_3',
        ['valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      ['(valueStmt_p_3)1_', ['MINUS', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_']],
      [
        '(valueStmt_p_3)1_',
        ['AMPERSAND', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
      ],
      ['(valueStmt_p_4)1_', ['DIV', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_']],
      [
        'valueStmt_p_4',
        ['valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      ['(valueStmt_p_4)1_', ['IDIV', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_']],
      ['(valueStmt_p_4)1_', ['MULT', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_']],
      ['(valueStmt_p_4)1_', ['MOD', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_']],
      ['(valueStmt_p_5)1_', ['POW', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_']],
      [
        'valueStmt_p_5',
        ['valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_6',
        ['valueStmt_p_end'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      ['valueStmt_p_6', ['NOT', 'valueStmt_p_6']],
      ['valueStmt_p_6', ['MINUS', 'valueStmt_p_6']],
      ['valueStmt_p_6', ['PLUS', 'valueStmt_p_6']],
      ['(valueStmt)1_', []],
      ['(valueStmt_p_2)1_', []],
      ['(valueStmt_p_3)1_', []],
      ['(valueStmt_p_4)1_', []],
      ['(valueStmt_p_5)1_', []],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {
    valueStmt_p_end: 'valueStmt',
    valueStmt_p_1: 'valueStmt',
    valueStmt_p_2: 'valueStmt',
    valueStmt_p_3: 'valueStmt',
    valueStmt_p_4: 'valueStmt',
    valueStmt_p_5: 'valueStmt',
    valueStmt_p_6: 'valueStmt',
  };
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 19, 35, 49, 50, 51, 52, 56, 58, 67, 68, 69, 70, 71, 75, 76,
    77, 78, 79, 80, 87, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 104, 107,
    109, 112, 113, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136,
    153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 169, 303,
    306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323,
    325, 326, 327, 329, 330, 331, 332, 338, 339, 340, 341, 342,
  ]);
  const parserPredictTable = {
    $START: {
      COMMENT: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      NEWLINE: [0],
      REMCOMMENT: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      COMMENT: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      NEWLINE: [1],
      REMCOMMENT: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
      ALIAS: [9],
      AND: [9],
      ATTRIBUTE: [9],
      AS: [9],
      BEGIN: [9],
      BOOLEAN: [9],
      BYVAL: [9],
      BYREF: [9],
      BYTE: [9],
      CALL: [9],
      CASE: [9],
      CONST: [9],
      DECLARE: [9],
      DEFBOOL: [9],
      DEFBYTE: [9],
      DEFDATE: [9],
      DEFDBL: [9],
      DEFDEC: [9],
      DEFCUR: [9],
      DEFINT: [9],
      DEFLNG: [9],
      DEFOBJ: [9],
      DEFSNG: [9],
      DEFSTR: [9],
      DEFVAR: [9],
      DIM: [9],
      DO: [9],
      DOUBLE: [9],
      EACH: [9],
      ELSE: [9],
      ELSEIF: [9],
      END_ENUM: [9],
      END_FUNCTION: [9],
      END_IF: [9],
      END_PROPERTY: [9],
      END_SELECT: [9],
      END_SUB: [9],
      END_TYPE: [9],
      END_WITH: [9],
      END: [9],
      ENUM: [9],
      EQV: [9],
      ERASE: [9],
      EVENT: [9],
      EXIT_DO: [9],
      EXIT_FOR: [9],
      EXIT_FUNCTION: [9],
      EXIT_PROPERTY: [9],
      EXIT_SUB: [9],
      FALSE: [9],
      FRIEND: [9],
      FOR: [9],
      FUNCTION: [9],
      GET: [9],
      GLOBAL: [9],
      GOSUB: [9],
      GOTO: [9],
      IF: [9],
      IMPLEMENTS: [9],
      IN: [9],
      IS: [9],
      INTEGER: [9],
      LONG: [9],
      LOOP: [9],
      LEN: [9],
      LET: [9],
      LIB: [9],
      LIKE: [9],
      LSET: [9],
      MACRO_CONST: [9],
      MACRO_IF: [9],
      MACRO_ELSEIF: [9],
      MACRO_ELSE: [9],
      MACRO_END_IF: [9],
      MOD: [9],
      NEXT: [9],
      NEW: [9],
      NOT: [9],
      NOTHING: [9],
      NULL: [9],
      ON_ERROR: [9],
      ON_LOCAL_ERROR: [9],
      ON: [9],
      OPTIONAL: [9],
      OPTION_BASE: [9],
      OPTION_EXPLICIT: [9],
      OPTION_COMPARE: [9],
      OPTION_PRIVATE_MODULE: [9],
      OR: [9],
      PARAMARRAY: [9],
      PRESERVE: [9],
      PRIVATE: [9],
      PROPERTY_GET: [9],
      PROPERTY_LET: [9],
      PROPERTY_SET: [9],
      PTRSAFE: [9],
      PUBLIC: [9],
      RAISEEVENT: [9],
      REDIM: [9],
      RESET: [9],
      RESUME: [9],
      RETURN: [9],
      SELECT: [9],
      SET: [9],
      SINGLE: [9],
      STATIC: [9],
      STEP: [9],
      STOP: [9],
      STRING: [9],
      SUB: [9],
      THEN: [9],
      TO: [9],
      TRUE: [9],
      TYPEOF: [9],
      UNTIL: [9],
      VARIANT: [9],
      WEND: [9],
      WHILE: [9],
      WITH: [9],
      WITHEVENTS: [9],
      XOR: [9],
      IMP: [9],
      IDENTIFIER: [9],
      SPACE_DOT: [9],
    },
    moduleDeclarations_group_def_5: {
      NEWLINE: [10],
      COMMENT: [10],
      REMCOMMENT: [10],
    },
    moduleDeclarations: {
      COMMENT: [11],
      DIM: [11],
      STATIC: [11],
      PRIVATE: [11],
      PUBLIC: [11],
      FRIEND: [11],
      GLOBAL: [11],
      OPTION_BASE: [11],
      OPTION_COMPARE: [11],
      OPTION_EXPLICIT: [11],
      OPTION_PRIVATE_MODULE: [11],
    },
    moduleDeclarationsElement: {
      COMMENT: [12],
      DIM: [13],
      STATIC: [13],
      PRIVATE: [13],
      PUBLIC: [13],
      FRIEND: [13],
      GLOBAL: [13],
      OPTION_BASE: [14],
      OPTION_COMPARE: [14],
      OPTION_EXPLICIT: [14],
      OPTION_PRIVATE_MODULE: [14],
    },
    moduleOption: {
      OPTION_BASE: [15],
      OPTION_COMPARE: [16],
      OPTION_EXPLICIT: [17],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleBody_group_def_7: {
      NEWLINE: [19],
      COMMENT: [19],
      REMCOMMENT: [19],
    },
    moduleBody: {
      PRIVATE: [20],
      PUBLIC: [20],
      FRIEND: [20],
      GLOBAL: [20],
      STATIC: [20],
      FUNCTION: [20],
      PROPERTY_GET: [20],
      PROPERTY_SET: [20],
      PROPERTY_LET: [20],
      SUB: [20],
    },
    moduleBodyElement: {
      PRIVATE: [21, 22, 23, 24, 25],
      PUBLIC: [21, 22, 23, 24, 25],
      FRIEND: [21, 22, 23, 24, 25],
      GLOBAL: [21, 22, 23, 24, 25],
      STATIC: [21, 22, 23, 24, 25],
      FUNCTION: [21],
      PROPERTY_GET: [22],
      PROPERTY_SET: [23],
      PROPERTY_LET: [24],
      SUB: [25],
    },
    visibility: {
      PRIVATE: [26],
      PUBLIC: [27],
      FRIEND: [28],
      GLOBAL: [29],
    },
    subStmt: {
      PRIVATE: [30],
      PUBLIC: [30],
      FRIEND: [30],
      GLOBAL: [30],
      STATIC: [30],
      SUB: [30],
    },
    propertyGetStmt: {
      PRIVATE: [31],
      PUBLIC: [31],
      FRIEND: [31],
      GLOBAL: [31],
      STATIC: [31],
      PROPERTY_GET: [31],
    },
    propertySetStmt: {
      PRIVATE: [32],
      PUBLIC: [32],
      FRIEND: [32],
      GLOBAL: [32],
      STATIC: [32],
      PROPERTY_SET: [32],
    },
    propertyLetStmt: {
      PRIVATE: [33],
      PUBLIC: [33],
      FRIEND: [33],
      GLOBAL: [33],
      STATIC: [33],
      PROPERTY_LET: [33],
    },
    functionStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      FUNCTION: [34],
    },
    block_group_def_9: {
      NEWLINE: [35],
      COMMENT: [35],
      REMCOMMENT: [35],
      COLON: [35],
      ALIAS: [35],
      AND: [35],
      ATTRIBUTE: [35],
      AS: [35],
      BEGIN: [35],
      BOOLEAN: [35],
      BYVAL: [35],
      BYREF: [35],
      BYTE: [35],
      CALL: [35],
      CASE: [35],
      CONST: [35],
      DECLARE: [35],
      DEFBOOL: [35],
      DEFBYTE: [35],
      DEFDATE: [35],
      DEFDBL: [35],
      DEFDEC: [35],
      DEFCUR: [35],
      DEFINT: [35],
      DEFLNG: [35],
      DEFOBJ: [35],
      DEFSNG: [35],
      DEFSTR: [35],
      DEFVAR: [35],
      DIM: [35],
      DO: [35],
      DOUBLE: [35],
      EACH: [35],
      ELSE: [35],
      ELSEIF: [35],
      END_ENUM: [35],
      END_FUNCTION: [35],
      END_IF: [35],
      END_PROPERTY: [35],
      END_SELECT: [35],
      END_SUB: [35],
      END_TYPE: [35],
      END_WITH: [35],
      END: [35],
      ENUM: [35],
      EQV: [35],
      ERASE: [35],
      EVENT: [35],
      EXIT_DO: [35],
      EXIT_FOR: [35],
      EXIT_FUNCTION: [35],
      EXIT_PROPERTY: [35],
      EXIT_SUB: [35],
      FALSE: [35],
      FRIEND: [35],
      FOR: [35],
      FUNCTION: [35],
      GET: [35],
      GLOBAL: [35],
      GOSUB: [35],
      GOTO: [35],
      IF: [35],
      IMPLEMENTS: [35],
      IN: [35],
      IS: [35],
      INTEGER: [35],
      LONG: [35],
      LOOP: [35],
      LEN: [35],
      LET: [35],
      LIB: [35],
      LIKE: [35],
      LSET: [35],
      MACRO_CONST: [35],
      MACRO_IF: [35],
      MACRO_ELSEIF: [35],
      MACRO_ELSE: [35],
      MACRO_END_IF: [35],
      MOD: [35],
      NEXT: [35],
      NEW: [35],
      NOT: [35],
      NOTHING: [35],
      NULL: [35],
      ON_ERROR: [35],
      ON_LOCAL_ERROR: [35],
      ON: [35],
      OPTIONAL: [35],
      OPTION_BASE: [35],
      OPTION_EXPLICIT: [35],
      OPTION_COMPARE: [35],
      OPTION_PRIVATE_MODULE: [35],
      OR: [35],
      PARAMARRAY: [35],
      PRESERVE: [35],
      PRIVATE: [35],
      PROPERTY_GET: [35],
      PROPERTY_LET: [35],
      PROPERTY_SET: [35],
      PTRSAFE: [35],
      PUBLIC: [35],
      RAISEEVENT: [35],
      REDIM: [35],
      RESET: [35],
      RESUME: [35],
      RETURN: [35],
      SELECT: [35],
      SET: [35],
      SINGLE: [35],
      STATIC: [35],
      STEP: [35],
      STOP: [35],
      STRING: [35],
      SUB: [35],
      THEN: [35],
      TO: [35],
      TRUE: [35],
      TYPEOF: [35],
      UNTIL: [35],
      VARIANT: [35],
      WEND: [35],
      WHILE: [35],
      WITH: [35],
      WITHEVENTS: [35],
      XOR: [35],
      IMP: [35],
      IDENTIFIER: [35],
      SPACE_DOT: [35],
    },
    block: {
      ALIAS: [36],
      AND: [36],
      ATTRIBUTE: [36],
      AS: [36],
      BEGIN: [36],
      BOOLEAN: [36],
      BYVAL: [36],
      BYREF: [36],
      BYTE: [36],
      CALL: [36],
      CASE: [36],
      CONST: [36],
      DECLARE: [36],
      DEFBOOL: [36],
      DEFBYTE: [36],
      DEFDATE: [36],
      DEFDBL: [36],
      DEFDEC: [36],
      DEFCUR: [36],
      DEFINT: [36],
      DEFLNG: [36],
      DEFOBJ: [36],
      DEFSNG: [36],
      DEFSTR: [36],
      DEFVAR: [36],
      DIM: [36],
      DO: [36],
      DOUBLE: [36],
      EACH: [36],
      ELSE: [36],
      ELSEIF: [36],
      END_ENUM: [36],
      END_FUNCTION: [36],
      END_IF: [36],
      END_PROPERTY: [36],
      END_SELECT: [36],
      END_SUB: [36],
      END_TYPE: [36],
      END_WITH: [36],
      END: [36],
      ENUM: [36],
      EQV: [36],
      ERASE: [36],
      EVENT: [36],
      EXIT_DO: [36],
      EXIT_FOR: [36],
      EXIT_FUNCTION: [36],
      EXIT_PROPERTY: [36],
      EXIT_SUB: [36],
      FALSE: [36],
      FRIEND: [36],
      FOR: [36],
      FUNCTION: [36],
      GET: [36],
      GLOBAL: [36],
      GOSUB: [36],
      GOTO: [36],
      IF: [36],
      IMPLEMENTS: [36],
      IN: [36],
      IS: [36],
      INTEGER: [36],
      LONG: [36],
      LOOP: [36],
      LEN: [36],
      LET: [36],
      LIB: [36],
      LIKE: [36],
      LSET: [36],
      MACRO_CONST: [36],
      MACRO_IF: [36],
      MACRO_ELSEIF: [36],
      MACRO_ELSE: [36],
      MACRO_END_IF: [36],
      MOD: [36],
      NEXT: [36],
      NEW: [36],
      NOT: [36],
      NOTHING: [36],
      NULL: [36],
      ON_ERROR: [36],
      ON_LOCAL_ERROR: [36],
      ON: [36],
      OPTIONAL: [36],
      OPTION_BASE: [36],
      OPTION_EXPLICIT: [36],
      OPTION_COMPARE: [36],
      OPTION_PRIVATE_MODULE: [36],
      OR: [36],
      PARAMARRAY: [36],
      PRESERVE: [36],
      PRIVATE: [36],
      PROPERTY_GET: [36],
      PROPERTY_LET: [36],
      PROPERTY_SET: [36],
      PTRSAFE: [36],
      PUBLIC: [36],
      RAISEEVENT: [36],
      REDIM: [36],
      RESET: [36],
      RESUME: [36],
      RETURN: [36],
      SELECT: [36],
      SET: [36],
      SINGLE: [36],
      STATIC: [36],
      STEP: [36],
      STOP: [36],
      STRING: [36],
      SUB: [36],
      THEN: [36],
      TO: [36],
      TRUE: [36],
      TYPEOF: [36],
      UNTIL: [36],
      VARIANT: [36],
      WEND: [36],
      WHILE: [36],
      WITH: [36],
      WITHEVENTS: [36],
      XOR: [36],
      IMP: [36],
      IDENTIFIER: [36],
      SPACE_DOT: [36],
    },
    blockStmt: {
      ALIAS: [37, 46, 48],
      AND: [37, 46, 48],
      ATTRIBUTE: [37, 46, 48],
      AS: [37, 46, 48],
      BEGIN: [37, 46, 48],
      BOOLEAN: [37, 46, 48],
      BYVAL: [37, 46, 48],
      BYREF: [37, 46, 48],
      BYTE: [37, 46, 48],
      CALL: [37, 43, 46, 48],
      CASE: [37, 46, 48],
      CONST: [37, 46, 48],
      DECLARE: [37, 46, 48],
      DEFBOOL: [37, 46, 48],
      DEFBYTE: [37, 46, 48],
      DEFDATE: [37, 46, 48],
      DEFDBL: [37, 46, 48],
      DEFDEC: [37, 46, 48],
      DEFCUR: [37, 46, 48],
      DEFINT: [37, 46, 48],
      DEFLNG: [37, 46, 48],
      DEFOBJ: [37, 46, 48],
      DEFSNG: [37, 46, 48],
      DEFSTR: [37, 46, 48],
      DEFVAR: [37, 46, 48],
      DIM: [37, 46, 47, 48],
      DO: [37, 46, 48],
      DOUBLE: [37, 46, 48],
      EACH: [37, 46, 48],
      ELSE: [37, 46, 48],
      ELSEIF: [37, 46, 48],
      END_ENUM: [37, 46, 48],
      END_FUNCTION: [37, 46, 48],
      END_IF: [37, 46, 48],
      END_PROPERTY: [37, 46, 48],
      END_SELECT: [37, 46, 48],
      END_SUB: [37, 46, 48],
      END_TYPE: [37, 46, 48],
      END_WITH: [37, 46, 48],
      END: [37, 42, 46, 48],
      ENUM: [37, 46, 48],
      EQV: [37, 46, 48],
      ERASE: [37, 41, 46, 48],
      EVENT: [37, 46, 48],
      EXIT_DO: [37, 42, 46, 48],
      EXIT_FOR: [37, 42, 46, 48],
      EXIT_FUNCTION: [37, 42, 46, 48],
      EXIT_PROPERTY: [37, 42, 46, 48],
      EXIT_SUB: [37, 42, 46, 48],
      FALSE: [37, 46, 48],
      FRIEND: [37, 46, 47, 48],
      FOR: [37, 46, 48],
      FUNCTION: [37, 46, 48],
      GET: [37, 46, 48],
      GLOBAL: [37, 46, 47, 48],
      GOSUB: [37, 46, 48],
      GOTO: [37, 38, 46, 48],
      IF: [37, 46, 48],
      IMPLEMENTS: [37, 46, 48],
      IN: [37, 46, 48],
      IS: [37, 46, 48],
      INTEGER: [37, 46, 48],
      LONG: [37, 46, 48],
      LOOP: [37, 46, 48],
      LEN: [37, 46, 48],
      LET: [37, 46, 48],
      LIB: [37, 46, 48],
      LIKE: [37, 46, 48],
      LSET: [37, 46, 48],
      MACRO_CONST: [37, 46, 48],
      MACRO_IF: [37, 46, 48],
      MACRO_ELSEIF: [37, 46, 48],
      MACRO_ELSE: [37, 46, 48],
      MACRO_END_IF: [37, 46, 48],
      MOD: [37, 46, 48],
      NEXT: [37, 46, 48],
      NEW: [37, 46, 48],
      NOT: [37, 46, 48],
      NOTHING: [37, 46, 48],
      NULL: [37, 46, 48],
      ON_ERROR: [37, 39, 46, 48],
      ON_LOCAL_ERROR: [37, 46, 48],
      ON: [37, 46, 48],
      OPTIONAL: [37, 46, 48],
      OPTION_BASE: [37, 46, 48],
      OPTION_EXPLICIT: [37, 46, 48],
      OPTION_COMPARE: [37, 46, 48],
      OPTION_PRIVATE_MODULE: [37, 46, 48],
      OR: [37, 46, 48],
      PARAMARRAY: [37, 46, 48],
      PRESERVE: [37, 46, 48],
      PRIVATE: [37, 46, 47, 48],
      PROPERTY_GET: [37, 46, 48],
      PROPERTY_LET: [37, 46, 48],
      PROPERTY_SET: [37, 46, 48],
      PTRSAFE: [37, 46, 48],
      PUBLIC: [37, 46, 47, 48],
      RAISEEVENT: [37, 46, 48],
      REDIM: [37, 45, 46, 48],
      RESET: [37, 46, 48],
      RESUME: [37, 46, 48],
      RETURN: [37, 46, 48],
      SELECT: [37, 46, 48],
      SET: [37, 44, 46, 48],
      SINGLE: [37, 46, 48],
      STATIC: [37, 46, 47, 48],
      STEP: [37, 46, 48],
      STOP: [37, 46, 48],
      STRING: [37, 46, 48],
      SUB: [37, 46, 48],
      THEN: [37, 46, 48],
      TO: [37, 46, 48],
      TRUE: [37, 46, 48],
      TYPEOF: [37, 46, 48],
      UNTIL: [37, 46, 48],
      VARIANT: [37, 46, 48],
      WEND: [37, 46, 48],
      WHILE: [37, 46, 48],
      WITH: [37, 40, 46, 48],
      WITHEVENTS: [37, 46, 48],
      XOR: [37, 46, 48],
      IMP: [37, 46, 48],
      IDENTIFIER: [37, 46, 48],
      SPACE_DOT: [46, 48],
    },
    onErrorStmt_group_def_11: {
      ALIAS: [49],
      AND: [49],
      ATTRIBUTE: [49],
      AS: [49],
      BEGIN: [49],
      BOOLEAN: [49],
      BYVAL: [49],
      BYREF: [49],
      BYTE: [49],
      CALL: [49],
      CASE: [49],
      CONST: [49],
      DECLARE: [49],
      DEFBOOL: [49],
      DEFBYTE: [49],
      DEFDATE: [49],
      DEFDBL: [49],
      DEFDEC: [49],
      DEFCUR: [49],
      DEFINT: [49],
      DEFLNG: [49],
      DEFOBJ: [49],
      DEFSNG: [49],
      DEFSTR: [49],
      DEFVAR: [49],
      DIM: [49],
      DO: [49],
      DOUBLE: [49],
      EACH: [49],
      ELSE: [49],
      ELSEIF: [49],
      END_ENUM: [49],
      END_FUNCTION: [49],
      END_IF: [49],
      END_PROPERTY: [49],
      END_SELECT: [49],
      END_SUB: [49],
      END_TYPE: [49],
      END_WITH: [49],
      END: [49],
      ENUM: [49],
      EQV: [49],
      ERASE: [49],
      EVENT: [49],
      EXIT_DO: [49],
      EXIT_FOR: [49],
      EXIT_FUNCTION: [49],
      EXIT_PROPERTY: [49],
      EXIT_SUB: [49],
      FALSE: [49],
      FRIEND: [49],
      FOR: [49],
      FUNCTION: [49],
      GET: [49],
      GLOBAL: [49],
      GOSUB: [49],
      GOTO: [49],
      IF: [49],
      IMPLEMENTS: [49],
      IN: [49],
      IS: [49],
      INTEGER: [49],
      LONG: [49],
      LOOP: [49],
      LEN: [49],
      LET: [49],
      LIB: [49],
      LIKE: [49],
      LSET: [49],
      MACRO_CONST: [49],
      MACRO_IF: [49],
      MACRO_ELSEIF: [49],
      MACRO_ELSE: [49],
      MACRO_END_IF: [49],
      MOD: [49],
      NEXT: [49],
      NEW: [49],
      NOT: [49],
      NOTHING: [49],
      NULL: [49],
      ON_ERROR: [49],
      ON_LOCAL_ERROR: [49],
      ON: [49],
      OPTIONAL: [49],
      OPTION_BASE: [49],
      OPTION_EXPLICIT: [49],
      OPTION_COMPARE: [49],
      OPTION_PRIVATE_MODULE: [49],
      OR: [49],
      PARAMARRAY: [49],
      PRESERVE: [49],
      PRIVATE: [49],
      PROPERTY_GET: [49],
      PROPERTY_LET: [49],
      PROPERTY_SET: [49],
      PTRSAFE: [49],
      PUBLIC: [49],
      RAISEEVENT: [49],
      REDIM: [49],
      RESET: [49],
      RESUME: [49],
      RETURN: [49],
      SELECT: [49],
      SET: [49],
      SINGLE: [49],
      STATIC: [49],
      STEP: [49],
      STOP: [49],
      STRING: [49],
      SUB: [49],
      THEN: [49],
      TO: [49],
      TRUE: [49],
      TYPEOF: [49],
      UNTIL: [49],
      VARIANT: [49],
      WEND: [49],
      WHILE: [49],
      WITH: [49],
      WITHEVENTS: [49],
      XOR: [49],
      IMP: [49],
      IDENTIFIER: [49],
    },
    onErrorStmt_group_10: {
      ALIAS: [50],
      AND: [50],
      ATTRIBUTE: [50],
      AS: [50],
      BEGIN: [50],
      BOOLEAN: [50],
      BYVAL: [50],
      BYREF: [50],
      BYTE: [50],
      CALL: [50],
      CASE: [50],
      CONST: [50],
      DECLARE: [50],
      DEFBOOL: [50],
      DEFBYTE: [50],
      DEFDATE: [50],
      DEFDBL: [50],
      DEFDEC: [50],
      DEFCUR: [50],
      DEFINT: [50],
      DEFLNG: [50],
      DEFOBJ: [50],
      DEFSNG: [50],
      DEFSTR: [50],
      DEFVAR: [50],
      DIM: [50],
      DO: [50],
      DOUBLE: [50],
      EACH: [50],
      ELSE: [50],
      ELSEIF: [50],
      END_ENUM: [50],
      END_FUNCTION: [50],
      END_IF: [50],
      END_PROPERTY: [50],
      END_SELECT: [50],
      END_SUB: [50],
      END_TYPE: [50],
      END_WITH: [50],
      END: [50],
      ENUM: [50],
      EQV: [50],
      ERASE: [50],
      EVENT: [50],
      EXIT_DO: [50],
      EXIT_FOR: [50],
      EXIT_FUNCTION: [50],
      EXIT_PROPERTY: [50],
      EXIT_SUB: [50],
      FALSE: [50],
      FRIEND: [50],
      FOR: [50],
      FUNCTION: [50],
      GET: [50],
      GLOBAL: [50],
      GOSUB: [50],
      GOTO: [50],
      IF: [50],
      IMPLEMENTS: [50],
      IN: [50],
      IS: [50],
      INTEGER: [50],
      LONG: [50],
      LOOP: [50],
      LEN: [50],
      LET: [50],
      LIB: [50],
      LIKE: [50],
      LSET: [50],
      MACRO_CONST: [50],
      MACRO_IF: [50],
      MACRO_ELSEIF: [50],
      MACRO_ELSE: [50],
      MACRO_END_IF: [50],
      MOD: [50],
      NEXT: [50],
      NEW: [50],
      NOT: [50],
      NOTHING: [50],
      NULL: [50],
      ON_ERROR: [50],
      ON_LOCAL_ERROR: [50],
      ON: [50],
      OPTIONAL: [50],
      OPTION_BASE: [50],
      OPTION_EXPLICIT: [50],
      OPTION_COMPARE: [50],
      OPTION_PRIVATE_MODULE: [50],
      OR: [50],
      PARAMARRAY: [50],
      PRESERVE: [50],
      PRIVATE: [50],
      PROPERTY_GET: [50],
      PROPERTY_LET: [50],
      PROPERTY_SET: [50],
      PTRSAFE: [50],
      PUBLIC: [50],
      RAISEEVENT: [50],
      REDIM: [50],
      RESET: [50],
      RESUME: [50],
      RETURN: [50],
      SELECT: [50],
      SET: [50],
      SINGLE: [50],
      STATIC: [50],
      STEP: [50],
      STOP: [50],
      STRING: [50],
      SUB: [50],
      THEN: [50],
      TO: [50],
      TRUE: [50],
      TYPEOF: [50],
      UNTIL: [50],
      VARIANT: [50],
      WEND: [50],
      WHILE: [50],
      WITH: [50],
      WITHEVENTS: [50],
      XOR: [50],
      IMP: [50],
      IDENTIFIER: [50],
      MINUS: [52],
    },
    onErrorStmt_group_def_12: {
      MINUS: [51],
    },
    onErrorStmt: {
      ON_ERROR: [53],
    },
    lineLabel: {
      ALIAS: [54],
      AND: [54],
      ATTRIBUTE: [54],
      AS: [54],
      BEGIN: [54],
      BOOLEAN: [54],
      BYVAL: [54],
      BYREF: [54],
      BYTE: [54],
      CALL: [54],
      CASE: [54],
      CONST: [54],
      DECLARE: [54],
      DEFBOOL: [54],
      DEFBYTE: [54],
      DEFDATE: [54],
      DEFDBL: [54],
      DEFDEC: [54],
      DEFCUR: [54],
      DEFINT: [54],
      DEFLNG: [54],
      DEFOBJ: [54],
      DEFSNG: [54],
      DEFSTR: [54],
      DEFVAR: [54],
      DIM: [54],
      DO: [54],
      DOUBLE: [54],
      EACH: [54],
      ELSE: [54],
      ELSEIF: [54],
      END_ENUM: [54],
      END_FUNCTION: [54],
      END_IF: [54],
      END_PROPERTY: [54],
      END_SELECT: [54],
      END_SUB: [54],
      END_TYPE: [54],
      END_WITH: [54],
      END: [54],
      ENUM: [54],
      EQV: [54],
      ERASE: [54],
      EVENT: [54],
      EXIT_DO: [54],
      EXIT_FOR: [54],
      EXIT_FUNCTION: [54],
      EXIT_PROPERTY: [54],
      EXIT_SUB: [54],
      FALSE: [54],
      FRIEND: [54],
      FOR: [54],
      FUNCTION: [54],
      GET: [54],
      GLOBAL: [54],
      GOSUB: [54],
      GOTO: [54],
      IF: [54],
      IMPLEMENTS: [54],
      IN: [54],
      IS: [54],
      INTEGER: [54],
      LONG: [54],
      LOOP: [54],
      LEN: [54],
      LET: [54],
      LIB: [54],
      LIKE: [54],
      LSET: [54],
      MACRO_CONST: [54],
      MACRO_IF: [54],
      MACRO_ELSEIF: [54],
      MACRO_ELSE: [54],
      MACRO_END_IF: [54],
      MOD: [54],
      NEXT: [54],
      NEW: [54],
      NOT: [54],
      NOTHING: [54],
      NULL: [54],
      ON_ERROR: [54],
      ON_LOCAL_ERROR: [54],
      ON: [54],
      OPTIONAL: [54],
      OPTION_BASE: [54],
      OPTION_EXPLICIT: [54],
      OPTION_COMPARE: [54],
      OPTION_PRIVATE_MODULE: [54],
      OR: [54],
      PARAMARRAY: [54],
      PRESERVE: [54],
      PRIVATE: [54],
      PROPERTY_GET: [54],
      PROPERTY_LET: [54],
      PROPERTY_SET: [54],
      PTRSAFE: [54],
      PUBLIC: [54],
      RAISEEVENT: [54],
      REDIM: [54],
      RESET: [54],
      RESUME: [54],
      RETURN: [54],
      SELECT: [54],
      SET: [54],
      SINGLE: [54],
      STATIC: [54],
      STEP: [54],
      STOP: [54],
      STRING: [54],
      SUB: [54],
      THEN: [54],
      TO: [54],
      TRUE: [54],
      TYPEOF: [54],
      UNTIL: [54],
      VARIANT: [54],
      WEND: [54],
      WHILE: [54],
      WITH: [54],
      WITHEVENTS: [54],
      XOR: [54],
      IMP: [54],
      IDENTIFIER: [54],
    },
    goToStmt: {
      GOTO: [55],
    },
    eraseStmt_group_def_14: {
      ',': [56],
    },
    eraseStmt: {
      ERASE: [57],
    },
    redimStmt_group_def_16: {
      ',': [58],
    },
    redimStmt: {
      REDIM: [59],
    },
    redimSubStmt: {
      SPACE_DOT: [60],
      ALIAS: [60],
      AND: [60],
      ATTRIBUTE: [60],
      AS: [60],
      BEGIN: [60],
      BOOLEAN: [60],
      BYVAL: [60],
      BYREF: [60],
      BYTE: [60],
      CALL: [60],
      CASE: [60],
      CONST: [60],
      DECLARE: [60],
      DEFBOOL: [60],
      DEFBYTE: [60],
      DEFDATE: [60],
      DEFDBL: [60],
      DEFDEC: [60],
      DEFCUR: [60],
      DEFINT: [60],
      DEFLNG: [60],
      DEFOBJ: [60],
      DEFSNG: [60],
      DEFSTR: [60],
      DEFVAR: [60],
      DIM: [60],
      DO: [60],
      DOUBLE: [60],
      EACH: [60],
      ELSE: [60],
      ELSEIF: [60],
      END_ENUM: [60],
      END_FUNCTION: [60],
      END_IF: [60],
      END_PROPERTY: [60],
      END_SELECT: [60],
      END_SUB: [60],
      END_TYPE: [60],
      END_WITH: [60],
      END: [60],
      ENUM: [60],
      EQV: [60],
      ERASE: [60],
      EVENT: [60],
      EXIT_DO: [60],
      EXIT_FOR: [60],
      EXIT_FUNCTION: [60],
      EXIT_PROPERTY: [60],
      EXIT_SUB: [60],
      FALSE: [60],
      FRIEND: [60],
      FOR: [60],
      FUNCTION: [60],
      GET: [60],
      GLOBAL: [60],
      GOSUB: [60],
      GOTO: [60],
      IF: [60],
      IMPLEMENTS: [60],
      IN: [60],
      IS: [60],
      INTEGER: [60],
      LONG: [60],
      LOOP: [60],
      LEN: [60],
      LET: [60],
      LIB: [60],
      LIKE: [60],
      LSET: [60],
      MACRO_CONST: [60],
      MACRO_IF: [60],
      MACRO_ELSEIF: [60],
      MACRO_ELSE: [60],
      MACRO_END_IF: [60],
      MOD: [60],
      NEXT: [60],
      NEW: [60],
      NOT: [60],
      NOTHING: [60],
      NULL: [60],
      ON_ERROR: [60],
      ON_LOCAL_ERROR: [60],
      ON: [60],
      OPTIONAL: [60],
      OPTION_BASE: [60],
      OPTION_EXPLICIT: [60],
      OPTION_COMPARE: [60],
      OPTION_PRIVATE_MODULE: [60],
      OR: [60],
      PARAMARRAY: [60],
      PRESERVE: [60],
      PRIVATE: [60],
      PROPERTY_GET: [60],
      PROPERTY_LET: [60],
      PROPERTY_SET: [60],
      PTRSAFE: [60],
      PUBLIC: [60],
      RAISEEVENT: [60],
      REDIM: [60],
      RESET: [60],
      RESUME: [60],
      RETURN: [60],
      SELECT: [60],
      SET: [60],
      SINGLE: [60],
      STATIC: [60],
      STEP: [60],
      STOP: [60],
      STRING: [60],
      SUB: [60],
      THEN: [60],
      TO: [60],
      TRUE: [60],
      TYPEOF: [60],
      UNTIL: [60],
      VARIANT: [60],
      WEND: [60],
      WHILE: [60],
      WITH: [60],
      WITHEVENTS: [60],
      XOR: [60],
      IMP: [60],
      IDENTIFIER: [60],
    },
    exitStmt: {
      EXIT_DO: [61],
      EXIT_FOR: [62],
      EXIT_FUNCTION: [63],
      EXIT_PROPERTY: [64],
      EXIT_SUB: [65],
      END: [66],
    },
    letStmt_group_17: {
      EQ: [67],
      PLUS_EQ: [69],
      MINUS_EQ: [71],
    },
    letStmt_group_def_19: {
      PLUS_EQ: [68],
    },
    letStmt_group_def_20: {
      MINUS_EQ: [70],
    },
    letStmt: {
      LET: [72],
      SPACE_DOT: [72],
      ALIAS: [72],
      AND: [72],
      ATTRIBUTE: [72],
      AS: [72],
      BEGIN: [72],
      BOOLEAN: [72],
      BYVAL: [72],
      BYREF: [72],
      BYTE: [72],
      CALL: [72],
      CASE: [72],
      CONST: [72],
      DECLARE: [72],
      DEFBOOL: [72],
      DEFBYTE: [72],
      DEFDATE: [72],
      DEFDBL: [72],
      DEFDEC: [72],
      DEFCUR: [72],
      DEFINT: [72],
      DEFLNG: [72],
      DEFOBJ: [72],
      DEFSNG: [72],
      DEFSTR: [72],
      DEFVAR: [72],
      DIM: [72],
      DO: [72],
      DOUBLE: [72],
      EACH: [72],
      ELSE: [72],
      ELSEIF: [72],
      END_ENUM: [72],
      END_FUNCTION: [72],
      END_IF: [72],
      END_PROPERTY: [72],
      END_SELECT: [72],
      END_SUB: [72],
      END_TYPE: [72],
      END_WITH: [72],
      END: [72],
      ENUM: [72],
      EQV: [72],
      ERASE: [72],
      EVENT: [72],
      EXIT_DO: [72],
      EXIT_FOR: [72],
      EXIT_FUNCTION: [72],
      EXIT_PROPERTY: [72],
      EXIT_SUB: [72],
      FALSE: [72],
      FRIEND: [72],
      FOR: [72],
      FUNCTION: [72],
      GET: [72],
      GLOBAL: [72],
      GOSUB: [72],
      GOTO: [72],
      IF: [72],
      IMPLEMENTS: [72],
      IN: [72],
      IS: [72],
      INTEGER: [72],
      LONG: [72],
      LOOP: [72],
      LEN: [72],
      LIB: [72],
      LIKE: [72],
      LSET: [72],
      MACRO_CONST: [72],
      MACRO_IF: [72],
      MACRO_ELSEIF: [72],
      MACRO_ELSE: [72],
      MACRO_END_IF: [72],
      MOD: [72],
      NEXT: [72],
      NEW: [72],
      NOT: [72],
      NOTHING: [72],
      NULL: [72],
      ON_ERROR: [72],
      ON_LOCAL_ERROR: [72],
      ON: [72],
      OPTIONAL: [72],
      OPTION_BASE: [72],
      OPTION_EXPLICIT: [72],
      OPTION_COMPARE: [72],
      OPTION_PRIVATE_MODULE: [72],
      OR: [72],
      PARAMARRAY: [72],
      PRESERVE: [72],
      PRIVATE: [72],
      PROPERTY_GET: [72],
      PROPERTY_LET: [72],
      PROPERTY_SET: [72],
      PTRSAFE: [72],
      PUBLIC: [72],
      RAISEEVENT: [72],
      REDIM: [72],
      RESET: [72],
      RESUME: [72],
      RETURN: [72],
      SELECT: [72],
      SET: [72],
      SINGLE: [72],
      STATIC: [72],
      STEP: [72],
      STOP: [72],
      STRING: [72],
      SUB: [72],
      THEN: [72],
      TO: [72],
      TRUE: [72],
      TYPEOF: [72],
      UNTIL: [72],
      VARIANT: [72],
      WEND: [72],
      WHILE: [72],
      WITH: [72],
      WITHEVENTS: [72],
      XOR: [72],
      IMP: [72],
      IDENTIFIER: [72],
    },
    explicitCallStmt: {
      CALL: [73, 74],
    },
    eCS_MemberProcedureCall_group_def_22: {
      SPACE_DOT: [75],
      ALIAS: [75],
      AND: [75],
      ATTRIBUTE: [75],
      AS: [75],
      BEGIN: [75],
      BOOLEAN: [75],
      BYVAL: [75],
      BYREF: [75],
      BYTE: [75],
      CALL: [75],
      CASE: [75],
      CONST: [75],
      DECLARE: [75],
      DEFBOOL: [75],
      DEFBYTE: [75],
      DEFDATE: [75],
      DEFDBL: [75],
      DEFDEC: [75],
      DEFCUR: [75],
      DEFINT: [75],
      DEFLNG: [75],
      DEFOBJ: [75],
      DEFSNG: [75],
      DEFSTR: [75],
      DEFVAR: [75],
      DIM: [75],
      DO: [75],
      DOUBLE: [75],
      EACH: [75],
      ELSE: [75],
      ELSEIF: [75],
      END_ENUM: [75],
      END_FUNCTION: [75],
      END_IF: [75],
      END_PROPERTY: [75],
      END_SELECT: [75],
      END_SUB: [75],
      END_TYPE: [75],
      END_WITH: [75],
      END: [75],
      ENUM: [75],
      EQV: [75],
      ERASE: [75],
      EVENT: [75],
      EXIT_DO: [75],
      EXIT_FOR: [75],
      EXIT_FUNCTION: [75],
      EXIT_PROPERTY: [75],
      EXIT_SUB: [75],
      FALSE: [75],
      FRIEND: [75],
      FOR: [75],
      FUNCTION: [75],
      GET: [75],
      GLOBAL: [75],
      GOSUB: [75],
      GOTO: [75],
      IF: [75],
      IMPLEMENTS: [75],
      IN: [75],
      IS: [75],
      INTEGER: [75],
      LONG: [75],
      LOOP: [75],
      LEN: [75],
      LET: [75],
      LIB: [75],
      LIKE: [75],
      LSET: [75],
      MACRO_CONST: [75],
      MACRO_IF: [75],
      MACRO_ELSEIF: [75],
      MACRO_ELSE: [75],
      MACRO_END_IF: [75],
      MOD: [75],
      NEXT: [75],
      NEW: [75],
      NOT: [75],
      NOTHING: [75],
      NULL: [75],
      ON_ERROR: [75],
      ON_LOCAL_ERROR: [75],
      ON: [75],
      OPTIONAL: [75],
      OPTION_BASE: [75],
      OPTION_EXPLICIT: [75],
      OPTION_COMPARE: [75],
      OPTION_PRIVATE_MODULE: [75],
      OR: [75],
      PARAMARRAY: [75],
      PRESERVE: [75],
      PRIVATE: [75],
      PROPERTY_GET: [75],
      PROPERTY_LET: [75],
      PROPERTY_SET: [75],
      PTRSAFE: [75],
      PUBLIC: [75],
      RAISEEVENT: [75],
      REDIM: [75],
      RESET: [75],
      RESUME: [75],
      RETURN: [75],
      SELECT: [75],
      SET: [75],
      SINGLE: [75],
      STATIC: [75],
      STEP: [75],
      STOP: [75],
      STRING: [75],
      SUB: [75],
      THEN: [75],
      TO: [75],
      TRUE: [75],
      TYPEOF: [75],
      UNTIL: [75],
      VARIANT: [75],
      WEND: [75],
      WHILE: [75],
      WITH: [75],
      WITHEVENTS: [75],
      XOR: [75],
      IMP: [75],
      IDENTIFIER: [75],
      '.': [75],
    },
    eCS_MemberProcedureCall_group_21: {
      SPACE_DOT: [76, 78],
      ALIAS: [76],
      AND: [76],
      ATTRIBUTE: [76],
      AS: [76],
      BEGIN: [76],
      BOOLEAN: [76],
      BYVAL: [76],
      BYREF: [76],
      BYTE: [76],
      CALL: [76],
      CASE: [76],
      CONST: [76],
      DECLARE: [76],
      DEFBOOL: [76],
      DEFBYTE: [76],
      DEFDATE: [76],
      DEFDBL: [76],
      DEFDEC: [76],
      DEFCUR: [76],
      DEFINT: [76],
      DEFLNG: [76],
      DEFOBJ: [76],
      DEFSNG: [76],
      DEFSTR: [76],
      DEFVAR: [76],
      DIM: [76],
      DO: [76],
      DOUBLE: [76],
      EACH: [76],
      ELSE: [76],
      ELSEIF: [76],
      END_ENUM: [76],
      END_FUNCTION: [76],
      END_IF: [76],
      END_PROPERTY: [76],
      END_SELECT: [76],
      END_SUB: [76],
      END_TYPE: [76],
      END_WITH: [76],
      END: [76],
      ENUM: [76],
      EQV: [76],
      ERASE: [76],
      EVENT: [76],
      EXIT_DO: [76],
      EXIT_FOR: [76],
      EXIT_FUNCTION: [76],
      EXIT_PROPERTY: [76],
      EXIT_SUB: [76],
      FALSE: [76],
      FRIEND: [76],
      FOR: [76],
      FUNCTION: [76],
      GET: [76],
      GLOBAL: [76],
      GOSUB: [76],
      GOTO: [76],
      IF: [76],
      IMPLEMENTS: [76],
      IN: [76],
      IS: [76],
      INTEGER: [76],
      LONG: [76],
      LOOP: [76],
      LEN: [76],
      LET: [76],
      LIB: [76],
      LIKE: [76],
      LSET: [76],
      MACRO_CONST: [76],
      MACRO_IF: [76],
      MACRO_ELSEIF: [76],
      MACRO_ELSE: [76],
      MACRO_END_IF: [76],
      MOD: [76],
      NEXT: [76],
      NEW: [76],
      NOT: [76],
      NOTHING: [76],
      NULL: [76],
      ON_ERROR: [76],
      ON_LOCAL_ERROR: [76],
      ON: [76],
      OPTIONAL: [76],
      OPTION_BASE: [76],
      OPTION_EXPLICIT: [76],
      OPTION_COMPARE: [76],
      OPTION_PRIVATE_MODULE: [76],
      OR: [76],
      PARAMARRAY: [76],
      PRESERVE: [76],
      PRIVATE: [76],
      PROPERTY_GET: [76],
      PROPERTY_LET: [76],
      PROPERTY_SET: [76],
      PTRSAFE: [76],
      PUBLIC: [76],
      RAISEEVENT: [76],
      REDIM: [76],
      RESET: [76],
      RESUME: [76],
      RETURN: [76],
      SELECT: [76],
      SET: [76],
      SINGLE: [76],
      STATIC: [76],
      STEP: [76],
      STOP: [76],
      STRING: [76],
      SUB: [76],
      THEN: [76],
      TO: [76],
      TRUE: [76],
      TYPEOF: [76],
      UNTIL: [76],
      VARIANT: [76],
      WEND: [76],
      WHILE: [76],
      WITH: [76],
      WITHEVENTS: [76],
      XOR: [76],
      IMP: [76],
      IDENTIFIER: [76],
      '.': [76],
    },
    eCS_MemberProcedureCall_group_def_23: {
      SPACE_DOT: [77],
    },
    eCS_MemberProcedureCall_group_def_25: {
      LPAREN: [79],
    },
    eCS_MemberProcedureCall_group_def_27: {
      LPAREN: [80],
    },
    eCS_MemberProcedureCall: {
      CALL: [81],
    },
    eCS_ProcedureCall: {
      CALL: [82],
    },
    implicitCallStmt_InBlock: {
      SPACE_DOT: [83],
      ALIAS: [83, 84],
      AND: [83, 84],
      ATTRIBUTE: [83, 84],
      AS: [83, 84],
      BEGIN: [83, 84],
      BOOLEAN: [83, 84],
      BYVAL: [83, 84],
      BYREF: [83, 84],
      BYTE: [83, 84],
      CALL: [83, 84],
      CASE: [83, 84],
      CONST: [83, 84],
      DECLARE: [83, 84],
      DEFBOOL: [83, 84],
      DEFBYTE: [83, 84],
      DEFDATE: [83, 84],
      DEFDBL: [83, 84],
      DEFDEC: [83, 84],
      DEFCUR: [83, 84],
      DEFINT: [83, 84],
      DEFLNG: [83, 84],
      DEFOBJ: [83, 84],
      DEFSNG: [83, 84],
      DEFSTR: [83, 84],
      DEFVAR: [83, 84],
      DIM: [83, 84],
      DO: [83, 84],
      DOUBLE: [83, 84],
      EACH: [83, 84],
      ELSE: [83, 84],
      ELSEIF: [83, 84],
      END_ENUM: [83, 84],
      END_FUNCTION: [83, 84],
      END_IF: [83, 84],
      END_PROPERTY: [83, 84],
      END_SELECT: [83, 84],
      END_SUB: [83, 84],
      END_TYPE: [83, 84],
      END_WITH: [83, 84],
      END: [83, 84],
      ENUM: [83, 84],
      EQV: [83, 84],
      ERASE: [83, 84],
      EVENT: [83, 84],
      EXIT_DO: [83, 84],
      EXIT_FOR: [83, 84],
      EXIT_FUNCTION: [83, 84],
      EXIT_PROPERTY: [83, 84],
      EXIT_SUB: [83, 84],
      FALSE: [83, 84],
      FRIEND: [83, 84],
      FOR: [83, 84],
      FUNCTION: [83, 84],
      GET: [83, 84],
      GLOBAL: [83, 84],
      GOSUB: [83, 84],
      GOTO: [83, 84],
      IF: [83, 84],
      IMPLEMENTS: [83, 84],
      IN: [83, 84],
      IS: [83, 84],
      INTEGER: [83, 84],
      LONG: [83, 84],
      LOOP: [83, 84],
      LEN: [83, 84],
      LET: [83, 84],
      LIB: [83, 84],
      LIKE: [83, 84],
      LSET: [83, 84],
      MACRO_CONST: [83, 84],
      MACRO_IF: [83, 84],
      MACRO_ELSEIF: [83, 84],
      MACRO_ELSE: [83, 84],
      MACRO_END_IF: [83, 84],
      MOD: [83, 84],
      NEXT: [83, 84],
      NEW: [83, 84],
      NOT: [83, 84],
      NOTHING: [83, 84],
      NULL: [83, 84],
      ON_ERROR: [83, 84],
      ON_LOCAL_ERROR: [83, 84],
      ON: [83, 84],
      OPTIONAL: [83, 84],
      OPTION_BASE: [83, 84],
      OPTION_EXPLICIT: [83, 84],
      OPTION_COMPARE: [83, 84],
      OPTION_PRIVATE_MODULE: [83, 84],
      OR: [83, 84],
      PARAMARRAY: [83, 84],
      PRESERVE: [83, 84],
      PRIVATE: [83, 84],
      PROPERTY_GET: [83, 84],
      PROPERTY_LET: [83, 84],
      PROPERTY_SET: [83, 84],
      PTRSAFE: [83, 84],
      PUBLIC: [83, 84],
      RAISEEVENT: [83, 84],
      REDIM: [83, 84],
      RESET: [83, 84],
      RESUME: [83, 84],
      RETURN: [83, 84],
      SELECT: [83, 84],
      SET: [83, 84],
      SINGLE: [83, 84],
      STATIC: [83, 84],
      STEP: [83, 84],
      STOP: [83, 84],
      STRING: [83, 84],
      SUB: [83, 84],
      THEN: [83, 84],
      TO: [83, 84],
      TRUE: [83, 84],
      TYPEOF: [83, 84],
      UNTIL: [83, 84],
      VARIANT: [83, 84],
      WEND: [83, 84],
      WHILE: [83, 84],
      WITH: [83, 84],
      WITHEVENTS: [83, 84],
      XOR: [83, 84],
      IMP: [83, 84],
      IDENTIFIER: [83, 84],
    },
    iCS_B_MemberProcedureCall: {
      SPACE_DOT: [85],
      ALIAS: [85],
      AND: [85],
      ATTRIBUTE: [85],
      AS: [85],
      BEGIN: [85],
      BOOLEAN: [85],
      BYVAL: [85],
      BYREF: [85],
      BYTE: [85],
      CALL: [85],
      CASE: [85],
      CONST: [85],
      DECLARE: [85],
      DEFBOOL: [85],
      DEFBYTE: [85],
      DEFDATE: [85],
      DEFDBL: [85],
      DEFDEC: [85],
      DEFCUR: [85],
      DEFINT: [85],
      DEFLNG: [85],
      DEFOBJ: [85],
      DEFSNG: [85],
      DEFSTR: [85],
      DEFVAR: [85],
      DIM: [85],
      DO: [85],
      DOUBLE: [85],
      EACH: [85],
      ELSE: [85],
      ELSEIF: [85],
      END_ENUM: [85],
      END_FUNCTION: [85],
      END_IF: [85],
      END_PROPERTY: [85],
      END_SELECT: [85],
      END_SUB: [85],
      END_TYPE: [85],
      END_WITH: [85],
      END: [85],
      ENUM: [85],
      EQV: [85],
      ERASE: [85],
      EVENT: [85],
      EXIT_DO: [85],
      EXIT_FOR: [85],
      EXIT_FUNCTION: [85],
      EXIT_PROPERTY: [85],
      EXIT_SUB: [85],
      FALSE: [85],
      FRIEND: [85],
      FOR: [85],
      FUNCTION: [85],
      GET: [85],
      GLOBAL: [85],
      GOSUB: [85],
      GOTO: [85],
      IF: [85],
      IMPLEMENTS: [85],
      IN: [85],
      IS: [85],
      INTEGER: [85],
      LONG: [85],
      LOOP: [85],
      LEN: [85],
      LET: [85],
      LIB: [85],
      LIKE: [85],
      LSET: [85],
      MACRO_CONST: [85],
      MACRO_IF: [85],
      MACRO_ELSEIF: [85],
      MACRO_ELSE: [85],
      MACRO_END_IF: [85],
      MOD: [85],
      NEXT: [85],
      NEW: [85],
      NOT: [85],
      NOTHING: [85],
      NULL: [85],
      ON_ERROR: [85],
      ON_LOCAL_ERROR: [85],
      ON: [85],
      OPTIONAL: [85],
      OPTION_BASE: [85],
      OPTION_EXPLICIT: [85],
      OPTION_COMPARE: [85],
      OPTION_PRIVATE_MODULE: [85],
      OR: [85],
      PARAMARRAY: [85],
      PRESERVE: [85],
      PRIVATE: [85],
      PROPERTY_GET: [85],
      PROPERTY_LET: [85],
      PROPERTY_SET: [85],
      PTRSAFE: [85],
      PUBLIC: [85],
      RAISEEVENT: [85],
      REDIM: [85],
      RESET: [85],
      RESUME: [85],
      RETURN: [85],
      SELECT: [85],
      SET: [85],
      SINGLE: [85],
      STATIC: [85],
      STEP: [85],
      STOP: [85],
      STRING: [85],
      SUB: [85],
      THEN: [85],
      TO: [85],
      TRUE: [85],
      TYPEOF: [85],
      UNTIL: [85],
      VARIANT: [85],
      WEND: [85],
      WHILE: [85],
      WITH: [85],
      WITHEVENTS: [85],
      XOR: [85],
      IMP: [85],
      IDENTIFIER: [85],
    },
    iCS_B_ProcedureCall: {
      ALIAS: [86],
      AND: [86],
      ATTRIBUTE: [86],
      AS: [86],
      BEGIN: [86],
      BOOLEAN: [86],
      BYVAL: [86],
      BYREF: [86],
      BYTE: [86],
      CALL: [86],
      CASE: [86],
      CONST: [86],
      DECLARE: [86],
      DEFBOOL: [86],
      DEFBYTE: [86],
      DEFDATE: [86],
      DEFDBL: [86],
      DEFDEC: [86],
      DEFCUR: [86],
      DEFINT: [86],
      DEFLNG: [86],
      DEFOBJ: [86],
      DEFSNG: [86],
      DEFSTR: [86],
      DEFVAR: [86],
      DIM: [86],
      DO: [86],
      DOUBLE: [86],
      EACH: [86],
      ELSE: [86],
      ELSEIF: [86],
      END_ENUM: [86],
      END_FUNCTION: [86],
      END_IF: [86],
      END_PROPERTY: [86],
      END_SELECT: [86],
      END_SUB: [86],
      END_TYPE: [86],
      END_WITH: [86],
      END: [86],
      ENUM: [86],
      EQV: [86],
      ERASE: [86],
      EVENT: [86],
      EXIT_DO: [86],
      EXIT_FOR: [86],
      EXIT_FUNCTION: [86],
      EXIT_PROPERTY: [86],
      EXIT_SUB: [86],
      FALSE: [86],
      FRIEND: [86],
      FOR: [86],
      FUNCTION: [86],
      GET: [86],
      GLOBAL: [86],
      GOSUB: [86],
      GOTO: [86],
      IF: [86],
      IMPLEMENTS: [86],
      IN: [86],
      IS: [86],
      INTEGER: [86],
      LONG: [86],
      LOOP: [86],
      LEN: [86],
      LET: [86],
      LIB: [86],
      LIKE: [86],
      LSET: [86],
      MACRO_CONST: [86],
      MACRO_IF: [86],
      MACRO_ELSEIF: [86],
      MACRO_ELSE: [86],
      MACRO_END_IF: [86],
      MOD: [86],
      NEXT: [86],
      NEW: [86],
      NOT: [86],
      NOTHING: [86],
      NULL: [86],
      ON_ERROR: [86],
      ON_LOCAL_ERROR: [86],
      ON: [86],
      OPTIONAL: [86],
      OPTION_BASE: [86],
      OPTION_EXPLICIT: [86],
      OPTION_COMPARE: [86],
      OPTION_PRIVATE_MODULE: [86],
      OR: [86],
      PARAMARRAY: [86],
      PRESERVE: [86],
      PRIVATE: [86],
      PROPERTY_GET: [86],
      PROPERTY_LET: [86],
      PROPERTY_SET: [86],
      PTRSAFE: [86],
      PUBLIC: [86],
      RAISEEVENT: [86],
      REDIM: [86],
      RESET: [86],
      RESUME: [86],
      RETURN: [86],
      SELECT: [86],
      SET: [86],
      SINGLE: [86],
      STATIC: [86],
      STEP: [86],
      STOP: [86],
      STRING: [86],
      SUB: [86],
      THEN: [86],
      TO: [86],
      TRUE: [86],
      TYPEOF: [86],
      UNTIL: [86],
      VARIANT: [86],
      WEND: [86],
      WHILE: [86],
      WITH: [86],
      WITHEVENTS: [86],
      XOR: [86],
      IMP: [86],
      IDENTIFIER: [86],
    },
    argsCall_group_def_33: {
      ',': [87],
    },
    argsCall: {
      ',': [88],
      INTEGERLITERAL: [88],
      STRINGLITERAL: [88],
      NOTHING: [88],
      NULL: [88],
      TRUE: [88],
      FALSE: [88],
      SPACE_DOT: [88],
      ALIAS: [88],
      AND: [88],
      ATTRIBUTE: [88],
      AS: [88],
      BEGIN: [88],
      BOOLEAN: [88],
      BYVAL: [88],
      BYREF: [88],
      BYTE: [88],
      CALL: [88],
      CASE: [88],
      CONST: [88],
      DECLARE: [88],
      DEFBOOL: [88],
      DEFBYTE: [88],
      DEFDATE: [88],
      DEFDBL: [88],
      DEFDEC: [88],
      DEFCUR: [88],
      DEFINT: [88],
      DEFLNG: [88],
      DEFOBJ: [88],
      DEFSNG: [88],
      DEFSTR: [88],
      DEFVAR: [88],
      DIM: [88],
      DO: [88],
      DOUBLE: [88],
      EACH: [88],
      ELSE: [88],
      ELSEIF: [88],
      END_ENUM: [88],
      END_FUNCTION: [88],
      END_IF: [88],
      END_PROPERTY: [88],
      END_SELECT: [88],
      END_SUB: [88],
      END_TYPE: [88],
      END_WITH: [88],
      END: [88],
      ENUM: [88],
      EQV: [88],
      ERASE: [88],
      EVENT: [88],
      EXIT_DO: [88],
      EXIT_FOR: [88],
      EXIT_FUNCTION: [88],
      EXIT_PROPERTY: [88],
      EXIT_SUB: [88],
      FRIEND: [88],
      FOR: [88],
      FUNCTION: [88],
      GET: [88],
      GLOBAL: [88],
      GOSUB: [88],
      GOTO: [88],
      IF: [88],
      IMPLEMENTS: [88],
      IN: [88],
      IS: [88],
      INTEGER: [88],
      LONG: [88],
      LOOP: [88],
      LEN: [88],
      LET: [88],
      LIB: [88],
      LIKE: [88],
      LSET: [88],
      MACRO_CONST: [88],
      MACRO_IF: [88],
      MACRO_ELSEIF: [88],
      MACRO_ELSE: [88],
      MACRO_END_IF: [88],
      MOD: [88],
      NEXT: [88],
      NEW: [88],
      NOT: [88],
      ON_ERROR: [88],
      ON_LOCAL_ERROR: [88],
      ON: [88],
      OPTIONAL: [88],
      OPTION_BASE: [88],
      OPTION_EXPLICIT: [88],
      OPTION_COMPARE: [88],
      OPTION_PRIVATE_MODULE: [88],
      OR: [88],
      PARAMARRAY: [88],
      PRESERVE: [88],
      PRIVATE: [88],
      PROPERTY_GET: [88],
      PROPERTY_LET: [88],
      PROPERTY_SET: [88],
      PTRSAFE: [88],
      PUBLIC: [88],
      RAISEEVENT: [88],
      REDIM: [88],
      RESET: [88],
      RESUME: [88],
      RETURN: [88],
      SELECT: [88],
      SET: [88],
      SINGLE: [88],
      STATIC: [88],
      STEP: [88],
      STOP: [88],
      STRING: [88],
      SUB: [88],
      THEN: [88],
      TO: [88],
      TYPEOF: [88],
      UNTIL: [88],
      VARIANT: [88],
      WEND: [88],
      WHILE: [88],
      WITH: [88],
      WITHEVENTS: [88],
      XOR: [88],
      IMP: [88],
      IDENTIFIER: [88],
      LPAREN: [88],
      MINUS: [88],
      PLUS: [88],
    },
    argCall: {
      INTEGERLITERAL: [89],
      STRINGLITERAL: [89],
      NOTHING: [89],
      NULL: [89],
      TRUE: [89],
      FALSE: [89],
      SPACE_DOT: [89],
      ALIAS: [89],
      AND: [89],
      ATTRIBUTE: [89],
      AS: [89],
      BEGIN: [89],
      BOOLEAN: [89],
      BYVAL: [89],
      BYREF: [89],
      BYTE: [89],
      CALL: [89],
      CASE: [89],
      CONST: [89],
      DECLARE: [89],
      DEFBOOL: [89],
      DEFBYTE: [89],
      DEFDATE: [89],
      DEFDBL: [89],
      DEFDEC: [89],
      DEFCUR: [89],
      DEFINT: [89],
      DEFLNG: [89],
      DEFOBJ: [89],
      DEFSNG: [89],
      DEFSTR: [89],
      DEFVAR: [89],
      DIM: [89],
      DO: [89],
      DOUBLE: [89],
      EACH: [89],
      ELSE: [89],
      ELSEIF: [89],
      END_ENUM: [89],
      END_FUNCTION: [89],
      END_IF: [89],
      END_PROPERTY: [89],
      END_SELECT: [89],
      END_SUB: [89],
      END_TYPE: [89],
      END_WITH: [89],
      END: [89],
      ENUM: [89],
      EQV: [89],
      ERASE: [89],
      EVENT: [89],
      EXIT_DO: [89],
      EXIT_FOR: [89],
      EXIT_FUNCTION: [89],
      EXIT_PROPERTY: [89],
      EXIT_SUB: [89],
      FRIEND: [89],
      FOR: [89],
      FUNCTION: [89],
      GET: [89],
      GLOBAL: [89],
      GOSUB: [89],
      GOTO: [89],
      IF: [89],
      IMPLEMENTS: [89],
      IN: [89],
      IS: [89],
      INTEGER: [89],
      LONG: [89],
      LOOP: [89],
      LEN: [89],
      LET: [89],
      LIB: [89],
      LIKE: [89],
      LSET: [89],
      MACRO_CONST: [89],
      MACRO_IF: [89],
      MACRO_ELSEIF: [89],
      MACRO_ELSE: [89],
      MACRO_END_IF: [89],
      MOD: [89],
      NEXT: [89],
      NEW: [89],
      NOT: [89],
      ON_ERROR: [89],
      ON_LOCAL_ERROR: [89],
      ON: [89],
      OPTIONAL: [89],
      OPTION_BASE: [89],
      OPTION_EXPLICIT: [89],
      OPTION_COMPARE: [89],
      OPTION_PRIVATE_MODULE: [89],
      OR: [89],
      PARAMARRAY: [89],
      PRESERVE: [89],
      PRIVATE: [89],
      PROPERTY_GET: [89],
      PROPERTY_LET: [89],
      PROPERTY_SET: [89],
      PTRSAFE: [89],
      PUBLIC: [89],
      RAISEEVENT: [89],
      REDIM: [89],
      RESET: [89],
      RESUME: [89],
      RETURN: [89],
      SELECT: [89],
      SET: [89],
      SINGLE: [89],
      STATIC: [89],
      STEP: [89],
      STOP: [89],
      STRING: [89],
      SUB: [89],
      THEN: [89],
      TO: [89],
      TYPEOF: [89],
      UNTIL: [89],
      VARIANT: [89],
      WEND: [89],
      WHILE: [89],
      WITH: [89],
      WITHEVENTS: [89],
      XOR: [89],
      IMP: [89],
      IDENTIFIER: [89],
      LPAREN: [89],
      MINUS: [89],
      PLUS: [89],
    },
    variableStmt_group_def_35: {
      DIM: [90],
    },
    variableStmt_group_34: {
      DIM: [91],
      STATIC: [93],
      PRIVATE: [95],
      PUBLIC: [95],
      FRIEND: [95],
      GLOBAL: [95],
    },
    variableStmt_group_def_36: {
      STATIC: [92],
    },
    variableStmt_group_def_37: {
      PRIVATE: [94],
      PUBLIC: [94],
      FRIEND: [94],
      GLOBAL: [94],
    },
    variableStmt: {
      DIM: [96],
      STATIC: [96],
      PRIVATE: [96],
      PUBLIC: [96],
      FRIEND: [96],
      GLOBAL: [96],
    },
    withStmt_group_def_39: {
      SPACE_DOT: [97],
      ALIAS: [97],
      AND: [97],
      ATTRIBUTE: [97],
      AS: [97],
      BEGIN: [97],
      BOOLEAN: [97],
      BYVAL: [97],
      BYREF: [97],
      BYTE: [97],
      CALL: [97],
      CASE: [97],
      CONST: [97],
      DECLARE: [97],
      DEFBOOL: [97],
      DEFBYTE: [97],
      DEFDATE: [97],
      DEFDBL: [97],
      DEFDEC: [97],
      DEFCUR: [97],
      DEFINT: [97],
      DEFLNG: [97],
      DEFOBJ: [97],
      DEFSNG: [97],
      DEFSTR: [97],
      DEFVAR: [97],
      DIM: [97],
      DO: [97],
      DOUBLE: [97],
      EACH: [97],
      ELSE: [97],
      ELSEIF: [97],
      END_ENUM: [97],
      END_FUNCTION: [97],
      END_IF: [97],
      END_PROPERTY: [97],
      END_SELECT: [97],
      END_SUB: [97],
      END_TYPE: [97],
      END_WITH: [97],
      END: [97],
      ENUM: [97],
      EQV: [97],
      ERASE: [97],
      EVENT: [97],
      EXIT_DO: [97],
      EXIT_FOR: [97],
      EXIT_FUNCTION: [97],
      EXIT_PROPERTY: [97],
      EXIT_SUB: [97],
      FALSE: [97],
      FRIEND: [97],
      FOR: [97],
      FUNCTION: [97],
      GET: [97],
      GLOBAL: [97],
      GOSUB: [97],
      GOTO: [97],
      IF: [97],
      IMPLEMENTS: [97],
      IN: [97],
      IS: [97],
      INTEGER: [97],
      LONG: [97],
      LOOP: [97],
      LEN: [97],
      LET: [97],
      LIB: [97],
      LIKE: [97],
      LSET: [97],
      MACRO_CONST: [97],
      MACRO_IF: [97],
      MACRO_ELSEIF: [97],
      MACRO_ELSE: [97],
      MACRO_END_IF: [97],
      MOD: [97],
      NEXT: [97],
      NEW: [97],
      NOT: [97],
      NOTHING: [97],
      NULL: [97],
      ON_ERROR: [97],
      ON_LOCAL_ERROR: [97],
      ON: [97],
      OPTIONAL: [97],
      OPTION_BASE: [97],
      OPTION_EXPLICIT: [97],
      OPTION_COMPARE: [97],
      OPTION_PRIVATE_MODULE: [97],
      OR: [97],
      PARAMARRAY: [97],
      PRESERVE: [97],
      PRIVATE: [97],
      PROPERTY_GET: [97],
      PROPERTY_LET: [97],
      PROPERTY_SET: [97],
      PTRSAFE: [97],
      PUBLIC: [97],
      RAISEEVENT: [97],
      REDIM: [97],
      RESET: [97],
      RESUME: [97],
      RETURN: [97],
      SELECT: [97],
      SET: [97],
      SINGLE: [97],
      STATIC: [97],
      STEP: [97],
      STOP: [97],
      STRING: [97],
      SUB: [97],
      THEN: [97],
      TO: [97],
      TRUE: [97],
      TYPEOF: [97],
      UNTIL: [97],
      VARIANT: [97],
      WEND: [97],
      WHILE: [97],
      WITH: [97],
      WITHEVENTS: [97],
      XOR: [97],
      IMP: [97],
      IDENTIFIER: [97],
    },
    withStmt_group_38: {
      SPACE_DOT: [98],
      ALIAS: [98],
      AND: [98],
      ATTRIBUTE: [98],
      AS: [98],
      BEGIN: [98],
      BOOLEAN: [98],
      BYVAL: [98],
      BYREF: [98],
      BYTE: [98],
      CALL: [98],
      CASE: [98],
      CONST: [98],
      DECLARE: [98],
      DEFBOOL: [98],
      DEFBYTE: [98],
      DEFDATE: [98],
      DEFDBL: [98],
      DEFDEC: [98],
      DEFCUR: [98],
      DEFINT: [98],
      DEFLNG: [98],
      DEFOBJ: [98],
      DEFSNG: [98],
      DEFSTR: [98],
      DEFVAR: [98],
      DIM: [98],
      DO: [98],
      DOUBLE: [98],
      EACH: [98],
      ELSE: [98],
      ELSEIF: [98],
      END_ENUM: [98],
      END_FUNCTION: [98],
      END_IF: [98],
      END_PROPERTY: [98],
      END_SELECT: [98],
      END_SUB: [98],
      END_TYPE: [98],
      END_WITH: [98],
      END: [98],
      ENUM: [98],
      EQV: [98],
      ERASE: [98],
      EVENT: [98],
      EXIT_DO: [98],
      EXIT_FOR: [98],
      EXIT_FUNCTION: [98],
      EXIT_PROPERTY: [98],
      EXIT_SUB: [98],
      FALSE: [98],
      FRIEND: [98],
      FOR: [98],
      FUNCTION: [98],
      GET: [98],
      GLOBAL: [98],
      GOSUB: [98],
      GOTO: [98],
      IF: [98],
      IMPLEMENTS: [98],
      IN: [98],
      IS: [98],
      INTEGER: [98],
      LONG: [98],
      LOOP: [98],
      LEN: [98],
      LET: [98],
      LIB: [98],
      LIKE: [98],
      LSET: [98],
      MACRO_CONST: [98],
      MACRO_IF: [98],
      MACRO_ELSEIF: [98],
      MACRO_ELSE: [98],
      MACRO_END_IF: [98],
      MOD: [98],
      NEXT: [98],
      NEW: [98, 100],
      NOT: [98],
      NOTHING: [98],
      NULL: [98],
      ON_ERROR: [98],
      ON_LOCAL_ERROR: [98],
      ON: [98],
      OPTIONAL: [98],
      OPTION_BASE: [98],
      OPTION_EXPLICIT: [98],
      OPTION_COMPARE: [98],
      OPTION_PRIVATE_MODULE: [98],
      OR: [98],
      PARAMARRAY: [98],
      PRESERVE: [98],
      PRIVATE: [98],
      PROPERTY_GET: [98],
      PROPERTY_LET: [98],
      PROPERTY_SET: [98],
      PTRSAFE: [98],
      PUBLIC: [98],
      RAISEEVENT: [98],
      REDIM: [98],
      RESET: [98],
      RESUME: [98],
      RETURN: [98],
      SELECT: [98],
      SET: [98],
      SINGLE: [98],
      STATIC: [98],
      STEP: [98],
      STOP: [98],
      STRING: [98],
      SUB: [98],
      THEN: [98],
      TO: [98],
      TRUE: [98],
      TYPEOF: [98],
      UNTIL: [98],
      VARIANT: [98],
      WEND: [98],
      WHILE: [98],
      WITH: [98],
      WITHEVENTS: [98],
      XOR: [98],
      IMP: [98],
      IDENTIFIER: [98],
    },
    withStmt_group_def_40: {
      NEW: [99],
    },
    withStmt: {
      WITH: [101],
    },
    variableListStmt_group_def_42: {
      ',': [102],
    },
    variableListStmt: {
      ALIAS: [103],
      AND: [103],
      ATTRIBUTE: [103],
      AS: [103],
      BEGIN: [103],
      BOOLEAN: [103],
      BYVAL: [103],
      BYREF: [103],
      BYTE: [103],
      CALL: [103],
      CASE: [103],
      CONST: [103],
      DECLARE: [103],
      DEFBOOL: [103],
      DEFBYTE: [103],
      DEFDATE: [103],
      DEFDBL: [103],
      DEFDEC: [103],
      DEFCUR: [103],
      DEFINT: [103],
      DEFLNG: [103],
      DEFOBJ: [103],
      DEFSNG: [103],
      DEFSTR: [103],
      DEFVAR: [103],
      DIM: [103],
      DO: [103],
      DOUBLE: [103],
      EACH: [103],
      ELSE: [103],
      ELSEIF: [103],
      END_ENUM: [103],
      END_FUNCTION: [103],
      END_IF: [103],
      END_PROPERTY: [103],
      END_SELECT: [103],
      END_SUB: [103],
      END_TYPE: [103],
      END_WITH: [103],
      END: [103],
      ENUM: [103],
      EQV: [103],
      ERASE: [103],
      EVENT: [103],
      EXIT_DO: [103],
      EXIT_FOR: [103],
      EXIT_FUNCTION: [103],
      EXIT_PROPERTY: [103],
      EXIT_SUB: [103],
      FALSE: [103],
      FRIEND: [103],
      FOR: [103],
      FUNCTION: [103],
      GET: [103],
      GLOBAL: [103],
      GOSUB: [103],
      GOTO: [103],
      IF: [103],
      IMPLEMENTS: [103],
      IN: [103],
      IS: [103],
      INTEGER: [103],
      LONG: [103],
      LOOP: [103],
      LEN: [103],
      LET: [103],
      LIB: [103],
      LIKE: [103],
      LSET: [103],
      MACRO_CONST: [103],
      MACRO_IF: [103],
      MACRO_ELSEIF: [103],
      MACRO_ELSE: [103],
      MACRO_END_IF: [103],
      MOD: [103],
      NEXT: [103],
      NEW: [103],
      NOT: [103],
      NOTHING: [103],
      NULL: [103],
      ON_ERROR: [103],
      ON_LOCAL_ERROR: [103],
      ON: [103],
      OPTIONAL: [103],
      OPTION_BASE: [103],
      OPTION_EXPLICIT: [103],
      OPTION_COMPARE: [103],
      OPTION_PRIVATE_MODULE: [103],
      OR: [103],
      PARAMARRAY: [103],
      PRESERVE: [103],
      PRIVATE: [103],
      PROPERTY_GET: [103],
      PROPERTY_LET: [103],
      PROPERTY_SET: [103],
      PTRSAFE: [103],
      PUBLIC: [103],
      RAISEEVENT: [103],
      REDIM: [103],
      RESET: [103],
      RESUME: [103],
      RETURN: [103],
      SELECT: [103],
      SET: [103],
      SINGLE: [103],
      STATIC: [103],
      STEP: [103],
      STOP: [103],
      STRING: [103],
      SUB: [103],
      THEN: [103],
      TO: [103],
      TRUE: [103],
      TYPEOF: [103],
      UNTIL: [103],
      VARIANT: [103],
      WEND: [103],
      WHILE: [103],
      WITH: [103],
      WITHEVENTS: [103],
      XOR: [103],
      IMP: [103],
      IDENTIFIER: [103],
    },
    variableSubStmt_group_def_44: {
      LPAREN: [104],
    },
    variableSubStmt: {
      ALIAS: [105],
      AND: [105],
      ATTRIBUTE: [105],
      AS: [105],
      BEGIN: [105],
      BOOLEAN: [105],
      BYVAL: [105],
      BYREF: [105],
      BYTE: [105],
      CALL: [105],
      CASE: [105],
      CONST: [105],
      DECLARE: [105],
      DEFBOOL: [105],
      DEFBYTE: [105],
      DEFDATE: [105],
      DEFDBL: [105],
      DEFDEC: [105],
      DEFCUR: [105],
      DEFINT: [105],
      DEFLNG: [105],
      DEFOBJ: [105],
      DEFSNG: [105],
      DEFSTR: [105],
      DEFVAR: [105],
      DIM: [105],
      DO: [105],
      DOUBLE: [105],
      EACH: [105],
      ELSE: [105],
      ELSEIF: [105],
      END_ENUM: [105],
      END_FUNCTION: [105],
      END_IF: [105],
      END_PROPERTY: [105],
      END_SELECT: [105],
      END_SUB: [105],
      END_TYPE: [105],
      END_WITH: [105],
      END: [105],
      ENUM: [105],
      EQV: [105],
      ERASE: [105],
      EVENT: [105],
      EXIT_DO: [105],
      EXIT_FOR: [105],
      EXIT_FUNCTION: [105],
      EXIT_PROPERTY: [105],
      EXIT_SUB: [105],
      FALSE: [105],
      FRIEND: [105],
      FOR: [105],
      FUNCTION: [105],
      GET: [105],
      GLOBAL: [105],
      GOSUB: [105],
      GOTO: [105],
      IF: [105],
      IMPLEMENTS: [105],
      IN: [105],
      IS: [105],
      INTEGER: [105],
      LONG: [105],
      LOOP: [105],
      LEN: [105],
      LET: [105],
      LIB: [105],
      LIKE: [105],
      LSET: [105],
      MACRO_CONST: [105],
      MACRO_IF: [105],
      MACRO_ELSEIF: [105],
      MACRO_ELSE: [105],
      MACRO_END_IF: [105],
      MOD: [105],
      NEXT: [105],
      NEW: [105],
      NOT: [105],
      NOTHING: [105],
      NULL: [105],
      ON_ERROR: [105],
      ON_LOCAL_ERROR: [105],
      ON: [105],
      OPTIONAL: [105],
      OPTION_BASE: [105],
      OPTION_EXPLICIT: [105],
      OPTION_COMPARE: [105],
      OPTION_PRIVATE_MODULE: [105],
      OR: [105],
      PARAMARRAY: [105],
      PRESERVE: [105],
      PRIVATE: [105],
      PROPERTY_GET: [105],
      PROPERTY_LET: [105],
      PROPERTY_SET: [105],
      PTRSAFE: [105],
      PUBLIC: [105],
      RAISEEVENT: [105],
      REDIM: [105],
      RESET: [105],
      RESUME: [105],
      RETURN: [105],
      SELECT: [105],
      SET: [105],
      SINGLE: [105],
      STATIC: [105],
      STEP: [105],
      STOP: [105],
      STRING: [105],
      SUB: [105],
      THEN: [105],
      TO: [105],
      TRUE: [105],
      TYPEOF: [105],
      UNTIL: [105],
      VARIANT: [105],
      WEND: [105],
      WHILE: [105],
      WITH: [105],
      WITHEVENTS: [105],
      XOR: [105],
      IMP: [105],
      IDENTIFIER: [105],
    },
    indexes: {
      INTEGERLITERAL: [106],
      STRINGLITERAL: [106],
      NOTHING: [106],
      NULL: [106],
      TRUE: [106],
      FALSE: [106],
      SPACE_DOT: [106],
      ALIAS: [106],
      AND: [106],
      ATTRIBUTE: [106],
      AS: [106],
      BEGIN: [106],
      BOOLEAN: [106],
      BYVAL: [106],
      BYREF: [106],
      BYTE: [106],
      CALL: [106],
      CASE: [106],
      CONST: [106],
      DECLARE: [106],
      DEFBOOL: [106],
      DEFBYTE: [106],
      DEFDATE: [106],
      DEFDBL: [106],
      DEFDEC: [106],
      DEFCUR: [106],
      DEFINT: [106],
      DEFLNG: [106],
      DEFOBJ: [106],
      DEFSNG: [106],
      DEFSTR: [106],
      DEFVAR: [106],
      DIM: [106],
      DO: [106],
      DOUBLE: [106],
      EACH: [106],
      ELSE: [106],
      ELSEIF: [106],
      END_ENUM: [106],
      END_FUNCTION: [106],
      END_IF: [106],
      END_PROPERTY: [106],
      END_SELECT: [106],
      END_SUB: [106],
      END_TYPE: [106],
      END_WITH: [106],
      END: [106],
      ENUM: [106],
      EQV: [106],
      ERASE: [106],
      EVENT: [106],
      EXIT_DO: [106],
      EXIT_FOR: [106],
      EXIT_FUNCTION: [106],
      EXIT_PROPERTY: [106],
      EXIT_SUB: [106],
      FRIEND: [106],
      FOR: [106],
      FUNCTION: [106],
      GET: [106],
      GLOBAL: [106],
      GOSUB: [106],
      GOTO: [106],
      IF: [106],
      IMPLEMENTS: [106],
      IN: [106],
      IS: [106],
      INTEGER: [106],
      LONG: [106],
      LOOP: [106],
      LEN: [106],
      LET: [106],
      LIB: [106],
      LIKE: [106],
      LSET: [106],
      MACRO_CONST: [106],
      MACRO_IF: [106],
      MACRO_ELSEIF: [106],
      MACRO_ELSE: [106],
      MACRO_END_IF: [106],
      MOD: [106],
      NEXT: [106],
      NEW: [106],
      NOT: [106],
      ON_ERROR: [106],
      ON_LOCAL_ERROR: [106],
      ON: [106],
      OPTIONAL: [106],
      OPTION_BASE: [106],
      OPTION_EXPLICIT: [106],
      OPTION_COMPARE: [106],
      OPTION_PRIVATE_MODULE: [106],
      OR: [106],
      PARAMARRAY: [106],
      PRESERVE: [106],
      PRIVATE: [106],
      PROPERTY_GET: [106],
      PROPERTY_LET: [106],
      PROPERTY_SET: [106],
      PTRSAFE: [106],
      PUBLIC: [106],
      RAISEEVENT: [106],
      REDIM: [106],
      RESET: [106],
      RESUME: [106],
      RETURN: [106],
      SELECT: [106],
      SET: [106],
      SINGLE: [106],
      STATIC: [106],
      STEP: [106],
      STOP: [106],
      STRING: [106],
      SUB: [106],
      THEN: [106],
      TO: [106],
      TYPEOF: [106],
      UNTIL: [106],
      VARIANT: [106],
      WEND: [106],
      WHILE: [106],
      WITH: [106],
      WITHEVENTS: [106],
      XOR: [106],
      IMP: [106],
      IDENTIFIER: [106],
      LPAREN: [106],
      MINUS: [106],
      PLUS: [106],
    },
    subscript__group_def_47: {
      INTEGERLITERAL: [107],
      STRINGLITERAL: [107],
      NOTHING: [107],
      NULL: [107],
      TRUE: [107],
      FALSE: [107],
      SPACE_DOT: [107],
      ALIAS: [107],
      AND: [107],
      ATTRIBUTE: [107],
      AS: [107],
      BEGIN: [107],
      BOOLEAN: [107],
      BYVAL: [107],
      BYREF: [107],
      BYTE: [107],
      CALL: [107],
      CASE: [107],
      CONST: [107],
      DECLARE: [107],
      DEFBOOL: [107],
      DEFBYTE: [107],
      DEFDATE: [107],
      DEFDBL: [107],
      DEFDEC: [107],
      DEFCUR: [107],
      DEFINT: [107],
      DEFLNG: [107],
      DEFOBJ: [107],
      DEFSNG: [107],
      DEFSTR: [107],
      DEFVAR: [107],
      DIM: [107],
      DO: [107],
      DOUBLE: [107],
      EACH: [107],
      ELSE: [107],
      ELSEIF: [107],
      END_ENUM: [107],
      END_FUNCTION: [107],
      END_IF: [107],
      END_PROPERTY: [107],
      END_SELECT: [107],
      END_SUB: [107],
      END_TYPE: [107],
      END_WITH: [107],
      END: [107],
      ENUM: [107],
      EQV: [107],
      ERASE: [107],
      EVENT: [107],
      EXIT_DO: [107],
      EXIT_FOR: [107],
      EXIT_FUNCTION: [107],
      EXIT_PROPERTY: [107],
      EXIT_SUB: [107],
      FRIEND: [107],
      FOR: [107],
      FUNCTION: [107],
      GET: [107],
      GLOBAL: [107],
      GOSUB: [107],
      GOTO: [107],
      IF: [107],
      IMPLEMENTS: [107],
      IN: [107],
      IS: [107],
      INTEGER: [107],
      LONG: [107],
      LOOP: [107],
      LEN: [107],
      LET: [107],
      LIB: [107],
      LIKE: [107],
      LSET: [107],
      MACRO_CONST: [107],
      MACRO_IF: [107],
      MACRO_ELSEIF: [107],
      MACRO_ELSE: [107],
      MACRO_END_IF: [107],
      MOD: [107],
      NEXT: [107],
      NEW: [107],
      NOT: [107],
      ON_ERROR: [107],
      ON_LOCAL_ERROR: [107],
      ON: [107],
      OPTIONAL: [107],
      OPTION_BASE: [107],
      OPTION_EXPLICIT: [107],
      OPTION_COMPARE: [107],
      OPTION_PRIVATE_MODULE: [107],
      OR: [107],
      PARAMARRAY: [107],
      PRESERVE: [107],
      PRIVATE: [107],
      PROPERTY_GET: [107],
      PROPERTY_LET: [107],
      PROPERTY_SET: [107],
      PTRSAFE: [107],
      PUBLIC: [107],
      RAISEEVENT: [107],
      REDIM: [107],
      RESET: [107],
      RESUME: [107],
      RETURN: [107],
      SELECT: [107],
      SET: [107],
      SINGLE: [107],
      STATIC: [107],
      STEP: [107],
      STOP: [107],
      STRING: [107],
      SUB: [107],
      THEN: [107],
      TO: [107],
      TYPEOF: [107],
      UNTIL: [107],
      VARIANT: [107],
      WEND: [107],
      WHILE: [107],
      WITH: [107],
      WITHEVENTS: [107],
      XOR: [107],
      IMP: [107],
      IDENTIFIER: [107],
      LPAREN: [107],
      MINUS: [107],
      PLUS: [107],
    },
    subscript_: {
      INTEGERLITERAL: [108, 111],
      STRINGLITERAL: [108, 111],
      NOTHING: [108, 111],
      NULL: [108, 111],
      TRUE: [108, 111],
      FALSE: [108, 111],
      SPACE_DOT: [108, 111],
      ALIAS: [108, 111],
      AND: [108, 111],
      ATTRIBUTE: [108, 111],
      AS: [108, 111],
      BEGIN: [108, 111],
      BOOLEAN: [108, 111],
      BYVAL: [108, 111],
      BYREF: [108, 111],
      BYTE: [108, 111],
      CALL: [108, 111],
      CASE: [108, 111],
      CONST: [108, 111],
      DECLARE: [108, 111],
      DEFBOOL: [108, 111],
      DEFBYTE: [108, 111],
      DEFDATE: [108, 111],
      DEFDBL: [108, 111],
      DEFDEC: [108, 111],
      DEFCUR: [108, 111],
      DEFINT: [108, 111],
      DEFLNG: [108, 111],
      DEFOBJ: [108, 111],
      DEFSNG: [108, 111],
      DEFSTR: [108, 111],
      DEFVAR: [108, 111],
      DIM: [108, 111],
      DO: [108, 111],
      DOUBLE: [108, 111],
      EACH: [108, 111],
      ELSE: [108, 111],
      ELSEIF: [108, 111],
      END_ENUM: [108, 111],
      END_FUNCTION: [108, 111],
      END_IF: [108, 111],
      END_PROPERTY: [108, 111],
      END_SELECT: [108, 111],
      END_SUB: [108, 111],
      END_TYPE: [108, 111],
      END_WITH: [108, 111],
      END: [108, 111],
      ENUM: [108, 111],
      EQV: [108, 111],
      ERASE: [108, 111],
      EVENT: [108, 111],
      EXIT_DO: [108, 111],
      EXIT_FOR: [108, 111],
      EXIT_FUNCTION: [108, 111],
      EXIT_PROPERTY: [108, 111],
      EXIT_SUB: [108, 111],
      FRIEND: [108, 111],
      FOR: [108, 111],
      FUNCTION: [108, 111],
      GET: [108, 111],
      GLOBAL: [108, 111],
      GOSUB: [108, 111],
      GOTO: [108, 111],
      IF: [108, 111],
      IMPLEMENTS: [108, 111],
      IN: [108, 111],
      IS: [108, 111],
      INTEGER: [108, 111],
      LONG: [108, 111],
      LOOP: [108, 111],
      LEN: [108, 111],
      LET: [108, 111],
      LIB: [108, 111],
      LIKE: [108, 111],
      LSET: [108, 111],
      MACRO_CONST: [108, 111],
      MACRO_IF: [108, 111],
      MACRO_ELSEIF: [108, 111],
      MACRO_ELSE: [108, 111],
      MACRO_END_IF: [108, 111],
      MOD: [108, 111],
      NEXT: [108, 111],
      NEW: [108, 111],
      NOT: [108, 111],
      ON_ERROR: [108, 111],
      ON_LOCAL_ERROR: [108, 111],
      ON: [108, 111],
      OPTIONAL: [108, 111],
      OPTION_BASE: [108, 111],
      OPTION_EXPLICIT: [108, 111],
      OPTION_COMPARE: [108, 111],
      OPTION_PRIVATE_MODULE: [108, 111],
      OR: [108, 111],
      PARAMARRAY: [108, 111],
      PRESERVE: [108, 111],
      PRIVATE: [108, 111],
      PROPERTY_GET: [108, 111],
      PROPERTY_LET: [108, 111],
      PROPERTY_SET: [108, 111],
      PTRSAFE: [108, 111],
      PUBLIC: [108, 111],
      RAISEEVENT: [108, 111],
      REDIM: [108, 111],
      RESET: [108, 111],
      RESUME: [108, 111],
      RETURN: [108, 111],
      SELECT: [108, 111],
      SET: [108, 111],
      SINGLE: [108, 111],
      STATIC: [108, 111],
      STEP: [108, 111],
      STOP: [108, 111],
      STRING: [108, 111],
      SUB: [108, 111],
      THEN: [108, 111],
      TO: [108, 111],
      TYPEOF: [108, 111],
      UNTIL: [108, 111],
      VARIANT: [108, 111],
      WEND: [108, 111],
      WHILE: [108, 111],
      WITH: [108, 111],
      WITHEVENTS: [108, 111],
      XOR: [108, 111],
      IMP: [108, 111],
      IDENTIFIER: [108, 111],
      LPAREN: [108, 111],
      MINUS: [108, 111],
      PLUS: [108, 111],
    },
    subscripts_group_def_49: {
      ',': [109],
    },
    subscripts: {
      INTEGERLITERAL: [110],
      STRINGLITERAL: [110],
      NOTHING: [110],
      NULL: [110],
      TRUE: [110],
      FALSE: [110],
      LPAREN: [110],
      NEW: [110],
      ALIAS: [110],
      AND: [110],
      ATTRIBUTE: [110],
      AS: [110],
      BEGIN: [110],
      BOOLEAN: [110],
      BYVAL: [110],
      BYREF: [110],
      BYTE: [110],
      CALL: [110],
      CASE: [110],
      CONST: [110],
      DECLARE: [110],
      DEFBOOL: [110],
      DEFBYTE: [110],
      DEFDATE: [110],
      DEFDBL: [110],
      DEFDEC: [110],
      DEFCUR: [110],
      DEFINT: [110],
      DEFLNG: [110],
      DEFOBJ: [110],
      DEFSNG: [110],
      DEFSTR: [110],
      DEFVAR: [110],
      DIM: [110],
      DO: [110],
      DOUBLE: [110],
      EACH: [110],
      ELSE: [110],
      ELSEIF: [110],
      END_ENUM: [110],
      END_FUNCTION: [110],
      END_IF: [110],
      END_PROPERTY: [110],
      END_SELECT: [110],
      END_SUB: [110],
      END_TYPE: [110],
      END_WITH: [110],
      END: [110],
      ENUM: [110],
      EQV: [110],
      ERASE: [110],
      EVENT: [110],
      EXIT_DO: [110],
      EXIT_FOR: [110],
      EXIT_FUNCTION: [110],
      EXIT_PROPERTY: [110],
      EXIT_SUB: [110],
      FRIEND: [110],
      FOR: [110],
      FUNCTION: [110],
      GET: [110],
      GLOBAL: [110],
      GOSUB: [110],
      GOTO: [110],
      IF: [110],
      IMPLEMENTS: [110],
      IN: [110],
      IS: [110],
      INTEGER: [110],
      LONG: [110],
      LOOP: [110],
      LEN: [110],
      LET: [110],
      LIB: [110],
      LIKE: [110],
      LSET: [110],
      MACRO_CONST: [110],
      MACRO_IF: [110],
      MACRO_ELSEIF: [110],
      MACRO_ELSE: [110],
      MACRO_END_IF: [110],
      MOD: [110],
      NEXT: [110],
      NOT: [110],
      ON_ERROR: [110],
      ON_LOCAL_ERROR: [110],
      ON: [110],
      OPTIONAL: [110],
      OPTION_BASE: [110],
      OPTION_EXPLICIT: [110],
      OPTION_COMPARE: [110],
      OPTION_PRIVATE_MODULE: [110],
      OR: [110],
      PARAMARRAY: [110],
      PRESERVE: [110],
      PRIVATE: [110],
      PROPERTY_GET: [110],
      PROPERTY_LET: [110],
      PROPERTY_SET: [110],
      PTRSAFE: [110],
      PUBLIC: [110],
      RAISEEVENT: [110],
      REDIM: [110],
      RESET: [110],
      RESUME: [110],
      RETURN: [110],
      SELECT: [110],
      SET: [110],
      SINGLE: [110],
      STATIC: [110],
      STEP: [110],
      STOP: [110],
      STRING: [110],
      SUB: [110],
      THEN: [110],
      TO: [110],
      TYPEOF: [110],
      UNTIL: [110],
      VARIANT: [110],
      WEND: [110],
      WHILE: [110],
      WITH: [110],
      WITHEVENTS: [110],
      XOR: [110],
      IMP: [110],
      IDENTIFIER: [110],
      MINUS: [110],
      PLUS: [110],
      SPACE_DOT: [110],
    },
    argList_group_def_53: {
      ',': [112],
    },
    argList_group_def_54: {
      OPTIONAL: [113],
      PARAMARRAY: [113],
      ALIAS: [113],
      AND: [113],
      ATTRIBUTE: [113],
      AS: [113],
      BEGIN: [113],
      BOOLEAN: [113],
      BYVAL: [113],
      BYREF: [113],
      BYTE: [113],
      CALL: [113],
      CASE: [113],
      CONST: [113],
      DECLARE: [113],
      DEFBOOL: [113],
      DEFBYTE: [113],
      DEFDATE: [113],
      DEFDBL: [113],
      DEFDEC: [113],
      DEFCUR: [113],
      DEFINT: [113],
      DEFLNG: [113],
      DEFOBJ: [113],
      DEFSNG: [113],
      DEFSTR: [113],
      DEFVAR: [113],
      DIM: [113],
      DO: [113],
      DOUBLE: [113],
      EACH: [113],
      ELSE: [113],
      ELSEIF: [113],
      END_ENUM: [113],
      END_FUNCTION: [113],
      END_IF: [113],
      END_PROPERTY: [113],
      END_SELECT: [113],
      END_SUB: [113],
      END_TYPE: [113],
      END_WITH: [113],
      END: [113],
      ENUM: [113],
      EQV: [113],
      ERASE: [113],
      EVENT: [113],
      EXIT_DO: [113],
      EXIT_FOR: [113],
      EXIT_FUNCTION: [113],
      EXIT_PROPERTY: [113],
      EXIT_SUB: [113],
      FALSE: [113],
      FRIEND: [113],
      FOR: [113],
      FUNCTION: [113],
      GET: [113],
      GLOBAL: [113],
      GOSUB: [113],
      GOTO: [113],
      IF: [113],
      IMPLEMENTS: [113],
      IN: [113],
      IS: [113],
      INTEGER: [113],
      LONG: [113],
      LOOP: [113],
      LEN: [113],
      LET: [113],
      LIB: [113],
      LIKE: [113],
      LSET: [113],
      MACRO_CONST: [113],
      MACRO_IF: [113],
      MACRO_ELSEIF: [113],
      MACRO_ELSE: [113],
      MACRO_END_IF: [113],
      MOD: [113],
      NEXT: [113],
      NEW: [113],
      NOT: [113],
      NOTHING: [113],
      NULL: [113],
      ON_ERROR: [113],
      ON_LOCAL_ERROR: [113],
      ON: [113],
      OPTION_BASE: [113],
      OPTION_EXPLICIT: [113],
      OPTION_COMPARE: [113],
      OPTION_PRIVATE_MODULE: [113],
      OR: [113],
      PRESERVE: [113],
      PRIVATE: [113],
      PROPERTY_GET: [113],
      PROPERTY_LET: [113],
      PROPERTY_SET: [113],
      PTRSAFE: [113],
      PUBLIC: [113],
      RAISEEVENT: [113],
      REDIM: [113],
      RESET: [113],
      RESUME: [113],
      RETURN: [113],
      SELECT: [113],
      SET: [113],
      SINGLE: [113],
      STATIC: [113],
      STEP: [113],
      STOP: [113],
      STRING: [113],
      SUB: [113],
      THEN: [113],
      TO: [113],
      TRUE: [113],
      TYPEOF: [113],
      UNTIL: [113],
      VARIANT: [113],
      WEND: [113],
      WHILE: [113],
      WITH: [113],
      WITHEVENTS: [113],
      XOR: [113],
      IMP: [113],
      IDENTIFIER: [113],
    },
    argList: {
      LPAREN: [114],
    },
    valueStmt_p_end: {
      INTEGERLITERAL: [115],
      STRINGLITERAL: [115],
      NOTHING: [115, 116, 119],
      NULL: [115, 116, 119],
      TRUE: [115, 116, 119],
      FALSE: [115, 116, 119],
      SPACE_DOT: [116],
      ALIAS: [116, 119],
      AND: [116, 119],
      ATTRIBUTE: [116, 119],
      AS: [116, 119],
      BEGIN: [116, 119],
      BOOLEAN: [116, 119],
      BYVAL: [116, 119],
      BYREF: [116, 119],
      BYTE: [116, 119],
      CALL: [116, 119],
      CASE: [116, 119],
      CONST: [116, 119],
      DECLARE: [116, 119],
      DEFBOOL: [116, 119],
      DEFBYTE: [116, 119],
      DEFDATE: [116, 119],
      DEFDBL: [116, 119],
      DEFDEC: [116, 119],
      DEFCUR: [116, 119],
      DEFINT: [116, 119],
      DEFLNG: [116, 119],
      DEFOBJ: [116, 119],
      DEFSNG: [116, 119],
      DEFSTR: [116, 119],
      DEFVAR: [116, 119],
      DIM: [116, 119],
      DO: [116, 119],
      DOUBLE: [116, 119],
      EACH: [116, 119],
      ELSE: [116, 119],
      ELSEIF: [116, 119],
      END_ENUM: [116, 119],
      END_FUNCTION: [116, 119],
      END_IF: [116, 119],
      END_PROPERTY: [116, 119],
      END_SELECT: [116, 119],
      END_SUB: [116, 119],
      END_TYPE: [116, 119],
      END_WITH: [116, 119],
      END: [116, 119],
      ENUM: [116, 119],
      EQV: [116, 119],
      ERASE: [116, 119],
      EVENT: [116, 119],
      EXIT_DO: [116, 119],
      EXIT_FOR: [116, 119],
      EXIT_FUNCTION: [116, 119],
      EXIT_PROPERTY: [116, 119],
      EXIT_SUB: [116, 119],
      FRIEND: [116, 119],
      FOR: [116, 119],
      FUNCTION: [116, 119],
      GET: [116, 119],
      GLOBAL: [116, 119],
      GOSUB: [116, 119],
      GOTO: [116, 119],
      IF: [116, 119],
      IMPLEMENTS: [116, 119],
      IN: [116, 119],
      IS: [116, 119],
      INTEGER: [116, 119],
      LONG: [116, 119],
      LOOP: [116, 119],
      LEN: [116, 119],
      LET: [116, 119],
      LIB: [116, 119],
      LIKE: [116, 119],
      LSET: [116, 119],
      MACRO_CONST: [116, 119],
      MACRO_IF: [116, 119],
      MACRO_ELSEIF: [116, 119],
      MACRO_ELSE: [116, 119],
      MACRO_END_IF: [116, 119],
      MOD: [116, 119],
      NEXT: [116, 119],
      NEW: [116, 118, 119],
      NOT: [116, 119],
      ON_ERROR: [116, 119],
      ON_LOCAL_ERROR: [116, 119],
      ON: [116, 119],
      OPTIONAL: [116, 119],
      OPTION_BASE: [116, 119],
      OPTION_EXPLICIT: [116, 119],
      OPTION_COMPARE: [116, 119],
      OPTION_PRIVATE_MODULE: [116, 119],
      OR: [116, 119],
      PARAMARRAY: [116, 119],
      PRESERVE: [116, 119],
      PRIVATE: [116, 119],
      PROPERTY_GET: [116, 119],
      PROPERTY_LET: [116, 119],
      PROPERTY_SET: [116, 119],
      PTRSAFE: [116, 119],
      PUBLIC: [116, 119],
      RAISEEVENT: [116, 119],
      REDIM: [116, 119],
      RESET: [116, 119],
      RESUME: [116, 119],
      RETURN: [116, 119],
      SELECT: [116, 119],
      SET: [116, 119],
      SINGLE: [116, 119],
      STATIC: [116, 119],
      STEP: [116, 119],
      STOP: [116, 119],
      STRING: [116, 119],
      SUB: [116, 119],
      THEN: [116, 119],
      TO: [116, 119],
      TYPEOF: [116, 119],
      UNTIL: [116, 119],
      VARIANT: [116, 119],
      WEND: [116, 119],
      WHILE: [116, 119],
      WITH: [116, 119],
      WITHEVENTS: [116, 119],
      XOR: [116, 119],
      IMP: [116, 119],
      IDENTIFIER: [116, 119],
      LPAREN: [117],
    },
    implicitCallStmt_InStmt: {
      ALIAS: [120, 121, 122],
      AND: [120, 121, 122],
      ATTRIBUTE: [120, 121, 122],
      AS: [120, 121, 122],
      BEGIN: [120, 121, 122],
      BOOLEAN: [120, 121, 122],
      BYVAL: [120, 121, 122],
      BYREF: [120, 121, 122],
      BYTE: [120, 121, 122],
      CALL: [120, 121, 122],
      CASE: [120, 121, 122],
      CONST: [120, 121, 122],
      DECLARE: [120, 121, 122],
      DEFBOOL: [120, 121, 122],
      DEFBYTE: [120, 121, 122],
      DEFDATE: [120, 121, 122],
      DEFDBL: [120, 121, 122],
      DEFDEC: [120, 121, 122],
      DEFCUR: [120, 121, 122],
      DEFINT: [120, 121, 122],
      DEFLNG: [120, 121, 122],
      DEFOBJ: [120, 121, 122],
      DEFSNG: [120, 121, 122],
      DEFSTR: [120, 121, 122],
      DEFVAR: [120, 121, 122],
      DIM: [120, 121, 122],
      DO: [120, 121, 122],
      DOUBLE: [120, 121, 122],
      EACH: [120, 121, 122],
      ELSE: [120, 121, 122],
      ELSEIF: [120, 121, 122],
      END_ENUM: [120, 121, 122],
      END_FUNCTION: [120, 121, 122],
      END_IF: [120, 121, 122],
      END_PROPERTY: [120, 121, 122],
      END_SELECT: [120, 121, 122],
      END_SUB: [120, 121, 122],
      END_TYPE: [120, 121, 122],
      END_WITH: [120, 121, 122],
      END: [120, 121, 122],
      ENUM: [120, 121, 122],
      EQV: [120, 121, 122],
      ERASE: [120, 121, 122],
      EVENT: [120, 121, 122],
      EXIT_DO: [120, 121, 122],
      EXIT_FOR: [120, 121, 122],
      EXIT_FUNCTION: [120, 121, 122],
      EXIT_PROPERTY: [120, 121, 122],
      EXIT_SUB: [120, 121, 122],
      FALSE: [120, 121, 122],
      FRIEND: [120, 121, 122],
      FOR: [120, 121, 122],
      FUNCTION: [120, 121, 122],
      GET: [120, 121, 122],
      GLOBAL: [120, 121, 122],
      GOSUB: [120, 121, 122],
      GOTO: [120, 121, 122],
      IF: [120, 121, 122],
      IMPLEMENTS: [120, 121, 122],
      IN: [120, 121, 122],
      IS: [120, 121, 122],
      INTEGER: [120, 121, 122],
      LONG: [120, 121, 122],
      LOOP: [120, 121, 122],
      LEN: [120, 121, 122],
      LET: [120, 121, 122],
      LIB: [120, 121, 122],
      LIKE: [120, 121, 122],
      LSET: [120, 121, 122],
      MACRO_CONST: [120, 121, 122],
      MACRO_IF: [120, 121, 122],
      MACRO_ELSEIF: [120, 121, 122],
      MACRO_ELSE: [120, 121, 122],
      MACRO_END_IF: [120, 121, 122],
      MOD: [120, 121, 122],
      NEXT: [120, 121, 122],
      NEW: [120, 121, 122],
      NOT: [120, 121, 122],
      NOTHING: [120, 121, 122],
      NULL: [120, 121, 122],
      ON_ERROR: [120, 121, 122],
      ON_LOCAL_ERROR: [120, 121, 122],
      ON: [120, 121, 122],
      OPTIONAL: [120, 121, 122],
      OPTION_BASE: [120, 121, 122],
      OPTION_EXPLICIT: [120, 121, 122],
      OPTION_COMPARE: [120, 121, 122],
      OPTION_PRIVATE_MODULE: [120, 121, 122],
      OR: [120, 121, 122],
      PARAMARRAY: [120, 121, 122],
      PRESERVE: [120, 121, 122],
      PRIVATE: [120, 121, 122],
      PROPERTY_GET: [120, 121, 122],
      PROPERTY_LET: [120, 121, 122],
      PROPERTY_SET: [120, 121, 122],
      PTRSAFE: [120, 121, 122],
      PUBLIC: [120, 121, 122],
      RAISEEVENT: [120, 121, 122],
      REDIM: [120, 121, 122],
      RESET: [120, 121, 122],
      RESUME: [120, 121, 122],
      RETURN: [120, 121, 122],
      SELECT: [120, 121, 122],
      SET: [120, 121, 122],
      SINGLE: [120, 121, 122],
      STATIC: [120, 121, 122],
      STEP: [120, 121, 122],
      STOP: [120, 121, 122],
      STRING: [120, 121, 122],
      SUB: [120, 121, 122],
      THEN: [120, 121, 122],
      TO: [120, 121, 122],
      TRUE: [120, 121, 122],
      TYPEOF: [120, 121, 122],
      UNTIL: [120, 121, 122],
      VARIANT: [120, 121, 122],
      WEND: [120, 121, 122],
      WHILE: [120, 121, 122],
      WITH: [120, 121, 122],
      WITHEVENTS: [120, 121, 122],
      XOR: [120, 121, 122],
      IMP: [120, 121, 122],
      IDENTIFIER: [120, 121, 122],
      SPACE_DOT: [120],
    },
    iCS_S_MembersCall_group_def_57: {
      ALIAS: [123],
      AND: [123],
      ATTRIBUTE: [123],
      AS: [123],
      BEGIN: [123],
      BOOLEAN: [123],
      BYVAL: [123],
      BYREF: [123],
      BYTE: [123],
      CALL: [123],
      CASE: [123],
      CONST: [123],
      DECLARE: [123],
      DEFBOOL: [123],
      DEFBYTE: [123],
      DEFDATE: [123],
      DEFDBL: [123],
      DEFDEC: [123],
      DEFCUR: [123],
      DEFINT: [123],
      DEFLNG: [123],
      DEFOBJ: [123],
      DEFSNG: [123],
      DEFSTR: [123],
      DEFVAR: [123],
      DIM: [123],
      DO: [123],
      DOUBLE: [123],
      EACH: [123],
      ELSE: [123],
      ELSEIF: [123],
      END_ENUM: [123],
      END_FUNCTION: [123],
      END_IF: [123],
      END_PROPERTY: [123],
      END_SELECT: [123],
      END_SUB: [123],
      END_TYPE: [123],
      END_WITH: [123],
      END: [123],
      ENUM: [123],
      EQV: [123],
      ERASE: [123],
      EVENT: [123],
      EXIT_DO: [123],
      EXIT_FOR: [123],
      EXIT_FUNCTION: [123],
      EXIT_PROPERTY: [123],
      EXIT_SUB: [123],
      FALSE: [123],
      FRIEND: [123],
      FOR: [123],
      FUNCTION: [123],
      GET: [123],
      GLOBAL: [123],
      GOSUB: [123],
      GOTO: [123],
      IF: [123],
      IMPLEMENTS: [123],
      IN: [123],
      IS: [123],
      INTEGER: [123],
      LONG: [123],
      LOOP: [123],
      LEN: [123],
      LET: [123],
      LIB: [123],
      LIKE: [123],
      LSET: [123],
      MACRO_CONST: [123],
      MACRO_IF: [123],
      MACRO_ELSEIF: [123],
      MACRO_ELSE: [123],
      MACRO_END_IF: [123],
      MOD: [123],
      NEXT: [123],
      NEW: [123],
      NOT: [123],
      NOTHING: [123],
      NULL: [123],
      ON_ERROR: [123],
      ON_LOCAL_ERROR: [123],
      ON: [123],
      OPTIONAL: [123],
      OPTION_BASE: [123],
      OPTION_EXPLICIT: [123],
      OPTION_COMPARE: [123],
      OPTION_PRIVATE_MODULE: [123],
      OR: [123],
      PARAMARRAY: [123],
      PRESERVE: [123],
      PRIVATE: [123],
      PROPERTY_GET: [123],
      PROPERTY_LET: [123],
      PROPERTY_SET: [123],
      PTRSAFE: [123],
      PUBLIC: [123],
      RAISEEVENT: [123],
      REDIM: [123],
      RESET: [123],
      RESUME: [123],
      RETURN: [123],
      SELECT: [123],
      SET: [123],
      SINGLE: [123],
      STATIC: [123],
      STEP: [123],
      STOP: [123],
      STRING: [123],
      SUB: [123],
      THEN: [123],
      TO: [123],
      TRUE: [123],
      TYPEOF: [123],
      UNTIL: [123],
      VARIANT: [123],
      WEND: [123],
      WHILE: [123],
      WITH: [123],
      WITHEVENTS: [123],
      XOR: [123],
      IMP: [123],
      IDENTIFIER: [123],
    },
    iCS_S_MembersCall_group_56: {
      ALIAS: [124, 126],
      AND: [124, 126],
      ATTRIBUTE: [124, 126],
      AS: [124, 126],
      BEGIN: [124, 126],
      BOOLEAN: [124, 126],
      BYVAL: [124, 126],
      BYREF: [124, 126],
      BYTE: [124, 126],
      CALL: [124, 126],
      CASE: [124, 126],
      CONST: [124, 126],
      DECLARE: [124, 126],
      DEFBOOL: [124, 126],
      DEFBYTE: [124, 126],
      DEFDATE: [124, 126],
      DEFDBL: [124, 126],
      DEFDEC: [124, 126],
      DEFCUR: [124, 126],
      DEFINT: [124, 126],
      DEFLNG: [124, 126],
      DEFOBJ: [124, 126],
      DEFSNG: [124, 126],
      DEFSTR: [124, 126],
      DEFVAR: [124, 126],
      DIM: [124, 126],
      DO: [124, 126],
      DOUBLE: [124, 126],
      EACH: [124, 126],
      ELSE: [124, 126],
      ELSEIF: [124, 126],
      END_ENUM: [124, 126],
      END_FUNCTION: [124, 126],
      END_IF: [124, 126],
      END_PROPERTY: [124, 126],
      END_SELECT: [124, 126],
      END_SUB: [124, 126],
      END_TYPE: [124, 126],
      END_WITH: [124, 126],
      END: [124, 126],
      ENUM: [124, 126],
      EQV: [124, 126],
      ERASE: [124, 126],
      EVENT: [124, 126],
      EXIT_DO: [124, 126],
      EXIT_FOR: [124, 126],
      EXIT_FUNCTION: [124, 126],
      EXIT_PROPERTY: [124, 126],
      EXIT_SUB: [124, 126],
      FALSE: [124, 126],
      FRIEND: [124, 126],
      FOR: [124, 126],
      FUNCTION: [124, 126],
      GET: [124, 126],
      GLOBAL: [124, 126],
      GOSUB: [124, 126],
      GOTO: [124, 126],
      IF: [124, 126],
      IMPLEMENTS: [124, 126],
      IN: [124, 126],
      IS: [124, 126],
      INTEGER: [124, 126],
      LONG: [124, 126],
      LOOP: [124, 126],
      LEN: [124, 126],
      LET: [124, 126],
      LIB: [124, 126],
      LIKE: [124, 126],
      LSET: [124, 126],
      MACRO_CONST: [124, 126],
      MACRO_IF: [124, 126],
      MACRO_ELSEIF: [124, 126],
      MACRO_ELSE: [124, 126],
      MACRO_END_IF: [124, 126],
      MOD: [124, 126],
      NEXT: [124, 126],
      NEW: [124, 126],
      NOT: [124, 126],
      NOTHING: [124, 126],
      NULL: [124, 126],
      ON_ERROR: [124, 126],
      ON_LOCAL_ERROR: [124, 126],
      ON: [124, 126],
      OPTIONAL: [124, 126],
      OPTION_BASE: [124, 126],
      OPTION_EXPLICIT: [124, 126],
      OPTION_COMPARE: [124, 126],
      OPTION_PRIVATE_MODULE: [124, 126],
      OR: [124, 126],
      PARAMARRAY: [124, 126],
      PRESERVE: [124, 126],
      PRIVATE: [124, 126],
      PROPERTY_GET: [124, 126],
      PROPERTY_LET: [124, 126],
      PROPERTY_SET: [124, 126],
      PTRSAFE: [124, 126],
      PUBLIC: [124, 126],
      RAISEEVENT: [124, 126],
      REDIM: [124, 126],
      RESET: [124, 126],
      RESUME: [124, 126],
      RETURN: [124, 126],
      SELECT: [124, 126],
      SET: [124, 126],
      SINGLE: [124, 126],
      STATIC: [124, 126],
      STEP: [124, 126],
      STOP: [124, 126],
      STRING: [124, 126],
      SUB: [124, 126],
      THEN: [124, 126],
      TO: [124, 126],
      TRUE: [124, 126],
      TYPEOF: [124, 126],
      UNTIL: [124, 126],
      VARIANT: [124, 126],
      WEND: [124, 126],
      WHILE: [124, 126],
      WITH: [124, 126],
      WITHEVENTS: [124, 126],
      XOR: [124, 126],
      IMP: [124, 126],
      IDENTIFIER: [124, 126],
    },
    iCS_S_MembersCall_group_def_58: {
      ALIAS: [125],
      AND: [125],
      ATTRIBUTE: [125],
      AS: [125],
      BEGIN: [125],
      BOOLEAN: [125],
      BYVAL: [125],
      BYREF: [125],
      BYTE: [125],
      CALL: [125],
      CASE: [125],
      CONST: [125],
      DECLARE: [125],
      DEFBOOL: [125],
      DEFBYTE: [125],
      DEFDATE: [125],
      DEFDBL: [125],
      DEFDEC: [125],
      DEFCUR: [125],
      DEFINT: [125],
      DEFLNG: [125],
      DEFOBJ: [125],
      DEFSNG: [125],
      DEFSTR: [125],
      DEFVAR: [125],
      DIM: [125],
      DO: [125],
      DOUBLE: [125],
      EACH: [125],
      ELSE: [125],
      ELSEIF: [125],
      END_ENUM: [125],
      END_FUNCTION: [125],
      END_IF: [125],
      END_PROPERTY: [125],
      END_SELECT: [125],
      END_SUB: [125],
      END_TYPE: [125],
      END_WITH: [125],
      END: [125],
      ENUM: [125],
      EQV: [125],
      ERASE: [125],
      EVENT: [125],
      EXIT_DO: [125],
      EXIT_FOR: [125],
      EXIT_FUNCTION: [125],
      EXIT_PROPERTY: [125],
      EXIT_SUB: [125],
      FALSE: [125],
      FRIEND: [125],
      FOR: [125],
      FUNCTION: [125],
      GET: [125],
      GLOBAL: [125],
      GOSUB: [125],
      GOTO: [125],
      IF: [125],
      IMPLEMENTS: [125],
      IN: [125],
      IS: [125],
      INTEGER: [125],
      LONG: [125],
      LOOP: [125],
      LEN: [125],
      LET: [125],
      LIB: [125],
      LIKE: [125],
      LSET: [125],
      MACRO_CONST: [125],
      MACRO_IF: [125],
      MACRO_ELSEIF: [125],
      MACRO_ELSE: [125],
      MACRO_END_IF: [125],
      MOD: [125],
      NEXT: [125],
      NEW: [125],
      NOT: [125],
      NOTHING: [125],
      NULL: [125],
      ON_ERROR: [125],
      ON_LOCAL_ERROR: [125],
      ON: [125],
      OPTIONAL: [125],
      OPTION_BASE: [125],
      OPTION_EXPLICIT: [125],
      OPTION_COMPARE: [125],
      OPTION_PRIVATE_MODULE: [125],
      OR: [125],
      PARAMARRAY: [125],
      PRESERVE: [125],
      PRIVATE: [125],
      PROPERTY_GET: [125],
      PROPERTY_LET: [125],
      PROPERTY_SET: [125],
      PTRSAFE: [125],
      PUBLIC: [125],
      RAISEEVENT: [125],
      REDIM: [125],
      RESET: [125],
      RESUME: [125],
      RETURN: [125],
      SELECT: [125],
      SET: [125],
      SINGLE: [125],
      STATIC: [125],
      STEP: [125],
      STOP: [125],
      STRING: [125],
      SUB: [125],
      THEN: [125],
      TO: [125],
      TRUE: [125],
      TYPEOF: [125],
      UNTIL: [125],
      VARIANT: [125],
      WEND: [125],
      WHILE: [125],
      WITH: [125],
      WITHEVENTS: [125],
      XOR: [125],
      IMP: [125],
      IDENTIFIER: [125],
    },
    iCS_S_MembersCall_group_def_59: {
      ALIAS: [127],
      AND: [127],
      ATTRIBUTE: [127],
      AS: [127],
      BEGIN: [127],
      BOOLEAN: [127],
      BYVAL: [127],
      BYREF: [127],
      BYTE: [127],
      CALL: [127],
      CASE: [127],
      CONST: [127],
      DECLARE: [127],
      DEFBOOL: [127],
      DEFBYTE: [127],
      DEFDATE: [127],
      DEFDBL: [127],
      DEFDEC: [127],
      DEFCUR: [127],
      DEFINT: [127],
      DEFLNG: [127],
      DEFOBJ: [127],
      DEFSNG: [127],
      DEFSTR: [127],
      DEFVAR: [127],
      DIM: [127],
      DO: [127],
      DOUBLE: [127],
      EACH: [127],
      ELSE: [127],
      ELSEIF: [127],
      END_ENUM: [127],
      END_FUNCTION: [127],
      END_IF: [127],
      END_PROPERTY: [127],
      END_SELECT: [127],
      END_SUB: [127],
      END_TYPE: [127],
      END_WITH: [127],
      END: [127],
      ENUM: [127],
      EQV: [127],
      ERASE: [127],
      EVENT: [127],
      EXIT_DO: [127],
      EXIT_FOR: [127],
      EXIT_FUNCTION: [127],
      EXIT_PROPERTY: [127],
      EXIT_SUB: [127],
      FALSE: [127],
      FRIEND: [127],
      FOR: [127],
      FUNCTION: [127],
      GET: [127],
      GLOBAL: [127],
      GOSUB: [127],
      GOTO: [127],
      IF: [127],
      IMPLEMENTS: [127],
      IN: [127],
      IS: [127],
      INTEGER: [127],
      LONG: [127],
      LOOP: [127],
      LEN: [127],
      LET: [127],
      LIB: [127],
      LIKE: [127],
      LSET: [127],
      MACRO_CONST: [127],
      MACRO_IF: [127],
      MACRO_ELSEIF: [127],
      MACRO_ELSE: [127],
      MACRO_END_IF: [127],
      MOD: [127],
      NEXT: [127],
      NEW: [127],
      NOT: [127],
      NOTHING: [127],
      NULL: [127],
      ON_ERROR: [127],
      ON_LOCAL_ERROR: [127],
      ON: [127],
      OPTIONAL: [127],
      OPTION_BASE: [127],
      OPTION_EXPLICIT: [127],
      OPTION_COMPARE: [127],
      OPTION_PRIVATE_MODULE: [127],
      OR: [127],
      PARAMARRAY: [127],
      PRESERVE: [127],
      PRIVATE: [127],
      PROPERTY_GET: [127],
      PROPERTY_LET: [127],
      PROPERTY_SET: [127],
      PTRSAFE: [127],
      PUBLIC: [127],
      RAISEEVENT: [127],
      REDIM: [127],
      RESET: [127],
      RESUME: [127],
      RETURN: [127],
      SELECT: [127],
      SET: [127],
      SINGLE: [127],
      STATIC: [127],
      STEP: [127],
      STOP: [127],
      STRING: [127],
      SUB: [127],
      THEN: [127],
      TO: [127],
      TRUE: [127],
      TYPEOF: [127],
      UNTIL: [127],
      VARIANT: [127],
      WEND: [127],
      WHILE: [127],
      WITH: [127],
      WITHEVENTS: [127],
      XOR: [127],
      IMP: [127],
      IDENTIFIER: [127],
    },
    iCS_S_MembersCall_group_55: {
      ALIAS: [128],
      AND: [128],
      ATTRIBUTE: [128],
      AS: [128],
      BEGIN: [128],
      BOOLEAN: [128],
      BYVAL: [128],
      BYREF: [128],
      BYTE: [128],
      CALL: [128],
      CASE: [128],
      CONST: [128],
      DECLARE: [128],
      DEFBOOL: [128],
      DEFBYTE: [128],
      DEFDATE: [128],
      DEFDBL: [128],
      DEFDEC: [128],
      DEFCUR: [128],
      DEFINT: [128],
      DEFLNG: [128],
      DEFOBJ: [128],
      DEFSNG: [128],
      DEFSTR: [128],
      DEFVAR: [128],
      DIM: [128],
      DO: [128],
      DOUBLE: [128],
      EACH: [128],
      ELSE: [128],
      ELSEIF: [128],
      END_ENUM: [128],
      END_FUNCTION: [128],
      END_IF: [128],
      END_PROPERTY: [128],
      END_SELECT: [128],
      END_SUB: [128],
      END_TYPE: [128],
      END_WITH: [128],
      END: [128],
      ENUM: [128],
      EQV: [128],
      ERASE: [128],
      EVENT: [128],
      EXIT_DO: [128],
      EXIT_FOR: [128],
      EXIT_FUNCTION: [128],
      EXIT_PROPERTY: [128],
      EXIT_SUB: [128],
      FALSE: [128],
      FRIEND: [128],
      FOR: [128],
      FUNCTION: [128],
      GET: [128],
      GLOBAL: [128],
      GOSUB: [128],
      GOTO: [128],
      IF: [128],
      IMPLEMENTS: [128],
      IN: [128],
      IS: [128],
      INTEGER: [128],
      LONG: [128],
      LOOP: [128],
      LEN: [128],
      LET: [128],
      LIB: [128],
      LIKE: [128],
      LSET: [128],
      MACRO_CONST: [128],
      MACRO_IF: [128],
      MACRO_ELSEIF: [128],
      MACRO_ELSE: [128],
      MACRO_END_IF: [128],
      MOD: [128],
      NEXT: [128],
      NEW: [128],
      NOT: [128],
      NOTHING: [128],
      NULL: [128],
      ON_ERROR: [128],
      ON_LOCAL_ERROR: [128],
      ON: [128],
      OPTIONAL: [128],
      OPTION_BASE: [128],
      OPTION_EXPLICIT: [128],
      OPTION_COMPARE: [128],
      OPTION_PRIVATE_MODULE: [128],
      OR: [128],
      PARAMARRAY: [128],
      PRESERVE: [128],
      PRIVATE: [128],
      PROPERTY_GET: [128],
      PROPERTY_LET: [128],
      PROPERTY_SET: [128],
      PTRSAFE: [128],
      PUBLIC: [128],
      RAISEEVENT: [128],
      REDIM: [128],
      RESET: [128],
      RESUME: [128],
      RETURN: [128],
      SELECT: [128],
      SET: [128],
      SINGLE: [128],
      STATIC: [128],
      STEP: [128],
      STOP: [128],
      STRING: [128],
      SUB: [128],
      THEN: [128],
      TO: [128],
      TRUE: [128],
      TYPEOF: [128],
      UNTIL: [128],
      VARIANT: [128],
      WEND: [128],
      WHILE: [128],
      WITH: [128],
      WITHEVENTS: [128],
      XOR: [128],
      IMP: [128],
      IDENTIFIER: [128],
      SPACE_DOT: [130],
    },
    iCS_S_MembersCall_group_def_60: {
      SPACE_DOT: [129],
    },
    iCS_S_MembersCall: {
      ALIAS: [131],
      AND: [131],
      ATTRIBUTE: [131],
      AS: [131],
      BEGIN: [131],
      BOOLEAN: [131],
      BYVAL: [131],
      BYREF: [131],
      BYTE: [131],
      CALL: [131],
      CASE: [131],
      CONST: [131],
      DECLARE: [131],
      DEFBOOL: [131],
      DEFBYTE: [131],
      DEFDATE: [131],
      DEFDBL: [131],
      DEFDEC: [131],
      DEFCUR: [131],
      DEFINT: [131],
      DEFLNG: [131],
      DEFOBJ: [131],
      DEFSNG: [131],
      DEFSTR: [131],
      DEFVAR: [131],
      DIM: [131],
      DO: [131],
      DOUBLE: [131],
      EACH: [131],
      ELSE: [131],
      ELSEIF: [131],
      END_ENUM: [131],
      END_FUNCTION: [131],
      END_IF: [131],
      END_PROPERTY: [131],
      END_SELECT: [131],
      END_SUB: [131],
      END_TYPE: [131],
      END_WITH: [131],
      END: [131],
      ENUM: [131],
      EQV: [131],
      ERASE: [131],
      EVENT: [131],
      EXIT_DO: [131],
      EXIT_FOR: [131],
      EXIT_FUNCTION: [131],
      EXIT_PROPERTY: [131],
      EXIT_SUB: [131],
      FALSE: [131],
      FRIEND: [131],
      FOR: [131],
      FUNCTION: [131],
      GET: [131],
      GLOBAL: [131],
      GOSUB: [131],
      GOTO: [131],
      IF: [131],
      IMPLEMENTS: [131],
      IN: [131],
      IS: [131],
      INTEGER: [131],
      LONG: [131],
      LOOP: [131],
      LEN: [131],
      LET: [131],
      LIB: [131],
      LIKE: [131],
      LSET: [131],
      MACRO_CONST: [131],
      MACRO_IF: [131],
      MACRO_ELSEIF: [131],
      MACRO_ELSE: [131],
      MACRO_END_IF: [131],
      MOD: [131],
      NEXT: [131],
      NEW: [131],
      NOT: [131],
      NOTHING: [131],
      NULL: [131],
      ON_ERROR: [131],
      ON_LOCAL_ERROR: [131],
      ON: [131],
      OPTIONAL: [131],
      OPTION_BASE: [131],
      OPTION_EXPLICIT: [131],
      OPTION_COMPARE: [131],
      OPTION_PRIVATE_MODULE: [131],
      OR: [131],
      PARAMARRAY: [131],
      PRESERVE: [131],
      PRIVATE: [131],
      PROPERTY_GET: [131],
      PROPERTY_LET: [131],
      PROPERTY_SET: [131],
      PTRSAFE: [131],
      PUBLIC: [131],
      RAISEEVENT: [131],
      REDIM: [131],
      RESET: [131],
      RESUME: [131],
      RETURN: [131],
      SELECT: [131],
      SET: [131],
      SINGLE: [131],
      STATIC: [131],
      STEP: [131],
      STOP: [131],
      STRING: [131],
      SUB: [131],
      THEN: [131],
      TO: [131],
      TRUE: [131],
      TYPEOF: [131],
      UNTIL: [131],
      VARIANT: [131],
      WEND: [131],
      WHILE: [131],
      WITH: [131],
      WITHEVENTS: [131],
      XOR: [131],
      IMP: [131],
      IDENTIFIER: [131],
      SPACE_DOT: [131],
    },
    iCS_S_MemberCall_group_62: {
      ALIAS: [132, 133],
      AND: [132, 133],
      ATTRIBUTE: [132, 133],
      AS: [132, 133],
      BEGIN: [132, 133],
      BOOLEAN: [132, 133],
      BYVAL: [132, 133],
      BYREF: [132, 133],
      BYTE: [132, 133],
      CALL: [132, 133],
      CASE: [132, 133],
      CONST: [132, 133],
      DECLARE: [132, 133],
      DEFBOOL: [132, 133],
      DEFBYTE: [132, 133],
      DEFDATE: [132, 133],
      DEFDBL: [132, 133],
      DEFDEC: [132, 133],
      DEFCUR: [132, 133],
      DEFINT: [132, 133],
      DEFLNG: [132, 133],
      DEFOBJ: [132, 133],
      DEFSNG: [132, 133],
      DEFSTR: [132, 133],
      DEFVAR: [132, 133],
      DIM: [132, 133],
      DO: [132, 133],
      DOUBLE: [132, 133],
      EACH: [132, 133],
      ELSE: [132, 133],
      ELSEIF: [132, 133],
      END_ENUM: [132, 133],
      END_FUNCTION: [132, 133],
      END_IF: [132, 133],
      END_PROPERTY: [132, 133],
      END_SELECT: [132, 133],
      END_SUB: [132, 133],
      END_TYPE: [132, 133],
      END_WITH: [132, 133],
      END: [132, 133],
      ENUM: [132, 133],
      EQV: [132, 133],
      ERASE: [132, 133],
      EVENT: [132, 133],
      EXIT_DO: [132, 133],
      EXIT_FOR: [132, 133],
      EXIT_FUNCTION: [132, 133],
      EXIT_PROPERTY: [132, 133],
      EXIT_SUB: [132, 133],
      FALSE: [132, 133],
      FRIEND: [132, 133],
      FOR: [132, 133],
      FUNCTION: [132, 133],
      GET: [132, 133],
      GLOBAL: [132, 133],
      GOSUB: [132, 133],
      GOTO: [132, 133],
      IF: [132, 133],
      IMPLEMENTS: [132, 133],
      IN: [132, 133],
      IS: [132, 133],
      INTEGER: [132, 133],
      LONG: [132, 133],
      LOOP: [132, 133],
      LEN: [132, 133],
      LET: [132, 133],
      LIB: [132, 133],
      LIKE: [132, 133],
      LSET: [132, 133],
      MACRO_CONST: [132, 133],
      MACRO_IF: [132, 133],
      MACRO_ELSEIF: [132, 133],
      MACRO_ELSE: [132, 133],
      MACRO_END_IF: [132, 133],
      MOD: [132, 133],
      NEXT: [132, 133],
      NEW: [132, 133],
      NOT: [132, 133],
      NOTHING: [132, 133],
      NULL: [132, 133],
      ON_ERROR: [132, 133],
      ON_LOCAL_ERROR: [132, 133],
      ON: [132, 133],
      OPTIONAL: [132, 133],
      OPTION_BASE: [132, 133],
      OPTION_EXPLICIT: [132, 133],
      OPTION_COMPARE: [132, 133],
      OPTION_PRIVATE_MODULE: [132, 133],
      OR: [132, 133],
      PARAMARRAY: [132, 133],
      PRESERVE: [132, 133],
      PRIVATE: [132, 133],
      PROPERTY_GET: [132, 133],
      PROPERTY_LET: [132, 133],
      PROPERTY_SET: [132, 133],
      PTRSAFE: [132, 133],
      PUBLIC: [132, 133],
      RAISEEVENT: [132, 133],
      REDIM: [132, 133],
      RESET: [132, 133],
      RESUME: [132, 133],
      RETURN: [132, 133],
      SELECT: [132, 133],
      SET: [132, 133],
      SINGLE: [132, 133],
      STATIC: [132, 133],
      STEP: [132, 133],
      STOP: [132, 133],
      STRING: [132, 133],
      SUB: [132, 133],
      THEN: [132, 133],
      TO: [132, 133],
      TRUE: [132, 133],
      TYPEOF: [132, 133],
      UNTIL: [132, 133],
      VARIANT: [132, 133],
      WEND: [132, 133],
      WHILE: [132, 133],
      WITH: [132, 133],
      WITHEVENTS: [132, 133],
      XOR: [132, 133],
      IMP: [132, 133],
      IDENTIFIER: [132, 133],
    },
    iCS_S_MemberCall: {
      '.': [134],
    },
    iCS_S_SpaceMemberCall_group_63: {
      ALIAS: [135, 136],
      AND: [135, 136],
      ATTRIBUTE: [135, 136],
      AS: [135, 136],
      BEGIN: [135, 136],
      BOOLEAN: [135, 136],
      BYVAL: [135, 136],
      BYREF: [135, 136],
      BYTE: [135, 136],
      CALL: [135, 136],
      CASE: [135, 136],
      CONST: [135, 136],
      DECLARE: [135, 136],
      DEFBOOL: [135, 136],
      DEFBYTE: [135, 136],
      DEFDATE: [135, 136],
      DEFDBL: [135, 136],
      DEFDEC: [135, 136],
      DEFCUR: [135, 136],
      DEFINT: [135, 136],
      DEFLNG: [135, 136],
      DEFOBJ: [135, 136],
      DEFSNG: [135, 136],
      DEFSTR: [135, 136],
      DEFVAR: [135, 136],
      DIM: [135, 136],
      DO: [135, 136],
      DOUBLE: [135, 136],
      EACH: [135, 136],
      ELSE: [135, 136],
      ELSEIF: [135, 136],
      END_ENUM: [135, 136],
      END_FUNCTION: [135, 136],
      END_IF: [135, 136],
      END_PROPERTY: [135, 136],
      END_SELECT: [135, 136],
      END_SUB: [135, 136],
      END_TYPE: [135, 136],
      END_WITH: [135, 136],
      END: [135, 136],
      ENUM: [135, 136],
      EQV: [135, 136],
      ERASE: [135, 136],
      EVENT: [135, 136],
      EXIT_DO: [135, 136],
      EXIT_FOR: [135, 136],
      EXIT_FUNCTION: [135, 136],
      EXIT_PROPERTY: [135, 136],
      EXIT_SUB: [135, 136],
      FALSE: [135, 136],
      FRIEND: [135, 136],
      FOR: [135, 136],
      FUNCTION: [135, 136],
      GET: [135, 136],
      GLOBAL: [135, 136],
      GOSUB: [135, 136],
      GOTO: [135, 136],
      IF: [135, 136],
      IMPLEMENTS: [135, 136],
      IN: [135, 136],
      IS: [135, 136],
      INTEGER: [135, 136],
      LONG: [135, 136],
      LOOP: [135, 136],
      LEN: [135, 136],
      LET: [135, 136],
      LIB: [135, 136],
      LIKE: [135, 136],
      LSET: [135, 136],
      MACRO_CONST: [135, 136],
      MACRO_IF: [135, 136],
      MACRO_ELSEIF: [135, 136],
      MACRO_ELSE: [135, 136],
      MACRO_END_IF: [135, 136],
      MOD: [135, 136],
      NEXT: [135, 136],
      NEW: [135, 136],
      NOT: [135, 136],
      NOTHING: [135, 136],
      NULL: [135, 136],
      ON_ERROR: [135, 136],
      ON_LOCAL_ERROR: [135, 136],
      ON: [135, 136],
      OPTIONAL: [135, 136],
      OPTION_BASE: [135, 136],
      OPTION_EXPLICIT: [135, 136],
      OPTION_COMPARE: [135, 136],
      OPTION_PRIVATE_MODULE: [135, 136],
      OR: [135, 136],
      PARAMARRAY: [135, 136],
      PRESERVE: [135, 136],
      PRIVATE: [135, 136],
      PROPERTY_GET: [135, 136],
      PROPERTY_LET: [135, 136],
      PROPERTY_SET: [135, 136],
      PTRSAFE: [135, 136],
      PUBLIC: [135, 136],
      RAISEEVENT: [135, 136],
      REDIM: [135, 136],
      RESET: [135, 136],
      RESUME: [135, 136],
      RETURN: [135, 136],
      SELECT: [135, 136],
      SET: [135, 136],
      SINGLE: [135, 136],
      STATIC: [135, 136],
      STEP: [135, 136],
      STOP: [135, 136],
      STRING: [135, 136],
      SUB: [135, 136],
      THEN: [135, 136],
      TO: [135, 136],
      TRUE: [135, 136],
      TYPEOF: [135, 136],
      UNTIL: [135, 136],
      VARIANT: [135, 136],
      WEND: [135, 136],
      WHILE: [135, 136],
      WITH: [135, 136],
      WITHEVENTS: [135, 136],
      XOR: [135, 136],
      IMP: [135, 136],
      IDENTIFIER: [135, 136],
    },
    iCS_S_SpaceMemberCall: {
      SPACE_DOT: [137],
    },
    iCS_S_ProcedureOrArrayCall: {
      ALIAS: [138],
      AND: [138],
      ATTRIBUTE: [138],
      AS: [138],
      BEGIN: [138],
      BOOLEAN: [138],
      BYVAL: [138],
      BYREF: [138],
      BYTE: [138],
      CALL: [138],
      CASE: [138],
      CONST: [138],
      DECLARE: [138],
      DEFBOOL: [138],
      DEFBYTE: [138],
      DEFDATE: [138],
      DEFDBL: [138],
      DEFDEC: [138],
      DEFCUR: [138],
      DEFINT: [138],
      DEFLNG: [138],
      DEFOBJ: [138],
      DEFSNG: [138],
      DEFSTR: [138],
      DEFVAR: [138],
      DIM: [138],
      DO: [138],
      DOUBLE: [138],
      EACH: [138],
      ELSE: [138],
      ELSEIF: [138],
      END_ENUM: [138],
      END_FUNCTION: [138],
      END_IF: [138],
      END_PROPERTY: [138],
      END_SELECT: [138],
      END_SUB: [138],
      END_TYPE: [138],
      END_WITH: [138],
      END: [138],
      ENUM: [138],
      EQV: [138],
      ERASE: [138],
      EVENT: [138],
      EXIT_DO: [138],
      EXIT_FOR: [138],
      EXIT_FUNCTION: [138],
      EXIT_PROPERTY: [138],
      EXIT_SUB: [138],
      FALSE: [138],
      FRIEND: [138],
      FOR: [138],
      FUNCTION: [138],
      GET: [138],
      GLOBAL: [138],
      GOSUB: [138],
      GOTO: [138],
      IF: [138],
      IMPLEMENTS: [138],
      IN: [138],
      IS: [138],
      INTEGER: [138],
      LONG: [138],
      LOOP: [138],
      LEN: [138],
      LET: [138],
      LIB: [138],
      LIKE: [138],
      LSET: [138],
      MACRO_CONST: [138],
      MACRO_IF: [138],
      MACRO_ELSEIF: [138],
      MACRO_ELSE: [138],
      MACRO_END_IF: [138],
      MOD: [138],
      NEXT: [138],
      NEW: [138],
      NOT: [138],
      NOTHING: [138],
      NULL: [138],
      ON_ERROR: [138],
      ON_LOCAL_ERROR: [138],
      ON: [138],
      OPTIONAL: [138],
      OPTION_BASE: [138],
      OPTION_EXPLICIT: [138],
      OPTION_COMPARE: [138],
      OPTION_PRIVATE_MODULE: [138],
      OR: [138],
      PARAMARRAY: [138],
      PRESERVE: [138],
      PRIVATE: [138],
      PROPERTY_GET: [138],
      PROPERTY_LET: [138],
      PROPERTY_SET: [138],
      PTRSAFE: [138],
      PUBLIC: [138],
      RAISEEVENT: [138],
      REDIM: [138],
      RESET: [138],
      RESUME: [138],
      RETURN: [138],
      SELECT: [138],
      SET: [138],
      SINGLE: [138],
      STATIC: [138],
      STEP: [138],
      STOP: [138],
      STRING: [138],
      SUB: [138],
      THEN: [138],
      TO: [138],
      TRUE: [138],
      TYPEOF: [138],
      UNTIL: [138],
      VARIANT: [138],
      WEND: [138],
      WHILE: [138],
      WITH: [138],
      WITHEVENTS: [138],
      XOR: [138],
      IMP: [138],
      IDENTIFIER: [138],
    },
    iCS_S_VariableOrProcedureCall: {
      ALIAS: [139],
      AND: [139],
      ATTRIBUTE: [139],
      AS: [139],
      BEGIN: [139],
      BOOLEAN: [139],
      BYVAL: [139],
      BYREF: [139],
      BYTE: [139],
      CALL: [139],
      CASE: [139],
      CONST: [139],
      DECLARE: [139],
      DEFBOOL: [139],
      DEFBYTE: [139],
      DEFDATE: [139],
      DEFDBL: [139],
      DEFDEC: [139],
      DEFCUR: [139],
      DEFINT: [139],
      DEFLNG: [139],
      DEFOBJ: [139],
      DEFSNG: [139],
      DEFSTR: [139],
      DEFVAR: [139],
      DIM: [139],
      DO: [139],
      DOUBLE: [139],
      EACH: [139],
      ELSE: [139],
      ELSEIF: [139],
      END_ENUM: [139],
      END_FUNCTION: [139],
      END_IF: [139],
      END_PROPERTY: [139],
      END_SELECT: [139],
      END_SUB: [139],
      END_TYPE: [139],
      END_WITH: [139],
      END: [139],
      ENUM: [139],
      EQV: [139],
      ERASE: [139],
      EVENT: [139],
      EXIT_DO: [139],
      EXIT_FOR: [139],
      EXIT_FUNCTION: [139],
      EXIT_PROPERTY: [139],
      EXIT_SUB: [139],
      FALSE: [139],
      FRIEND: [139],
      FOR: [139],
      FUNCTION: [139],
      GET: [139],
      GLOBAL: [139],
      GOSUB: [139],
      GOTO: [139],
      IF: [139],
      IMPLEMENTS: [139],
      IN: [139],
      IS: [139],
      INTEGER: [139],
      LONG: [139],
      LOOP: [139],
      LEN: [139],
      LET: [139],
      LIB: [139],
      LIKE: [139],
      LSET: [139],
      MACRO_CONST: [139],
      MACRO_IF: [139],
      MACRO_ELSEIF: [139],
      MACRO_ELSE: [139],
      MACRO_END_IF: [139],
      MOD: [139],
      NEXT: [139],
      NEW: [139],
      NOT: [139],
      NOTHING: [139],
      NULL: [139],
      ON_ERROR: [139],
      ON_LOCAL_ERROR: [139],
      ON: [139],
      OPTIONAL: [139],
      OPTION_BASE: [139],
      OPTION_EXPLICIT: [139],
      OPTION_COMPARE: [139],
      OPTION_PRIVATE_MODULE: [139],
      OR: [139],
      PARAMARRAY: [139],
      PRESERVE: [139],
      PRIVATE: [139],
      PROPERTY_GET: [139],
      PROPERTY_LET: [139],
      PROPERTY_SET: [139],
      PTRSAFE: [139],
      PUBLIC: [139],
      RAISEEVENT: [139],
      REDIM: [139],
      RESET: [139],
      RESUME: [139],
      RETURN: [139],
      SELECT: [139],
      SET: [139],
      SINGLE: [139],
      STATIC: [139],
      STEP: [139],
      STOP: [139],
      STRING: [139],
      SUB: [139],
      THEN: [139],
      TO: [139],
      TRUE: [139],
      TYPEOF: [139],
      UNTIL: [139],
      VARIANT: [139],
      WEND: [139],
      WHILE: [139],
      WITH: [139],
      WITHEVENTS: [139],
      XOR: [139],
      IMP: [139],
      IDENTIFIER: [139],
    },
    dictionaryCallStmt: {
      '!': [140],
    },
    literal: {
      INTEGERLITERAL: [141],
      STRINGLITERAL: [142],
      NOTHING: [143],
      NULL: [144],
      TRUE: [145],
      FALSE: [146],
    },
    typeHint: {
      '&': [147],
      '%': [148],
      '#': [149],
      '!': [150],
      '@': [151],
      $: [152],
    },
    arg_group_def_67: {
      BYVAL: [153],
    },
    arg_group_66: {
      BYVAL: [154],
      BYREF: [156],
    },
    arg_group_def_68: {
      BYREF: [155],
    },
    arg_group_def_70: {
      LPAREN: [157],
    },
    arg: {
      OPTIONAL: [158],
      BYVAL: [158],
      BYREF: [158],
      PARAMARRAY: [158],
      ALIAS: [158],
      AND: [158],
      ATTRIBUTE: [158],
      AS: [158],
      BEGIN: [158],
      BOOLEAN: [158],
      BYTE: [158],
      CALL: [158],
      CASE: [158],
      CONST: [158],
      DECLARE: [158],
      DEFBOOL: [158],
      DEFBYTE: [158],
      DEFDATE: [158],
      DEFDBL: [158],
      DEFDEC: [158],
      DEFCUR: [158],
      DEFINT: [158],
      DEFLNG: [158],
      DEFOBJ: [158],
      DEFSNG: [158],
      DEFSTR: [158],
      DEFVAR: [158],
      DIM: [158],
      DO: [158],
      DOUBLE: [158],
      EACH: [158],
      ELSE: [158],
      ELSEIF: [158],
      END_ENUM: [158],
      END_FUNCTION: [158],
      END_IF: [158],
      END_PROPERTY: [158],
      END_SELECT: [158],
      END_SUB: [158],
      END_TYPE: [158],
      END_WITH: [158],
      END: [158],
      ENUM: [158],
      EQV: [158],
      ERASE: [158],
      EVENT: [158],
      EXIT_DO: [158],
      EXIT_FOR: [158],
      EXIT_FUNCTION: [158],
      EXIT_PROPERTY: [158],
      EXIT_SUB: [158],
      FALSE: [158],
      FRIEND: [158],
      FOR: [158],
      FUNCTION: [158],
      GET: [158],
      GLOBAL: [158],
      GOSUB: [158],
      GOTO: [158],
      IF: [158],
      IMPLEMENTS: [158],
      IN: [158],
      IS: [158],
      INTEGER: [158],
      LONG: [158],
      LOOP: [158],
      LEN: [158],
      LET: [158],
      LIB: [158],
      LIKE: [158],
      LSET: [158],
      MACRO_CONST: [158],
      MACRO_IF: [158],
      MACRO_ELSEIF: [158],
      MACRO_ELSE: [158],
      MACRO_END_IF: [158],
      MOD: [158],
      NEXT: [158],
      NEW: [158],
      NOT: [158],
      NOTHING: [158],
      NULL: [158],
      ON_ERROR: [158],
      ON_LOCAL_ERROR: [158],
      ON: [158],
      OPTION_BASE: [158],
      OPTION_EXPLICIT: [158],
      OPTION_COMPARE: [158],
      OPTION_PRIVATE_MODULE: [158],
      OR: [158],
      PRESERVE: [158],
      PRIVATE: [158],
      PROPERTY_GET: [158],
      PROPERTY_LET: [158],
      PROPERTY_SET: [158],
      PTRSAFE: [158],
      PUBLIC: [158],
      RAISEEVENT: [158],
      REDIM: [158],
      RESET: [158],
      RESUME: [158],
      RETURN: [158],
      SELECT: [158],
      SET: [158],
      SINGLE: [158],
      STATIC: [158],
      STEP: [158],
      STOP: [158],
      STRING: [158],
      SUB: [158],
      THEN: [158],
      TO: [158],
      TRUE: [158],
      TYPEOF: [158],
      UNTIL: [158],
      VARIANT: [158],
      WEND: [158],
      WHILE: [158],
      WITH: [158],
      WITHEVENTS: [158],
      XOR: [158],
      IMP: [158],
      IDENTIFIER: [158],
    },
    asTypeClause: {
      AS: [159],
    },
    type__group_def_72: {
      BOOLEAN: [160],
      BYTE: [160],
      DOUBLE: [160],
      INTEGER: [160],
      LONG: [160],
      SINGLE: [160],
      VARIANT: [160],
      STRING: [160],
    },
    type__group_71: {
      BOOLEAN: [161, 163],
      BYTE: [161, 163],
      DOUBLE: [161, 163],
      INTEGER: [161, 163],
      LONG: [161, 163],
      SINGLE: [161, 163],
      VARIANT: [161, 163],
      STRING: [161, 163],
      ALIAS: [163],
      AND: [163],
      ATTRIBUTE: [163],
      AS: [163],
      BEGIN: [163],
      BYVAL: [163],
      BYREF: [163],
      CALL: [163],
      CASE: [163],
      CONST: [163],
      DECLARE: [163],
      DEFBOOL: [163],
      DEFBYTE: [163],
      DEFDATE: [163],
      DEFDBL: [163],
      DEFDEC: [163],
      DEFCUR: [163],
      DEFINT: [163],
      DEFLNG: [163],
      DEFOBJ: [163],
      DEFSNG: [163],
      DEFSTR: [163],
      DEFVAR: [163],
      DIM: [163],
      DO: [163],
      EACH: [163],
      ELSE: [163],
      ELSEIF: [163],
      END_ENUM: [163],
      END_FUNCTION: [163],
      END_IF: [163],
      END_PROPERTY: [163],
      END_SELECT: [163],
      END_SUB: [163],
      END_TYPE: [163],
      END_WITH: [163],
      END: [163],
      ENUM: [163],
      EQV: [163],
      ERASE: [163],
      EVENT: [163],
      EXIT_DO: [163],
      EXIT_FOR: [163],
      EXIT_FUNCTION: [163],
      EXIT_PROPERTY: [163],
      EXIT_SUB: [163],
      FALSE: [163],
      FRIEND: [163],
      FOR: [163],
      FUNCTION: [163],
      GET: [163],
      GLOBAL: [163],
      GOSUB: [163],
      GOTO: [163],
      IF: [163],
      IMPLEMENTS: [163],
      IN: [163],
      IS: [163],
      LOOP: [163],
      LEN: [163],
      LET: [163],
      LIB: [163],
      LIKE: [163],
      LSET: [163],
      MACRO_CONST: [163],
      MACRO_IF: [163],
      MACRO_ELSEIF: [163],
      MACRO_ELSE: [163],
      MACRO_END_IF: [163],
      MOD: [163],
      NEXT: [163],
      NEW: [163],
      NOT: [163],
      NOTHING: [163],
      NULL: [163],
      ON_ERROR: [163],
      ON_LOCAL_ERROR: [163],
      ON: [163],
      OPTIONAL: [163],
      OPTION_BASE: [163],
      OPTION_EXPLICIT: [163],
      OPTION_COMPARE: [163],
      OPTION_PRIVATE_MODULE: [163],
      OR: [163],
      PARAMARRAY: [163],
      PRESERVE: [163],
      PRIVATE: [163],
      PROPERTY_GET: [163],
      PROPERTY_LET: [163],
      PROPERTY_SET: [163],
      PTRSAFE: [163],
      PUBLIC: [163],
      RAISEEVENT: [163],
      REDIM: [163],
      RESET: [163],
      RESUME: [163],
      RETURN: [163],
      SELECT: [163],
      SET: [163],
      STATIC: [163],
      STEP: [163],
      STOP: [163],
      SUB: [163],
      THEN: [163],
      TO: [163],
      TRUE: [163],
      TYPEOF: [163],
      UNTIL: [163],
      WEND: [163],
      WHILE: [163],
      WITH: [163],
      WITHEVENTS: [163],
      XOR: [163],
      IMP: [163],
      IDENTIFIER: [163],
    },
    type__group_def_73: {
      ALIAS: [162],
      AND: [162],
      ATTRIBUTE: [162],
      AS: [162],
      BEGIN: [162],
      BOOLEAN: [162],
      BYVAL: [162],
      BYREF: [162],
      BYTE: [162],
      CALL: [162],
      CASE: [162],
      CONST: [162],
      DECLARE: [162],
      DEFBOOL: [162],
      DEFBYTE: [162],
      DEFDATE: [162],
      DEFDBL: [162],
      DEFDEC: [162],
      DEFCUR: [162],
      DEFINT: [162],
      DEFLNG: [162],
      DEFOBJ: [162],
      DEFSNG: [162],
      DEFSTR: [162],
      DEFVAR: [162],
      DIM: [162],
      DO: [162],
      DOUBLE: [162],
      EACH: [162],
      ELSE: [162],
      ELSEIF: [162],
      END_ENUM: [162],
      END_FUNCTION: [162],
      END_IF: [162],
      END_PROPERTY: [162],
      END_SELECT: [162],
      END_SUB: [162],
      END_TYPE: [162],
      END_WITH: [162],
      END: [162],
      ENUM: [162],
      EQV: [162],
      ERASE: [162],
      EVENT: [162],
      EXIT_DO: [162],
      EXIT_FOR: [162],
      EXIT_FUNCTION: [162],
      EXIT_PROPERTY: [162],
      EXIT_SUB: [162],
      FALSE: [162],
      FRIEND: [162],
      FOR: [162],
      FUNCTION: [162],
      GET: [162],
      GLOBAL: [162],
      GOSUB: [162],
      GOTO: [162],
      IF: [162],
      IMPLEMENTS: [162],
      IN: [162],
      IS: [162],
      INTEGER: [162],
      LONG: [162],
      LOOP: [162],
      LEN: [162],
      LET: [162],
      LIB: [162],
      LIKE: [162],
      LSET: [162],
      MACRO_CONST: [162],
      MACRO_IF: [162],
      MACRO_ELSEIF: [162],
      MACRO_ELSE: [162],
      MACRO_END_IF: [162],
      MOD: [162],
      NEXT: [162],
      NEW: [162],
      NOT: [162],
      NOTHING: [162],
      NULL: [162],
      ON_ERROR: [162],
      ON_LOCAL_ERROR: [162],
      ON: [162],
      OPTIONAL: [162],
      OPTION_BASE: [162],
      OPTION_EXPLICIT: [162],
      OPTION_COMPARE: [162],
      OPTION_PRIVATE_MODULE: [162],
      OR: [162],
      PARAMARRAY: [162],
      PRESERVE: [162],
      PRIVATE: [162],
      PROPERTY_GET: [162],
      PROPERTY_LET: [162],
      PROPERTY_SET: [162],
      PTRSAFE: [162],
      PUBLIC: [162],
      RAISEEVENT: [162],
      REDIM: [162],
      RESET: [162],
      RESUME: [162],
      RETURN: [162],
      SELECT: [162],
      SET: [162],
      SINGLE: [162],
      STATIC: [162],
      STEP: [162],
      STOP: [162],
      STRING: [162],
      SUB: [162],
      THEN: [162],
      TO: [162],
      TRUE: [162],
      TYPEOF: [162],
      UNTIL: [162],
      VARIANT: [162],
      WEND: [162],
      WHILE: [162],
      WITH: [162],
      WITHEVENTS: [162],
      XOR: [162],
      IMP: [162],
      IDENTIFIER: [162],
    },
    type_: {
      BOOLEAN: [164],
      BYTE: [164],
      DOUBLE: [164],
      INTEGER: [164],
      LONG: [164],
      SINGLE: [164],
      VARIANT: [164],
      STRING: [164],
      ALIAS: [164],
      AND: [164],
      ATTRIBUTE: [164],
      AS: [164],
      BEGIN: [164],
      BYVAL: [164],
      BYREF: [164],
      CALL: [164],
      CASE: [164],
      CONST: [164],
      DECLARE: [164],
      DEFBOOL: [164],
      DEFBYTE: [164],
      DEFDATE: [164],
      DEFDBL: [164],
      DEFDEC: [164],
      DEFCUR: [164],
      DEFINT: [164],
      DEFLNG: [164],
      DEFOBJ: [164],
      DEFSNG: [164],
      DEFSTR: [164],
      DEFVAR: [164],
      DIM: [164],
      DO: [164],
      EACH: [164],
      ELSE: [164],
      ELSEIF: [164],
      END_ENUM: [164],
      END_FUNCTION: [164],
      END_IF: [164],
      END_PROPERTY: [164],
      END_SELECT: [164],
      END_SUB: [164],
      END_TYPE: [164],
      END_WITH: [164],
      END: [164],
      ENUM: [164],
      EQV: [164],
      ERASE: [164],
      EVENT: [164],
      EXIT_DO: [164],
      EXIT_FOR: [164],
      EXIT_FUNCTION: [164],
      EXIT_PROPERTY: [164],
      EXIT_SUB: [164],
      FALSE: [164],
      FRIEND: [164],
      FOR: [164],
      FUNCTION: [164],
      GET: [164],
      GLOBAL: [164],
      GOSUB: [164],
      GOTO: [164],
      IF: [164],
      IMPLEMENTS: [164],
      IN: [164],
      IS: [164],
      LOOP: [164],
      LEN: [164],
      LET: [164],
      LIB: [164],
      LIKE: [164],
      LSET: [164],
      MACRO_CONST: [164],
      MACRO_IF: [164],
      MACRO_ELSEIF: [164],
      MACRO_ELSE: [164],
      MACRO_END_IF: [164],
      MOD: [164],
      NEXT: [164],
      NEW: [164],
      NOT: [164],
      NOTHING: [164],
      NULL: [164],
      ON_ERROR: [164],
      ON_LOCAL_ERROR: [164],
      ON: [164],
      OPTIONAL: [164],
      OPTION_BASE: [164],
      OPTION_EXPLICIT: [164],
      OPTION_COMPARE: [164],
      OPTION_PRIVATE_MODULE: [164],
      OR: [164],
      PARAMARRAY: [164],
      PRESERVE: [164],
      PRIVATE: [164],
      PROPERTY_GET: [164],
      PROPERTY_LET: [164],
      PROPERTY_SET: [164],
      PTRSAFE: [164],
      PUBLIC: [164],
      RAISEEVENT: [164],
      REDIM: [164],
      RESET: [164],
      RESUME: [164],
      RETURN: [164],
      SELECT: [164],
      SET: [164],
      STATIC: [164],
      STEP: [164],
      STOP: [164],
      SUB: [164],
      THEN: [164],
      TO: [164],
      TRUE: [164],
      TYPEOF: [164],
      UNTIL: [164],
      WEND: [164],
      WHILE: [164],
      WITH: [164],
      WITHEVENTS: [164],
      XOR: [164],
      IMP: [164],
      IDENTIFIER: [164],
    },
    complexType_group_def_77: {
      '.': [165],
    },
    complexType_group_76: {
      '.': [166],
      '!': [168],
    },
    complexType_group_def_78: {
      '!': [167],
    },
    complexType_group_def_79: {
      '.': [169],
      '!': [169],
    },
    complexType: {
      ALIAS: [170],
      AND: [170],
      ATTRIBUTE: [170],
      AS: [170],
      BEGIN: [170],
      BOOLEAN: [170],
      BYVAL: [170],
      BYREF: [170],
      BYTE: [170],
      CALL: [170],
      CASE: [170],
      CONST: [170],
      DECLARE: [170],
      DEFBOOL: [170],
      DEFBYTE: [170],
      DEFDATE: [170],
      DEFDBL: [170],
      DEFDEC: [170],
      DEFCUR: [170],
      DEFINT: [170],
      DEFLNG: [170],
      DEFOBJ: [170],
      DEFSNG: [170],
      DEFSTR: [170],
      DEFVAR: [170],
      DIM: [170],
      DO: [170],
      DOUBLE: [170],
      EACH: [170],
      ELSE: [170],
      ELSEIF: [170],
      END_ENUM: [170],
      END_FUNCTION: [170],
      END_IF: [170],
      END_PROPERTY: [170],
      END_SELECT: [170],
      END_SUB: [170],
      END_TYPE: [170],
      END_WITH: [170],
      END: [170],
      ENUM: [170],
      EQV: [170],
      ERASE: [170],
      EVENT: [170],
      EXIT_DO: [170],
      EXIT_FOR: [170],
      EXIT_FUNCTION: [170],
      EXIT_PROPERTY: [170],
      EXIT_SUB: [170],
      FALSE: [170],
      FRIEND: [170],
      FOR: [170],
      FUNCTION: [170],
      GET: [170],
      GLOBAL: [170],
      GOSUB: [170],
      GOTO: [170],
      IF: [170],
      IMPLEMENTS: [170],
      IN: [170],
      IS: [170],
      INTEGER: [170],
      LONG: [170],
      LOOP: [170],
      LEN: [170],
      LET: [170],
      LIB: [170],
      LIKE: [170],
      LSET: [170],
      MACRO_CONST: [170],
      MACRO_IF: [170],
      MACRO_ELSEIF: [170],
      MACRO_ELSE: [170],
      MACRO_END_IF: [170],
      MOD: [170],
      NEXT: [170],
      NEW: [170],
      NOT: [170],
      NOTHING: [170],
      NULL: [170],
      ON_ERROR: [170],
      ON_LOCAL_ERROR: [170],
      ON: [170],
      OPTIONAL: [170],
      OPTION_BASE: [170],
      OPTION_EXPLICIT: [170],
      OPTION_COMPARE: [170],
      OPTION_PRIVATE_MODULE: [170],
      OR: [170],
      PARAMARRAY: [170],
      PRESERVE: [170],
      PRIVATE: [170],
      PROPERTY_GET: [170],
      PROPERTY_LET: [170],
      PROPERTY_SET: [170],
      PTRSAFE: [170],
      PUBLIC: [170],
      RAISEEVENT: [170],
      REDIM: [170],
      RESET: [170],
      RESUME: [170],
      RETURN: [170],
      SELECT: [170],
      SET: [170],
      SINGLE: [170],
      STATIC: [170],
      STEP: [170],
      STOP: [170],
      STRING: [170],
      SUB: [170],
      THEN: [170],
      TO: [170],
      TRUE: [170],
      TYPEOF: [170],
      UNTIL: [170],
      VARIANT: [170],
      WEND: [170],
      WHILE: [170],
      WITH: [170],
      WITHEVENTS: [170],
      XOR: [170],
      IMP: [170],
      IDENTIFIER: [170],
    },
    baseType: {
      BOOLEAN: [171],
      BYTE: [172],
      DOUBLE: [173],
      INTEGER: [174],
      LONG: [175],
      SINGLE: [176],
      VARIANT: [177],
      STRING: [178],
    },
    fieldLength: {
      MULT: [179, 307],
    },
    ambiguousIdentifier: {
      ALIAS: [180],
      AND: [181],
      ATTRIBUTE: [182],
      AS: [183],
      BEGIN: [184],
      BOOLEAN: [185],
      BYVAL: [186],
      BYREF: [187],
      BYTE: [188],
      CALL: [189],
      CASE: [190],
      CONST: [191],
      DECLARE: [192],
      DEFBOOL: [193],
      DEFBYTE: [194],
      DEFDATE: [195],
      DEFDBL: [196],
      DEFDEC: [197],
      DEFCUR: [198],
      DEFINT: [199],
      DEFLNG: [200],
      DEFOBJ: [201],
      DEFSNG: [202],
      DEFSTR: [203],
      DEFVAR: [204],
      DIM: [205],
      DO: [206],
      DOUBLE: [207],
      EACH: [208],
      ELSE: [209],
      ELSEIF: [210],
      END_ENUM: [211],
      END_FUNCTION: [212],
      END_IF: [213],
      END_PROPERTY: [214],
      END_SELECT: [215],
      END_SUB: [216],
      END_TYPE: [217],
      END_WITH: [218],
      END: [219],
      ENUM: [220],
      EQV: [221],
      ERASE: [222],
      EVENT: [223],
      EXIT_DO: [224],
      EXIT_FOR: [225],
      EXIT_FUNCTION: [226],
      EXIT_PROPERTY: [227],
      EXIT_SUB: [228],
      FALSE: [229],
      FRIEND: [230],
      FOR: [231],
      FUNCTION: [232],
      GET: [233],
      GLOBAL: [234],
      GOSUB: [235],
      GOTO: [236],
      IF: [237],
      IMPLEMENTS: [238],
      IN: [239],
      IS: [240],
      INTEGER: [241],
      LONG: [242],
      LOOP: [243],
      LEN: [244],
      LET: [245],
      LIB: [246],
      LIKE: [247],
      LSET: [248],
      MACRO_CONST: [249],
      MACRO_IF: [250],
      MACRO_ELSEIF: [251],
      MACRO_ELSE: [252],
      MACRO_END_IF: [253],
      MOD: [254],
      NEXT: [255],
      NEW: [256],
      NOT: [257],
      NOTHING: [258],
      NULL: [259],
      ON_ERROR: [260],
      ON_LOCAL_ERROR: [261],
      ON: [262],
      OPTIONAL: [263],
      OPTION_BASE: [264],
      OPTION_EXPLICIT: [265],
      OPTION_COMPARE: [266],
      OPTION_PRIVATE_MODULE: [267],
      OR: [268],
      PARAMARRAY: [269],
      PRESERVE: [270],
      PRIVATE: [271],
      PROPERTY_GET: [272],
      PROPERTY_LET: [273],
      PROPERTY_SET: [274],
      PTRSAFE: [275],
      PUBLIC: [276],
      RAISEEVENT: [277],
      REDIM: [278],
      RESET: [279],
      RESUME: [280],
      RETURN: [281],
      SELECT: [282],
      SET: [283],
      SINGLE: [284],
      STATIC: [285],
      STEP: [286],
      STOP: [287],
      STRING: [288],
      SUB: [289],
      THEN: [290],
      TO: [291],
      TRUE: [292],
      TYPEOF: [293],
      UNTIL: [294],
      VARIANT: [295],
      WEND: [296],
      WHILE: [297],
      WITH: [298],
      WITHEVENTS: [299],
      XOR: [300],
      IMP: [301],
      IDENTIFIER: [302],
    },
    letStmt_group_def_18: {
      EQ: [303],
    },
    setStmt: {
      SET: [304],
    },
    argDefaultValue: {
      EQ: [305],
    },
    baseType_group_def_81: {
      MULT: [306],
    },
    '(valueStmt)1_': {
      IS: [308, 338],
      LIKE: [310, 338],
      GEQ: [311, 338],
      LEQ: [312, 338],
      GT: [313, 338],
      LT: [314, 338],
      NEQ: [315, 338],
      EQ: [316, 338],
      ',': [338],
      NEWLINE: [338],
      COMMENT: [338],
      REMCOMMENT: [338],
      COLON: [338],
      ALIAS: [338],
      AND: [338],
      ATTRIBUTE: [338],
      AS: [338],
      BEGIN: [338],
      BOOLEAN: [338],
      BYVAL: [338],
      BYREF: [338],
      BYTE: [338],
      CALL: [338],
      CASE: [338],
      CONST: [338],
      DECLARE: [338],
      DEFBOOL: [338],
      DEFBYTE: [338],
      DEFDATE: [338],
      DEFDBL: [338],
      DEFDEC: [338],
      DEFCUR: [338],
      DEFINT: [338],
      DEFLNG: [338],
      DEFOBJ: [338],
      DEFSNG: [338],
      DEFSTR: [338],
      DEFVAR: [338],
      DIM: [338],
      DO: [338],
      DOUBLE: [338],
      EACH: [338],
      ELSE: [338],
      ELSEIF: [338],
      END_ENUM: [338],
      END_FUNCTION: [338],
      END_IF: [338],
      END_PROPERTY: [338],
      END_SELECT: [338],
      END_SUB: [338],
      END_TYPE: [338],
      END_WITH: [338],
      END: [338],
      ENUM: [338],
      EQV: [338],
      ERASE: [338],
      EVENT: [338],
      EXIT_DO: [338],
      EXIT_FOR: [338],
      EXIT_FUNCTION: [338],
      EXIT_PROPERTY: [338],
      EXIT_SUB: [338],
      FALSE: [338],
      FRIEND: [338],
      FOR: [338],
      FUNCTION: [338],
      GET: [338],
      GLOBAL: [338],
      GOSUB: [338],
      GOTO: [338],
      IF: [338],
      IMPLEMENTS: [338],
      IN: [338],
      INTEGER: [338],
      LONG: [338],
      LOOP: [338],
      LEN: [338],
      LET: [338],
      LIB: [338],
      LSET: [338],
      MACRO_CONST: [338],
      MACRO_IF: [338],
      MACRO_ELSEIF: [338],
      MACRO_ELSE: [338],
      MACRO_END_IF: [338],
      MOD: [338],
      NEXT: [338],
      NEW: [338],
      NOT: [338],
      NOTHING: [338],
      NULL: [338],
      ON_ERROR: [338],
      ON_LOCAL_ERROR: [338],
      ON: [338],
      OPTIONAL: [338],
      OPTION_BASE: [338],
      OPTION_EXPLICIT: [338],
      OPTION_COMPARE: [338],
      OPTION_PRIVATE_MODULE: [338],
      OR: [338],
      PARAMARRAY: [338],
      PRESERVE: [338],
      PRIVATE: [338],
      PROPERTY_GET: [338],
      PROPERTY_LET: [338],
      PROPERTY_SET: [338],
      PTRSAFE: [338],
      PUBLIC: [338],
      RAISEEVENT: [338],
      REDIM: [338],
      RESET: [338],
      RESUME: [338],
      RETURN: [338],
      SELECT: [338],
      SET: [338],
      SINGLE: [338],
      STATIC: [338],
      STEP: [338],
      STOP: [338],
      STRING: [338],
      SUB: [338],
      THEN: [338],
      TO: [338],
      TRUE: [338],
      TYPEOF: [338],
      UNTIL: [338],
      VARIANT: [338],
      WEND: [338],
      WHILE: [338],
      WITH: [338],
      WITHEVENTS: [338],
      XOR: [338],
      IMP: [338],
      IDENTIFIER: [338],
      SPACE_DOT: [338],
      RPAREN: [338],
      '!': [338],
      LPAREN: [338],
      POW: [338],
      DIV: [338],
      IDIV: [338],
      MULT: [338],
      PLUS: [338],
      MINUS: [338],
      AMPERSAND: [338],
      $EOF: [338],
    },
    valueStmt: {
      INTEGERLITERAL: [309],
      STRINGLITERAL: [309],
      NOTHING: [309],
      NULL: [309],
      TRUE: [309],
      FALSE: [309],
      SPACE_DOT: [309],
      ALIAS: [309],
      AND: [309],
      ATTRIBUTE: [309],
      AS: [309],
      BEGIN: [309],
      BOOLEAN: [309],
      BYVAL: [309],
      BYREF: [309],
      BYTE: [309],
      CALL: [309],
      CASE: [309],
      CONST: [309],
      DECLARE: [309],
      DEFBOOL: [309],
      DEFBYTE: [309],
      DEFDATE: [309],
      DEFDBL: [309],
      DEFDEC: [309],
      DEFCUR: [309],
      DEFINT: [309],
      DEFLNG: [309],
      DEFOBJ: [309],
      DEFSNG: [309],
      DEFSTR: [309],
      DEFVAR: [309],
      DIM: [309],
      DO: [309],
      DOUBLE: [309],
      EACH: [309],
      ELSE: [309],
      ELSEIF: [309],
      END_ENUM: [309],
      END_FUNCTION: [309],
      END_IF: [309],
      END_PROPERTY: [309],
      END_SELECT: [309],
      END_SUB: [309],
      END_TYPE: [309],
      END_WITH: [309],
      END: [309],
      ENUM: [309],
      EQV: [309],
      ERASE: [309],
      EVENT: [309],
      EXIT_DO: [309],
      EXIT_FOR: [309],
      EXIT_FUNCTION: [309],
      EXIT_PROPERTY: [309],
      EXIT_SUB: [309],
      FRIEND: [309],
      FOR: [309],
      FUNCTION: [309],
      GET: [309],
      GLOBAL: [309],
      GOSUB: [309],
      GOTO: [309],
      IF: [309],
      IMPLEMENTS: [309],
      IN: [309],
      IS: [309],
      INTEGER: [309],
      LONG: [309],
      LOOP: [309],
      LEN: [309],
      LET: [309],
      LIB: [309],
      LIKE: [309],
      LSET: [309],
      MACRO_CONST: [309],
      MACRO_IF: [309],
      MACRO_ELSEIF: [309],
      MACRO_ELSE: [309],
      MACRO_END_IF: [309],
      MOD: [309],
      NEXT: [309],
      NEW: [309],
      NOT: [309],
      ON_ERROR: [309],
      ON_LOCAL_ERROR: [309],
      ON: [309],
      OPTIONAL: [309],
      OPTION_BASE: [309],
      OPTION_EXPLICIT: [309],
      OPTION_COMPARE: [309],
      OPTION_PRIVATE_MODULE: [309],
      OR: [309],
      PARAMARRAY: [309],
      PRESERVE: [309],
      PRIVATE: [309],
      PROPERTY_GET: [309],
      PROPERTY_LET: [309],
      PROPERTY_SET: [309],
      PTRSAFE: [309],
      PUBLIC: [309],
      RAISEEVENT: [309],
      REDIM: [309],
      RESET: [309],
      RESUME: [309],
      RETURN: [309],
      SELECT: [309],
      SET: [309],
      SINGLE: [309],
      STATIC: [309],
      STEP: [309],
      STOP: [309],
      STRING: [309],
      SUB: [309],
      THEN: [309],
      TO: [309],
      TYPEOF: [309],
      UNTIL: [309],
      VARIANT: [309],
      WEND: [309],
      WHILE: [309],
      WITH: [309],
      WITHEVENTS: [309],
      XOR: [309],
      IMP: [309],
      IDENTIFIER: [309],
      LPAREN: [309],
      MINUS: [309],
      PLUS: [309],
    },
    '(valueStmt_p_2)1_': {
      IMP: [317, 339],
      EQV: [319, 339],
      XOR: [320, 339],
      OR: [321, 339],
      AND: [322, 339],
      IS: [339],
      LIKE: [339],
      GEQ: [339],
      LEQ: [339],
      GT: [339],
      LT: [339],
      NEQ: [339],
      EQ: [339],
      ',': [339],
      NEWLINE: [339],
      COMMENT: [339],
      REMCOMMENT: [339],
      COLON: [339],
      ALIAS: [339],
      ATTRIBUTE: [339],
      AS: [339],
      BEGIN: [339],
      BOOLEAN: [339],
      BYVAL: [339],
      BYREF: [339],
      BYTE: [339],
      CALL: [339],
      CASE: [339],
      CONST: [339],
      DECLARE: [339],
      DEFBOOL: [339],
      DEFBYTE: [339],
      DEFDATE: [339],
      DEFDBL: [339],
      DEFDEC: [339],
      DEFCUR: [339],
      DEFINT: [339],
      DEFLNG: [339],
      DEFOBJ: [339],
      DEFSNG: [339],
      DEFSTR: [339],
      DEFVAR: [339],
      DIM: [339],
      DO: [339],
      DOUBLE: [339],
      EACH: [339],
      ELSE: [339],
      ELSEIF: [339],
      END_ENUM: [339],
      END_FUNCTION: [339],
      END_IF: [339],
      END_PROPERTY: [339],
      END_SELECT: [339],
      END_SUB: [339],
      END_TYPE: [339],
      END_WITH: [339],
      END: [339],
      ENUM: [339],
      ERASE: [339],
      EVENT: [339],
      EXIT_DO: [339],
      EXIT_FOR: [339],
      EXIT_FUNCTION: [339],
      EXIT_PROPERTY: [339],
      EXIT_SUB: [339],
      FALSE: [339],
      FRIEND: [339],
      FOR: [339],
      FUNCTION: [339],
      GET: [339],
      GLOBAL: [339],
      GOSUB: [339],
      GOTO: [339],
      IF: [339],
      IMPLEMENTS: [339],
      IN: [339],
      INTEGER: [339],
      LONG: [339],
      LOOP: [339],
      LEN: [339],
      LET: [339],
      LIB: [339],
      LSET: [339],
      MACRO_CONST: [339],
      MACRO_IF: [339],
      MACRO_ELSEIF: [339],
      MACRO_ELSE: [339],
      MACRO_END_IF: [339],
      MOD: [339],
      NEXT: [339],
      NEW: [339],
      NOT: [339],
      NOTHING: [339],
      NULL: [339],
      ON_ERROR: [339],
      ON_LOCAL_ERROR: [339],
      ON: [339],
      OPTIONAL: [339],
      OPTION_BASE: [339],
      OPTION_EXPLICIT: [339],
      OPTION_COMPARE: [339],
      OPTION_PRIVATE_MODULE: [339],
      PARAMARRAY: [339],
      PRESERVE: [339],
      PRIVATE: [339],
      PROPERTY_GET: [339],
      PROPERTY_LET: [339],
      PROPERTY_SET: [339],
      PTRSAFE: [339],
      PUBLIC: [339],
      RAISEEVENT: [339],
      REDIM: [339],
      RESET: [339],
      RESUME: [339],
      RETURN: [339],
      SELECT: [339],
      SET: [339],
      SINGLE: [339],
      STATIC: [339],
      STEP: [339],
      STOP: [339],
      STRING: [339],
      SUB: [339],
      THEN: [339],
      TO: [339],
      TRUE: [339],
      TYPEOF: [339],
      UNTIL: [339],
      VARIANT: [339],
      WEND: [339],
      WHILE: [339],
      WITH: [339],
      WITHEVENTS: [339],
      IDENTIFIER: [339],
      SPACE_DOT: [339],
      RPAREN: [339],
      '!': [339],
      LPAREN: [339],
      POW: [339],
      DIV: [339],
      IDIV: [339],
      MULT: [339],
      PLUS: [339],
      MINUS: [339],
      AMPERSAND: [339],
      $EOF: [339],
    },
    valueStmt_p_2: {
      INTEGERLITERAL: [318],
      STRINGLITERAL: [318],
      NOTHING: [318],
      NULL: [318],
      TRUE: [318],
      FALSE: [318],
      SPACE_DOT: [318],
      ALIAS: [318],
      AND: [318],
      ATTRIBUTE: [318],
      AS: [318],
      BEGIN: [318],
      BOOLEAN: [318],
      BYVAL: [318],
      BYREF: [318],
      BYTE: [318],
      CALL: [318],
      CASE: [318],
      CONST: [318],
      DECLARE: [318],
      DEFBOOL: [318],
      DEFBYTE: [318],
      DEFDATE: [318],
      DEFDBL: [318],
      DEFDEC: [318],
      DEFCUR: [318],
      DEFINT: [318],
      DEFLNG: [318],
      DEFOBJ: [318],
      DEFSNG: [318],
      DEFSTR: [318],
      DEFVAR: [318],
      DIM: [318],
      DO: [318],
      DOUBLE: [318],
      EACH: [318],
      ELSE: [318],
      ELSEIF: [318],
      END_ENUM: [318],
      END_FUNCTION: [318],
      END_IF: [318],
      END_PROPERTY: [318],
      END_SELECT: [318],
      END_SUB: [318],
      END_TYPE: [318],
      END_WITH: [318],
      END: [318],
      ENUM: [318],
      EQV: [318],
      ERASE: [318],
      EVENT: [318],
      EXIT_DO: [318],
      EXIT_FOR: [318],
      EXIT_FUNCTION: [318],
      EXIT_PROPERTY: [318],
      EXIT_SUB: [318],
      FRIEND: [318],
      FOR: [318],
      FUNCTION: [318],
      GET: [318],
      GLOBAL: [318],
      GOSUB: [318],
      GOTO: [318],
      IF: [318],
      IMPLEMENTS: [318],
      IN: [318],
      IS: [318],
      INTEGER: [318],
      LONG: [318],
      LOOP: [318],
      LEN: [318],
      LET: [318],
      LIB: [318],
      LIKE: [318],
      LSET: [318],
      MACRO_CONST: [318],
      MACRO_IF: [318],
      MACRO_ELSEIF: [318],
      MACRO_ELSE: [318],
      MACRO_END_IF: [318],
      MOD: [318],
      NEXT: [318],
      NEW: [318],
      NOT: [318],
      ON_ERROR: [318],
      ON_LOCAL_ERROR: [318],
      ON: [318],
      OPTIONAL: [318],
      OPTION_BASE: [318],
      OPTION_EXPLICIT: [318],
      OPTION_COMPARE: [318],
      OPTION_PRIVATE_MODULE: [318],
      OR: [318],
      PARAMARRAY: [318],
      PRESERVE: [318],
      PRIVATE: [318],
      PROPERTY_GET: [318],
      PROPERTY_LET: [318],
      PROPERTY_SET: [318],
      PTRSAFE: [318],
      PUBLIC: [318],
      RAISEEVENT: [318],
      REDIM: [318],
      RESET: [318],
      RESUME: [318],
      RETURN: [318],
      SELECT: [318],
      SET: [318],
      SINGLE: [318],
      STATIC: [318],
      STEP: [318],
      STOP: [318],
      STRING: [318],
      SUB: [318],
      THEN: [318],
      TO: [318],
      TYPEOF: [318],
      UNTIL: [318],
      VARIANT: [318],
      WEND: [318],
      WHILE: [318],
      WITH: [318],
      WITHEVENTS: [318],
      XOR: [318],
      IMP: [318],
      IDENTIFIER: [318],
      LPAREN: [318],
      MINUS: [318],
      PLUS: [318],
    },
    '(valueStmt_p_3)1_': {
      PLUS: [323, 340],
      MINUS: [325, 340],
      AMPERSAND: [326, 340],
      IMP: [340],
      EQV: [340],
      XOR: [340],
      OR: [340],
      AND: [340],
      IS: [340],
      LIKE: [340],
      GEQ: [340],
      LEQ: [340],
      GT: [340],
      LT: [340],
      NEQ: [340],
      EQ: [340],
      ',': [340],
      NEWLINE: [340],
      COMMENT: [340],
      REMCOMMENT: [340],
      COLON: [340],
      ALIAS: [340],
      ATTRIBUTE: [340],
      AS: [340],
      BEGIN: [340],
      BOOLEAN: [340],
      BYVAL: [340],
      BYREF: [340],
      BYTE: [340],
      CALL: [340],
      CASE: [340],
      CONST: [340],
      DECLARE: [340],
      DEFBOOL: [340],
      DEFBYTE: [340],
      DEFDATE: [340],
      DEFDBL: [340],
      DEFDEC: [340],
      DEFCUR: [340],
      DEFINT: [340],
      DEFLNG: [340],
      DEFOBJ: [340],
      DEFSNG: [340],
      DEFSTR: [340],
      DEFVAR: [340],
      DIM: [340],
      DO: [340],
      DOUBLE: [340],
      EACH: [340],
      ELSE: [340],
      ELSEIF: [340],
      END_ENUM: [340],
      END_FUNCTION: [340],
      END_IF: [340],
      END_PROPERTY: [340],
      END_SELECT: [340],
      END_SUB: [340],
      END_TYPE: [340],
      END_WITH: [340],
      END: [340],
      ENUM: [340],
      ERASE: [340],
      EVENT: [340],
      EXIT_DO: [340],
      EXIT_FOR: [340],
      EXIT_FUNCTION: [340],
      EXIT_PROPERTY: [340],
      EXIT_SUB: [340],
      FALSE: [340],
      FRIEND: [340],
      FOR: [340],
      FUNCTION: [340],
      GET: [340],
      GLOBAL: [340],
      GOSUB: [340],
      GOTO: [340],
      IF: [340],
      IMPLEMENTS: [340],
      IN: [340],
      INTEGER: [340],
      LONG: [340],
      LOOP: [340],
      LEN: [340],
      LET: [340],
      LIB: [340],
      LSET: [340],
      MACRO_CONST: [340],
      MACRO_IF: [340],
      MACRO_ELSEIF: [340],
      MACRO_ELSE: [340],
      MACRO_END_IF: [340],
      MOD: [340],
      NEXT: [340],
      NEW: [340],
      NOT: [340],
      NOTHING: [340],
      NULL: [340],
      ON_ERROR: [340],
      ON_LOCAL_ERROR: [340],
      ON: [340],
      OPTIONAL: [340],
      OPTION_BASE: [340],
      OPTION_EXPLICIT: [340],
      OPTION_COMPARE: [340],
      OPTION_PRIVATE_MODULE: [340],
      PARAMARRAY: [340],
      PRESERVE: [340],
      PRIVATE: [340],
      PROPERTY_GET: [340],
      PROPERTY_LET: [340],
      PROPERTY_SET: [340],
      PTRSAFE: [340],
      PUBLIC: [340],
      RAISEEVENT: [340],
      REDIM: [340],
      RESET: [340],
      RESUME: [340],
      RETURN: [340],
      SELECT: [340],
      SET: [340],
      SINGLE: [340],
      STATIC: [340],
      STEP: [340],
      STOP: [340],
      STRING: [340],
      SUB: [340],
      THEN: [340],
      TO: [340],
      TRUE: [340],
      TYPEOF: [340],
      UNTIL: [340],
      VARIANT: [340],
      WEND: [340],
      WHILE: [340],
      WITH: [340],
      WITHEVENTS: [340],
      IDENTIFIER: [340],
      SPACE_DOT: [340],
      RPAREN: [340],
      '!': [340],
      LPAREN: [340],
      POW: [340],
      DIV: [340],
      IDIV: [340],
      MULT: [340],
      $EOF: [340],
    },
    valueStmt_p_3: {
      INTEGERLITERAL: [324],
      STRINGLITERAL: [324],
      NOTHING: [324],
      NULL: [324],
      TRUE: [324],
      FALSE: [324],
      SPACE_DOT: [324],
      ALIAS: [324],
      AND: [324],
      ATTRIBUTE: [324],
      AS: [324],
      BEGIN: [324],
      BOOLEAN: [324],
      BYVAL: [324],
      BYREF: [324],
      BYTE: [324],
      CALL: [324],
      CASE: [324],
      CONST: [324],
      DECLARE: [324],
      DEFBOOL: [324],
      DEFBYTE: [324],
      DEFDATE: [324],
      DEFDBL: [324],
      DEFDEC: [324],
      DEFCUR: [324],
      DEFINT: [324],
      DEFLNG: [324],
      DEFOBJ: [324],
      DEFSNG: [324],
      DEFSTR: [324],
      DEFVAR: [324],
      DIM: [324],
      DO: [324],
      DOUBLE: [324],
      EACH: [324],
      ELSE: [324],
      ELSEIF: [324],
      END_ENUM: [324],
      END_FUNCTION: [324],
      END_IF: [324],
      END_PROPERTY: [324],
      END_SELECT: [324],
      END_SUB: [324],
      END_TYPE: [324],
      END_WITH: [324],
      END: [324],
      ENUM: [324],
      EQV: [324],
      ERASE: [324],
      EVENT: [324],
      EXIT_DO: [324],
      EXIT_FOR: [324],
      EXIT_FUNCTION: [324],
      EXIT_PROPERTY: [324],
      EXIT_SUB: [324],
      FRIEND: [324],
      FOR: [324],
      FUNCTION: [324],
      GET: [324],
      GLOBAL: [324],
      GOSUB: [324],
      GOTO: [324],
      IF: [324],
      IMPLEMENTS: [324],
      IN: [324],
      IS: [324],
      INTEGER: [324],
      LONG: [324],
      LOOP: [324],
      LEN: [324],
      LET: [324],
      LIB: [324],
      LIKE: [324],
      LSET: [324],
      MACRO_CONST: [324],
      MACRO_IF: [324],
      MACRO_ELSEIF: [324],
      MACRO_ELSE: [324],
      MACRO_END_IF: [324],
      MOD: [324],
      NEXT: [324],
      NEW: [324],
      NOT: [324],
      ON_ERROR: [324],
      ON_LOCAL_ERROR: [324],
      ON: [324],
      OPTIONAL: [324],
      OPTION_BASE: [324],
      OPTION_EXPLICIT: [324],
      OPTION_COMPARE: [324],
      OPTION_PRIVATE_MODULE: [324],
      OR: [324],
      PARAMARRAY: [324],
      PRESERVE: [324],
      PRIVATE: [324],
      PROPERTY_GET: [324],
      PROPERTY_LET: [324],
      PROPERTY_SET: [324],
      PTRSAFE: [324],
      PUBLIC: [324],
      RAISEEVENT: [324],
      REDIM: [324],
      RESET: [324],
      RESUME: [324],
      RETURN: [324],
      SELECT: [324],
      SET: [324],
      SINGLE: [324],
      STATIC: [324],
      STEP: [324],
      STOP: [324],
      STRING: [324],
      SUB: [324],
      THEN: [324],
      TO: [324],
      TYPEOF: [324],
      UNTIL: [324],
      VARIANT: [324],
      WEND: [324],
      WHILE: [324],
      WITH: [324],
      WITHEVENTS: [324],
      XOR: [324],
      IMP: [324],
      IDENTIFIER: [324],
      LPAREN: [324],
      MINUS: [324],
      PLUS: [324],
    },
    '(valueStmt_p_4)1_': {
      DIV: [327, 341],
      IDIV: [329, 341],
      MULT: [330, 341],
      MOD: [331, 341],
      PLUS: [341],
      MINUS: [341],
      AMPERSAND: [341],
      IMP: [341],
      EQV: [341],
      XOR: [341],
      OR: [341],
      AND: [341],
      IS: [341],
      LIKE: [341],
      GEQ: [341],
      LEQ: [341],
      GT: [341],
      LT: [341],
      NEQ: [341],
      EQ: [341],
      ',': [341],
      NEWLINE: [341],
      COMMENT: [341],
      REMCOMMENT: [341],
      COLON: [341],
      ALIAS: [341],
      ATTRIBUTE: [341],
      AS: [341],
      BEGIN: [341],
      BOOLEAN: [341],
      BYVAL: [341],
      BYREF: [341],
      BYTE: [341],
      CALL: [341],
      CASE: [341],
      CONST: [341],
      DECLARE: [341],
      DEFBOOL: [341],
      DEFBYTE: [341],
      DEFDATE: [341],
      DEFDBL: [341],
      DEFDEC: [341],
      DEFCUR: [341],
      DEFINT: [341],
      DEFLNG: [341],
      DEFOBJ: [341],
      DEFSNG: [341],
      DEFSTR: [341],
      DEFVAR: [341],
      DIM: [341],
      DO: [341],
      DOUBLE: [341],
      EACH: [341],
      ELSE: [341],
      ELSEIF: [341],
      END_ENUM: [341],
      END_FUNCTION: [341],
      END_IF: [341],
      END_PROPERTY: [341],
      END_SELECT: [341],
      END_SUB: [341],
      END_TYPE: [341],
      END_WITH: [341],
      END: [341],
      ENUM: [341],
      ERASE: [341],
      EVENT: [341],
      EXIT_DO: [341],
      EXIT_FOR: [341],
      EXIT_FUNCTION: [341],
      EXIT_PROPERTY: [341],
      EXIT_SUB: [341],
      FALSE: [341],
      FRIEND: [341],
      FOR: [341],
      FUNCTION: [341],
      GET: [341],
      GLOBAL: [341],
      GOSUB: [341],
      GOTO: [341],
      IF: [341],
      IMPLEMENTS: [341],
      IN: [341],
      INTEGER: [341],
      LONG: [341],
      LOOP: [341],
      LEN: [341],
      LET: [341],
      LIB: [341],
      LSET: [341],
      MACRO_CONST: [341],
      MACRO_IF: [341],
      MACRO_ELSEIF: [341],
      MACRO_ELSE: [341],
      MACRO_END_IF: [341],
      NEXT: [341],
      NEW: [341],
      NOT: [341],
      NOTHING: [341],
      NULL: [341],
      ON_ERROR: [341],
      ON_LOCAL_ERROR: [341],
      ON: [341],
      OPTIONAL: [341],
      OPTION_BASE: [341],
      OPTION_EXPLICIT: [341],
      OPTION_COMPARE: [341],
      OPTION_PRIVATE_MODULE: [341],
      PARAMARRAY: [341],
      PRESERVE: [341],
      PRIVATE: [341],
      PROPERTY_GET: [341],
      PROPERTY_LET: [341],
      PROPERTY_SET: [341],
      PTRSAFE: [341],
      PUBLIC: [341],
      RAISEEVENT: [341],
      REDIM: [341],
      RESET: [341],
      RESUME: [341],
      RETURN: [341],
      SELECT: [341],
      SET: [341],
      SINGLE: [341],
      STATIC: [341],
      STEP: [341],
      STOP: [341],
      STRING: [341],
      SUB: [341],
      THEN: [341],
      TO: [341],
      TRUE: [341],
      TYPEOF: [341],
      UNTIL: [341],
      VARIANT: [341],
      WEND: [341],
      WHILE: [341],
      WITH: [341],
      WITHEVENTS: [341],
      IDENTIFIER: [341],
      SPACE_DOT: [341],
      RPAREN: [341],
      '!': [341],
      LPAREN: [341],
      POW: [341],
      $EOF: [341],
    },
    valueStmt_p_4: {
      INTEGERLITERAL: [328],
      STRINGLITERAL: [328],
      NOTHING: [328],
      NULL: [328],
      TRUE: [328],
      FALSE: [328],
      SPACE_DOT: [328],
      ALIAS: [328],
      AND: [328],
      ATTRIBUTE: [328],
      AS: [328],
      BEGIN: [328],
      BOOLEAN: [328],
      BYVAL: [328],
      BYREF: [328],
      BYTE: [328],
      CALL: [328],
      CASE: [328],
      CONST: [328],
      DECLARE: [328],
      DEFBOOL: [328],
      DEFBYTE: [328],
      DEFDATE: [328],
      DEFDBL: [328],
      DEFDEC: [328],
      DEFCUR: [328],
      DEFINT: [328],
      DEFLNG: [328],
      DEFOBJ: [328],
      DEFSNG: [328],
      DEFSTR: [328],
      DEFVAR: [328],
      DIM: [328],
      DO: [328],
      DOUBLE: [328],
      EACH: [328],
      ELSE: [328],
      ELSEIF: [328],
      END_ENUM: [328],
      END_FUNCTION: [328],
      END_IF: [328],
      END_PROPERTY: [328],
      END_SELECT: [328],
      END_SUB: [328],
      END_TYPE: [328],
      END_WITH: [328],
      END: [328],
      ENUM: [328],
      EQV: [328],
      ERASE: [328],
      EVENT: [328],
      EXIT_DO: [328],
      EXIT_FOR: [328],
      EXIT_FUNCTION: [328],
      EXIT_PROPERTY: [328],
      EXIT_SUB: [328],
      FRIEND: [328],
      FOR: [328],
      FUNCTION: [328],
      GET: [328],
      GLOBAL: [328],
      GOSUB: [328],
      GOTO: [328],
      IF: [328],
      IMPLEMENTS: [328],
      IN: [328],
      IS: [328],
      INTEGER: [328],
      LONG: [328],
      LOOP: [328],
      LEN: [328],
      LET: [328],
      LIB: [328],
      LIKE: [328],
      LSET: [328],
      MACRO_CONST: [328],
      MACRO_IF: [328],
      MACRO_ELSEIF: [328],
      MACRO_ELSE: [328],
      MACRO_END_IF: [328],
      MOD: [328],
      NEXT: [328],
      NEW: [328],
      NOT: [328],
      ON_ERROR: [328],
      ON_LOCAL_ERROR: [328],
      ON: [328],
      OPTIONAL: [328],
      OPTION_BASE: [328],
      OPTION_EXPLICIT: [328],
      OPTION_COMPARE: [328],
      OPTION_PRIVATE_MODULE: [328],
      OR: [328],
      PARAMARRAY: [328],
      PRESERVE: [328],
      PRIVATE: [328],
      PROPERTY_GET: [328],
      PROPERTY_LET: [328],
      PROPERTY_SET: [328],
      PTRSAFE: [328],
      PUBLIC: [328],
      RAISEEVENT: [328],
      REDIM: [328],
      RESET: [328],
      RESUME: [328],
      RETURN: [328],
      SELECT: [328],
      SET: [328],
      SINGLE: [328],
      STATIC: [328],
      STEP: [328],
      STOP: [328],
      STRING: [328],
      SUB: [328],
      THEN: [328],
      TO: [328],
      TYPEOF: [328],
      UNTIL: [328],
      VARIANT: [328],
      WEND: [328],
      WHILE: [328],
      WITH: [328],
      WITHEVENTS: [328],
      XOR: [328],
      IMP: [328],
      IDENTIFIER: [328],
      LPAREN: [328],
      MINUS: [328],
      PLUS: [328],
    },
    '(valueStmt_p_5)1_': {
      POW: [332, 342],
      DIV: [342],
      IDIV: [342],
      MULT: [342],
      MOD: [342],
      PLUS: [342],
      MINUS: [342],
      AMPERSAND: [342],
      IMP: [342],
      EQV: [342],
      XOR: [342],
      OR: [342],
      AND: [342],
      IS: [342],
      LIKE: [342],
      GEQ: [342],
      LEQ: [342],
      GT: [342],
      LT: [342],
      NEQ: [342],
      EQ: [342],
      ',': [342],
      NEWLINE: [342],
      COMMENT: [342],
      REMCOMMENT: [342],
      COLON: [342],
      ALIAS: [342],
      ATTRIBUTE: [342],
      AS: [342],
      BEGIN: [342],
      BOOLEAN: [342],
      BYVAL: [342],
      BYREF: [342],
      BYTE: [342],
      CALL: [342],
      CASE: [342],
      CONST: [342],
      DECLARE: [342],
      DEFBOOL: [342],
      DEFBYTE: [342],
      DEFDATE: [342],
      DEFDBL: [342],
      DEFDEC: [342],
      DEFCUR: [342],
      DEFINT: [342],
      DEFLNG: [342],
      DEFOBJ: [342],
      DEFSNG: [342],
      DEFSTR: [342],
      DEFVAR: [342],
      DIM: [342],
      DO: [342],
      DOUBLE: [342],
      EACH: [342],
      ELSE: [342],
      ELSEIF: [342],
      END_ENUM: [342],
      END_FUNCTION: [342],
      END_IF: [342],
      END_PROPERTY: [342],
      END_SELECT: [342],
      END_SUB: [342],
      END_TYPE: [342],
      END_WITH: [342],
      END: [342],
      ENUM: [342],
      ERASE: [342],
      EVENT: [342],
      EXIT_DO: [342],
      EXIT_FOR: [342],
      EXIT_FUNCTION: [342],
      EXIT_PROPERTY: [342],
      EXIT_SUB: [342],
      FALSE: [342],
      FRIEND: [342],
      FOR: [342],
      FUNCTION: [342],
      GET: [342],
      GLOBAL: [342],
      GOSUB: [342],
      GOTO: [342],
      IF: [342],
      IMPLEMENTS: [342],
      IN: [342],
      INTEGER: [342],
      LONG: [342],
      LOOP: [342],
      LEN: [342],
      LET: [342],
      LIB: [342],
      LSET: [342],
      MACRO_CONST: [342],
      MACRO_IF: [342],
      MACRO_ELSEIF: [342],
      MACRO_ELSE: [342],
      MACRO_END_IF: [342],
      NEXT: [342],
      NEW: [342],
      NOT: [342],
      NOTHING: [342],
      NULL: [342],
      ON_ERROR: [342],
      ON_LOCAL_ERROR: [342],
      ON: [342],
      OPTIONAL: [342],
      OPTION_BASE: [342],
      OPTION_EXPLICIT: [342],
      OPTION_COMPARE: [342],
      OPTION_PRIVATE_MODULE: [342],
      PARAMARRAY: [342],
      PRESERVE: [342],
      PRIVATE: [342],
      PROPERTY_GET: [342],
      PROPERTY_LET: [342],
      PROPERTY_SET: [342],
      PTRSAFE: [342],
      PUBLIC: [342],
      RAISEEVENT: [342],
      REDIM: [342],
      RESET: [342],
      RESUME: [342],
      RETURN: [342],
      SELECT: [342],
      SET: [342],
      SINGLE: [342],
      STATIC: [342],
      STEP: [342],
      STOP: [342],
      STRING: [342],
      SUB: [342],
      THEN: [342],
      TO: [342],
      TRUE: [342],
      TYPEOF: [342],
      UNTIL: [342],
      VARIANT: [342],
      WEND: [342],
      WHILE: [342],
      WITH: [342],
      WITHEVENTS: [342],
      IDENTIFIER: [342],
      SPACE_DOT: [342],
      RPAREN: [342],
      '!': [342],
      LPAREN: [342],
      $EOF: [342],
    },
    valueStmt_p_5: {
      INTEGERLITERAL: [333],
      STRINGLITERAL: [333],
      NOTHING: [333],
      NULL: [333],
      TRUE: [333],
      FALSE: [333],
      SPACE_DOT: [333],
      ALIAS: [333],
      AND: [333],
      ATTRIBUTE: [333],
      AS: [333],
      BEGIN: [333],
      BOOLEAN: [333],
      BYVAL: [333],
      BYREF: [333],
      BYTE: [333],
      CALL: [333],
      CASE: [333],
      CONST: [333],
      DECLARE: [333],
      DEFBOOL: [333],
      DEFBYTE: [333],
      DEFDATE: [333],
      DEFDBL: [333],
      DEFDEC: [333],
      DEFCUR: [333],
      DEFINT: [333],
      DEFLNG: [333],
      DEFOBJ: [333],
      DEFSNG: [333],
      DEFSTR: [333],
      DEFVAR: [333],
      DIM: [333],
      DO: [333],
      DOUBLE: [333],
      EACH: [333],
      ELSE: [333],
      ELSEIF: [333],
      END_ENUM: [333],
      END_FUNCTION: [333],
      END_IF: [333],
      END_PROPERTY: [333],
      END_SELECT: [333],
      END_SUB: [333],
      END_TYPE: [333],
      END_WITH: [333],
      END: [333],
      ENUM: [333],
      EQV: [333],
      ERASE: [333],
      EVENT: [333],
      EXIT_DO: [333],
      EXIT_FOR: [333],
      EXIT_FUNCTION: [333],
      EXIT_PROPERTY: [333],
      EXIT_SUB: [333],
      FRIEND: [333],
      FOR: [333],
      FUNCTION: [333],
      GET: [333],
      GLOBAL: [333],
      GOSUB: [333],
      GOTO: [333],
      IF: [333],
      IMPLEMENTS: [333],
      IN: [333],
      IS: [333],
      INTEGER: [333],
      LONG: [333],
      LOOP: [333],
      LEN: [333],
      LET: [333],
      LIB: [333],
      LIKE: [333],
      LSET: [333],
      MACRO_CONST: [333],
      MACRO_IF: [333],
      MACRO_ELSEIF: [333],
      MACRO_ELSE: [333],
      MACRO_END_IF: [333],
      MOD: [333],
      NEXT: [333],
      NEW: [333],
      NOT: [333],
      ON_ERROR: [333],
      ON_LOCAL_ERROR: [333],
      ON: [333],
      OPTIONAL: [333],
      OPTION_BASE: [333],
      OPTION_EXPLICIT: [333],
      OPTION_COMPARE: [333],
      OPTION_PRIVATE_MODULE: [333],
      OR: [333],
      PARAMARRAY: [333],
      PRESERVE: [333],
      PRIVATE: [333],
      PROPERTY_GET: [333],
      PROPERTY_LET: [333],
      PROPERTY_SET: [333],
      PTRSAFE: [333],
      PUBLIC: [333],
      RAISEEVENT: [333],
      REDIM: [333],
      RESET: [333],
      RESUME: [333],
      RETURN: [333],
      SELECT: [333],
      SET: [333],
      SINGLE: [333],
      STATIC: [333],
      STEP: [333],
      STOP: [333],
      STRING: [333],
      SUB: [333],
      THEN: [333],
      TO: [333],
      TYPEOF: [333],
      UNTIL: [333],
      VARIANT: [333],
      WEND: [333],
      WHILE: [333],
      WITH: [333],
      WITHEVENTS: [333],
      XOR: [333],
      IMP: [333],
      IDENTIFIER: [333],
      LPAREN: [333],
      MINUS: [333],
      PLUS: [333],
    },
    valueStmt_p_6: {
      INTEGERLITERAL: [334],
      STRINGLITERAL: [334],
      NOTHING: [334],
      NULL: [334],
      TRUE: [334],
      FALSE: [334],
      SPACE_DOT: [334],
      ALIAS: [334],
      AND: [334],
      ATTRIBUTE: [334],
      AS: [334],
      BEGIN: [334],
      BOOLEAN: [334],
      BYVAL: [334],
      BYREF: [334],
      BYTE: [334],
      CALL: [334],
      CASE: [334],
      CONST: [334],
      DECLARE: [334],
      DEFBOOL: [334],
      DEFBYTE: [334],
      DEFDATE: [334],
      DEFDBL: [334],
      DEFDEC: [334],
      DEFCUR: [334],
      DEFINT: [334],
      DEFLNG: [334],
      DEFOBJ: [334],
      DEFSNG: [334],
      DEFSTR: [334],
      DEFVAR: [334],
      DIM: [334],
      DO: [334],
      DOUBLE: [334],
      EACH: [334],
      ELSE: [334],
      ELSEIF: [334],
      END_ENUM: [334],
      END_FUNCTION: [334],
      END_IF: [334],
      END_PROPERTY: [334],
      END_SELECT: [334],
      END_SUB: [334],
      END_TYPE: [334],
      END_WITH: [334],
      END: [334],
      ENUM: [334],
      EQV: [334],
      ERASE: [334],
      EVENT: [334],
      EXIT_DO: [334],
      EXIT_FOR: [334],
      EXIT_FUNCTION: [334],
      EXIT_PROPERTY: [334],
      EXIT_SUB: [334],
      FRIEND: [334],
      FOR: [334],
      FUNCTION: [334],
      GET: [334],
      GLOBAL: [334],
      GOSUB: [334],
      GOTO: [334],
      IF: [334],
      IMPLEMENTS: [334],
      IN: [334],
      IS: [334],
      INTEGER: [334],
      LONG: [334],
      LOOP: [334],
      LEN: [334],
      LET: [334],
      LIB: [334],
      LIKE: [334],
      LSET: [334],
      MACRO_CONST: [334],
      MACRO_IF: [334],
      MACRO_ELSEIF: [334],
      MACRO_ELSE: [334],
      MACRO_END_IF: [334],
      MOD: [334],
      NEXT: [334],
      NEW: [334],
      NOT: [334, 335],
      ON_ERROR: [334],
      ON_LOCAL_ERROR: [334],
      ON: [334],
      OPTIONAL: [334],
      OPTION_BASE: [334],
      OPTION_EXPLICIT: [334],
      OPTION_COMPARE: [334],
      OPTION_PRIVATE_MODULE: [334],
      OR: [334],
      PARAMARRAY: [334],
      PRESERVE: [334],
      PRIVATE: [334],
      PROPERTY_GET: [334],
      PROPERTY_LET: [334],
      PROPERTY_SET: [334],
      PTRSAFE: [334],
      PUBLIC: [334],
      RAISEEVENT: [334],
      REDIM: [334],
      RESET: [334],
      RESUME: [334],
      RETURN: [334],
      SELECT: [334],
      SET: [334],
      SINGLE: [334],
      STATIC: [334],
      STEP: [334],
      STOP: [334],
      STRING: [334],
      SUB: [334],
      THEN: [334],
      TO: [334],
      TYPEOF: [334],
      UNTIL: [334],
      VARIANT: [334],
      WEND: [334],
      WHILE: [334],
      WITH: [334],
      WITHEVENTS: [334],
      XOR: [334],
      IMP: [334],
      IDENTIFIER: [334],
      LPAREN: [334],
      MINUS: [336],
      PLUS: [337],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }

        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (
        ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX ||
        ruleIndexes.length === 0
      ) {
        // skip this symbol first
        return returnNext();
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 5,
    15: 6,
    16: 6,
    17: 6,
    18: 6,
    19: 7,
    20: 7,
    21: 8,
    22: 8,
    23: 8,
    24: 8,
    25: 8,
    26: 9,
    27: 9,
    28: 9,
    29: 9,
    30: 10,
    31: 11,
    32: 12,
    33: 13,
    34: 14,
    35: 15,
    36: 15,
    37: 16,
    38: 16,
    39: 16,
    40: 16,
    41: 16,
    42: 16,
    43: 16,
    44: 16,
    45: 16,
    46: 16,
    47: 16,
    48: 16,
    49: 17,
    50: 17,
    51: 17,
    52: 17,
    53: 17,
    54: 18,
    55: 19,
    56: 20,
    57: 20,
    58: 21,
    59: 21,
    60: 22,
    61: 23,
    62: 23,
    63: 23,
    64: 23,
    65: 23,
    66: 23,
    67: 24,
    68: 24,
    69: 24,
    70: 24,
    71: 24,
    72: 24,
    73: 26,
    74: 26,
    75: 27,
    76: 27,
    77: 27,
    78: 27,
    79: 27,
    80: 27,
    81: 27,
    82: 28,
    83: 29,
    84: 29,
    85: 30,
    86: 31,
    87: 32,
    88: 32,
    89: 33,
    90: 34,
    91: 34,
    92: 34,
    93: 34,
    94: 34,
    95: 34,
    96: 34,
    97: 35,
    98: 35,
    99: 35,
    100: 35,
    101: 35,
    102: 36,
    103: 36,
    104: 37,
    105: 37,
    106: 38,
    107: 39,
    108: 39,
    109: 40,
    110: 40,
    111: 41,
    112: 42,
    113: 42,
    114: 42,
    115: 43,
    116: 43,
    117: 43,
    118: 43,
    119: 43,
    120: 46,
    121: 46,
    122: 46,
    123: 47,
    124: 47,
    125: 47,
    126: 47,
    127: 47,
    128: 47,
    129: 47,
    130: 47,
    131: 47,
    132: 48,
    133: 48,
    134: 48,
    135: 49,
    136: 49,
    137: 49,
    138: 50,
    139: 51,
    140: 52,
    141: 53,
    142: 53,
    143: 53,
    144: 53,
    145: 53,
    146: 53,
    147: 54,
    148: 54,
    149: 54,
    150: 54,
    151: 54,
    152: 54,
    153: 55,
    154: 55,
    155: 55,
    156: 55,
    157: 55,
    158: 55,
    159: 57,
    160: 58,
    161: 58,
    162: 58,
    163: 58,
    164: 58,
    165: 59,
    166: 59,
    167: 59,
    168: 59,
    169: 59,
    170: 59,
    171: 60,
    172: 60,
    173: 60,
    174: 60,
    175: 60,
    176: 60,
    177: 60,
    178: 60,
    179: 61,
    180: 62,
    181: 63,
    182: 64,
    183: 65,
    184: 66,
    185: 67,
    186: 68,
    187: 69,
    188: 70,
    189: 71,
    190: 72,
    191: 73,
    192: 74,
    193: 75,
    194: 76,
    195: 77,
    196: 78,
    197: 79,
    198: 80,
    199: 81,
    200: 82,
    201: 83,
    202: 84,
    203: 85,
    204: 86,
    205: 87,
    206: 88,
    207: 89,
    208: 90,
    209: 91,
    210: 92,
    211: 93,
    212: 94,
    213: 95,
    214: 96,
    215: 97,
    216: 98,
    217: 99,
    218: 100,
    219: 101,
    220: 102,
    221: 103,
    222: 104,
    223: 105,
    224: 106,
    225: 107,
    226: 108,
    227: 109,
    228: 110,
    229: 111,
    230: 112,
    231: 113,
    232: 114,
    233: 115,
    234: 116,
    235: 117,
    236: 118,
    237: 119,
    238: 120,
    239: 121,
    240: 122,
    241: 123,
    242: 124,
    243: 125,
    244: 126,
    245: 127,
    246: 128,
    247: 129,
    248: 130,
    249: 131,
    250: 132,
    251: 133,
    252: 134,
    253: 135,
    254: 136,
    255: 137,
    256: 138,
    257: 139,
    258: 140,
    259: 141,
    260: 142,
    261: 143,
    262: 144,
    263: 145,
    264: 146,
    265: 147,
    266: 148,
    267: 149,
    268: 150,
    269: 151,
    270: 152,
    271: 153,
    272: 154,
    273: 155,
    274: 156,
    275: 157,
    276: 158,
    277: 159,
    278: 160,
    279: 161,
    280: 162,
    281: 163,
    282: 164,
    283: 165,
    284: 166,
    285: 167,
    286: 168,
    287: 169,
    288: 170,
    289: 171,
    290: 172,
    291: 173,
    292: 174,
    293: 175,
    294: 176,
    295: 177,
    296: 178,
    297: 179,
    298: 180,
    299: 181,
    300: 182,
    301: 183,
    302: 184,
    303: 24,
    304: 25,
    305: 56,
    306: 60,
    307: 61,
    308: 43,
    309: 43,
    310: 43,
    311: 43,
    312: 43,
    313: 43,
    314: 43,
    315: 43,
    316: 43,
    317: 43,
    318: 43,
    319: 43,
    320: 43,
    321: 43,
    322: 43,
    323: 43,
    324: 43,
    325: 43,
    326: 43,
    327: 43,
    328: 43,
    329: 43,
    330: 43,
    331: 43,
    332: 43,
    333: 43,
    334: 43,
    335: 43,
    336: 44,
    337: 45,
  };
  return parser;
})();

export default vbaParser;
