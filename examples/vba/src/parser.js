/*
Generated By kison v0.5.36

Generate time: Thu Dec 02 2021 16:25:09 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token =
      recommendedAction.action === 'add'
        ? lexer.peekTokens()[0]
        : lexer.getCurrentToken();
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      [
        'ALIAS',
        /ALIAS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AND',
        /AND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ATTRIBUTE',
        /ATTRIBUTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AS',
        /AS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BEGIN',
        /BEGIN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BOOLEAN',
        /BOOLEAN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYVAL',
        /BYVAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYREF',
        /BYREF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYTE',
        /BYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CALL',
        /CALL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CASE',
        /CASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CONST',
        /CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DECLARE',
        /DECLARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBOOL',
        /DEFBOOL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBYTE',
        /DEFBYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDATE',
        /DEFDATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDBL',
        /DEFDBL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDEC',
        /DEFDEC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFCUR',
        /DEFCUR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFINT',
        /DEFINT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFLNG',
        /DEFLNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFOBJ',
        /DEFOBJ\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSNG',
        /DEFSNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSTR',
        /DEFSTR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFVAR',
        /DEFVAR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DIM',
        /DIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DO',
        /DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DOUBLE',
        /DOUBLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EACH',
        /EACH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSE',
        /ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSEIF',
        /ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_ENUM',
        /END ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_FUNCTION',
        /END FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_IF',
        /END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_PROPERTY',
        /END PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SELECT',
        /END SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SUB',
        /END SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_TYPE',
        /END TYPE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_WITH',
        /END WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END',
        /END\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ENUM',
        /ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EQV',
        /EQV\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ERASE',
        /ERASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EVENT',
        /EVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_DO',
        /EXIT DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FOR',
        /EXIT FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FUNCTION',
        /EXIT FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_PROPERTY',
        /EXIT PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_SUB',
        /EXIT SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FALSE',
        /FALSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FRIEND',
        /FRIEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FOR',
        /FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FUNCTION',
        /FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GET',
        /GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GLOBAL',
        /GLOBAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOSUB',
        /GOSUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOTO',
        /GOTO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IF',
        /IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMPLEMENTS',
        /IMPLEMENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IN',
        /IN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ISNOT',
        /ISNOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IS',
        /IS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'INTEGER',
        /INTEGER\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LONG',
        /LONG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LOOP',
        /LOOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LEN',
        /LEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LET',
        /LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIB',
        /LIB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIKE',
        /LIKE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LSET',
        /LSET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_CONST',
        /#CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_IF',
        /#IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSEIF',
        /#ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSE',
        /#ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_END_IF',
        /#END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MOD',
        /MOD\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEXT',
        /NEXT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEW',
        /NEW\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOT',
        /NOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOTHING',
        /NOTHING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NULL',
        /NULL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_ERROR',
        /ON ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_LOCAL_ERROR',
        /ON LOCAL ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON',
        /ON\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTIONAL',
        /OPTIONAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_BASE',
        /OPTION BASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_EXPLICIT',
        /OPTION EXPLICIT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_COMPARE',
        /OPTION COMPARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_PRIVATE_MODULE',
        /OPTION PRIVATE MODULE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OR',
        /OR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PARAMARRAY',
        /PARAMARRAY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRESERVE',
        /PRESERVE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRIVATE',
        /PRIVATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_GET',
        /PROPERTY GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_LET',
        /PROPERTY LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_SET',
        /PROPERTY SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PTRSAFE',
        /PTRSAFE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PUBLIC',
        /PUBLIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RAISEEVENT',
        /RAISEEVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'REDIM',
        /REDIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESET',
        /RESET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESUME',
        /RESUME\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RETURN',
        /RETURN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SELECT',
        /SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SET',
        /SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SINGLE',
        /SINGLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STATIC',
        /STATIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STEP',
        /STEP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STOP',
        /STOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STRING',
        /STRING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SUB',
        /SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'THEN',
        /THEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TO',
        /TO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TRUE',
        /TRUE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TYPEOF',
        /TYPEOF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'UNTIL',
        /UNTIL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'VARIANT',
        /VARIANT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WEND',
        /WEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WHILE',
        /WHILE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITH',
        /WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITHEVENTS',
        /WITHEVENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'XOR',
        /XOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMP',
        /IMP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ['DOUBLELITERAL', /[0-9]*\.[0-9]+(E[0-9]+)?/g],
      ['SPACE_DOT', /\s+\./g],
      ['ASSIGN', /:=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['IDIV', /\\/g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS_EQ', /\-=/g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS_EQ', /\+=/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"(""|[^"\r\n])*"/g],
      ['INTEGERLITERAL', /[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ['.', /\./g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1*']],
      [
        'moduleDeclarations_group_def_5',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_5*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_7',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_7*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'RPAREN',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_9', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_9*', 'endOfStatement']],
      ['blockStmt', ['lineLabel']],
      ['blockStmt', ['goToStmt']],
      ['blockStmt', ['ifThenElseStmt']],
      ['blockStmt', ['selectCaseStmt']],
      ['blockStmt', ['forNextStmt']],
      ['blockStmt', ['forEachStmt']],
      ['blockStmt', ['onErrorStmt']],
      ['blockStmt', ['withStmt']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['forNextStmt_group_def_11', ['STEP', 'valueStmt']],
      [
        'forNextStmt',
        [
          'FOR',
          'ambiguousIdentifier',
          'typeHint?',
          'asTypeClause?',
          'EQ',
          'valueStmt',
          'TO',
          'valueStmt',
          'forNextStmt_group_def_11?',
          'endOfStatement',
          'block?',
          'NEXT',
          'ambiguousIdentifier?',
        ],
      ],
      [
        'forEachStmt',
        [
          'FOR',
          'EACH',
          'ambiguousIdentifier',
          'typeHint?',
          'IN',
          'valueStmt',
          'endOfStatement',
          'block?',
          'NEXT',
          'ambiguousIdentifier?',
        ],
      ],
      [
        'selectCaseStmt',
        [
          'SELECT',
          'CASE',
          'valueStmt',
          'endOfStatement',
          'sC_Case*',
          'END_SELECT',
        ],
      ],
      [
        'sC_Selection',
        ['IS', 'comparisonOperator', 'valueStmt'],
        undefined,
        'caseCondIs',
      ],
      [
        'sC_Selection',
        ['valueStmt', 'TO', 'valueStmt'],
        undefined,
        'caseCondTo',
      ],
      ['sC_Selection', ['valueStmt'], undefined, 'caseCondValue'],
      ['sC_Case', ['CASE', 'sC_Cond', 'endOfStatement', 'block?']],
      ['sC_Cond', ['ELSE'], undefined, 'caseCondElse'],
      ['sC_Cond_group_def_13', [',', 'sC_Selection']],
      [
        'sC_Cond',
        ['sC_Selection', 'sC_Cond_group_def_13*'],
        undefined,
        'caseCondSelection',
      ],
      ['comparisonOperator', ['LT']],
      ['comparisonOperator', ['LEQ']],
      ['comparisonOperator', ['GT']],
      ['comparisonOperator', ['GEQ']],
      ['comparisonOperator', ['EQ']],
      ['comparisonOperator', ['NEQ']],
      ['comparisonOperator', ['IS']],
      ['ifThenElseStmt_group_def_15', ['ELSE', 'blockStmt']],
      [
        'ifThenElseStmt',
        [
          'IF',
          'valueStmt',
          'THEN',
          'blockStmt',
          'ifThenElseStmt_group_def_15?',
        ],
        undefined,
        'InlineIfThenElse',
      ],
      [
        'ifThenElseStmt',
        ['ifBlockStmt', 'ifElseIfBlockStmt*', 'ifElseBlockStmt?', 'END_IF'],
        undefined,
        'BlockIfThenElse',
      ],
      ['ifBlockStmt', ['IF', 'valueStmt', 'THEN', 'endOfStatement', 'block?']],
      [
        'ifElseIfBlockStmt',
        ['ELSEIF', 'valueStmt', 'THEN', 'endOfStatement', 'block?'],
      ],
      ['ifElseBlockStmt', ['ELSE', 'endOfStatement', 'block?']],
      ['onErrorStmt_group_def_17', ['ambiguousIdentifier']],
      ['onErrorStmt_group_16', ['onErrorStmt_group_def_17']],
      ['onErrorStmt_group_def_18', ['MINUS', 'INTEGERLITERAL']],
      ['onErrorStmt_group_16', ['onErrorStmt_group_def_18']],
      ['onErrorStmt', ['ON_ERROR', 'GOTO', 'onErrorStmt_group_16']],
      ['lineLabel', ['ambiguousIdentifier', 'COLON']],
      ['goToStmt', ['GOTO', 'ambiguousIdentifier']],
      ['eraseStmt_group_def_20', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_20*']],
      ['redimStmt_group_def_22', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_22*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_def_24', ['EQ']],
      ['letStmt_group_23', ['letStmt_group_def_24']],
      ['letStmt_group_def_25', ['PLUS_EQ']],
      ['letStmt_group_23', ['letStmt_group_def_25']],
      ['letStmt_group_def_26', ['MINUS_EQ']],
      ['letStmt_group_23', ['letStmt_group_def_26']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_23', 'valueStmt'],
      ],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_28',
        ['implicitCallStmt_InStmt?', '.'],
      ],
      [
        'eCS_MemberProcedureCall_group_27',
        ['eCS_MemberProcedureCall_group_def_28'],
      ],
      ['eCS_MemberProcedureCall_group_def_29', ['SPACE_DOT']],
      [
        'eCS_MemberProcedureCall_group_27',
        ['eCS_MemberProcedureCall_group_def_29'],
      ],
      [
        'eCS_MemberProcedureCall_group_def_31',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_33', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'eCS_MemberProcedureCall_group_27',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_31?',
          'eCS_MemberProcedureCall_group_def_33*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_31?',
          'eCS_MemberProcedureCall_group_def_33*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall',
        [
          'implicitCallStmt_InStmt',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_33*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'certainIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_33?',
        ],
      ],
      ['argsCall_group_def_39', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_39*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_41', ['DIM']],
      ['variableStmt_group_40', ['variableStmt_group_def_41']],
      ['variableStmt_group_def_42', ['STATIC']],
      ['variableStmt_group_40', ['variableStmt_group_def_42']],
      ['variableStmt_group_def_43', ['visibility']],
      ['variableStmt_group_40', ['variableStmt_group_def_43']],
      [
        'variableStmt',
        ['variableStmt_group_40', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['withStmt_group_def_45', ['implicitCallStmt_InStmt']],
      ['withStmt_group_44', ['withStmt_group_def_45']],
      ['withStmt_group_def_46', ['NEW', 'type_']],
      ['withStmt_group_44', ['withStmt_group_def_46']],
      [
        'withStmt',
        ['WITH', 'withStmt_group_44', 'endOfStatement', 'block?', 'END_WITH'],
      ],
      ['variableListStmt_group_def_48', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_48*'],
      ],
      ['variableSubStmt_group_def_50', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_50?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_20*']],
      ['subscript__group_def_53', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_53?', 'valueStmt']],
      ['subscripts_group_def_55', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_55*']],
      ['subscript_', ['subscript__group_def_53?', 'valueStmt']],
      ['argList_group_def_59', [',', 'arg']],
      ['argList_group_def_60', ['arg', 'argList_group_def_59*']],
      ['argList', ['LPAREN', 'argList_group_def_60?', 'RPAREN']],
      ['valueStmt_p_end', ['literal']],
      ['valueStmt_p_end', ['implicitCallStmt_InStmt']],
      ['valueStmt_p_end', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['valueStmt_p_end', ['NEW', 'valueStmt']],
      [
        'valueStmt_p_end',
        ['LPAREN', 'valueStmt', 'RPAREN'],
        undefined,
        'AtomExpression',
      ],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_63', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_62', ['iCS_S_MembersCall_group_def_63']],
      ['iCS_S_MembersCall_group_def_64', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_62', ['iCS_S_MembersCall_group_def_64']],
      [
        'iCS_S_MembersCall_group_def_65',
        ['iCS_S_MembersCall_group_62', 'iCS_S_MemberCall'],
      ],
      ['iCS_S_MembersCall_group_61', ['iCS_S_MembersCall_group_def_65']],
      ['iCS_S_MembersCall_group_def_66', ['iCS_S_SpaceMemberCall']],
      ['iCS_S_MembersCall_group_61', ['iCS_S_MembersCall_group_def_66']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_61',
          'iCS_S_MemberCall*',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_33*',
        ],
      ],
      ['iCS_S_MemberCall_group_68', ['iCS_S_MembersCall_group_def_63']],
      ['iCS_S_MemberCall_group_68', ['iCS_S_MembersCall_group_def_64']],
      ['iCS_S_MemberCall', ['.', 'iCS_S_MemberCall_group_68']],
      ['iCS_S_SpaceMemberCall_group_69', ['iCS_S_MembersCall_group_def_63']],
      ['iCS_S_SpaceMemberCall_group_69', ['iCS_S_MembersCall_group_def_64']],
      [
        'iCS_S_SpaceMemberCall',
        ['SPACE_DOT', 'iCS_S_SpaceMemberCall_group_69'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_33*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_33*',
        ],
      ],
      ['dictionaryCallStmt', ['!', 'ambiguousIdentifier', 'typeHint?']],
      ['literal', ['DOUBLELITERAL']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_73', ['BYVAL']],
      ['arg_group_72', ['arg_group_def_73']],
      ['arg_group_def_74', ['BYREF']],
      ['arg_group_72', ['arg_group_def_74']],
      ['arg_group_def_76', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_72?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_76?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type__group_def_78', ['baseType']],
      ['type__group_77', ['type__group_def_78']],
      ['type__group_def_79', ['complexType']],
      ['type__group_77', ['type__group_def_79']],
      ['type_', ['type__group_77', 'arg_group_def_76?']],
      ['complexType_group_def_83', ['.']],
      ['complexType_group_82', ['complexType_group_def_83']],
      ['complexType_group_def_84', ['!']],
      ['complexType_group_82', ['complexType_group_def_84']],
      [
        'complexType_group_def_85',
        ['complexType_group_82', 'ambiguousIdentifier'],
      ],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_85*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType_group_def_87', ['MULT', 'valueStmt']],
      ['baseType', ['STRING', 'baseType_group_def_87?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['fieldLength', ['MULT', 'ambiguousIdentifier']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['ISNOT']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IMP']],
      ['certainIdentifier', ['IDENTIFIER']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
      ['valueStmt', ['valueStmt_p_2'], undefined, undefined, undefined, true],
      ['valueStmt', ['NOT', 'valueStmt'], undefined, 'PrefixExpression'],
      [
        '(valueStmt_p_2)1_',
        ['IS', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_2',
        ['valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_2)1_',
        ['ISNOT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['NEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['EQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['XOR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_3',
        ['valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_3)1_',
        ['OR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['AND', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['PLUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_4',
        ['valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_4)1_',
        ['MINUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['AMPERSAND', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MULT', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_5',
        ['valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_5)1_',
        ['DIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['IDIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MOD', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_6)1_',
        ['POW', 'valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_6',
        ['valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['valueStmt_p_end'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['MINUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      [
        'valueStmt_p_7',
        ['PLUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      ['(valueStmt_p_2)1_', []],
      ['(valueStmt_p_3)1_', []],
      ['(valueStmt_p_4)1_', []],
      ['(valueStmt_p_5)1_', []],
      ['(valueStmt_p_6)1_', []],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {
    valueStmt_p_end: 'valueStmt',
    valueStmt_p_1: 'valueStmt',
    valueStmt_p_2: 'valueStmt',
    valueStmt_p_3: 'valueStmt',
    valueStmt_p_4: 'valueStmt',
    valueStmt_p_5: 'valueStmt',
    valueStmt_p_6: 'valueStmt',
    valueStmt_p_7: 'valueStmt',
  };
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 19, 35, 53, 62, 71, 77, 78, 79, 80, 84, 86, 95, 96, 97, 98,
    99, 100, 105, 106, 107, 108, 109, 110, 117, 120, 121, 122, 123, 124, 125,
    127, 128, 129, 130, 132, 134, 137, 139, 142, 143, 153, 154, 155, 156, 157,
    158, 159, 160, 162, 163, 165, 166, 184, 185, 186, 187, 188, 192, 193, 194,
    195, 197, 198, 199, 200, 201, 210, 341, 343, 344, 345, 346, 347, 348, 349,
    350, 352, 353, 354, 356, 357, 358, 360, 361, 362, 363, 368, 369, 370, 371,
    372,
  ]);
  const parserPredictTable = {
    $START: {
      COMMENT: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      NEWLINE: [0],
      REMCOMMENT: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      COMMENT: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      NEWLINE: [1],
      REMCOMMENT: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
      ALIAS: [9],
      AND: [9],
      ATTRIBUTE: [9],
      AS: [9],
      BEGIN: [9],
      BOOLEAN: [9],
      BYVAL: [9],
      BYREF: [9],
      BYTE: [9],
      CALL: [9],
      CASE: [9],
      CONST: [9],
      DECLARE: [9],
      DEFBOOL: [9],
      DEFBYTE: [9],
      DEFDATE: [9],
      DEFDBL: [9],
      DEFDEC: [9],
      DEFCUR: [9],
      DEFINT: [9],
      DEFLNG: [9],
      DEFOBJ: [9],
      DEFSNG: [9],
      DEFSTR: [9],
      DEFVAR: [9],
      DIM: [9],
      DO: [9],
      DOUBLE: [9],
      EACH: [9],
      ELSE: [9],
      ELSEIF: [9],
      END_ENUM: [9],
      END_FUNCTION: [9],
      END_IF: [9],
      END_PROPERTY: [9],
      END_SELECT: [9],
      END_SUB: [9],
      END_TYPE: [9],
      END_WITH: [9],
      END: [9],
      ENUM: [9],
      EQV: [9],
      ERASE: [9],
      EVENT: [9],
      EXIT_DO: [9],
      EXIT_FOR: [9],
      EXIT_FUNCTION: [9],
      EXIT_PROPERTY: [9],
      EXIT_SUB: [9],
      FALSE: [9],
      FRIEND: [9],
      FOR: [9],
      FUNCTION: [9],
      GET: [9],
      GLOBAL: [9],
      GOSUB: [9],
      GOTO: [9],
      IF: [9],
      IMPLEMENTS: [9],
      IN: [9],
      ISNOT: [9],
      IS: [9],
      INTEGER: [9],
      LONG: [9],
      LOOP: [9],
      LEN: [9],
      LET: [9],
      LIB: [9],
      LIKE: [9],
      LSET: [9],
      MACRO_CONST: [9],
      MACRO_IF: [9],
      MACRO_ELSEIF: [9],
      MACRO_ELSE: [9],
      MACRO_END_IF: [9],
      MOD: [9],
      NEXT: [9],
      NEW: [9],
      NOT: [9],
      NOTHING: [9],
      NULL: [9],
      ON_ERROR: [9],
      ON_LOCAL_ERROR: [9],
      ON: [9],
      OPTIONAL: [9],
      OPTION_BASE: [9],
      OPTION_EXPLICIT: [9],
      OPTION_COMPARE: [9],
      OPTION_PRIVATE_MODULE: [9],
      OR: [9],
      PARAMARRAY: [9],
      PRESERVE: [9],
      PRIVATE: [9],
      PROPERTY_GET: [9],
      PROPERTY_LET: [9],
      PROPERTY_SET: [9],
      PTRSAFE: [9],
      PUBLIC: [9],
      RAISEEVENT: [9],
      REDIM: [9],
      RESET: [9],
      RESUME: [9],
      RETURN: [9],
      SELECT: [9],
      SET: [9],
      SINGLE: [9],
      STATIC: [9],
      STEP: [9],
      STOP: [9],
      STRING: [9],
      SUB: [9],
      THEN: [9],
      TO: [9],
      TRUE: [9],
      TYPEOF: [9],
      UNTIL: [9],
      VARIANT: [9],
      WEND: [9],
      WHILE: [9],
      WITH: [9],
      WITHEVENTS: [9],
      XOR: [9],
      IMP: [9],
      IDENTIFIER: [9],
      SPACE_DOT: [9],
    },
    moduleDeclarations_group_def_5: {
      NEWLINE: [10],
      COMMENT: [10],
      REMCOMMENT: [10],
    },
    moduleDeclarations: {
      COMMENT: [11],
      DIM: [11],
      STATIC: [11],
      PRIVATE: [11],
      PUBLIC: [11],
      FRIEND: [11],
      GLOBAL: [11],
      OPTION_BASE: [11],
      OPTION_COMPARE: [11],
      OPTION_EXPLICIT: [11],
      OPTION_PRIVATE_MODULE: [11],
    },
    moduleDeclarationsElement: {
      COMMENT: [12],
      DIM: [13],
      STATIC: [13],
      PRIVATE: [13],
      PUBLIC: [13],
      FRIEND: [13],
      GLOBAL: [13],
      OPTION_BASE: [14],
      OPTION_COMPARE: [14],
      OPTION_EXPLICIT: [14],
      OPTION_PRIVATE_MODULE: [14],
    },
    moduleOption: {
      OPTION_BASE: [15],
      OPTION_COMPARE: [16],
      OPTION_EXPLICIT: [17],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleBody_group_def_7: {
      NEWLINE: [19],
      COMMENT: [19],
      REMCOMMENT: [19],
    },
    moduleBody: {
      PRIVATE: [20],
      PUBLIC: [20],
      FRIEND: [20],
      GLOBAL: [20],
      STATIC: [20],
      FUNCTION: [20],
      PROPERTY_GET: [20],
      PROPERTY_SET: [20],
      PROPERTY_LET: [20],
      SUB: [20],
    },
    moduleBodyElement: {
      PRIVATE: [21, 22, 23, 24, 25],
      PUBLIC: [21, 22, 23, 24, 25],
      FRIEND: [21, 22, 23, 24, 25],
      GLOBAL: [21, 22, 23, 24, 25],
      STATIC: [21, 22, 23, 24, 25],
      FUNCTION: [21],
      PROPERTY_GET: [22],
      PROPERTY_SET: [23],
      PROPERTY_LET: [24],
      SUB: [25],
    },
    visibility: {
      PRIVATE: [26],
      PUBLIC: [27],
      FRIEND: [28],
      GLOBAL: [29],
    },
    subStmt: {
      PRIVATE: [30],
      PUBLIC: [30],
      FRIEND: [30],
      GLOBAL: [30],
      STATIC: [30],
      SUB: [30],
    },
    propertyGetStmt: {
      PRIVATE: [31],
      PUBLIC: [31],
      FRIEND: [31],
      GLOBAL: [31],
      STATIC: [31],
      PROPERTY_GET: [31],
    },
    propertySetStmt: {
      PRIVATE: [32],
      PUBLIC: [32],
      FRIEND: [32],
      GLOBAL: [32],
      STATIC: [32],
      PROPERTY_SET: [32],
    },
    propertyLetStmt: {
      PRIVATE: [33],
      PUBLIC: [33],
      FRIEND: [33],
      GLOBAL: [33],
      STATIC: [33],
      PROPERTY_LET: [33],
    },
    functionStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      FUNCTION: [34],
    },
    block_group_def_9: {
      NEWLINE: [35],
      COMMENT: [35],
      REMCOMMENT: [35],
      COLON: [35],
      ALIAS: [35],
      AND: [35],
      ATTRIBUTE: [35],
      AS: [35],
      BEGIN: [35],
      BOOLEAN: [35],
      BYVAL: [35],
      BYREF: [35],
      BYTE: [35],
      CALL: [35],
      CASE: [35],
      CONST: [35],
      DECLARE: [35],
      DEFBOOL: [35],
      DEFBYTE: [35],
      DEFDATE: [35],
      DEFDBL: [35],
      DEFDEC: [35],
      DEFCUR: [35],
      DEFINT: [35],
      DEFLNG: [35],
      DEFOBJ: [35],
      DEFSNG: [35],
      DEFSTR: [35],
      DEFVAR: [35],
      DIM: [35],
      DO: [35],
      DOUBLE: [35],
      EACH: [35],
      ELSE: [35],
      ELSEIF: [35],
      END_ENUM: [35],
      END_FUNCTION: [35],
      END_IF: [35],
      END_PROPERTY: [35],
      END_SELECT: [35],
      END_SUB: [35],
      END_TYPE: [35],
      END_WITH: [35],
      END: [35],
      ENUM: [35],
      EQV: [35],
      ERASE: [35],
      EVENT: [35],
      EXIT_DO: [35],
      EXIT_FOR: [35],
      EXIT_FUNCTION: [35],
      EXIT_PROPERTY: [35],
      EXIT_SUB: [35],
      FALSE: [35],
      FRIEND: [35],
      FOR: [35],
      FUNCTION: [35],
      GET: [35],
      GLOBAL: [35],
      GOSUB: [35],
      GOTO: [35],
      IF: [35],
      IMPLEMENTS: [35],
      IN: [35],
      ISNOT: [35],
      IS: [35],
      INTEGER: [35],
      LONG: [35],
      LOOP: [35],
      LEN: [35],
      LET: [35],
      LIB: [35],
      LIKE: [35],
      LSET: [35],
      MACRO_CONST: [35],
      MACRO_IF: [35],
      MACRO_ELSEIF: [35],
      MACRO_ELSE: [35],
      MACRO_END_IF: [35],
      MOD: [35],
      NEXT: [35],
      NEW: [35],
      NOT: [35],
      NOTHING: [35],
      NULL: [35],
      ON_ERROR: [35],
      ON_LOCAL_ERROR: [35],
      ON: [35],
      OPTIONAL: [35],
      OPTION_BASE: [35],
      OPTION_EXPLICIT: [35],
      OPTION_COMPARE: [35],
      OPTION_PRIVATE_MODULE: [35],
      OR: [35],
      PARAMARRAY: [35],
      PRESERVE: [35],
      PRIVATE: [35],
      PROPERTY_GET: [35],
      PROPERTY_LET: [35],
      PROPERTY_SET: [35],
      PTRSAFE: [35],
      PUBLIC: [35],
      RAISEEVENT: [35],
      REDIM: [35],
      RESET: [35],
      RESUME: [35],
      RETURN: [35],
      SELECT: [35],
      SET: [35],
      SINGLE: [35],
      STATIC: [35],
      STEP: [35],
      STOP: [35],
      STRING: [35],
      SUB: [35],
      THEN: [35],
      TO: [35],
      TRUE: [35],
      TYPEOF: [35],
      UNTIL: [35],
      VARIANT: [35],
      WEND: [35],
      WHILE: [35],
      WITH: [35],
      WITHEVENTS: [35],
      XOR: [35],
      IMP: [35],
      IDENTIFIER: [35],
      SPACE_DOT: [35],
    },
    block: {
      ALIAS: [36],
      AND: [36],
      ATTRIBUTE: [36],
      AS: [36],
      BEGIN: [36],
      BOOLEAN: [36],
      BYVAL: [36],
      BYREF: [36],
      BYTE: [36],
      CALL: [36],
      CASE: [36],
      CONST: [36],
      DECLARE: [36],
      DEFBOOL: [36],
      DEFBYTE: [36],
      DEFDATE: [36],
      DEFDBL: [36],
      DEFDEC: [36],
      DEFCUR: [36],
      DEFINT: [36],
      DEFLNG: [36],
      DEFOBJ: [36],
      DEFSNG: [36],
      DEFSTR: [36],
      DEFVAR: [36],
      DIM: [36],
      DO: [36],
      DOUBLE: [36],
      EACH: [36],
      ELSE: [36],
      ELSEIF: [36],
      END_ENUM: [36],
      END_FUNCTION: [36],
      END_IF: [36],
      END_PROPERTY: [36],
      END_SELECT: [36],
      END_SUB: [36],
      END_TYPE: [36],
      END_WITH: [36],
      END: [36],
      ENUM: [36],
      EQV: [36],
      ERASE: [36],
      EVENT: [36],
      EXIT_DO: [36],
      EXIT_FOR: [36],
      EXIT_FUNCTION: [36],
      EXIT_PROPERTY: [36],
      EXIT_SUB: [36],
      FALSE: [36],
      FRIEND: [36],
      FOR: [36],
      FUNCTION: [36],
      GET: [36],
      GLOBAL: [36],
      GOSUB: [36],
      GOTO: [36],
      IF: [36],
      IMPLEMENTS: [36],
      IN: [36],
      ISNOT: [36],
      IS: [36],
      INTEGER: [36],
      LONG: [36],
      LOOP: [36],
      LEN: [36],
      LET: [36],
      LIB: [36],
      LIKE: [36],
      LSET: [36],
      MACRO_CONST: [36],
      MACRO_IF: [36],
      MACRO_ELSEIF: [36],
      MACRO_ELSE: [36],
      MACRO_END_IF: [36],
      MOD: [36],
      NEXT: [36],
      NEW: [36],
      NOT: [36],
      NOTHING: [36],
      NULL: [36],
      ON_ERROR: [36],
      ON_LOCAL_ERROR: [36],
      ON: [36],
      OPTIONAL: [36],
      OPTION_BASE: [36],
      OPTION_EXPLICIT: [36],
      OPTION_COMPARE: [36],
      OPTION_PRIVATE_MODULE: [36],
      OR: [36],
      PARAMARRAY: [36],
      PRESERVE: [36],
      PRIVATE: [36],
      PROPERTY_GET: [36],
      PROPERTY_LET: [36],
      PROPERTY_SET: [36],
      PTRSAFE: [36],
      PUBLIC: [36],
      RAISEEVENT: [36],
      REDIM: [36],
      RESET: [36],
      RESUME: [36],
      RETURN: [36],
      SELECT: [36],
      SET: [36],
      SINGLE: [36],
      STATIC: [36],
      STEP: [36],
      STOP: [36],
      STRING: [36],
      SUB: [36],
      THEN: [36],
      TO: [36],
      TRUE: [36],
      TYPEOF: [36],
      UNTIL: [36],
      VARIANT: [36],
      WEND: [36],
      WHILE: [36],
      WITH: [36],
      WITHEVENTS: [36],
      XOR: [36],
      IMP: [36],
      IDENTIFIER: [36],
      SPACE_DOT: [36],
    },
    blockStmt: {
      ALIAS: [37, 50, 52],
      AND: [37, 50, 52],
      ATTRIBUTE: [37, 50, 52],
      AS: [37, 50, 52],
      BEGIN: [37, 50, 52],
      BOOLEAN: [37, 50, 52],
      BYVAL: [37, 50, 52],
      BYREF: [37, 50, 52],
      BYTE: [37, 50, 52],
      CALL: [37, 47, 50, 52],
      CASE: [37, 50, 52],
      CONST: [37, 50, 52],
      DECLARE: [37, 50, 52],
      DEFBOOL: [37, 50, 52],
      DEFBYTE: [37, 50, 52],
      DEFDATE: [37, 50, 52],
      DEFDBL: [37, 50, 52],
      DEFDEC: [37, 50, 52],
      DEFCUR: [37, 50, 52],
      DEFINT: [37, 50, 52],
      DEFLNG: [37, 50, 52],
      DEFOBJ: [37, 50, 52],
      DEFSNG: [37, 50, 52],
      DEFSTR: [37, 50, 52],
      DEFVAR: [37, 50, 52],
      DIM: [37, 50, 51, 52],
      DO: [37, 50, 52],
      DOUBLE: [37, 50, 52],
      EACH: [37, 50, 52],
      ELSE: [37, 50, 52],
      ELSEIF: [37, 50, 52],
      END_ENUM: [37, 50, 52],
      END_FUNCTION: [37, 50, 52],
      END_IF: [37, 50, 52],
      END_PROPERTY: [37, 50, 52],
      END_SELECT: [37, 50, 52],
      END_SUB: [37, 50, 52],
      END_TYPE: [37, 50, 52],
      END_WITH: [37, 50, 52],
      END: [37, 46, 50, 52],
      ENUM: [37, 50, 52],
      EQV: [37, 50, 52],
      ERASE: [37, 45, 50, 52],
      EVENT: [37, 50, 52],
      EXIT_DO: [37, 46, 50, 52],
      EXIT_FOR: [37, 46, 50, 52],
      EXIT_FUNCTION: [37, 46, 50, 52],
      EXIT_PROPERTY: [37, 46, 50, 52],
      EXIT_SUB: [37, 46, 50, 52],
      FALSE: [37, 50, 52],
      FRIEND: [37, 50, 51, 52],
      FOR: [37, 41, 42, 50, 52],
      FUNCTION: [37, 50, 52],
      GET: [37, 50, 52],
      GLOBAL: [37, 50, 51, 52],
      GOSUB: [37, 50, 52],
      GOTO: [37, 38, 50, 52],
      IF: [37, 39, 50, 52],
      IMPLEMENTS: [37, 50, 52],
      IN: [37, 50, 52],
      ISNOT: [37, 50, 52],
      IS: [37, 50, 52],
      INTEGER: [37, 50, 52],
      LONG: [37, 50, 52],
      LOOP: [37, 50, 52],
      LEN: [37, 50, 52],
      LET: [37, 50, 52],
      LIB: [37, 50, 52],
      LIKE: [37, 50, 52],
      LSET: [37, 50, 52],
      MACRO_CONST: [37, 50, 52],
      MACRO_IF: [37, 50, 52],
      MACRO_ELSEIF: [37, 50, 52],
      MACRO_ELSE: [37, 50, 52],
      MACRO_END_IF: [37, 50, 52],
      MOD: [37, 50, 52],
      NEXT: [37, 50, 52],
      NEW: [37, 50, 52],
      NOT: [37, 50, 52],
      NOTHING: [37, 50, 52],
      NULL: [37, 50, 52],
      ON_ERROR: [37, 43, 50, 52],
      ON_LOCAL_ERROR: [37, 50, 52],
      ON: [37, 50, 52],
      OPTIONAL: [37, 50, 52],
      OPTION_BASE: [37, 50, 52],
      OPTION_EXPLICIT: [37, 50, 52],
      OPTION_COMPARE: [37, 50, 52],
      OPTION_PRIVATE_MODULE: [37, 50, 52],
      OR: [37, 50, 52],
      PARAMARRAY: [37, 50, 52],
      PRESERVE: [37, 50, 52],
      PRIVATE: [37, 50, 51, 52],
      PROPERTY_GET: [37, 50, 52],
      PROPERTY_LET: [37, 50, 52],
      PROPERTY_SET: [37, 50, 52],
      PTRSAFE: [37, 50, 52],
      PUBLIC: [37, 50, 51, 52],
      RAISEEVENT: [37, 50, 52],
      REDIM: [37, 49, 50, 52],
      RESET: [37, 50, 52],
      RESUME: [37, 50, 52],
      RETURN: [37, 50, 52],
      SELECT: [37, 40, 50, 52],
      SET: [37, 48, 50, 52],
      SINGLE: [37, 50, 52],
      STATIC: [37, 50, 51, 52],
      STEP: [37, 50, 52],
      STOP: [37, 50, 52],
      STRING: [37, 50, 52],
      SUB: [37, 50, 52],
      THEN: [37, 50, 52],
      TO: [37, 50, 52],
      TRUE: [37, 50, 52],
      TYPEOF: [37, 50, 52],
      UNTIL: [37, 50, 52],
      VARIANT: [37, 50, 52],
      WEND: [37, 50, 52],
      WHILE: [37, 50, 52],
      WITH: [37, 44, 50, 52],
      WITHEVENTS: [37, 50, 52],
      XOR: [37, 50, 52],
      IMP: [37, 50, 52],
      IDENTIFIER: [37, 50, 52],
      SPACE_DOT: [50, 52],
    },
    forNextStmt_group_def_11: {
      STEP: [53],
    },
    forNextStmt: {
      FOR: [54],
    },
    forEachStmt: {
      FOR: [55],
    },
    selectCaseStmt: {
      SELECT: [56],
    },
    sC_Selection: {
      IS: [57, 58, 59],
      DOUBLELITERAL: [58, 59],
      INTEGERLITERAL: [58, 59],
      STRINGLITERAL: [58, 59],
      NOTHING: [58, 59],
      NULL: [58, 59],
      TRUE: [58, 59],
      FALSE: [58, 59],
      SPACE_DOT: [58, 59],
      ALIAS: [58, 59],
      AND: [58, 59],
      ATTRIBUTE: [58, 59],
      AS: [58, 59],
      BEGIN: [58, 59],
      BOOLEAN: [58, 59],
      BYVAL: [58, 59],
      BYREF: [58, 59],
      BYTE: [58, 59],
      CALL: [58, 59],
      CASE: [58, 59],
      CONST: [58, 59],
      DECLARE: [58, 59],
      DEFBOOL: [58, 59],
      DEFBYTE: [58, 59],
      DEFDATE: [58, 59],
      DEFDBL: [58, 59],
      DEFDEC: [58, 59],
      DEFCUR: [58, 59],
      DEFINT: [58, 59],
      DEFLNG: [58, 59],
      DEFOBJ: [58, 59],
      DEFSNG: [58, 59],
      DEFSTR: [58, 59],
      DEFVAR: [58, 59],
      DIM: [58, 59],
      DO: [58, 59],
      DOUBLE: [58, 59],
      EACH: [58, 59],
      ELSE: [58, 59],
      ELSEIF: [58, 59],
      END_ENUM: [58, 59],
      END_FUNCTION: [58, 59],
      END_IF: [58, 59],
      END_PROPERTY: [58, 59],
      END_SELECT: [58, 59],
      END_SUB: [58, 59],
      END_TYPE: [58, 59],
      END_WITH: [58, 59],
      END: [58, 59],
      ENUM: [58, 59],
      EQV: [58, 59],
      ERASE: [58, 59],
      EVENT: [58, 59],
      EXIT_DO: [58, 59],
      EXIT_FOR: [58, 59],
      EXIT_FUNCTION: [58, 59],
      EXIT_PROPERTY: [58, 59],
      EXIT_SUB: [58, 59],
      FRIEND: [58, 59],
      FOR: [58, 59],
      FUNCTION: [58, 59],
      GET: [58, 59],
      GLOBAL: [58, 59],
      GOSUB: [58, 59],
      GOTO: [58, 59],
      IF: [58, 59],
      IMPLEMENTS: [58, 59],
      IN: [58, 59],
      ISNOT: [58, 59],
      INTEGER: [58, 59],
      LONG: [58, 59],
      LOOP: [58, 59],
      LEN: [58, 59],
      LET: [58, 59],
      LIB: [58, 59],
      LIKE: [58, 59],
      LSET: [58, 59],
      MACRO_CONST: [58, 59],
      MACRO_IF: [58, 59],
      MACRO_ELSEIF: [58, 59],
      MACRO_ELSE: [58, 59],
      MACRO_END_IF: [58, 59],
      MOD: [58, 59],
      NEXT: [58, 59],
      NEW: [58, 59],
      NOT: [58, 59],
      ON_ERROR: [58, 59],
      ON_LOCAL_ERROR: [58, 59],
      ON: [58, 59],
      OPTIONAL: [58, 59],
      OPTION_BASE: [58, 59],
      OPTION_EXPLICIT: [58, 59],
      OPTION_COMPARE: [58, 59],
      OPTION_PRIVATE_MODULE: [58, 59],
      OR: [58, 59],
      PARAMARRAY: [58, 59],
      PRESERVE: [58, 59],
      PRIVATE: [58, 59],
      PROPERTY_GET: [58, 59],
      PROPERTY_LET: [58, 59],
      PROPERTY_SET: [58, 59],
      PTRSAFE: [58, 59],
      PUBLIC: [58, 59],
      RAISEEVENT: [58, 59],
      REDIM: [58, 59],
      RESET: [58, 59],
      RESUME: [58, 59],
      RETURN: [58, 59],
      SELECT: [58, 59],
      SET: [58, 59],
      SINGLE: [58, 59],
      STATIC: [58, 59],
      STEP: [58, 59],
      STOP: [58, 59],
      STRING: [58, 59],
      SUB: [58, 59],
      THEN: [58, 59],
      TO: [58, 59],
      TYPEOF: [58, 59],
      UNTIL: [58, 59],
      VARIANT: [58, 59],
      WEND: [58, 59],
      WHILE: [58, 59],
      WITH: [58, 59],
      WITHEVENTS: [58, 59],
      XOR: [58, 59],
      IMP: [58, 59],
      IDENTIFIER: [58, 59],
      LPAREN: [58, 59],
      MINUS: [58, 59],
      PLUS: [58, 59],
    },
    sC_Case: {
      CASE: [60],
    },
    sC_Cond: {
      ELSE: [61, 63],
      IS: [63],
      DOUBLELITERAL: [63],
      INTEGERLITERAL: [63],
      STRINGLITERAL: [63],
      NOTHING: [63],
      NULL: [63],
      TRUE: [63],
      FALSE: [63],
      SPACE_DOT: [63],
      ALIAS: [63],
      AND: [63],
      ATTRIBUTE: [63],
      AS: [63],
      BEGIN: [63],
      BOOLEAN: [63],
      BYVAL: [63],
      BYREF: [63],
      BYTE: [63],
      CALL: [63],
      CASE: [63],
      CONST: [63],
      DECLARE: [63],
      DEFBOOL: [63],
      DEFBYTE: [63],
      DEFDATE: [63],
      DEFDBL: [63],
      DEFDEC: [63],
      DEFCUR: [63],
      DEFINT: [63],
      DEFLNG: [63],
      DEFOBJ: [63],
      DEFSNG: [63],
      DEFSTR: [63],
      DEFVAR: [63],
      DIM: [63],
      DO: [63],
      DOUBLE: [63],
      EACH: [63],
      ELSEIF: [63],
      END_ENUM: [63],
      END_FUNCTION: [63],
      END_IF: [63],
      END_PROPERTY: [63],
      END_SELECT: [63],
      END_SUB: [63],
      END_TYPE: [63],
      END_WITH: [63],
      END: [63],
      ENUM: [63],
      EQV: [63],
      ERASE: [63],
      EVENT: [63],
      EXIT_DO: [63],
      EXIT_FOR: [63],
      EXIT_FUNCTION: [63],
      EXIT_PROPERTY: [63],
      EXIT_SUB: [63],
      FRIEND: [63],
      FOR: [63],
      FUNCTION: [63],
      GET: [63],
      GLOBAL: [63],
      GOSUB: [63],
      GOTO: [63],
      IF: [63],
      IMPLEMENTS: [63],
      IN: [63],
      ISNOT: [63],
      INTEGER: [63],
      LONG: [63],
      LOOP: [63],
      LEN: [63],
      LET: [63],
      LIB: [63],
      LIKE: [63],
      LSET: [63],
      MACRO_CONST: [63],
      MACRO_IF: [63],
      MACRO_ELSEIF: [63],
      MACRO_ELSE: [63],
      MACRO_END_IF: [63],
      MOD: [63],
      NEXT: [63],
      NEW: [63],
      NOT: [63],
      ON_ERROR: [63],
      ON_LOCAL_ERROR: [63],
      ON: [63],
      OPTIONAL: [63],
      OPTION_BASE: [63],
      OPTION_EXPLICIT: [63],
      OPTION_COMPARE: [63],
      OPTION_PRIVATE_MODULE: [63],
      OR: [63],
      PARAMARRAY: [63],
      PRESERVE: [63],
      PRIVATE: [63],
      PROPERTY_GET: [63],
      PROPERTY_LET: [63],
      PROPERTY_SET: [63],
      PTRSAFE: [63],
      PUBLIC: [63],
      RAISEEVENT: [63],
      REDIM: [63],
      RESET: [63],
      RESUME: [63],
      RETURN: [63],
      SELECT: [63],
      SET: [63],
      SINGLE: [63],
      STATIC: [63],
      STEP: [63],
      STOP: [63],
      STRING: [63],
      SUB: [63],
      THEN: [63],
      TO: [63],
      TYPEOF: [63],
      UNTIL: [63],
      VARIANT: [63],
      WEND: [63],
      WHILE: [63],
      WITH: [63],
      WITHEVENTS: [63],
      XOR: [63],
      IMP: [63],
      IDENTIFIER: [63],
      LPAREN: [63],
      MINUS: [63],
      PLUS: [63],
    },
    sC_Cond_group_def_13: {
      ',': [62],
    },
    comparisonOperator: {
      LT: [64],
      LEQ: [65],
      GT: [66],
      GEQ: [67],
      EQ: [68],
      NEQ: [69],
      IS: [70],
    },
    ifThenElseStmt_group_def_15: {
      ELSE: [71],
    },
    ifThenElseStmt: {
      IF: [72, 73],
    },
    ifBlockStmt: {
      IF: [74],
    },
    ifElseIfBlockStmt: {
      ELSEIF: [75],
    },
    ifElseBlockStmt: {
      ELSE: [76],
    },
    onErrorStmt_group_def_17: {
      ALIAS: [77],
      AND: [77],
      ATTRIBUTE: [77],
      AS: [77],
      BEGIN: [77],
      BOOLEAN: [77],
      BYVAL: [77],
      BYREF: [77],
      BYTE: [77],
      CALL: [77],
      CASE: [77],
      CONST: [77],
      DECLARE: [77],
      DEFBOOL: [77],
      DEFBYTE: [77],
      DEFDATE: [77],
      DEFDBL: [77],
      DEFDEC: [77],
      DEFCUR: [77],
      DEFINT: [77],
      DEFLNG: [77],
      DEFOBJ: [77],
      DEFSNG: [77],
      DEFSTR: [77],
      DEFVAR: [77],
      DIM: [77],
      DO: [77],
      DOUBLE: [77],
      EACH: [77],
      ELSE: [77],
      ELSEIF: [77],
      END_ENUM: [77],
      END_FUNCTION: [77],
      END_IF: [77],
      END_PROPERTY: [77],
      END_SELECT: [77],
      END_SUB: [77],
      END_TYPE: [77],
      END_WITH: [77],
      END: [77],
      ENUM: [77],
      EQV: [77],
      ERASE: [77],
      EVENT: [77],
      EXIT_DO: [77],
      EXIT_FOR: [77],
      EXIT_FUNCTION: [77],
      EXIT_PROPERTY: [77],
      EXIT_SUB: [77],
      FALSE: [77],
      FRIEND: [77],
      FOR: [77],
      FUNCTION: [77],
      GET: [77],
      GLOBAL: [77],
      GOSUB: [77],
      GOTO: [77],
      IF: [77],
      IMPLEMENTS: [77],
      IN: [77],
      ISNOT: [77],
      IS: [77],
      INTEGER: [77],
      LONG: [77],
      LOOP: [77],
      LEN: [77],
      LET: [77],
      LIB: [77],
      LIKE: [77],
      LSET: [77],
      MACRO_CONST: [77],
      MACRO_IF: [77],
      MACRO_ELSEIF: [77],
      MACRO_ELSE: [77],
      MACRO_END_IF: [77],
      MOD: [77],
      NEXT: [77],
      NEW: [77],
      NOT: [77],
      NOTHING: [77],
      NULL: [77],
      ON_ERROR: [77],
      ON_LOCAL_ERROR: [77],
      ON: [77],
      OPTIONAL: [77],
      OPTION_BASE: [77],
      OPTION_EXPLICIT: [77],
      OPTION_COMPARE: [77],
      OPTION_PRIVATE_MODULE: [77],
      OR: [77],
      PARAMARRAY: [77],
      PRESERVE: [77],
      PRIVATE: [77],
      PROPERTY_GET: [77],
      PROPERTY_LET: [77],
      PROPERTY_SET: [77],
      PTRSAFE: [77],
      PUBLIC: [77],
      RAISEEVENT: [77],
      REDIM: [77],
      RESET: [77],
      RESUME: [77],
      RETURN: [77],
      SELECT: [77],
      SET: [77],
      SINGLE: [77],
      STATIC: [77],
      STEP: [77],
      STOP: [77],
      STRING: [77],
      SUB: [77],
      THEN: [77],
      TO: [77],
      TRUE: [77],
      TYPEOF: [77],
      UNTIL: [77],
      VARIANT: [77],
      WEND: [77],
      WHILE: [77],
      WITH: [77],
      WITHEVENTS: [77],
      XOR: [77],
      IMP: [77],
      IDENTIFIER: [77],
    },
    onErrorStmt_group_16: {
      ALIAS: [78],
      AND: [78],
      ATTRIBUTE: [78],
      AS: [78],
      BEGIN: [78],
      BOOLEAN: [78],
      BYVAL: [78],
      BYREF: [78],
      BYTE: [78],
      CALL: [78],
      CASE: [78],
      CONST: [78],
      DECLARE: [78],
      DEFBOOL: [78],
      DEFBYTE: [78],
      DEFDATE: [78],
      DEFDBL: [78],
      DEFDEC: [78],
      DEFCUR: [78],
      DEFINT: [78],
      DEFLNG: [78],
      DEFOBJ: [78],
      DEFSNG: [78],
      DEFSTR: [78],
      DEFVAR: [78],
      DIM: [78],
      DO: [78],
      DOUBLE: [78],
      EACH: [78],
      ELSE: [78],
      ELSEIF: [78],
      END_ENUM: [78],
      END_FUNCTION: [78],
      END_IF: [78],
      END_PROPERTY: [78],
      END_SELECT: [78],
      END_SUB: [78],
      END_TYPE: [78],
      END_WITH: [78],
      END: [78],
      ENUM: [78],
      EQV: [78],
      ERASE: [78],
      EVENT: [78],
      EXIT_DO: [78],
      EXIT_FOR: [78],
      EXIT_FUNCTION: [78],
      EXIT_PROPERTY: [78],
      EXIT_SUB: [78],
      FALSE: [78],
      FRIEND: [78],
      FOR: [78],
      FUNCTION: [78],
      GET: [78],
      GLOBAL: [78],
      GOSUB: [78],
      GOTO: [78],
      IF: [78],
      IMPLEMENTS: [78],
      IN: [78],
      ISNOT: [78],
      IS: [78],
      INTEGER: [78],
      LONG: [78],
      LOOP: [78],
      LEN: [78],
      LET: [78],
      LIB: [78],
      LIKE: [78],
      LSET: [78],
      MACRO_CONST: [78],
      MACRO_IF: [78],
      MACRO_ELSEIF: [78],
      MACRO_ELSE: [78],
      MACRO_END_IF: [78],
      MOD: [78],
      NEXT: [78],
      NEW: [78],
      NOT: [78],
      NOTHING: [78],
      NULL: [78],
      ON_ERROR: [78],
      ON_LOCAL_ERROR: [78],
      ON: [78],
      OPTIONAL: [78],
      OPTION_BASE: [78],
      OPTION_EXPLICIT: [78],
      OPTION_COMPARE: [78],
      OPTION_PRIVATE_MODULE: [78],
      OR: [78],
      PARAMARRAY: [78],
      PRESERVE: [78],
      PRIVATE: [78],
      PROPERTY_GET: [78],
      PROPERTY_LET: [78],
      PROPERTY_SET: [78],
      PTRSAFE: [78],
      PUBLIC: [78],
      RAISEEVENT: [78],
      REDIM: [78],
      RESET: [78],
      RESUME: [78],
      RETURN: [78],
      SELECT: [78],
      SET: [78],
      SINGLE: [78],
      STATIC: [78],
      STEP: [78],
      STOP: [78],
      STRING: [78],
      SUB: [78],
      THEN: [78],
      TO: [78],
      TRUE: [78],
      TYPEOF: [78],
      UNTIL: [78],
      VARIANT: [78],
      WEND: [78],
      WHILE: [78],
      WITH: [78],
      WITHEVENTS: [78],
      XOR: [78],
      IMP: [78],
      IDENTIFIER: [78],
      MINUS: [80],
    },
    onErrorStmt_group_def_18: {
      MINUS: [79],
    },
    onErrorStmt: {
      ON_ERROR: [81],
    },
    lineLabel: {
      ALIAS: [82],
      AND: [82],
      ATTRIBUTE: [82],
      AS: [82],
      BEGIN: [82],
      BOOLEAN: [82],
      BYVAL: [82],
      BYREF: [82],
      BYTE: [82],
      CALL: [82],
      CASE: [82],
      CONST: [82],
      DECLARE: [82],
      DEFBOOL: [82],
      DEFBYTE: [82],
      DEFDATE: [82],
      DEFDBL: [82],
      DEFDEC: [82],
      DEFCUR: [82],
      DEFINT: [82],
      DEFLNG: [82],
      DEFOBJ: [82],
      DEFSNG: [82],
      DEFSTR: [82],
      DEFVAR: [82],
      DIM: [82],
      DO: [82],
      DOUBLE: [82],
      EACH: [82],
      ELSE: [82],
      ELSEIF: [82],
      END_ENUM: [82],
      END_FUNCTION: [82],
      END_IF: [82],
      END_PROPERTY: [82],
      END_SELECT: [82],
      END_SUB: [82],
      END_TYPE: [82],
      END_WITH: [82],
      END: [82],
      ENUM: [82],
      EQV: [82],
      ERASE: [82],
      EVENT: [82],
      EXIT_DO: [82],
      EXIT_FOR: [82],
      EXIT_FUNCTION: [82],
      EXIT_PROPERTY: [82],
      EXIT_SUB: [82],
      FALSE: [82],
      FRIEND: [82],
      FOR: [82],
      FUNCTION: [82],
      GET: [82],
      GLOBAL: [82],
      GOSUB: [82],
      GOTO: [82],
      IF: [82],
      IMPLEMENTS: [82],
      IN: [82],
      ISNOT: [82],
      IS: [82],
      INTEGER: [82],
      LONG: [82],
      LOOP: [82],
      LEN: [82],
      LET: [82],
      LIB: [82],
      LIKE: [82],
      LSET: [82],
      MACRO_CONST: [82],
      MACRO_IF: [82],
      MACRO_ELSEIF: [82],
      MACRO_ELSE: [82],
      MACRO_END_IF: [82],
      MOD: [82],
      NEXT: [82],
      NEW: [82],
      NOT: [82],
      NOTHING: [82],
      NULL: [82],
      ON_ERROR: [82],
      ON_LOCAL_ERROR: [82],
      ON: [82],
      OPTIONAL: [82],
      OPTION_BASE: [82],
      OPTION_EXPLICIT: [82],
      OPTION_COMPARE: [82],
      OPTION_PRIVATE_MODULE: [82],
      OR: [82],
      PARAMARRAY: [82],
      PRESERVE: [82],
      PRIVATE: [82],
      PROPERTY_GET: [82],
      PROPERTY_LET: [82],
      PROPERTY_SET: [82],
      PTRSAFE: [82],
      PUBLIC: [82],
      RAISEEVENT: [82],
      REDIM: [82],
      RESET: [82],
      RESUME: [82],
      RETURN: [82],
      SELECT: [82],
      SET: [82],
      SINGLE: [82],
      STATIC: [82],
      STEP: [82],
      STOP: [82],
      STRING: [82],
      SUB: [82],
      THEN: [82],
      TO: [82],
      TRUE: [82],
      TYPEOF: [82],
      UNTIL: [82],
      VARIANT: [82],
      WEND: [82],
      WHILE: [82],
      WITH: [82],
      WITHEVENTS: [82],
      XOR: [82],
      IMP: [82],
      IDENTIFIER: [82],
    },
    goToStmt: {
      GOTO: [83],
    },
    eraseStmt_group_def_20: {
      ',': [84],
    },
    eraseStmt: {
      ERASE: [85],
    },
    redimStmt_group_def_22: {
      ',': [86],
    },
    redimStmt: {
      REDIM: [87],
    },
    redimSubStmt: {
      SPACE_DOT: [88],
      ALIAS: [88],
      AND: [88],
      ATTRIBUTE: [88],
      AS: [88],
      BEGIN: [88],
      BOOLEAN: [88],
      BYVAL: [88],
      BYREF: [88],
      BYTE: [88],
      CALL: [88],
      CASE: [88],
      CONST: [88],
      DECLARE: [88],
      DEFBOOL: [88],
      DEFBYTE: [88],
      DEFDATE: [88],
      DEFDBL: [88],
      DEFDEC: [88],
      DEFCUR: [88],
      DEFINT: [88],
      DEFLNG: [88],
      DEFOBJ: [88],
      DEFSNG: [88],
      DEFSTR: [88],
      DEFVAR: [88],
      DIM: [88],
      DO: [88],
      DOUBLE: [88],
      EACH: [88],
      ELSE: [88],
      ELSEIF: [88],
      END_ENUM: [88],
      END_FUNCTION: [88],
      END_IF: [88],
      END_PROPERTY: [88],
      END_SELECT: [88],
      END_SUB: [88],
      END_TYPE: [88],
      END_WITH: [88],
      END: [88],
      ENUM: [88],
      EQV: [88],
      ERASE: [88],
      EVENT: [88],
      EXIT_DO: [88],
      EXIT_FOR: [88],
      EXIT_FUNCTION: [88],
      EXIT_PROPERTY: [88],
      EXIT_SUB: [88],
      FALSE: [88],
      FRIEND: [88],
      FOR: [88],
      FUNCTION: [88],
      GET: [88],
      GLOBAL: [88],
      GOSUB: [88],
      GOTO: [88],
      IF: [88],
      IMPLEMENTS: [88],
      IN: [88],
      ISNOT: [88],
      IS: [88],
      INTEGER: [88],
      LONG: [88],
      LOOP: [88],
      LEN: [88],
      LET: [88],
      LIB: [88],
      LIKE: [88],
      LSET: [88],
      MACRO_CONST: [88],
      MACRO_IF: [88],
      MACRO_ELSEIF: [88],
      MACRO_ELSE: [88],
      MACRO_END_IF: [88],
      MOD: [88],
      NEXT: [88],
      NEW: [88],
      NOT: [88],
      NOTHING: [88],
      NULL: [88],
      ON_ERROR: [88],
      ON_LOCAL_ERROR: [88],
      ON: [88],
      OPTIONAL: [88],
      OPTION_BASE: [88],
      OPTION_EXPLICIT: [88],
      OPTION_COMPARE: [88],
      OPTION_PRIVATE_MODULE: [88],
      OR: [88],
      PARAMARRAY: [88],
      PRESERVE: [88],
      PRIVATE: [88],
      PROPERTY_GET: [88],
      PROPERTY_LET: [88],
      PROPERTY_SET: [88],
      PTRSAFE: [88],
      PUBLIC: [88],
      RAISEEVENT: [88],
      REDIM: [88],
      RESET: [88],
      RESUME: [88],
      RETURN: [88],
      SELECT: [88],
      SET: [88],
      SINGLE: [88],
      STATIC: [88],
      STEP: [88],
      STOP: [88],
      STRING: [88],
      SUB: [88],
      THEN: [88],
      TO: [88],
      TRUE: [88],
      TYPEOF: [88],
      UNTIL: [88],
      VARIANT: [88],
      WEND: [88],
      WHILE: [88],
      WITH: [88],
      WITHEVENTS: [88],
      XOR: [88],
      IMP: [88],
      IDENTIFIER: [88],
    },
    exitStmt: {
      EXIT_DO: [89],
      EXIT_FOR: [90],
      EXIT_FUNCTION: [91],
      EXIT_PROPERTY: [92],
      EXIT_SUB: [93],
      END: [94],
    },
    letStmt_group_def_24: {
      EQ: [95],
    },
    letStmt_group_23: {
      EQ: [96],
      PLUS_EQ: [98],
      MINUS_EQ: [100],
    },
    letStmt_group_def_25: {
      PLUS_EQ: [97],
    },
    letStmt_group_def_26: {
      MINUS_EQ: [99],
    },
    letStmt: {
      LET: [101],
      SPACE_DOT: [101],
      ALIAS: [101],
      AND: [101],
      ATTRIBUTE: [101],
      AS: [101],
      BEGIN: [101],
      BOOLEAN: [101],
      BYVAL: [101],
      BYREF: [101],
      BYTE: [101],
      CALL: [101],
      CASE: [101],
      CONST: [101],
      DECLARE: [101],
      DEFBOOL: [101],
      DEFBYTE: [101],
      DEFDATE: [101],
      DEFDBL: [101],
      DEFDEC: [101],
      DEFCUR: [101],
      DEFINT: [101],
      DEFLNG: [101],
      DEFOBJ: [101],
      DEFSNG: [101],
      DEFSTR: [101],
      DEFVAR: [101],
      DIM: [101],
      DO: [101],
      DOUBLE: [101],
      EACH: [101],
      ELSE: [101],
      ELSEIF: [101],
      END_ENUM: [101],
      END_FUNCTION: [101],
      END_IF: [101],
      END_PROPERTY: [101],
      END_SELECT: [101],
      END_SUB: [101],
      END_TYPE: [101],
      END_WITH: [101],
      END: [101],
      ENUM: [101],
      EQV: [101],
      ERASE: [101],
      EVENT: [101],
      EXIT_DO: [101],
      EXIT_FOR: [101],
      EXIT_FUNCTION: [101],
      EXIT_PROPERTY: [101],
      EXIT_SUB: [101],
      FALSE: [101],
      FRIEND: [101],
      FOR: [101],
      FUNCTION: [101],
      GET: [101],
      GLOBAL: [101],
      GOSUB: [101],
      GOTO: [101],
      IF: [101],
      IMPLEMENTS: [101],
      IN: [101],
      ISNOT: [101],
      IS: [101],
      INTEGER: [101],
      LONG: [101],
      LOOP: [101],
      LEN: [101],
      LIB: [101],
      LIKE: [101],
      LSET: [101],
      MACRO_CONST: [101],
      MACRO_IF: [101],
      MACRO_ELSEIF: [101],
      MACRO_ELSE: [101],
      MACRO_END_IF: [101],
      MOD: [101],
      NEXT: [101],
      NEW: [101],
      NOT: [101],
      NOTHING: [101],
      NULL: [101],
      ON_ERROR: [101],
      ON_LOCAL_ERROR: [101],
      ON: [101],
      OPTIONAL: [101],
      OPTION_BASE: [101],
      OPTION_EXPLICIT: [101],
      OPTION_COMPARE: [101],
      OPTION_PRIVATE_MODULE: [101],
      OR: [101],
      PARAMARRAY: [101],
      PRESERVE: [101],
      PRIVATE: [101],
      PROPERTY_GET: [101],
      PROPERTY_LET: [101],
      PROPERTY_SET: [101],
      PTRSAFE: [101],
      PUBLIC: [101],
      RAISEEVENT: [101],
      REDIM: [101],
      RESET: [101],
      RESUME: [101],
      RETURN: [101],
      SELECT: [101],
      SET: [101],
      SINGLE: [101],
      STATIC: [101],
      STEP: [101],
      STOP: [101],
      STRING: [101],
      SUB: [101],
      THEN: [101],
      TO: [101],
      TRUE: [101],
      TYPEOF: [101],
      UNTIL: [101],
      VARIANT: [101],
      WEND: [101],
      WHILE: [101],
      WITH: [101],
      WITHEVENTS: [101],
      XOR: [101],
      IMP: [101],
      IDENTIFIER: [101],
    },
    setStmt: {
      SET: [102],
    },
    explicitCallStmt: {
      CALL: [103, 104],
    },
    eCS_MemberProcedureCall_group_def_28: {
      SPACE_DOT: [105],
      ALIAS: [105],
      AND: [105],
      ATTRIBUTE: [105],
      AS: [105],
      BEGIN: [105],
      BOOLEAN: [105],
      BYVAL: [105],
      BYREF: [105],
      BYTE: [105],
      CALL: [105],
      CASE: [105],
      CONST: [105],
      DECLARE: [105],
      DEFBOOL: [105],
      DEFBYTE: [105],
      DEFDATE: [105],
      DEFDBL: [105],
      DEFDEC: [105],
      DEFCUR: [105],
      DEFINT: [105],
      DEFLNG: [105],
      DEFOBJ: [105],
      DEFSNG: [105],
      DEFSTR: [105],
      DEFVAR: [105],
      DIM: [105],
      DO: [105],
      DOUBLE: [105],
      EACH: [105],
      ELSE: [105],
      ELSEIF: [105],
      END_ENUM: [105],
      END_FUNCTION: [105],
      END_IF: [105],
      END_PROPERTY: [105],
      END_SELECT: [105],
      END_SUB: [105],
      END_TYPE: [105],
      END_WITH: [105],
      END: [105],
      ENUM: [105],
      EQV: [105],
      ERASE: [105],
      EVENT: [105],
      EXIT_DO: [105],
      EXIT_FOR: [105],
      EXIT_FUNCTION: [105],
      EXIT_PROPERTY: [105],
      EXIT_SUB: [105],
      FALSE: [105],
      FRIEND: [105],
      FOR: [105],
      FUNCTION: [105],
      GET: [105],
      GLOBAL: [105],
      GOSUB: [105],
      GOTO: [105],
      IF: [105],
      IMPLEMENTS: [105],
      IN: [105],
      ISNOT: [105],
      IS: [105],
      INTEGER: [105],
      LONG: [105],
      LOOP: [105],
      LEN: [105],
      LET: [105],
      LIB: [105],
      LIKE: [105],
      LSET: [105],
      MACRO_CONST: [105],
      MACRO_IF: [105],
      MACRO_ELSEIF: [105],
      MACRO_ELSE: [105],
      MACRO_END_IF: [105],
      MOD: [105],
      NEXT: [105],
      NEW: [105],
      NOT: [105],
      NOTHING: [105],
      NULL: [105],
      ON_ERROR: [105],
      ON_LOCAL_ERROR: [105],
      ON: [105],
      OPTIONAL: [105],
      OPTION_BASE: [105],
      OPTION_EXPLICIT: [105],
      OPTION_COMPARE: [105],
      OPTION_PRIVATE_MODULE: [105],
      OR: [105],
      PARAMARRAY: [105],
      PRESERVE: [105],
      PRIVATE: [105],
      PROPERTY_GET: [105],
      PROPERTY_LET: [105],
      PROPERTY_SET: [105],
      PTRSAFE: [105],
      PUBLIC: [105],
      RAISEEVENT: [105],
      REDIM: [105],
      RESET: [105],
      RESUME: [105],
      RETURN: [105],
      SELECT: [105],
      SET: [105],
      SINGLE: [105],
      STATIC: [105],
      STEP: [105],
      STOP: [105],
      STRING: [105],
      SUB: [105],
      THEN: [105],
      TO: [105],
      TRUE: [105],
      TYPEOF: [105],
      UNTIL: [105],
      VARIANT: [105],
      WEND: [105],
      WHILE: [105],
      WITH: [105],
      WITHEVENTS: [105],
      XOR: [105],
      IMP: [105],
      IDENTIFIER: [105],
      '.': [105],
    },
    eCS_MemberProcedureCall_group_27: {
      SPACE_DOT: [106, 108],
      ALIAS: [106],
      AND: [106],
      ATTRIBUTE: [106],
      AS: [106],
      BEGIN: [106],
      BOOLEAN: [106],
      BYVAL: [106],
      BYREF: [106],
      BYTE: [106],
      CALL: [106],
      CASE: [106],
      CONST: [106],
      DECLARE: [106],
      DEFBOOL: [106],
      DEFBYTE: [106],
      DEFDATE: [106],
      DEFDBL: [106],
      DEFDEC: [106],
      DEFCUR: [106],
      DEFINT: [106],
      DEFLNG: [106],
      DEFOBJ: [106],
      DEFSNG: [106],
      DEFSTR: [106],
      DEFVAR: [106],
      DIM: [106],
      DO: [106],
      DOUBLE: [106],
      EACH: [106],
      ELSE: [106],
      ELSEIF: [106],
      END_ENUM: [106],
      END_FUNCTION: [106],
      END_IF: [106],
      END_PROPERTY: [106],
      END_SELECT: [106],
      END_SUB: [106],
      END_TYPE: [106],
      END_WITH: [106],
      END: [106],
      ENUM: [106],
      EQV: [106],
      ERASE: [106],
      EVENT: [106],
      EXIT_DO: [106],
      EXIT_FOR: [106],
      EXIT_FUNCTION: [106],
      EXIT_PROPERTY: [106],
      EXIT_SUB: [106],
      FALSE: [106],
      FRIEND: [106],
      FOR: [106],
      FUNCTION: [106],
      GET: [106],
      GLOBAL: [106],
      GOSUB: [106],
      GOTO: [106],
      IF: [106],
      IMPLEMENTS: [106],
      IN: [106],
      ISNOT: [106],
      IS: [106],
      INTEGER: [106],
      LONG: [106],
      LOOP: [106],
      LEN: [106],
      LET: [106],
      LIB: [106],
      LIKE: [106],
      LSET: [106],
      MACRO_CONST: [106],
      MACRO_IF: [106],
      MACRO_ELSEIF: [106],
      MACRO_ELSE: [106],
      MACRO_END_IF: [106],
      MOD: [106],
      NEXT: [106],
      NEW: [106],
      NOT: [106],
      NOTHING: [106],
      NULL: [106],
      ON_ERROR: [106],
      ON_LOCAL_ERROR: [106],
      ON: [106],
      OPTIONAL: [106],
      OPTION_BASE: [106],
      OPTION_EXPLICIT: [106],
      OPTION_COMPARE: [106],
      OPTION_PRIVATE_MODULE: [106],
      OR: [106],
      PARAMARRAY: [106],
      PRESERVE: [106],
      PRIVATE: [106],
      PROPERTY_GET: [106],
      PROPERTY_LET: [106],
      PROPERTY_SET: [106],
      PTRSAFE: [106],
      PUBLIC: [106],
      RAISEEVENT: [106],
      REDIM: [106],
      RESET: [106],
      RESUME: [106],
      RETURN: [106],
      SELECT: [106],
      SET: [106],
      SINGLE: [106],
      STATIC: [106],
      STEP: [106],
      STOP: [106],
      STRING: [106],
      SUB: [106],
      THEN: [106],
      TO: [106],
      TRUE: [106],
      TYPEOF: [106],
      UNTIL: [106],
      VARIANT: [106],
      WEND: [106],
      WHILE: [106],
      WITH: [106],
      WITHEVENTS: [106],
      XOR: [106],
      IMP: [106],
      IDENTIFIER: [106],
      '.': [106],
    },
    eCS_MemberProcedureCall_group_def_29: {
      SPACE_DOT: [107],
    },
    eCS_MemberProcedureCall_group_def_31: {
      LPAREN: [109],
    },
    eCS_MemberProcedureCall_group_def_33: {
      LPAREN: [110],
    },
    eCS_MemberProcedureCall: {
      CALL: [111],
    },
    eCS_ProcedureCall: {
      CALL: [112],
    },
    implicitCallStmt_InBlock: {
      SPACE_DOT: [113],
      ALIAS: [113],
      AND: [113],
      ATTRIBUTE: [113],
      AS: [113],
      BEGIN: [113],
      BOOLEAN: [113],
      BYVAL: [113],
      BYREF: [113],
      BYTE: [113],
      CALL: [113],
      CASE: [113],
      CONST: [113],
      DECLARE: [113],
      DEFBOOL: [113],
      DEFBYTE: [113],
      DEFDATE: [113],
      DEFDBL: [113],
      DEFDEC: [113],
      DEFCUR: [113],
      DEFINT: [113],
      DEFLNG: [113],
      DEFOBJ: [113],
      DEFSNG: [113],
      DEFSTR: [113],
      DEFVAR: [113],
      DIM: [113],
      DO: [113],
      DOUBLE: [113],
      EACH: [113],
      ELSE: [113],
      ELSEIF: [113],
      END_ENUM: [113],
      END_FUNCTION: [113],
      END_IF: [113],
      END_PROPERTY: [113],
      END_SELECT: [113],
      END_SUB: [113],
      END_TYPE: [113],
      END_WITH: [113],
      END: [113],
      ENUM: [113],
      EQV: [113],
      ERASE: [113],
      EVENT: [113],
      EXIT_DO: [113],
      EXIT_FOR: [113],
      EXIT_FUNCTION: [113],
      EXIT_PROPERTY: [113],
      EXIT_SUB: [113],
      FALSE: [113],
      FRIEND: [113],
      FOR: [113],
      FUNCTION: [113],
      GET: [113],
      GLOBAL: [113],
      GOSUB: [113],
      GOTO: [113],
      IF: [113],
      IMPLEMENTS: [113],
      IN: [113],
      ISNOT: [113],
      IS: [113],
      INTEGER: [113],
      LONG: [113],
      LOOP: [113],
      LEN: [113],
      LET: [113],
      LIB: [113],
      LIKE: [113],
      LSET: [113],
      MACRO_CONST: [113],
      MACRO_IF: [113],
      MACRO_ELSEIF: [113],
      MACRO_ELSE: [113],
      MACRO_END_IF: [113],
      MOD: [113],
      NEXT: [113],
      NEW: [113],
      NOT: [113],
      NOTHING: [113],
      NULL: [113],
      ON_ERROR: [113],
      ON_LOCAL_ERROR: [113],
      ON: [113],
      OPTIONAL: [113],
      OPTION_BASE: [113],
      OPTION_EXPLICIT: [113],
      OPTION_COMPARE: [113],
      OPTION_PRIVATE_MODULE: [113],
      OR: [113],
      PARAMARRAY: [113],
      PRESERVE: [113],
      PRIVATE: [113],
      PROPERTY_GET: [113],
      PROPERTY_LET: [113],
      PROPERTY_SET: [113],
      PTRSAFE: [113],
      PUBLIC: [113],
      RAISEEVENT: [113],
      REDIM: [113],
      RESET: [113],
      RESUME: [113],
      RETURN: [113],
      SELECT: [113],
      SET: [113],
      SINGLE: [113],
      STATIC: [113],
      STEP: [113],
      STOP: [113],
      STRING: [113],
      SUB: [113],
      THEN: [113],
      TO: [113],
      TRUE: [113],
      TYPEOF: [113],
      UNTIL: [113],
      VARIANT: [113],
      WEND: [113],
      WHILE: [113],
      WITH: [113],
      WITHEVENTS: [113],
      XOR: [113],
      IMP: [113],
      IDENTIFIER: [113, 114],
    },
    iCS_B_MemberProcedureCall: {
      SPACE_DOT: [115],
      ALIAS: [115],
      AND: [115],
      ATTRIBUTE: [115],
      AS: [115],
      BEGIN: [115],
      BOOLEAN: [115],
      BYVAL: [115],
      BYREF: [115],
      BYTE: [115],
      CALL: [115],
      CASE: [115],
      CONST: [115],
      DECLARE: [115],
      DEFBOOL: [115],
      DEFBYTE: [115],
      DEFDATE: [115],
      DEFDBL: [115],
      DEFDEC: [115],
      DEFCUR: [115],
      DEFINT: [115],
      DEFLNG: [115],
      DEFOBJ: [115],
      DEFSNG: [115],
      DEFSTR: [115],
      DEFVAR: [115],
      DIM: [115],
      DO: [115],
      DOUBLE: [115],
      EACH: [115],
      ELSE: [115],
      ELSEIF: [115],
      END_ENUM: [115],
      END_FUNCTION: [115],
      END_IF: [115],
      END_PROPERTY: [115],
      END_SELECT: [115],
      END_SUB: [115],
      END_TYPE: [115],
      END_WITH: [115],
      END: [115],
      ENUM: [115],
      EQV: [115],
      ERASE: [115],
      EVENT: [115],
      EXIT_DO: [115],
      EXIT_FOR: [115],
      EXIT_FUNCTION: [115],
      EXIT_PROPERTY: [115],
      EXIT_SUB: [115],
      FALSE: [115],
      FRIEND: [115],
      FOR: [115],
      FUNCTION: [115],
      GET: [115],
      GLOBAL: [115],
      GOSUB: [115],
      GOTO: [115],
      IF: [115],
      IMPLEMENTS: [115],
      IN: [115],
      ISNOT: [115],
      IS: [115],
      INTEGER: [115],
      LONG: [115],
      LOOP: [115],
      LEN: [115],
      LET: [115],
      LIB: [115],
      LIKE: [115],
      LSET: [115],
      MACRO_CONST: [115],
      MACRO_IF: [115],
      MACRO_ELSEIF: [115],
      MACRO_ELSE: [115],
      MACRO_END_IF: [115],
      MOD: [115],
      NEXT: [115],
      NEW: [115],
      NOT: [115],
      NOTHING: [115],
      NULL: [115],
      ON_ERROR: [115],
      ON_LOCAL_ERROR: [115],
      ON: [115],
      OPTIONAL: [115],
      OPTION_BASE: [115],
      OPTION_EXPLICIT: [115],
      OPTION_COMPARE: [115],
      OPTION_PRIVATE_MODULE: [115],
      OR: [115],
      PARAMARRAY: [115],
      PRESERVE: [115],
      PRIVATE: [115],
      PROPERTY_GET: [115],
      PROPERTY_LET: [115],
      PROPERTY_SET: [115],
      PTRSAFE: [115],
      PUBLIC: [115],
      RAISEEVENT: [115],
      REDIM: [115],
      RESET: [115],
      RESUME: [115],
      RETURN: [115],
      SELECT: [115],
      SET: [115],
      SINGLE: [115],
      STATIC: [115],
      STEP: [115],
      STOP: [115],
      STRING: [115],
      SUB: [115],
      THEN: [115],
      TO: [115],
      TRUE: [115],
      TYPEOF: [115],
      UNTIL: [115],
      VARIANT: [115],
      WEND: [115],
      WHILE: [115],
      WITH: [115],
      WITHEVENTS: [115],
      XOR: [115],
      IMP: [115],
      IDENTIFIER: [115],
    },
    iCS_B_ProcedureCall: {
      IDENTIFIER: [116],
    },
    argsCall_group_def_39: {
      ',': [117],
    },
    argsCall: {
      ',': [118],
      DOUBLELITERAL: [118],
      INTEGERLITERAL: [118],
      STRINGLITERAL: [118],
      NOTHING: [118],
      NULL: [118],
      TRUE: [118],
      FALSE: [118],
      SPACE_DOT: [118],
      ALIAS: [118],
      AND: [118],
      ATTRIBUTE: [118],
      AS: [118],
      BEGIN: [118],
      BOOLEAN: [118],
      BYVAL: [118],
      BYREF: [118],
      BYTE: [118],
      CALL: [118],
      CASE: [118],
      CONST: [118],
      DECLARE: [118],
      DEFBOOL: [118],
      DEFBYTE: [118],
      DEFDATE: [118],
      DEFDBL: [118],
      DEFDEC: [118],
      DEFCUR: [118],
      DEFINT: [118],
      DEFLNG: [118],
      DEFOBJ: [118],
      DEFSNG: [118],
      DEFSTR: [118],
      DEFVAR: [118],
      DIM: [118],
      DO: [118],
      DOUBLE: [118],
      EACH: [118],
      ELSE: [118],
      ELSEIF: [118],
      END_ENUM: [118],
      END_FUNCTION: [118],
      END_IF: [118],
      END_PROPERTY: [118],
      END_SELECT: [118],
      END_SUB: [118],
      END_TYPE: [118],
      END_WITH: [118],
      END: [118],
      ENUM: [118],
      EQV: [118],
      ERASE: [118],
      EVENT: [118],
      EXIT_DO: [118],
      EXIT_FOR: [118],
      EXIT_FUNCTION: [118],
      EXIT_PROPERTY: [118],
      EXIT_SUB: [118],
      FRIEND: [118],
      FOR: [118],
      FUNCTION: [118],
      GET: [118],
      GLOBAL: [118],
      GOSUB: [118],
      GOTO: [118],
      IF: [118],
      IMPLEMENTS: [118],
      IN: [118],
      ISNOT: [118],
      IS: [118],
      INTEGER: [118],
      LONG: [118],
      LOOP: [118],
      LEN: [118],
      LET: [118],
      LIB: [118],
      LIKE: [118],
      LSET: [118],
      MACRO_CONST: [118],
      MACRO_IF: [118],
      MACRO_ELSEIF: [118],
      MACRO_ELSE: [118],
      MACRO_END_IF: [118],
      MOD: [118],
      NEXT: [118],
      NEW: [118],
      NOT: [118],
      ON_ERROR: [118],
      ON_LOCAL_ERROR: [118],
      ON: [118],
      OPTIONAL: [118],
      OPTION_BASE: [118],
      OPTION_EXPLICIT: [118],
      OPTION_COMPARE: [118],
      OPTION_PRIVATE_MODULE: [118],
      OR: [118],
      PARAMARRAY: [118],
      PRESERVE: [118],
      PRIVATE: [118],
      PROPERTY_GET: [118],
      PROPERTY_LET: [118],
      PROPERTY_SET: [118],
      PTRSAFE: [118],
      PUBLIC: [118],
      RAISEEVENT: [118],
      REDIM: [118],
      RESET: [118],
      RESUME: [118],
      RETURN: [118],
      SELECT: [118],
      SET: [118],
      SINGLE: [118],
      STATIC: [118],
      STEP: [118],
      STOP: [118],
      STRING: [118],
      SUB: [118],
      THEN: [118],
      TO: [118],
      TYPEOF: [118],
      UNTIL: [118],
      VARIANT: [118],
      WEND: [118],
      WHILE: [118],
      WITH: [118],
      WITHEVENTS: [118],
      XOR: [118],
      IMP: [118],
      IDENTIFIER: [118],
      LPAREN: [118],
      MINUS: [118],
      PLUS: [118],
    },
    argCall: {
      DOUBLELITERAL: [119],
      INTEGERLITERAL: [119],
      STRINGLITERAL: [119],
      NOTHING: [119],
      NULL: [119],
      TRUE: [119],
      FALSE: [119],
      SPACE_DOT: [119],
      ALIAS: [119],
      AND: [119],
      ATTRIBUTE: [119],
      AS: [119],
      BEGIN: [119],
      BOOLEAN: [119],
      BYVAL: [119],
      BYREF: [119],
      BYTE: [119],
      CALL: [119],
      CASE: [119],
      CONST: [119],
      DECLARE: [119],
      DEFBOOL: [119],
      DEFBYTE: [119],
      DEFDATE: [119],
      DEFDBL: [119],
      DEFDEC: [119],
      DEFCUR: [119],
      DEFINT: [119],
      DEFLNG: [119],
      DEFOBJ: [119],
      DEFSNG: [119],
      DEFSTR: [119],
      DEFVAR: [119],
      DIM: [119],
      DO: [119],
      DOUBLE: [119],
      EACH: [119],
      ELSE: [119],
      ELSEIF: [119],
      END_ENUM: [119],
      END_FUNCTION: [119],
      END_IF: [119],
      END_PROPERTY: [119],
      END_SELECT: [119],
      END_SUB: [119],
      END_TYPE: [119],
      END_WITH: [119],
      END: [119],
      ENUM: [119],
      EQV: [119],
      ERASE: [119],
      EVENT: [119],
      EXIT_DO: [119],
      EXIT_FOR: [119],
      EXIT_FUNCTION: [119],
      EXIT_PROPERTY: [119],
      EXIT_SUB: [119],
      FRIEND: [119],
      FOR: [119],
      FUNCTION: [119],
      GET: [119],
      GLOBAL: [119],
      GOSUB: [119],
      GOTO: [119],
      IF: [119],
      IMPLEMENTS: [119],
      IN: [119],
      ISNOT: [119],
      IS: [119],
      INTEGER: [119],
      LONG: [119],
      LOOP: [119],
      LEN: [119],
      LET: [119],
      LIB: [119],
      LIKE: [119],
      LSET: [119],
      MACRO_CONST: [119],
      MACRO_IF: [119],
      MACRO_ELSEIF: [119],
      MACRO_ELSE: [119],
      MACRO_END_IF: [119],
      MOD: [119],
      NEXT: [119],
      NEW: [119],
      NOT: [119],
      ON_ERROR: [119],
      ON_LOCAL_ERROR: [119],
      ON: [119],
      OPTIONAL: [119],
      OPTION_BASE: [119],
      OPTION_EXPLICIT: [119],
      OPTION_COMPARE: [119],
      OPTION_PRIVATE_MODULE: [119],
      OR: [119],
      PARAMARRAY: [119],
      PRESERVE: [119],
      PRIVATE: [119],
      PROPERTY_GET: [119],
      PROPERTY_LET: [119],
      PROPERTY_SET: [119],
      PTRSAFE: [119],
      PUBLIC: [119],
      RAISEEVENT: [119],
      REDIM: [119],
      RESET: [119],
      RESUME: [119],
      RETURN: [119],
      SELECT: [119],
      SET: [119],
      SINGLE: [119],
      STATIC: [119],
      STEP: [119],
      STOP: [119],
      STRING: [119],
      SUB: [119],
      THEN: [119],
      TO: [119],
      TYPEOF: [119],
      UNTIL: [119],
      VARIANT: [119],
      WEND: [119],
      WHILE: [119],
      WITH: [119],
      WITHEVENTS: [119],
      XOR: [119],
      IMP: [119],
      IDENTIFIER: [119],
      LPAREN: [119],
      MINUS: [119],
      PLUS: [119],
    },
    variableStmt_group_def_41: {
      DIM: [120],
    },
    variableStmt_group_40: {
      DIM: [121],
      STATIC: [123],
      PRIVATE: [125],
      PUBLIC: [125],
      FRIEND: [125],
      GLOBAL: [125],
    },
    variableStmt_group_def_42: {
      STATIC: [122],
    },
    variableStmt_group_def_43: {
      PRIVATE: [124],
      PUBLIC: [124],
      FRIEND: [124],
      GLOBAL: [124],
    },
    variableStmt: {
      DIM: [126],
      STATIC: [126],
      PRIVATE: [126],
      PUBLIC: [126],
      FRIEND: [126],
      GLOBAL: [126],
    },
    withStmt_group_def_45: {
      SPACE_DOT: [127],
      ALIAS: [127],
      AND: [127],
      ATTRIBUTE: [127],
      AS: [127],
      BEGIN: [127],
      BOOLEAN: [127],
      BYVAL: [127],
      BYREF: [127],
      BYTE: [127],
      CALL: [127],
      CASE: [127],
      CONST: [127],
      DECLARE: [127],
      DEFBOOL: [127],
      DEFBYTE: [127],
      DEFDATE: [127],
      DEFDBL: [127],
      DEFDEC: [127],
      DEFCUR: [127],
      DEFINT: [127],
      DEFLNG: [127],
      DEFOBJ: [127],
      DEFSNG: [127],
      DEFSTR: [127],
      DEFVAR: [127],
      DIM: [127],
      DO: [127],
      DOUBLE: [127],
      EACH: [127],
      ELSE: [127],
      ELSEIF: [127],
      END_ENUM: [127],
      END_FUNCTION: [127],
      END_IF: [127],
      END_PROPERTY: [127],
      END_SELECT: [127],
      END_SUB: [127],
      END_TYPE: [127],
      END_WITH: [127],
      END: [127],
      ENUM: [127],
      EQV: [127],
      ERASE: [127],
      EVENT: [127],
      EXIT_DO: [127],
      EXIT_FOR: [127],
      EXIT_FUNCTION: [127],
      EXIT_PROPERTY: [127],
      EXIT_SUB: [127],
      FALSE: [127],
      FRIEND: [127],
      FOR: [127],
      FUNCTION: [127],
      GET: [127],
      GLOBAL: [127],
      GOSUB: [127],
      GOTO: [127],
      IF: [127],
      IMPLEMENTS: [127],
      IN: [127],
      ISNOT: [127],
      IS: [127],
      INTEGER: [127],
      LONG: [127],
      LOOP: [127],
      LEN: [127],
      LET: [127],
      LIB: [127],
      LIKE: [127],
      LSET: [127],
      MACRO_CONST: [127],
      MACRO_IF: [127],
      MACRO_ELSEIF: [127],
      MACRO_ELSE: [127],
      MACRO_END_IF: [127],
      MOD: [127],
      NEXT: [127],
      NEW: [127],
      NOT: [127],
      NOTHING: [127],
      NULL: [127],
      ON_ERROR: [127],
      ON_LOCAL_ERROR: [127],
      ON: [127],
      OPTIONAL: [127],
      OPTION_BASE: [127],
      OPTION_EXPLICIT: [127],
      OPTION_COMPARE: [127],
      OPTION_PRIVATE_MODULE: [127],
      OR: [127],
      PARAMARRAY: [127],
      PRESERVE: [127],
      PRIVATE: [127],
      PROPERTY_GET: [127],
      PROPERTY_LET: [127],
      PROPERTY_SET: [127],
      PTRSAFE: [127],
      PUBLIC: [127],
      RAISEEVENT: [127],
      REDIM: [127],
      RESET: [127],
      RESUME: [127],
      RETURN: [127],
      SELECT: [127],
      SET: [127],
      SINGLE: [127],
      STATIC: [127],
      STEP: [127],
      STOP: [127],
      STRING: [127],
      SUB: [127],
      THEN: [127],
      TO: [127],
      TRUE: [127],
      TYPEOF: [127],
      UNTIL: [127],
      VARIANT: [127],
      WEND: [127],
      WHILE: [127],
      WITH: [127],
      WITHEVENTS: [127],
      XOR: [127],
      IMP: [127],
      IDENTIFIER: [127],
    },
    withStmt_group_44: {
      SPACE_DOT: [128],
      ALIAS: [128],
      AND: [128],
      ATTRIBUTE: [128],
      AS: [128],
      BEGIN: [128],
      BOOLEAN: [128],
      BYVAL: [128],
      BYREF: [128],
      BYTE: [128],
      CALL: [128],
      CASE: [128],
      CONST: [128],
      DECLARE: [128],
      DEFBOOL: [128],
      DEFBYTE: [128],
      DEFDATE: [128],
      DEFDBL: [128],
      DEFDEC: [128],
      DEFCUR: [128],
      DEFINT: [128],
      DEFLNG: [128],
      DEFOBJ: [128],
      DEFSNG: [128],
      DEFSTR: [128],
      DEFVAR: [128],
      DIM: [128],
      DO: [128],
      DOUBLE: [128],
      EACH: [128],
      ELSE: [128],
      ELSEIF: [128],
      END_ENUM: [128],
      END_FUNCTION: [128],
      END_IF: [128],
      END_PROPERTY: [128],
      END_SELECT: [128],
      END_SUB: [128],
      END_TYPE: [128],
      END_WITH: [128],
      END: [128],
      ENUM: [128],
      EQV: [128],
      ERASE: [128],
      EVENT: [128],
      EXIT_DO: [128],
      EXIT_FOR: [128],
      EXIT_FUNCTION: [128],
      EXIT_PROPERTY: [128],
      EXIT_SUB: [128],
      FALSE: [128],
      FRIEND: [128],
      FOR: [128],
      FUNCTION: [128],
      GET: [128],
      GLOBAL: [128],
      GOSUB: [128],
      GOTO: [128],
      IF: [128],
      IMPLEMENTS: [128],
      IN: [128],
      ISNOT: [128],
      IS: [128],
      INTEGER: [128],
      LONG: [128],
      LOOP: [128],
      LEN: [128],
      LET: [128],
      LIB: [128],
      LIKE: [128],
      LSET: [128],
      MACRO_CONST: [128],
      MACRO_IF: [128],
      MACRO_ELSEIF: [128],
      MACRO_ELSE: [128],
      MACRO_END_IF: [128],
      MOD: [128],
      NEXT: [128],
      NEW: [128, 130],
      NOT: [128],
      NOTHING: [128],
      NULL: [128],
      ON_ERROR: [128],
      ON_LOCAL_ERROR: [128],
      ON: [128],
      OPTIONAL: [128],
      OPTION_BASE: [128],
      OPTION_EXPLICIT: [128],
      OPTION_COMPARE: [128],
      OPTION_PRIVATE_MODULE: [128],
      OR: [128],
      PARAMARRAY: [128],
      PRESERVE: [128],
      PRIVATE: [128],
      PROPERTY_GET: [128],
      PROPERTY_LET: [128],
      PROPERTY_SET: [128],
      PTRSAFE: [128],
      PUBLIC: [128],
      RAISEEVENT: [128],
      REDIM: [128],
      RESET: [128],
      RESUME: [128],
      RETURN: [128],
      SELECT: [128],
      SET: [128],
      SINGLE: [128],
      STATIC: [128],
      STEP: [128],
      STOP: [128],
      STRING: [128],
      SUB: [128],
      THEN: [128],
      TO: [128],
      TRUE: [128],
      TYPEOF: [128],
      UNTIL: [128],
      VARIANT: [128],
      WEND: [128],
      WHILE: [128],
      WITH: [128],
      WITHEVENTS: [128],
      XOR: [128],
      IMP: [128],
      IDENTIFIER: [128],
    },
    withStmt_group_def_46: {
      NEW: [129],
    },
    withStmt: {
      WITH: [131],
    },
    variableListStmt_group_def_48: {
      ',': [132],
    },
    variableListStmt: {
      ALIAS: [133],
      AND: [133],
      ATTRIBUTE: [133],
      AS: [133],
      BEGIN: [133],
      BOOLEAN: [133],
      BYVAL: [133],
      BYREF: [133],
      BYTE: [133],
      CALL: [133],
      CASE: [133],
      CONST: [133],
      DECLARE: [133],
      DEFBOOL: [133],
      DEFBYTE: [133],
      DEFDATE: [133],
      DEFDBL: [133],
      DEFDEC: [133],
      DEFCUR: [133],
      DEFINT: [133],
      DEFLNG: [133],
      DEFOBJ: [133],
      DEFSNG: [133],
      DEFSTR: [133],
      DEFVAR: [133],
      DIM: [133],
      DO: [133],
      DOUBLE: [133],
      EACH: [133],
      ELSE: [133],
      ELSEIF: [133],
      END_ENUM: [133],
      END_FUNCTION: [133],
      END_IF: [133],
      END_PROPERTY: [133],
      END_SELECT: [133],
      END_SUB: [133],
      END_TYPE: [133],
      END_WITH: [133],
      END: [133],
      ENUM: [133],
      EQV: [133],
      ERASE: [133],
      EVENT: [133],
      EXIT_DO: [133],
      EXIT_FOR: [133],
      EXIT_FUNCTION: [133],
      EXIT_PROPERTY: [133],
      EXIT_SUB: [133],
      FALSE: [133],
      FRIEND: [133],
      FOR: [133],
      FUNCTION: [133],
      GET: [133],
      GLOBAL: [133],
      GOSUB: [133],
      GOTO: [133],
      IF: [133],
      IMPLEMENTS: [133],
      IN: [133],
      ISNOT: [133],
      IS: [133],
      INTEGER: [133],
      LONG: [133],
      LOOP: [133],
      LEN: [133],
      LET: [133],
      LIB: [133],
      LIKE: [133],
      LSET: [133],
      MACRO_CONST: [133],
      MACRO_IF: [133],
      MACRO_ELSEIF: [133],
      MACRO_ELSE: [133],
      MACRO_END_IF: [133],
      MOD: [133],
      NEXT: [133],
      NEW: [133],
      NOT: [133],
      NOTHING: [133],
      NULL: [133],
      ON_ERROR: [133],
      ON_LOCAL_ERROR: [133],
      ON: [133],
      OPTIONAL: [133],
      OPTION_BASE: [133],
      OPTION_EXPLICIT: [133],
      OPTION_COMPARE: [133],
      OPTION_PRIVATE_MODULE: [133],
      OR: [133],
      PARAMARRAY: [133],
      PRESERVE: [133],
      PRIVATE: [133],
      PROPERTY_GET: [133],
      PROPERTY_LET: [133],
      PROPERTY_SET: [133],
      PTRSAFE: [133],
      PUBLIC: [133],
      RAISEEVENT: [133],
      REDIM: [133],
      RESET: [133],
      RESUME: [133],
      RETURN: [133],
      SELECT: [133],
      SET: [133],
      SINGLE: [133],
      STATIC: [133],
      STEP: [133],
      STOP: [133],
      STRING: [133],
      SUB: [133],
      THEN: [133],
      TO: [133],
      TRUE: [133],
      TYPEOF: [133],
      UNTIL: [133],
      VARIANT: [133],
      WEND: [133],
      WHILE: [133],
      WITH: [133],
      WITHEVENTS: [133],
      XOR: [133],
      IMP: [133],
      IDENTIFIER: [133],
    },
    variableSubStmt_group_def_50: {
      LPAREN: [134],
    },
    variableSubStmt: {
      ALIAS: [135],
      AND: [135],
      ATTRIBUTE: [135],
      AS: [135],
      BEGIN: [135],
      BOOLEAN: [135],
      BYVAL: [135],
      BYREF: [135],
      BYTE: [135],
      CALL: [135],
      CASE: [135],
      CONST: [135],
      DECLARE: [135],
      DEFBOOL: [135],
      DEFBYTE: [135],
      DEFDATE: [135],
      DEFDBL: [135],
      DEFDEC: [135],
      DEFCUR: [135],
      DEFINT: [135],
      DEFLNG: [135],
      DEFOBJ: [135],
      DEFSNG: [135],
      DEFSTR: [135],
      DEFVAR: [135],
      DIM: [135],
      DO: [135],
      DOUBLE: [135],
      EACH: [135],
      ELSE: [135],
      ELSEIF: [135],
      END_ENUM: [135],
      END_FUNCTION: [135],
      END_IF: [135],
      END_PROPERTY: [135],
      END_SELECT: [135],
      END_SUB: [135],
      END_TYPE: [135],
      END_WITH: [135],
      END: [135],
      ENUM: [135],
      EQV: [135],
      ERASE: [135],
      EVENT: [135],
      EXIT_DO: [135],
      EXIT_FOR: [135],
      EXIT_FUNCTION: [135],
      EXIT_PROPERTY: [135],
      EXIT_SUB: [135],
      FALSE: [135],
      FRIEND: [135],
      FOR: [135],
      FUNCTION: [135],
      GET: [135],
      GLOBAL: [135],
      GOSUB: [135],
      GOTO: [135],
      IF: [135],
      IMPLEMENTS: [135],
      IN: [135],
      ISNOT: [135],
      IS: [135],
      INTEGER: [135],
      LONG: [135],
      LOOP: [135],
      LEN: [135],
      LET: [135],
      LIB: [135],
      LIKE: [135],
      LSET: [135],
      MACRO_CONST: [135],
      MACRO_IF: [135],
      MACRO_ELSEIF: [135],
      MACRO_ELSE: [135],
      MACRO_END_IF: [135],
      MOD: [135],
      NEXT: [135],
      NEW: [135],
      NOT: [135],
      NOTHING: [135],
      NULL: [135],
      ON_ERROR: [135],
      ON_LOCAL_ERROR: [135],
      ON: [135],
      OPTIONAL: [135],
      OPTION_BASE: [135],
      OPTION_EXPLICIT: [135],
      OPTION_COMPARE: [135],
      OPTION_PRIVATE_MODULE: [135],
      OR: [135],
      PARAMARRAY: [135],
      PRESERVE: [135],
      PRIVATE: [135],
      PROPERTY_GET: [135],
      PROPERTY_LET: [135],
      PROPERTY_SET: [135],
      PTRSAFE: [135],
      PUBLIC: [135],
      RAISEEVENT: [135],
      REDIM: [135],
      RESET: [135],
      RESUME: [135],
      RETURN: [135],
      SELECT: [135],
      SET: [135],
      SINGLE: [135],
      STATIC: [135],
      STEP: [135],
      STOP: [135],
      STRING: [135],
      SUB: [135],
      THEN: [135],
      TO: [135],
      TRUE: [135],
      TYPEOF: [135],
      UNTIL: [135],
      VARIANT: [135],
      WEND: [135],
      WHILE: [135],
      WITH: [135],
      WITHEVENTS: [135],
      XOR: [135],
      IMP: [135],
      IDENTIFIER: [135],
    },
    indexes: {
      DOUBLELITERAL: [136],
      INTEGERLITERAL: [136],
      STRINGLITERAL: [136],
      NOTHING: [136],
      NULL: [136],
      TRUE: [136],
      FALSE: [136],
      SPACE_DOT: [136],
      ALIAS: [136],
      AND: [136],
      ATTRIBUTE: [136],
      AS: [136],
      BEGIN: [136],
      BOOLEAN: [136],
      BYVAL: [136],
      BYREF: [136],
      BYTE: [136],
      CALL: [136],
      CASE: [136],
      CONST: [136],
      DECLARE: [136],
      DEFBOOL: [136],
      DEFBYTE: [136],
      DEFDATE: [136],
      DEFDBL: [136],
      DEFDEC: [136],
      DEFCUR: [136],
      DEFINT: [136],
      DEFLNG: [136],
      DEFOBJ: [136],
      DEFSNG: [136],
      DEFSTR: [136],
      DEFVAR: [136],
      DIM: [136],
      DO: [136],
      DOUBLE: [136],
      EACH: [136],
      ELSE: [136],
      ELSEIF: [136],
      END_ENUM: [136],
      END_FUNCTION: [136],
      END_IF: [136],
      END_PROPERTY: [136],
      END_SELECT: [136],
      END_SUB: [136],
      END_TYPE: [136],
      END_WITH: [136],
      END: [136],
      ENUM: [136],
      EQV: [136],
      ERASE: [136],
      EVENT: [136],
      EXIT_DO: [136],
      EXIT_FOR: [136],
      EXIT_FUNCTION: [136],
      EXIT_PROPERTY: [136],
      EXIT_SUB: [136],
      FRIEND: [136],
      FOR: [136],
      FUNCTION: [136],
      GET: [136],
      GLOBAL: [136],
      GOSUB: [136],
      GOTO: [136],
      IF: [136],
      IMPLEMENTS: [136],
      IN: [136],
      ISNOT: [136],
      IS: [136],
      INTEGER: [136],
      LONG: [136],
      LOOP: [136],
      LEN: [136],
      LET: [136],
      LIB: [136],
      LIKE: [136],
      LSET: [136],
      MACRO_CONST: [136],
      MACRO_IF: [136],
      MACRO_ELSEIF: [136],
      MACRO_ELSE: [136],
      MACRO_END_IF: [136],
      MOD: [136],
      NEXT: [136],
      NEW: [136],
      NOT: [136],
      ON_ERROR: [136],
      ON_LOCAL_ERROR: [136],
      ON: [136],
      OPTIONAL: [136],
      OPTION_BASE: [136],
      OPTION_EXPLICIT: [136],
      OPTION_COMPARE: [136],
      OPTION_PRIVATE_MODULE: [136],
      OR: [136],
      PARAMARRAY: [136],
      PRESERVE: [136],
      PRIVATE: [136],
      PROPERTY_GET: [136],
      PROPERTY_LET: [136],
      PROPERTY_SET: [136],
      PTRSAFE: [136],
      PUBLIC: [136],
      RAISEEVENT: [136],
      REDIM: [136],
      RESET: [136],
      RESUME: [136],
      RETURN: [136],
      SELECT: [136],
      SET: [136],
      SINGLE: [136],
      STATIC: [136],
      STEP: [136],
      STOP: [136],
      STRING: [136],
      SUB: [136],
      THEN: [136],
      TO: [136],
      TYPEOF: [136],
      UNTIL: [136],
      VARIANT: [136],
      WEND: [136],
      WHILE: [136],
      WITH: [136],
      WITHEVENTS: [136],
      XOR: [136],
      IMP: [136],
      IDENTIFIER: [136],
      LPAREN: [136],
      MINUS: [136],
      PLUS: [136],
    },
    subscript__group_def_53: {
      DOUBLELITERAL: [137],
      INTEGERLITERAL: [137],
      STRINGLITERAL: [137],
      NOTHING: [137],
      NULL: [137],
      TRUE: [137],
      FALSE: [137],
      SPACE_DOT: [137],
      ALIAS: [137],
      AND: [137],
      ATTRIBUTE: [137],
      AS: [137],
      BEGIN: [137],
      BOOLEAN: [137],
      BYVAL: [137],
      BYREF: [137],
      BYTE: [137],
      CALL: [137],
      CASE: [137],
      CONST: [137],
      DECLARE: [137],
      DEFBOOL: [137],
      DEFBYTE: [137],
      DEFDATE: [137],
      DEFDBL: [137],
      DEFDEC: [137],
      DEFCUR: [137],
      DEFINT: [137],
      DEFLNG: [137],
      DEFOBJ: [137],
      DEFSNG: [137],
      DEFSTR: [137],
      DEFVAR: [137],
      DIM: [137],
      DO: [137],
      DOUBLE: [137],
      EACH: [137],
      ELSE: [137],
      ELSEIF: [137],
      END_ENUM: [137],
      END_FUNCTION: [137],
      END_IF: [137],
      END_PROPERTY: [137],
      END_SELECT: [137],
      END_SUB: [137],
      END_TYPE: [137],
      END_WITH: [137],
      END: [137],
      ENUM: [137],
      EQV: [137],
      ERASE: [137],
      EVENT: [137],
      EXIT_DO: [137],
      EXIT_FOR: [137],
      EXIT_FUNCTION: [137],
      EXIT_PROPERTY: [137],
      EXIT_SUB: [137],
      FRIEND: [137],
      FOR: [137],
      FUNCTION: [137],
      GET: [137],
      GLOBAL: [137],
      GOSUB: [137],
      GOTO: [137],
      IF: [137],
      IMPLEMENTS: [137],
      IN: [137],
      ISNOT: [137],
      IS: [137],
      INTEGER: [137],
      LONG: [137],
      LOOP: [137],
      LEN: [137],
      LET: [137],
      LIB: [137],
      LIKE: [137],
      LSET: [137],
      MACRO_CONST: [137],
      MACRO_IF: [137],
      MACRO_ELSEIF: [137],
      MACRO_ELSE: [137],
      MACRO_END_IF: [137],
      MOD: [137],
      NEXT: [137],
      NEW: [137],
      NOT: [137],
      ON_ERROR: [137],
      ON_LOCAL_ERROR: [137],
      ON: [137],
      OPTIONAL: [137],
      OPTION_BASE: [137],
      OPTION_EXPLICIT: [137],
      OPTION_COMPARE: [137],
      OPTION_PRIVATE_MODULE: [137],
      OR: [137],
      PARAMARRAY: [137],
      PRESERVE: [137],
      PRIVATE: [137],
      PROPERTY_GET: [137],
      PROPERTY_LET: [137],
      PROPERTY_SET: [137],
      PTRSAFE: [137],
      PUBLIC: [137],
      RAISEEVENT: [137],
      REDIM: [137],
      RESET: [137],
      RESUME: [137],
      RETURN: [137],
      SELECT: [137],
      SET: [137],
      SINGLE: [137],
      STATIC: [137],
      STEP: [137],
      STOP: [137],
      STRING: [137],
      SUB: [137],
      THEN: [137],
      TO: [137],
      TYPEOF: [137],
      UNTIL: [137],
      VARIANT: [137],
      WEND: [137],
      WHILE: [137],
      WITH: [137],
      WITHEVENTS: [137],
      XOR: [137],
      IMP: [137],
      IDENTIFIER: [137],
      LPAREN: [137],
      MINUS: [137],
      PLUS: [137],
    },
    subscript_: {
      DOUBLELITERAL: [138, 141],
      INTEGERLITERAL: [138, 141],
      STRINGLITERAL: [138, 141],
      NOTHING: [138, 141],
      NULL: [138, 141],
      TRUE: [138, 141],
      FALSE: [138, 141],
      SPACE_DOT: [138, 141],
      ALIAS: [138, 141],
      AND: [138, 141],
      ATTRIBUTE: [138, 141],
      AS: [138, 141],
      BEGIN: [138, 141],
      BOOLEAN: [138, 141],
      BYVAL: [138, 141],
      BYREF: [138, 141],
      BYTE: [138, 141],
      CALL: [138, 141],
      CASE: [138, 141],
      CONST: [138, 141],
      DECLARE: [138, 141],
      DEFBOOL: [138, 141],
      DEFBYTE: [138, 141],
      DEFDATE: [138, 141],
      DEFDBL: [138, 141],
      DEFDEC: [138, 141],
      DEFCUR: [138, 141],
      DEFINT: [138, 141],
      DEFLNG: [138, 141],
      DEFOBJ: [138, 141],
      DEFSNG: [138, 141],
      DEFSTR: [138, 141],
      DEFVAR: [138, 141],
      DIM: [138, 141],
      DO: [138, 141],
      DOUBLE: [138, 141],
      EACH: [138, 141],
      ELSE: [138, 141],
      ELSEIF: [138, 141],
      END_ENUM: [138, 141],
      END_FUNCTION: [138, 141],
      END_IF: [138, 141],
      END_PROPERTY: [138, 141],
      END_SELECT: [138, 141],
      END_SUB: [138, 141],
      END_TYPE: [138, 141],
      END_WITH: [138, 141],
      END: [138, 141],
      ENUM: [138, 141],
      EQV: [138, 141],
      ERASE: [138, 141],
      EVENT: [138, 141],
      EXIT_DO: [138, 141],
      EXIT_FOR: [138, 141],
      EXIT_FUNCTION: [138, 141],
      EXIT_PROPERTY: [138, 141],
      EXIT_SUB: [138, 141],
      FRIEND: [138, 141],
      FOR: [138, 141],
      FUNCTION: [138, 141],
      GET: [138, 141],
      GLOBAL: [138, 141],
      GOSUB: [138, 141],
      GOTO: [138, 141],
      IF: [138, 141],
      IMPLEMENTS: [138, 141],
      IN: [138, 141],
      ISNOT: [138, 141],
      IS: [138, 141],
      INTEGER: [138, 141],
      LONG: [138, 141],
      LOOP: [138, 141],
      LEN: [138, 141],
      LET: [138, 141],
      LIB: [138, 141],
      LIKE: [138, 141],
      LSET: [138, 141],
      MACRO_CONST: [138, 141],
      MACRO_IF: [138, 141],
      MACRO_ELSEIF: [138, 141],
      MACRO_ELSE: [138, 141],
      MACRO_END_IF: [138, 141],
      MOD: [138, 141],
      NEXT: [138, 141],
      NEW: [138, 141],
      NOT: [138, 141],
      ON_ERROR: [138, 141],
      ON_LOCAL_ERROR: [138, 141],
      ON: [138, 141],
      OPTIONAL: [138, 141],
      OPTION_BASE: [138, 141],
      OPTION_EXPLICIT: [138, 141],
      OPTION_COMPARE: [138, 141],
      OPTION_PRIVATE_MODULE: [138, 141],
      OR: [138, 141],
      PARAMARRAY: [138, 141],
      PRESERVE: [138, 141],
      PRIVATE: [138, 141],
      PROPERTY_GET: [138, 141],
      PROPERTY_LET: [138, 141],
      PROPERTY_SET: [138, 141],
      PTRSAFE: [138, 141],
      PUBLIC: [138, 141],
      RAISEEVENT: [138, 141],
      REDIM: [138, 141],
      RESET: [138, 141],
      RESUME: [138, 141],
      RETURN: [138, 141],
      SELECT: [138, 141],
      SET: [138, 141],
      SINGLE: [138, 141],
      STATIC: [138, 141],
      STEP: [138, 141],
      STOP: [138, 141],
      STRING: [138, 141],
      SUB: [138, 141],
      THEN: [138, 141],
      TO: [138, 141],
      TYPEOF: [138, 141],
      UNTIL: [138, 141],
      VARIANT: [138, 141],
      WEND: [138, 141],
      WHILE: [138, 141],
      WITH: [138, 141],
      WITHEVENTS: [138, 141],
      XOR: [138, 141],
      IMP: [138, 141],
      IDENTIFIER: [138, 141],
      LPAREN: [138, 141],
      MINUS: [138, 141],
      PLUS: [138, 141],
    },
    subscripts_group_def_55: {
      ',': [139],
    },
    subscripts: {
      DOUBLELITERAL: [140],
      INTEGERLITERAL: [140],
      STRINGLITERAL: [140],
      NOTHING: [140],
      NULL: [140],
      TRUE: [140],
      FALSE: [140],
      ALIAS: [140],
      AND: [140],
      ATTRIBUTE: [140],
      AS: [140],
      BEGIN: [140],
      BOOLEAN: [140],
      BYVAL: [140],
      BYREF: [140],
      BYTE: [140],
      CALL: [140],
      CASE: [140],
      CONST: [140],
      DECLARE: [140],
      DEFBOOL: [140],
      DEFBYTE: [140],
      DEFDATE: [140],
      DEFDBL: [140],
      DEFDEC: [140],
      DEFCUR: [140],
      DEFINT: [140],
      DEFLNG: [140],
      DEFOBJ: [140],
      DEFSNG: [140],
      DEFSTR: [140],
      DEFVAR: [140],
      DIM: [140],
      DO: [140],
      DOUBLE: [140],
      EACH: [140],
      ELSE: [140],
      ELSEIF: [140],
      END_ENUM: [140],
      END_FUNCTION: [140],
      END_IF: [140],
      END_PROPERTY: [140],
      END_SELECT: [140],
      END_SUB: [140],
      END_TYPE: [140],
      END_WITH: [140],
      END: [140],
      ENUM: [140],
      EQV: [140],
      ERASE: [140],
      EVENT: [140],
      EXIT_DO: [140],
      EXIT_FOR: [140],
      EXIT_FUNCTION: [140],
      EXIT_PROPERTY: [140],
      EXIT_SUB: [140],
      FRIEND: [140],
      FOR: [140],
      FUNCTION: [140],
      GET: [140],
      GLOBAL: [140],
      GOSUB: [140],
      GOTO: [140],
      IF: [140],
      IMPLEMENTS: [140],
      IN: [140],
      ISNOT: [140],
      IS: [140],
      INTEGER: [140],
      LONG: [140],
      LOOP: [140],
      LEN: [140],
      LET: [140],
      LIB: [140],
      LIKE: [140],
      LSET: [140],
      MACRO_CONST: [140],
      MACRO_IF: [140],
      MACRO_ELSEIF: [140],
      MACRO_ELSE: [140],
      MACRO_END_IF: [140],
      MOD: [140],
      NEXT: [140],
      NEW: [140],
      NOT: [140],
      ON_ERROR: [140],
      ON_LOCAL_ERROR: [140],
      ON: [140],
      OPTIONAL: [140],
      OPTION_BASE: [140],
      OPTION_EXPLICIT: [140],
      OPTION_COMPARE: [140],
      OPTION_PRIVATE_MODULE: [140],
      OR: [140],
      PARAMARRAY: [140],
      PRESERVE: [140],
      PRIVATE: [140],
      PROPERTY_GET: [140],
      PROPERTY_LET: [140],
      PROPERTY_SET: [140],
      PTRSAFE: [140],
      PUBLIC: [140],
      RAISEEVENT: [140],
      REDIM: [140],
      RESET: [140],
      RESUME: [140],
      RETURN: [140],
      SELECT: [140],
      SET: [140],
      SINGLE: [140],
      STATIC: [140],
      STEP: [140],
      STOP: [140],
      STRING: [140],
      SUB: [140],
      THEN: [140],
      TO: [140],
      TYPEOF: [140],
      UNTIL: [140],
      VARIANT: [140],
      WEND: [140],
      WHILE: [140],
      WITH: [140],
      WITHEVENTS: [140],
      XOR: [140],
      IMP: [140],
      IDENTIFIER: [140],
      LPAREN: [140],
      MINUS: [140],
      PLUS: [140],
      SPACE_DOT: [140],
    },
    argList_group_def_59: {
      ',': [142],
    },
    argList_group_def_60: {
      OPTIONAL: [143],
      PARAMARRAY: [143],
      ALIAS: [143],
      AND: [143],
      ATTRIBUTE: [143],
      AS: [143],
      BEGIN: [143],
      BOOLEAN: [143],
      BYVAL: [143],
      BYREF: [143],
      BYTE: [143],
      CALL: [143],
      CASE: [143],
      CONST: [143],
      DECLARE: [143],
      DEFBOOL: [143],
      DEFBYTE: [143],
      DEFDATE: [143],
      DEFDBL: [143],
      DEFDEC: [143],
      DEFCUR: [143],
      DEFINT: [143],
      DEFLNG: [143],
      DEFOBJ: [143],
      DEFSNG: [143],
      DEFSTR: [143],
      DEFVAR: [143],
      DIM: [143],
      DO: [143],
      DOUBLE: [143],
      EACH: [143],
      ELSE: [143],
      ELSEIF: [143],
      END_ENUM: [143],
      END_FUNCTION: [143],
      END_IF: [143],
      END_PROPERTY: [143],
      END_SELECT: [143],
      END_SUB: [143],
      END_TYPE: [143],
      END_WITH: [143],
      END: [143],
      ENUM: [143],
      EQV: [143],
      ERASE: [143],
      EVENT: [143],
      EXIT_DO: [143],
      EXIT_FOR: [143],
      EXIT_FUNCTION: [143],
      EXIT_PROPERTY: [143],
      EXIT_SUB: [143],
      FALSE: [143],
      FRIEND: [143],
      FOR: [143],
      FUNCTION: [143],
      GET: [143],
      GLOBAL: [143],
      GOSUB: [143],
      GOTO: [143],
      IF: [143],
      IMPLEMENTS: [143],
      IN: [143],
      ISNOT: [143],
      IS: [143],
      INTEGER: [143],
      LONG: [143],
      LOOP: [143],
      LEN: [143],
      LET: [143],
      LIB: [143],
      LIKE: [143],
      LSET: [143],
      MACRO_CONST: [143],
      MACRO_IF: [143],
      MACRO_ELSEIF: [143],
      MACRO_ELSE: [143],
      MACRO_END_IF: [143],
      MOD: [143],
      NEXT: [143],
      NEW: [143],
      NOT: [143],
      NOTHING: [143],
      NULL: [143],
      ON_ERROR: [143],
      ON_LOCAL_ERROR: [143],
      ON: [143],
      OPTION_BASE: [143],
      OPTION_EXPLICIT: [143],
      OPTION_COMPARE: [143],
      OPTION_PRIVATE_MODULE: [143],
      OR: [143],
      PRESERVE: [143],
      PRIVATE: [143],
      PROPERTY_GET: [143],
      PROPERTY_LET: [143],
      PROPERTY_SET: [143],
      PTRSAFE: [143],
      PUBLIC: [143],
      RAISEEVENT: [143],
      REDIM: [143],
      RESET: [143],
      RESUME: [143],
      RETURN: [143],
      SELECT: [143],
      SET: [143],
      SINGLE: [143],
      STATIC: [143],
      STEP: [143],
      STOP: [143],
      STRING: [143],
      SUB: [143],
      THEN: [143],
      TO: [143],
      TRUE: [143],
      TYPEOF: [143],
      UNTIL: [143],
      VARIANT: [143],
      WEND: [143],
      WHILE: [143],
      WITH: [143],
      WITHEVENTS: [143],
      XOR: [143],
      IMP: [143],
      IDENTIFIER: [143],
    },
    argList: {
      LPAREN: [144],
    },
    valueStmt_p_end: {
      DOUBLELITERAL: [145],
      INTEGERLITERAL: [145],
      STRINGLITERAL: [145],
      NOTHING: [145, 146, 147],
      NULL: [145, 146, 147],
      TRUE: [145, 146, 147],
      FALSE: [145, 146, 147],
      SPACE_DOT: [146],
      ALIAS: [146, 147],
      AND: [146, 147],
      ATTRIBUTE: [146, 147],
      AS: [146, 147],
      BEGIN: [146, 147],
      BOOLEAN: [146, 147],
      BYVAL: [146, 147],
      BYREF: [146, 147],
      BYTE: [146, 147],
      CALL: [146, 147],
      CASE: [146, 147],
      CONST: [146, 147],
      DECLARE: [146, 147],
      DEFBOOL: [146, 147],
      DEFBYTE: [146, 147],
      DEFDATE: [146, 147],
      DEFDBL: [146, 147],
      DEFDEC: [146, 147],
      DEFCUR: [146, 147],
      DEFINT: [146, 147],
      DEFLNG: [146, 147],
      DEFOBJ: [146, 147],
      DEFSNG: [146, 147],
      DEFSTR: [146, 147],
      DEFVAR: [146, 147],
      DIM: [146, 147],
      DO: [146, 147],
      DOUBLE: [146, 147],
      EACH: [146, 147],
      ELSE: [146, 147],
      ELSEIF: [146, 147],
      END_ENUM: [146, 147],
      END_FUNCTION: [146, 147],
      END_IF: [146, 147],
      END_PROPERTY: [146, 147],
      END_SELECT: [146, 147],
      END_SUB: [146, 147],
      END_TYPE: [146, 147],
      END_WITH: [146, 147],
      END: [146, 147],
      ENUM: [146, 147],
      EQV: [146, 147],
      ERASE: [146, 147],
      EVENT: [146, 147],
      EXIT_DO: [146, 147],
      EXIT_FOR: [146, 147],
      EXIT_FUNCTION: [146, 147],
      EXIT_PROPERTY: [146, 147],
      EXIT_SUB: [146, 147],
      FRIEND: [146, 147],
      FOR: [146, 147],
      FUNCTION: [146, 147],
      GET: [146, 147],
      GLOBAL: [146, 147],
      GOSUB: [146, 147],
      GOTO: [146, 147],
      IF: [146, 147],
      IMPLEMENTS: [146, 147],
      IN: [146, 147],
      ISNOT: [146, 147],
      IS: [146, 147],
      INTEGER: [146, 147],
      LONG: [146, 147],
      LOOP: [146, 147],
      LEN: [146, 147],
      LET: [146, 147],
      LIB: [146, 147],
      LIKE: [146, 147],
      LSET: [146, 147],
      MACRO_CONST: [146, 147],
      MACRO_IF: [146, 147],
      MACRO_ELSEIF: [146, 147],
      MACRO_ELSE: [146, 147],
      MACRO_END_IF: [146, 147],
      MOD: [146, 147],
      NEXT: [146, 147],
      NEW: [146, 147, 148],
      NOT: [146, 147],
      ON_ERROR: [146, 147],
      ON_LOCAL_ERROR: [146, 147],
      ON: [146, 147],
      OPTIONAL: [146, 147],
      OPTION_BASE: [146, 147],
      OPTION_EXPLICIT: [146, 147],
      OPTION_COMPARE: [146, 147],
      OPTION_PRIVATE_MODULE: [146, 147],
      OR: [146, 147],
      PARAMARRAY: [146, 147],
      PRESERVE: [146, 147],
      PRIVATE: [146, 147],
      PROPERTY_GET: [146, 147],
      PROPERTY_LET: [146, 147],
      PROPERTY_SET: [146, 147],
      PTRSAFE: [146, 147],
      PUBLIC: [146, 147],
      RAISEEVENT: [146, 147],
      REDIM: [146, 147],
      RESET: [146, 147],
      RESUME: [146, 147],
      RETURN: [146, 147],
      SELECT: [146, 147],
      SET: [146, 147],
      SINGLE: [146, 147],
      STATIC: [146, 147],
      STEP: [146, 147],
      STOP: [146, 147],
      STRING: [146, 147],
      SUB: [146, 147],
      THEN: [146, 147],
      TO: [146, 147],
      TYPEOF: [146, 147],
      UNTIL: [146, 147],
      VARIANT: [146, 147],
      WEND: [146, 147],
      WHILE: [146, 147],
      WITH: [146, 147],
      WITHEVENTS: [146, 147],
      XOR: [146, 147],
      IMP: [146, 147],
      IDENTIFIER: [146, 147],
      LPAREN: [149],
    },
    implicitCallStmt_InStmt: {
      ALIAS: [150, 151, 152],
      AND: [150, 151, 152],
      ATTRIBUTE: [150, 151, 152],
      AS: [150, 151, 152],
      BEGIN: [150, 151, 152],
      BOOLEAN: [150, 151, 152],
      BYVAL: [150, 151, 152],
      BYREF: [150, 151, 152],
      BYTE: [150, 151, 152],
      CALL: [150, 151, 152],
      CASE: [150, 151, 152],
      CONST: [150, 151, 152],
      DECLARE: [150, 151, 152],
      DEFBOOL: [150, 151, 152],
      DEFBYTE: [150, 151, 152],
      DEFDATE: [150, 151, 152],
      DEFDBL: [150, 151, 152],
      DEFDEC: [150, 151, 152],
      DEFCUR: [150, 151, 152],
      DEFINT: [150, 151, 152],
      DEFLNG: [150, 151, 152],
      DEFOBJ: [150, 151, 152],
      DEFSNG: [150, 151, 152],
      DEFSTR: [150, 151, 152],
      DEFVAR: [150, 151, 152],
      DIM: [150, 151, 152],
      DO: [150, 151, 152],
      DOUBLE: [150, 151, 152],
      EACH: [150, 151, 152],
      ELSE: [150, 151, 152],
      ELSEIF: [150, 151, 152],
      END_ENUM: [150, 151, 152],
      END_FUNCTION: [150, 151, 152],
      END_IF: [150, 151, 152],
      END_PROPERTY: [150, 151, 152],
      END_SELECT: [150, 151, 152],
      END_SUB: [150, 151, 152],
      END_TYPE: [150, 151, 152],
      END_WITH: [150, 151, 152],
      END: [150, 151, 152],
      ENUM: [150, 151, 152],
      EQV: [150, 151, 152],
      ERASE: [150, 151, 152],
      EVENT: [150, 151, 152],
      EXIT_DO: [150, 151, 152],
      EXIT_FOR: [150, 151, 152],
      EXIT_FUNCTION: [150, 151, 152],
      EXIT_PROPERTY: [150, 151, 152],
      EXIT_SUB: [150, 151, 152],
      FALSE: [150, 151, 152],
      FRIEND: [150, 151, 152],
      FOR: [150, 151, 152],
      FUNCTION: [150, 151, 152],
      GET: [150, 151, 152],
      GLOBAL: [150, 151, 152],
      GOSUB: [150, 151, 152],
      GOTO: [150, 151, 152],
      IF: [150, 151, 152],
      IMPLEMENTS: [150, 151, 152],
      IN: [150, 151, 152],
      ISNOT: [150, 151, 152],
      IS: [150, 151, 152],
      INTEGER: [150, 151, 152],
      LONG: [150, 151, 152],
      LOOP: [150, 151, 152],
      LEN: [150, 151, 152],
      LET: [150, 151, 152],
      LIB: [150, 151, 152],
      LIKE: [150, 151, 152],
      LSET: [150, 151, 152],
      MACRO_CONST: [150, 151, 152],
      MACRO_IF: [150, 151, 152],
      MACRO_ELSEIF: [150, 151, 152],
      MACRO_ELSE: [150, 151, 152],
      MACRO_END_IF: [150, 151, 152],
      MOD: [150, 151, 152],
      NEXT: [150, 151, 152],
      NEW: [150, 151, 152],
      NOT: [150, 151, 152],
      NOTHING: [150, 151, 152],
      NULL: [150, 151, 152],
      ON_ERROR: [150, 151, 152],
      ON_LOCAL_ERROR: [150, 151, 152],
      ON: [150, 151, 152],
      OPTIONAL: [150, 151, 152],
      OPTION_BASE: [150, 151, 152],
      OPTION_EXPLICIT: [150, 151, 152],
      OPTION_COMPARE: [150, 151, 152],
      OPTION_PRIVATE_MODULE: [150, 151, 152],
      OR: [150, 151, 152],
      PARAMARRAY: [150, 151, 152],
      PRESERVE: [150, 151, 152],
      PRIVATE: [150, 151, 152],
      PROPERTY_GET: [150, 151, 152],
      PROPERTY_LET: [150, 151, 152],
      PROPERTY_SET: [150, 151, 152],
      PTRSAFE: [150, 151, 152],
      PUBLIC: [150, 151, 152],
      RAISEEVENT: [150, 151, 152],
      REDIM: [150, 151, 152],
      RESET: [150, 151, 152],
      RESUME: [150, 151, 152],
      RETURN: [150, 151, 152],
      SELECT: [150, 151, 152],
      SET: [150, 151, 152],
      SINGLE: [150, 151, 152],
      STATIC: [150, 151, 152],
      STEP: [150, 151, 152],
      STOP: [150, 151, 152],
      STRING: [150, 151, 152],
      SUB: [150, 151, 152],
      THEN: [150, 151, 152],
      TO: [150, 151, 152],
      TRUE: [150, 151, 152],
      TYPEOF: [150, 151, 152],
      UNTIL: [150, 151, 152],
      VARIANT: [150, 151, 152],
      WEND: [150, 151, 152],
      WHILE: [150, 151, 152],
      WITH: [150, 151, 152],
      WITHEVENTS: [150, 151, 152],
      XOR: [150, 151, 152],
      IMP: [150, 151, 152],
      IDENTIFIER: [150, 151, 152],
      SPACE_DOT: [150],
    },
    iCS_S_MembersCall_group_def_63: {
      ALIAS: [153],
      AND: [153],
      ATTRIBUTE: [153],
      AS: [153],
      BEGIN: [153],
      BOOLEAN: [153],
      BYVAL: [153],
      BYREF: [153],
      BYTE: [153],
      CALL: [153],
      CASE: [153],
      CONST: [153],
      DECLARE: [153],
      DEFBOOL: [153],
      DEFBYTE: [153],
      DEFDATE: [153],
      DEFDBL: [153],
      DEFDEC: [153],
      DEFCUR: [153],
      DEFINT: [153],
      DEFLNG: [153],
      DEFOBJ: [153],
      DEFSNG: [153],
      DEFSTR: [153],
      DEFVAR: [153],
      DIM: [153],
      DO: [153],
      DOUBLE: [153],
      EACH: [153],
      ELSE: [153],
      ELSEIF: [153],
      END_ENUM: [153],
      END_FUNCTION: [153],
      END_IF: [153],
      END_PROPERTY: [153],
      END_SELECT: [153],
      END_SUB: [153],
      END_TYPE: [153],
      END_WITH: [153],
      END: [153],
      ENUM: [153],
      EQV: [153],
      ERASE: [153],
      EVENT: [153],
      EXIT_DO: [153],
      EXIT_FOR: [153],
      EXIT_FUNCTION: [153],
      EXIT_PROPERTY: [153],
      EXIT_SUB: [153],
      FALSE: [153],
      FRIEND: [153],
      FOR: [153],
      FUNCTION: [153],
      GET: [153],
      GLOBAL: [153],
      GOSUB: [153],
      GOTO: [153],
      IF: [153],
      IMPLEMENTS: [153],
      IN: [153],
      ISNOT: [153],
      IS: [153],
      INTEGER: [153],
      LONG: [153],
      LOOP: [153],
      LEN: [153],
      LET: [153],
      LIB: [153],
      LIKE: [153],
      LSET: [153],
      MACRO_CONST: [153],
      MACRO_IF: [153],
      MACRO_ELSEIF: [153],
      MACRO_ELSE: [153],
      MACRO_END_IF: [153],
      MOD: [153],
      NEXT: [153],
      NEW: [153],
      NOT: [153],
      NOTHING: [153],
      NULL: [153],
      ON_ERROR: [153],
      ON_LOCAL_ERROR: [153],
      ON: [153],
      OPTIONAL: [153],
      OPTION_BASE: [153],
      OPTION_EXPLICIT: [153],
      OPTION_COMPARE: [153],
      OPTION_PRIVATE_MODULE: [153],
      OR: [153],
      PARAMARRAY: [153],
      PRESERVE: [153],
      PRIVATE: [153],
      PROPERTY_GET: [153],
      PROPERTY_LET: [153],
      PROPERTY_SET: [153],
      PTRSAFE: [153],
      PUBLIC: [153],
      RAISEEVENT: [153],
      REDIM: [153],
      RESET: [153],
      RESUME: [153],
      RETURN: [153],
      SELECT: [153],
      SET: [153],
      SINGLE: [153],
      STATIC: [153],
      STEP: [153],
      STOP: [153],
      STRING: [153],
      SUB: [153],
      THEN: [153],
      TO: [153],
      TRUE: [153],
      TYPEOF: [153],
      UNTIL: [153],
      VARIANT: [153],
      WEND: [153],
      WHILE: [153],
      WITH: [153],
      WITHEVENTS: [153],
      XOR: [153],
      IMP: [153],
      IDENTIFIER: [153],
    },
    iCS_S_MembersCall_group_62: {
      ALIAS: [154, 156],
      AND: [154, 156],
      ATTRIBUTE: [154, 156],
      AS: [154, 156],
      BEGIN: [154, 156],
      BOOLEAN: [154, 156],
      BYVAL: [154, 156],
      BYREF: [154, 156],
      BYTE: [154, 156],
      CALL: [154, 156],
      CASE: [154, 156],
      CONST: [154, 156],
      DECLARE: [154, 156],
      DEFBOOL: [154, 156],
      DEFBYTE: [154, 156],
      DEFDATE: [154, 156],
      DEFDBL: [154, 156],
      DEFDEC: [154, 156],
      DEFCUR: [154, 156],
      DEFINT: [154, 156],
      DEFLNG: [154, 156],
      DEFOBJ: [154, 156],
      DEFSNG: [154, 156],
      DEFSTR: [154, 156],
      DEFVAR: [154, 156],
      DIM: [154, 156],
      DO: [154, 156],
      DOUBLE: [154, 156],
      EACH: [154, 156],
      ELSE: [154, 156],
      ELSEIF: [154, 156],
      END_ENUM: [154, 156],
      END_FUNCTION: [154, 156],
      END_IF: [154, 156],
      END_PROPERTY: [154, 156],
      END_SELECT: [154, 156],
      END_SUB: [154, 156],
      END_TYPE: [154, 156],
      END_WITH: [154, 156],
      END: [154, 156],
      ENUM: [154, 156],
      EQV: [154, 156],
      ERASE: [154, 156],
      EVENT: [154, 156],
      EXIT_DO: [154, 156],
      EXIT_FOR: [154, 156],
      EXIT_FUNCTION: [154, 156],
      EXIT_PROPERTY: [154, 156],
      EXIT_SUB: [154, 156],
      FALSE: [154, 156],
      FRIEND: [154, 156],
      FOR: [154, 156],
      FUNCTION: [154, 156],
      GET: [154, 156],
      GLOBAL: [154, 156],
      GOSUB: [154, 156],
      GOTO: [154, 156],
      IF: [154, 156],
      IMPLEMENTS: [154, 156],
      IN: [154, 156],
      ISNOT: [154, 156],
      IS: [154, 156],
      INTEGER: [154, 156],
      LONG: [154, 156],
      LOOP: [154, 156],
      LEN: [154, 156],
      LET: [154, 156],
      LIB: [154, 156],
      LIKE: [154, 156],
      LSET: [154, 156],
      MACRO_CONST: [154, 156],
      MACRO_IF: [154, 156],
      MACRO_ELSEIF: [154, 156],
      MACRO_ELSE: [154, 156],
      MACRO_END_IF: [154, 156],
      MOD: [154, 156],
      NEXT: [154, 156],
      NEW: [154, 156],
      NOT: [154, 156],
      NOTHING: [154, 156],
      NULL: [154, 156],
      ON_ERROR: [154, 156],
      ON_LOCAL_ERROR: [154, 156],
      ON: [154, 156],
      OPTIONAL: [154, 156],
      OPTION_BASE: [154, 156],
      OPTION_EXPLICIT: [154, 156],
      OPTION_COMPARE: [154, 156],
      OPTION_PRIVATE_MODULE: [154, 156],
      OR: [154, 156],
      PARAMARRAY: [154, 156],
      PRESERVE: [154, 156],
      PRIVATE: [154, 156],
      PROPERTY_GET: [154, 156],
      PROPERTY_LET: [154, 156],
      PROPERTY_SET: [154, 156],
      PTRSAFE: [154, 156],
      PUBLIC: [154, 156],
      RAISEEVENT: [154, 156],
      REDIM: [154, 156],
      RESET: [154, 156],
      RESUME: [154, 156],
      RETURN: [154, 156],
      SELECT: [154, 156],
      SET: [154, 156],
      SINGLE: [154, 156],
      STATIC: [154, 156],
      STEP: [154, 156],
      STOP: [154, 156],
      STRING: [154, 156],
      SUB: [154, 156],
      THEN: [154, 156],
      TO: [154, 156],
      TRUE: [154, 156],
      TYPEOF: [154, 156],
      UNTIL: [154, 156],
      VARIANT: [154, 156],
      WEND: [154, 156],
      WHILE: [154, 156],
      WITH: [154, 156],
      WITHEVENTS: [154, 156],
      XOR: [154, 156],
      IMP: [154, 156],
      IDENTIFIER: [154, 156],
    },
    iCS_S_MembersCall_group_def_64: {
      ALIAS: [155],
      AND: [155],
      ATTRIBUTE: [155],
      AS: [155],
      BEGIN: [155],
      BOOLEAN: [155],
      BYVAL: [155],
      BYREF: [155],
      BYTE: [155],
      CALL: [155],
      CASE: [155],
      CONST: [155],
      DECLARE: [155],
      DEFBOOL: [155],
      DEFBYTE: [155],
      DEFDATE: [155],
      DEFDBL: [155],
      DEFDEC: [155],
      DEFCUR: [155],
      DEFINT: [155],
      DEFLNG: [155],
      DEFOBJ: [155],
      DEFSNG: [155],
      DEFSTR: [155],
      DEFVAR: [155],
      DIM: [155],
      DO: [155],
      DOUBLE: [155],
      EACH: [155],
      ELSE: [155],
      ELSEIF: [155],
      END_ENUM: [155],
      END_FUNCTION: [155],
      END_IF: [155],
      END_PROPERTY: [155],
      END_SELECT: [155],
      END_SUB: [155],
      END_TYPE: [155],
      END_WITH: [155],
      END: [155],
      ENUM: [155],
      EQV: [155],
      ERASE: [155],
      EVENT: [155],
      EXIT_DO: [155],
      EXIT_FOR: [155],
      EXIT_FUNCTION: [155],
      EXIT_PROPERTY: [155],
      EXIT_SUB: [155],
      FALSE: [155],
      FRIEND: [155],
      FOR: [155],
      FUNCTION: [155],
      GET: [155],
      GLOBAL: [155],
      GOSUB: [155],
      GOTO: [155],
      IF: [155],
      IMPLEMENTS: [155],
      IN: [155],
      ISNOT: [155],
      IS: [155],
      INTEGER: [155],
      LONG: [155],
      LOOP: [155],
      LEN: [155],
      LET: [155],
      LIB: [155],
      LIKE: [155],
      LSET: [155],
      MACRO_CONST: [155],
      MACRO_IF: [155],
      MACRO_ELSEIF: [155],
      MACRO_ELSE: [155],
      MACRO_END_IF: [155],
      MOD: [155],
      NEXT: [155],
      NEW: [155],
      NOT: [155],
      NOTHING: [155],
      NULL: [155],
      ON_ERROR: [155],
      ON_LOCAL_ERROR: [155],
      ON: [155],
      OPTIONAL: [155],
      OPTION_BASE: [155],
      OPTION_EXPLICIT: [155],
      OPTION_COMPARE: [155],
      OPTION_PRIVATE_MODULE: [155],
      OR: [155],
      PARAMARRAY: [155],
      PRESERVE: [155],
      PRIVATE: [155],
      PROPERTY_GET: [155],
      PROPERTY_LET: [155],
      PROPERTY_SET: [155],
      PTRSAFE: [155],
      PUBLIC: [155],
      RAISEEVENT: [155],
      REDIM: [155],
      RESET: [155],
      RESUME: [155],
      RETURN: [155],
      SELECT: [155],
      SET: [155],
      SINGLE: [155],
      STATIC: [155],
      STEP: [155],
      STOP: [155],
      STRING: [155],
      SUB: [155],
      THEN: [155],
      TO: [155],
      TRUE: [155],
      TYPEOF: [155],
      UNTIL: [155],
      VARIANT: [155],
      WEND: [155],
      WHILE: [155],
      WITH: [155],
      WITHEVENTS: [155],
      XOR: [155],
      IMP: [155],
      IDENTIFIER: [155],
    },
    iCS_S_MembersCall_group_def_65: {
      ALIAS: [157],
      AND: [157],
      ATTRIBUTE: [157],
      AS: [157],
      BEGIN: [157],
      BOOLEAN: [157],
      BYVAL: [157],
      BYREF: [157],
      BYTE: [157],
      CALL: [157],
      CASE: [157],
      CONST: [157],
      DECLARE: [157],
      DEFBOOL: [157],
      DEFBYTE: [157],
      DEFDATE: [157],
      DEFDBL: [157],
      DEFDEC: [157],
      DEFCUR: [157],
      DEFINT: [157],
      DEFLNG: [157],
      DEFOBJ: [157],
      DEFSNG: [157],
      DEFSTR: [157],
      DEFVAR: [157],
      DIM: [157],
      DO: [157],
      DOUBLE: [157],
      EACH: [157],
      ELSE: [157],
      ELSEIF: [157],
      END_ENUM: [157],
      END_FUNCTION: [157],
      END_IF: [157],
      END_PROPERTY: [157],
      END_SELECT: [157],
      END_SUB: [157],
      END_TYPE: [157],
      END_WITH: [157],
      END: [157],
      ENUM: [157],
      EQV: [157],
      ERASE: [157],
      EVENT: [157],
      EXIT_DO: [157],
      EXIT_FOR: [157],
      EXIT_FUNCTION: [157],
      EXIT_PROPERTY: [157],
      EXIT_SUB: [157],
      FALSE: [157],
      FRIEND: [157],
      FOR: [157],
      FUNCTION: [157],
      GET: [157],
      GLOBAL: [157],
      GOSUB: [157],
      GOTO: [157],
      IF: [157],
      IMPLEMENTS: [157],
      IN: [157],
      ISNOT: [157],
      IS: [157],
      INTEGER: [157],
      LONG: [157],
      LOOP: [157],
      LEN: [157],
      LET: [157],
      LIB: [157],
      LIKE: [157],
      LSET: [157],
      MACRO_CONST: [157],
      MACRO_IF: [157],
      MACRO_ELSEIF: [157],
      MACRO_ELSE: [157],
      MACRO_END_IF: [157],
      MOD: [157],
      NEXT: [157],
      NEW: [157],
      NOT: [157],
      NOTHING: [157],
      NULL: [157],
      ON_ERROR: [157],
      ON_LOCAL_ERROR: [157],
      ON: [157],
      OPTIONAL: [157],
      OPTION_BASE: [157],
      OPTION_EXPLICIT: [157],
      OPTION_COMPARE: [157],
      OPTION_PRIVATE_MODULE: [157],
      OR: [157],
      PARAMARRAY: [157],
      PRESERVE: [157],
      PRIVATE: [157],
      PROPERTY_GET: [157],
      PROPERTY_LET: [157],
      PROPERTY_SET: [157],
      PTRSAFE: [157],
      PUBLIC: [157],
      RAISEEVENT: [157],
      REDIM: [157],
      RESET: [157],
      RESUME: [157],
      RETURN: [157],
      SELECT: [157],
      SET: [157],
      SINGLE: [157],
      STATIC: [157],
      STEP: [157],
      STOP: [157],
      STRING: [157],
      SUB: [157],
      THEN: [157],
      TO: [157],
      TRUE: [157],
      TYPEOF: [157],
      UNTIL: [157],
      VARIANT: [157],
      WEND: [157],
      WHILE: [157],
      WITH: [157],
      WITHEVENTS: [157],
      XOR: [157],
      IMP: [157],
      IDENTIFIER: [157],
    },
    iCS_S_MembersCall_group_61: {
      ALIAS: [158],
      AND: [158],
      ATTRIBUTE: [158],
      AS: [158],
      BEGIN: [158],
      BOOLEAN: [158],
      BYVAL: [158],
      BYREF: [158],
      BYTE: [158],
      CALL: [158],
      CASE: [158],
      CONST: [158],
      DECLARE: [158],
      DEFBOOL: [158],
      DEFBYTE: [158],
      DEFDATE: [158],
      DEFDBL: [158],
      DEFDEC: [158],
      DEFCUR: [158],
      DEFINT: [158],
      DEFLNG: [158],
      DEFOBJ: [158],
      DEFSNG: [158],
      DEFSTR: [158],
      DEFVAR: [158],
      DIM: [158],
      DO: [158],
      DOUBLE: [158],
      EACH: [158],
      ELSE: [158],
      ELSEIF: [158],
      END_ENUM: [158],
      END_FUNCTION: [158],
      END_IF: [158],
      END_PROPERTY: [158],
      END_SELECT: [158],
      END_SUB: [158],
      END_TYPE: [158],
      END_WITH: [158],
      END: [158],
      ENUM: [158],
      EQV: [158],
      ERASE: [158],
      EVENT: [158],
      EXIT_DO: [158],
      EXIT_FOR: [158],
      EXIT_FUNCTION: [158],
      EXIT_PROPERTY: [158],
      EXIT_SUB: [158],
      FALSE: [158],
      FRIEND: [158],
      FOR: [158],
      FUNCTION: [158],
      GET: [158],
      GLOBAL: [158],
      GOSUB: [158],
      GOTO: [158],
      IF: [158],
      IMPLEMENTS: [158],
      IN: [158],
      ISNOT: [158],
      IS: [158],
      INTEGER: [158],
      LONG: [158],
      LOOP: [158],
      LEN: [158],
      LET: [158],
      LIB: [158],
      LIKE: [158],
      LSET: [158],
      MACRO_CONST: [158],
      MACRO_IF: [158],
      MACRO_ELSEIF: [158],
      MACRO_ELSE: [158],
      MACRO_END_IF: [158],
      MOD: [158],
      NEXT: [158],
      NEW: [158],
      NOT: [158],
      NOTHING: [158],
      NULL: [158],
      ON_ERROR: [158],
      ON_LOCAL_ERROR: [158],
      ON: [158],
      OPTIONAL: [158],
      OPTION_BASE: [158],
      OPTION_EXPLICIT: [158],
      OPTION_COMPARE: [158],
      OPTION_PRIVATE_MODULE: [158],
      OR: [158],
      PARAMARRAY: [158],
      PRESERVE: [158],
      PRIVATE: [158],
      PROPERTY_GET: [158],
      PROPERTY_LET: [158],
      PROPERTY_SET: [158],
      PTRSAFE: [158],
      PUBLIC: [158],
      RAISEEVENT: [158],
      REDIM: [158],
      RESET: [158],
      RESUME: [158],
      RETURN: [158],
      SELECT: [158],
      SET: [158],
      SINGLE: [158],
      STATIC: [158],
      STEP: [158],
      STOP: [158],
      STRING: [158],
      SUB: [158],
      THEN: [158],
      TO: [158],
      TRUE: [158],
      TYPEOF: [158],
      UNTIL: [158],
      VARIANT: [158],
      WEND: [158],
      WHILE: [158],
      WITH: [158],
      WITHEVENTS: [158],
      XOR: [158],
      IMP: [158],
      IDENTIFIER: [158],
      SPACE_DOT: [160],
    },
    iCS_S_MembersCall_group_def_66: {
      SPACE_DOT: [159],
    },
    iCS_S_MembersCall: {
      ALIAS: [161],
      AND: [161],
      ATTRIBUTE: [161],
      AS: [161],
      BEGIN: [161],
      BOOLEAN: [161],
      BYVAL: [161],
      BYREF: [161],
      BYTE: [161],
      CALL: [161],
      CASE: [161],
      CONST: [161],
      DECLARE: [161],
      DEFBOOL: [161],
      DEFBYTE: [161],
      DEFDATE: [161],
      DEFDBL: [161],
      DEFDEC: [161],
      DEFCUR: [161],
      DEFINT: [161],
      DEFLNG: [161],
      DEFOBJ: [161],
      DEFSNG: [161],
      DEFSTR: [161],
      DEFVAR: [161],
      DIM: [161],
      DO: [161],
      DOUBLE: [161],
      EACH: [161],
      ELSE: [161],
      ELSEIF: [161],
      END_ENUM: [161],
      END_FUNCTION: [161],
      END_IF: [161],
      END_PROPERTY: [161],
      END_SELECT: [161],
      END_SUB: [161],
      END_TYPE: [161],
      END_WITH: [161],
      END: [161],
      ENUM: [161],
      EQV: [161],
      ERASE: [161],
      EVENT: [161],
      EXIT_DO: [161],
      EXIT_FOR: [161],
      EXIT_FUNCTION: [161],
      EXIT_PROPERTY: [161],
      EXIT_SUB: [161],
      FALSE: [161],
      FRIEND: [161],
      FOR: [161],
      FUNCTION: [161],
      GET: [161],
      GLOBAL: [161],
      GOSUB: [161],
      GOTO: [161],
      IF: [161],
      IMPLEMENTS: [161],
      IN: [161],
      ISNOT: [161],
      IS: [161],
      INTEGER: [161],
      LONG: [161],
      LOOP: [161],
      LEN: [161],
      LET: [161],
      LIB: [161],
      LIKE: [161],
      LSET: [161],
      MACRO_CONST: [161],
      MACRO_IF: [161],
      MACRO_ELSEIF: [161],
      MACRO_ELSE: [161],
      MACRO_END_IF: [161],
      MOD: [161],
      NEXT: [161],
      NEW: [161],
      NOT: [161],
      NOTHING: [161],
      NULL: [161],
      ON_ERROR: [161],
      ON_LOCAL_ERROR: [161],
      ON: [161],
      OPTIONAL: [161],
      OPTION_BASE: [161],
      OPTION_EXPLICIT: [161],
      OPTION_COMPARE: [161],
      OPTION_PRIVATE_MODULE: [161],
      OR: [161],
      PARAMARRAY: [161],
      PRESERVE: [161],
      PRIVATE: [161],
      PROPERTY_GET: [161],
      PROPERTY_LET: [161],
      PROPERTY_SET: [161],
      PTRSAFE: [161],
      PUBLIC: [161],
      RAISEEVENT: [161],
      REDIM: [161],
      RESET: [161],
      RESUME: [161],
      RETURN: [161],
      SELECT: [161],
      SET: [161],
      SINGLE: [161],
      STATIC: [161],
      STEP: [161],
      STOP: [161],
      STRING: [161],
      SUB: [161],
      THEN: [161],
      TO: [161],
      TRUE: [161],
      TYPEOF: [161],
      UNTIL: [161],
      VARIANT: [161],
      WEND: [161],
      WHILE: [161],
      WITH: [161],
      WITHEVENTS: [161],
      XOR: [161],
      IMP: [161],
      IDENTIFIER: [161],
      SPACE_DOT: [161],
    },
    iCS_S_MemberCall_group_68: {
      ALIAS: [162, 163],
      AND: [162, 163],
      ATTRIBUTE: [162, 163],
      AS: [162, 163],
      BEGIN: [162, 163],
      BOOLEAN: [162, 163],
      BYVAL: [162, 163],
      BYREF: [162, 163],
      BYTE: [162, 163],
      CALL: [162, 163],
      CASE: [162, 163],
      CONST: [162, 163],
      DECLARE: [162, 163],
      DEFBOOL: [162, 163],
      DEFBYTE: [162, 163],
      DEFDATE: [162, 163],
      DEFDBL: [162, 163],
      DEFDEC: [162, 163],
      DEFCUR: [162, 163],
      DEFINT: [162, 163],
      DEFLNG: [162, 163],
      DEFOBJ: [162, 163],
      DEFSNG: [162, 163],
      DEFSTR: [162, 163],
      DEFVAR: [162, 163],
      DIM: [162, 163],
      DO: [162, 163],
      DOUBLE: [162, 163],
      EACH: [162, 163],
      ELSE: [162, 163],
      ELSEIF: [162, 163],
      END_ENUM: [162, 163],
      END_FUNCTION: [162, 163],
      END_IF: [162, 163],
      END_PROPERTY: [162, 163],
      END_SELECT: [162, 163],
      END_SUB: [162, 163],
      END_TYPE: [162, 163],
      END_WITH: [162, 163],
      END: [162, 163],
      ENUM: [162, 163],
      EQV: [162, 163],
      ERASE: [162, 163],
      EVENT: [162, 163],
      EXIT_DO: [162, 163],
      EXIT_FOR: [162, 163],
      EXIT_FUNCTION: [162, 163],
      EXIT_PROPERTY: [162, 163],
      EXIT_SUB: [162, 163],
      FALSE: [162, 163],
      FRIEND: [162, 163],
      FOR: [162, 163],
      FUNCTION: [162, 163],
      GET: [162, 163],
      GLOBAL: [162, 163],
      GOSUB: [162, 163],
      GOTO: [162, 163],
      IF: [162, 163],
      IMPLEMENTS: [162, 163],
      IN: [162, 163],
      ISNOT: [162, 163],
      IS: [162, 163],
      INTEGER: [162, 163],
      LONG: [162, 163],
      LOOP: [162, 163],
      LEN: [162, 163],
      LET: [162, 163],
      LIB: [162, 163],
      LIKE: [162, 163],
      LSET: [162, 163],
      MACRO_CONST: [162, 163],
      MACRO_IF: [162, 163],
      MACRO_ELSEIF: [162, 163],
      MACRO_ELSE: [162, 163],
      MACRO_END_IF: [162, 163],
      MOD: [162, 163],
      NEXT: [162, 163],
      NEW: [162, 163],
      NOT: [162, 163],
      NOTHING: [162, 163],
      NULL: [162, 163],
      ON_ERROR: [162, 163],
      ON_LOCAL_ERROR: [162, 163],
      ON: [162, 163],
      OPTIONAL: [162, 163],
      OPTION_BASE: [162, 163],
      OPTION_EXPLICIT: [162, 163],
      OPTION_COMPARE: [162, 163],
      OPTION_PRIVATE_MODULE: [162, 163],
      OR: [162, 163],
      PARAMARRAY: [162, 163],
      PRESERVE: [162, 163],
      PRIVATE: [162, 163],
      PROPERTY_GET: [162, 163],
      PROPERTY_LET: [162, 163],
      PROPERTY_SET: [162, 163],
      PTRSAFE: [162, 163],
      PUBLIC: [162, 163],
      RAISEEVENT: [162, 163],
      REDIM: [162, 163],
      RESET: [162, 163],
      RESUME: [162, 163],
      RETURN: [162, 163],
      SELECT: [162, 163],
      SET: [162, 163],
      SINGLE: [162, 163],
      STATIC: [162, 163],
      STEP: [162, 163],
      STOP: [162, 163],
      STRING: [162, 163],
      SUB: [162, 163],
      THEN: [162, 163],
      TO: [162, 163],
      TRUE: [162, 163],
      TYPEOF: [162, 163],
      UNTIL: [162, 163],
      VARIANT: [162, 163],
      WEND: [162, 163],
      WHILE: [162, 163],
      WITH: [162, 163],
      WITHEVENTS: [162, 163],
      XOR: [162, 163],
      IMP: [162, 163],
      IDENTIFIER: [162, 163],
    },
    iCS_S_MemberCall: {
      '.': [164],
    },
    iCS_S_SpaceMemberCall_group_69: {
      ALIAS: [165, 166],
      AND: [165, 166],
      ATTRIBUTE: [165, 166],
      AS: [165, 166],
      BEGIN: [165, 166],
      BOOLEAN: [165, 166],
      BYVAL: [165, 166],
      BYREF: [165, 166],
      BYTE: [165, 166],
      CALL: [165, 166],
      CASE: [165, 166],
      CONST: [165, 166],
      DECLARE: [165, 166],
      DEFBOOL: [165, 166],
      DEFBYTE: [165, 166],
      DEFDATE: [165, 166],
      DEFDBL: [165, 166],
      DEFDEC: [165, 166],
      DEFCUR: [165, 166],
      DEFINT: [165, 166],
      DEFLNG: [165, 166],
      DEFOBJ: [165, 166],
      DEFSNG: [165, 166],
      DEFSTR: [165, 166],
      DEFVAR: [165, 166],
      DIM: [165, 166],
      DO: [165, 166],
      DOUBLE: [165, 166],
      EACH: [165, 166],
      ELSE: [165, 166],
      ELSEIF: [165, 166],
      END_ENUM: [165, 166],
      END_FUNCTION: [165, 166],
      END_IF: [165, 166],
      END_PROPERTY: [165, 166],
      END_SELECT: [165, 166],
      END_SUB: [165, 166],
      END_TYPE: [165, 166],
      END_WITH: [165, 166],
      END: [165, 166],
      ENUM: [165, 166],
      EQV: [165, 166],
      ERASE: [165, 166],
      EVENT: [165, 166],
      EXIT_DO: [165, 166],
      EXIT_FOR: [165, 166],
      EXIT_FUNCTION: [165, 166],
      EXIT_PROPERTY: [165, 166],
      EXIT_SUB: [165, 166],
      FALSE: [165, 166],
      FRIEND: [165, 166],
      FOR: [165, 166],
      FUNCTION: [165, 166],
      GET: [165, 166],
      GLOBAL: [165, 166],
      GOSUB: [165, 166],
      GOTO: [165, 166],
      IF: [165, 166],
      IMPLEMENTS: [165, 166],
      IN: [165, 166],
      ISNOT: [165, 166],
      IS: [165, 166],
      INTEGER: [165, 166],
      LONG: [165, 166],
      LOOP: [165, 166],
      LEN: [165, 166],
      LET: [165, 166],
      LIB: [165, 166],
      LIKE: [165, 166],
      LSET: [165, 166],
      MACRO_CONST: [165, 166],
      MACRO_IF: [165, 166],
      MACRO_ELSEIF: [165, 166],
      MACRO_ELSE: [165, 166],
      MACRO_END_IF: [165, 166],
      MOD: [165, 166],
      NEXT: [165, 166],
      NEW: [165, 166],
      NOT: [165, 166],
      NOTHING: [165, 166],
      NULL: [165, 166],
      ON_ERROR: [165, 166],
      ON_LOCAL_ERROR: [165, 166],
      ON: [165, 166],
      OPTIONAL: [165, 166],
      OPTION_BASE: [165, 166],
      OPTION_EXPLICIT: [165, 166],
      OPTION_COMPARE: [165, 166],
      OPTION_PRIVATE_MODULE: [165, 166],
      OR: [165, 166],
      PARAMARRAY: [165, 166],
      PRESERVE: [165, 166],
      PRIVATE: [165, 166],
      PROPERTY_GET: [165, 166],
      PROPERTY_LET: [165, 166],
      PROPERTY_SET: [165, 166],
      PTRSAFE: [165, 166],
      PUBLIC: [165, 166],
      RAISEEVENT: [165, 166],
      REDIM: [165, 166],
      RESET: [165, 166],
      RESUME: [165, 166],
      RETURN: [165, 166],
      SELECT: [165, 166],
      SET: [165, 166],
      SINGLE: [165, 166],
      STATIC: [165, 166],
      STEP: [165, 166],
      STOP: [165, 166],
      STRING: [165, 166],
      SUB: [165, 166],
      THEN: [165, 166],
      TO: [165, 166],
      TRUE: [165, 166],
      TYPEOF: [165, 166],
      UNTIL: [165, 166],
      VARIANT: [165, 166],
      WEND: [165, 166],
      WHILE: [165, 166],
      WITH: [165, 166],
      WITHEVENTS: [165, 166],
      XOR: [165, 166],
      IMP: [165, 166],
      IDENTIFIER: [165, 166],
    },
    iCS_S_SpaceMemberCall: {
      SPACE_DOT: [167],
    },
    iCS_S_ProcedureOrArrayCall: {
      ALIAS: [168],
      AND: [168],
      ATTRIBUTE: [168],
      AS: [168],
      BEGIN: [168],
      BOOLEAN: [168],
      BYVAL: [168],
      BYREF: [168],
      BYTE: [168],
      CALL: [168],
      CASE: [168],
      CONST: [168],
      DECLARE: [168],
      DEFBOOL: [168],
      DEFBYTE: [168],
      DEFDATE: [168],
      DEFDBL: [168],
      DEFDEC: [168],
      DEFCUR: [168],
      DEFINT: [168],
      DEFLNG: [168],
      DEFOBJ: [168],
      DEFSNG: [168],
      DEFSTR: [168],
      DEFVAR: [168],
      DIM: [168],
      DO: [168],
      DOUBLE: [168],
      EACH: [168],
      ELSE: [168],
      ELSEIF: [168],
      END_ENUM: [168],
      END_FUNCTION: [168],
      END_IF: [168],
      END_PROPERTY: [168],
      END_SELECT: [168],
      END_SUB: [168],
      END_TYPE: [168],
      END_WITH: [168],
      END: [168],
      ENUM: [168],
      EQV: [168],
      ERASE: [168],
      EVENT: [168],
      EXIT_DO: [168],
      EXIT_FOR: [168],
      EXIT_FUNCTION: [168],
      EXIT_PROPERTY: [168],
      EXIT_SUB: [168],
      FALSE: [168],
      FRIEND: [168],
      FOR: [168],
      FUNCTION: [168],
      GET: [168],
      GLOBAL: [168],
      GOSUB: [168],
      GOTO: [168],
      IF: [168],
      IMPLEMENTS: [168],
      IN: [168],
      ISNOT: [168],
      IS: [168],
      INTEGER: [168],
      LONG: [168],
      LOOP: [168],
      LEN: [168],
      LET: [168],
      LIB: [168],
      LIKE: [168],
      LSET: [168],
      MACRO_CONST: [168],
      MACRO_IF: [168],
      MACRO_ELSEIF: [168],
      MACRO_ELSE: [168],
      MACRO_END_IF: [168],
      MOD: [168],
      NEXT: [168],
      NEW: [168],
      NOT: [168],
      NOTHING: [168],
      NULL: [168],
      ON_ERROR: [168],
      ON_LOCAL_ERROR: [168],
      ON: [168],
      OPTIONAL: [168],
      OPTION_BASE: [168],
      OPTION_EXPLICIT: [168],
      OPTION_COMPARE: [168],
      OPTION_PRIVATE_MODULE: [168],
      OR: [168],
      PARAMARRAY: [168],
      PRESERVE: [168],
      PRIVATE: [168],
      PROPERTY_GET: [168],
      PROPERTY_LET: [168],
      PROPERTY_SET: [168],
      PTRSAFE: [168],
      PUBLIC: [168],
      RAISEEVENT: [168],
      REDIM: [168],
      RESET: [168],
      RESUME: [168],
      RETURN: [168],
      SELECT: [168],
      SET: [168],
      SINGLE: [168],
      STATIC: [168],
      STEP: [168],
      STOP: [168],
      STRING: [168],
      SUB: [168],
      THEN: [168],
      TO: [168],
      TRUE: [168],
      TYPEOF: [168],
      UNTIL: [168],
      VARIANT: [168],
      WEND: [168],
      WHILE: [168],
      WITH: [168],
      WITHEVENTS: [168],
      XOR: [168],
      IMP: [168],
      IDENTIFIER: [168],
    },
    iCS_S_VariableOrProcedureCall: {
      ALIAS: [169],
      AND: [169],
      ATTRIBUTE: [169],
      AS: [169],
      BEGIN: [169],
      BOOLEAN: [169],
      BYVAL: [169],
      BYREF: [169],
      BYTE: [169],
      CALL: [169],
      CASE: [169],
      CONST: [169],
      DECLARE: [169],
      DEFBOOL: [169],
      DEFBYTE: [169],
      DEFDATE: [169],
      DEFDBL: [169],
      DEFDEC: [169],
      DEFCUR: [169],
      DEFINT: [169],
      DEFLNG: [169],
      DEFOBJ: [169],
      DEFSNG: [169],
      DEFSTR: [169],
      DEFVAR: [169],
      DIM: [169],
      DO: [169],
      DOUBLE: [169],
      EACH: [169],
      ELSE: [169],
      ELSEIF: [169],
      END_ENUM: [169],
      END_FUNCTION: [169],
      END_IF: [169],
      END_PROPERTY: [169],
      END_SELECT: [169],
      END_SUB: [169],
      END_TYPE: [169],
      END_WITH: [169],
      END: [169],
      ENUM: [169],
      EQV: [169],
      ERASE: [169],
      EVENT: [169],
      EXIT_DO: [169],
      EXIT_FOR: [169],
      EXIT_FUNCTION: [169],
      EXIT_PROPERTY: [169],
      EXIT_SUB: [169],
      FALSE: [169],
      FRIEND: [169],
      FOR: [169],
      FUNCTION: [169],
      GET: [169],
      GLOBAL: [169],
      GOSUB: [169],
      GOTO: [169],
      IF: [169],
      IMPLEMENTS: [169],
      IN: [169],
      ISNOT: [169],
      IS: [169],
      INTEGER: [169],
      LONG: [169],
      LOOP: [169],
      LEN: [169],
      LET: [169],
      LIB: [169],
      LIKE: [169],
      LSET: [169],
      MACRO_CONST: [169],
      MACRO_IF: [169],
      MACRO_ELSEIF: [169],
      MACRO_ELSE: [169],
      MACRO_END_IF: [169],
      MOD: [169],
      NEXT: [169],
      NEW: [169],
      NOT: [169],
      NOTHING: [169],
      NULL: [169],
      ON_ERROR: [169],
      ON_LOCAL_ERROR: [169],
      ON: [169],
      OPTIONAL: [169],
      OPTION_BASE: [169],
      OPTION_EXPLICIT: [169],
      OPTION_COMPARE: [169],
      OPTION_PRIVATE_MODULE: [169],
      OR: [169],
      PARAMARRAY: [169],
      PRESERVE: [169],
      PRIVATE: [169],
      PROPERTY_GET: [169],
      PROPERTY_LET: [169],
      PROPERTY_SET: [169],
      PTRSAFE: [169],
      PUBLIC: [169],
      RAISEEVENT: [169],
      REDIM: [169],
      RESET: [169],
      RESUME: [169],
      RETURN: [169],
      SELECT: [169],
      SET: [169],
      SINGLE: [169],
      STATIC: [169],
      STEP: [169],
      STOP: [169],
      STRING: [169],
      SUB: [169],
      THEN: [169],
      TO: [169],
      TRUE: [169],
      TYPEOF: [169],
      UNTIL: [169],
      VARIANT: [169],
      WEND: [169],
      WHILE: [169],
      WITH: [169],
      WITHEVENTS: [169],
      XOR: [169],
      IMP: [169],
      IDENTIFIER: [169],
    },
    dictionaryCallStmt: {
      '!': [170],
    },
    literal: {
      DOUBLELITERAL: [171],
      INTEGERLITERAL: [172],
      STRINGLITERAL: [173],
      NOTHING: [174],
      NULL: [175],
      TRUE: [176],
      FALSE: [177],
    },
    typeHint: {
      '&': [178],
      '%': [179],
      '#': [180],
      '!': [181],
      '@': [182],
      $: [183],
    },
    arg_group_def_73: {
      BYVAL: [184],
    },
    arg_group_72: {
      BYVAL: [185],
      BYREF: [187],
    },
    arg_group_def_74: {
      BYREF: [186],
    },
    arg_group_def_76: {
      LPAREN: [188],
    },
    arg: {
      OPTIONAL: [189],
      BYVAL: [189],
      BYREF: [189],
      PARAMARRAY: [189],
      ALIAS: [189],
      AND: [189],
      ATTRIBUTE: [189],
      AS: [189],
      BEGIN: [189],
      BOOLEAN: [189],
      BYTE: [189],
      CALL: [189],
      CASE: [189],
      CONST: [189],
      DECLARE: [189],
      DEFBOOL: [189],
      DEFBYTE: [189],
      DEFDATE: [189],
      DEFDBL: [189],
      DEFDEC: [189],
      DEFCUR: [189],
      DEFINT: [189],
      DEFLNG: [189],
      DEFOBJ: [189],
      DEFSNG: [189],
      DEFSTR: [189],
      DEFVAR: [189],
      DIM: [189],
      DO: [189],
      DOUBLE: [189],
      EACH: [189],
      ELSE: [189],
      ELSEIF: [189],
      END_ENUM: [189],
      END_FUNCTION: [189],
      END_IF: [189],
      END_PROPERTY: [189],
      END_SELECT: [189],
      END_SUB: [189],
      END_TYPE: [189],
      END_WITH: [189],
      END: [189],
      ENUM: [189],
      EQV: [189],
      ERASE: [189],
      EVENT: [189],
      EXIT_DO: [189],
      EXIT_FOR: [189],
      EXIT_FUNCTION: [189],
      EXIT_PROPERTY: [189],
      EXIT_SUB: [189],
      FALSE: [189],
      FRIEND: [189],
      FOR: [189],
      FUNCTION: [189],
      GET: [189],
      GLOBAL: [189],
      GOSUB: [189],
      GOTO: [189],
      IF: [189],
      IMPLEMENTS: [189],
      IN: [189],
      ISNOT: [189],
      IS: [189],
      INTEGER: [189],
      LONG: [189],
      LOOP: [189],
      LEN: [189],
      LET: [189],
      LIB: [189],
      LIKE: [189],
      LSET: [189],
      MACRO_CONST: [189],
      MACRO_IF: [189],
      MACRO_ELSEIF: [189],
      MACRO_ELSE: [189],
      MACRO_END_IF: [189],
      MOD: [189],
      NEXT: [189],
      NEW: [189],
      NOT: [189],
      NOTHING: [189],
      NULL: [189],
      ON_ERROR: [189],
      ON_LOCAL_ERROR: [189],
      ON: [189],
      OPTION_BASE: [189],
      OPTION_EXPLICIT: [189],
      OPTION_COMPARE: [189],
      OPTION_PRIVATE_MODULE: [189],
      OR: [189],
      PRESERVE: [189],
      PRIVATE: [189],
      PROPERTY_GET: [189],
      PROPERTY_LET: [189],
      PROPERTY_SET: [189],
      PTRSAFE: [189],
      PUBLIC: [189],
      RAISEEVENT: [189],
      REDIM: [189],
      RESET: [189],
      RESUME: [189],
      RETURN: [189],
      SELECT: [189],
      SET: [189],
      SINGLE: [189],
      STATIC: [189],
      STEP: [189],
      STOP: [189],
      STRING: [189],
      SUB: [189],
      THEN: [189],
      TO: [189],
      TRUE: [189],
      TYPEOF: [189],
      UNTIL: [189],
      VARIANT: [189],
      WEND: [189],
      WHILE: [189],
      WITH: [189],
      WITHEVENTS: [189],
      XOR: [189],
      IMP: [189],
      IDENTIFIER: [189],
    },
    argDefaultValue: {
      EQ: [190],
    },
    asTypeClause: {
      AS: [191],
    },
    type__group_def_78: {
      BOOLEAN: [192],
      BYTE: [192],
      DOUBLE: [192],
      INTEGER: [192],
      LONG: [192],
      SINGLE: [192],
      VARIANT: [192],
      STRING: [192],
    },
    type__group_77: {
      BOOLEAN: [193, 195],
      BYTE: [193, 195],
      DOUBLE: [193, 195],
      INTEGER: [193, 195],
      LONG: [193, 195],
      SINGLE: [193, 195],
      VARIANT: [193, 195],
      STRING: [193, 195],
      ALIAS: [195],
      AND: [195],
      ATTRIBUTE: [195],
      AS: [195],
      BEGIN: [195],
      BYVAL: [195],
      BYREF: [195],
      CALL: [195],
      CASE: [195],
      CONST: [195],
      DECLARE: [195],
      DEFBOOL: [195],
      DEFBYTE: [195],
      DEFDATE: [195],
      DEFDBL: [195],
      DEFDEC: [195],
      DEFCUR: [195],
      DEFINT: [195],
      DEFLNG: [195],
      DEFOBJ: [195],
      DEFSNG: [195],
      DEFSTR: [195],
      DEFVAR: [195],
      DIM: [195],
      DO: [195],
      EACH: [195],
      ELSE: [195],
      ELSEIF: [195],
      END_ENUM: [195],
      END_FUNCTION: [195],
      END_IF: [195],
      END_PROPERTY: [195],
      END_SELECT: [195],
      END_SUB: [195],
      END_TYPE: [195],
      END_WITH: [195],
      END: [195],
      ENUM: [195],
      EQV: [195],
      ERASE: [195],
      EVENT: [195],
      EXIT_DO: [195],
      EXIT_FOR: [195],
      EXIT_FUNCTION: [195],
      EXIT_PROPERTY: [195],
      EXIT_SUB: [195],
      FALSE: [195],
      FRIEND: [195],
      FOR: [195],
      FUNCTION: [195],
      GET: [195],
      GLOBAL: [195],
      GOSUB: [195],
      GOTO: [195],
      IF: [195],
      IMPLEMENTS: [195],
      IN: [195],
      ISNOT: [195],
      IS: [195],
      LOOP: [195],
      LEN: [195],
      LET: [195],
      LIB: [195],
      LIKE: [195],
      LSET: [195],
      MACRO_CONST: [195],
      MACRO_IF: [195],
      MACRO_ELSEIF: [195],
      MACRO_ELSE: [195],
      MACRO_END_IF: [195],
      MOD: [195],
      NEXT: [195],
      NEW: [195],
      NOT: [195],
      NOTHING: [195],
      NULL: [195],
      ON_ERROR: [195],
      ON_LOCAL_ERROR: [195],
      ON: [195],
      OPTIONAL: [195],
      OPTION_BASE: [195],
      OPTION_EXPLICIT: [195],
      OPTION_COMPARE: [195],
      OPTION_PRIVATE_MODULE: [195],
      OR: [195],
      PARAMARRAY: [195],
      PRESERVE: [195],
      PRIVATE: [195],
      PROPERTY_GET: [195],
      PROPERTY_LET: [195],
      PROPERTY_SET: [195],
      PTRSAFE: [195],
      PUBLIC: [195],
      RAISEEVENT: [195],
      REDIM: [195],
      RESET: [195],
      RESUME: [195],
      RETURN: [195],
      SELECT: [195],
      SET: [195],
      STATIC: [195],
      STEP: [195],
      STOP: [195],
      SUB: [195],
      THEN: [195],
      TO: [195],
      TRUE: [195],
      TYPEOF: [195],
      UNTIL: [195],
      WEND: [195],
      WHILE: [195],
      WITH: [195],
      WITHEVENTS: [195],
      XOR: [195],
      IMP: [195],
      IDENTIFIER: [195],
    },
    type__group_def_79: {
      ALIAS: [194],
      AND: [194],
      ATTRIBUTE: [194],
      AS: [194],
      BEGIN: [194],
      BOOLEAN: [194],
      BYVAL: [194],
      BYREF: [194],
      BYTE: [194],
      CALL: [194],
      CASE: [194],
      CONST: [194],
      DECLARE: [194],
      DEFBOOL: [194],
      DEFBYTE: [194],
      DEFDATE: [194],
      DEFDBL: [194],
      DEFDEC: [194],
      DEFCUR: [194],
      DEFINT: [194],
      DEFLNG: [194],
      DEFOBJ: [194],
      DEFSNG: [194],
      DEFSTR: [194],
      DEFVAR: [194],
      DIM: [194],
      DO: [194],
      DOUBLE: [194],
      EACH: [194],
      ELSE: [194],
      ELSEIF: [194],
      END_ENUM: [194],
      END_FUNCTION: [194],
      END_IF: [194],
      END_PROPERTY: [194],
      END_SELECT: [194],
      END_SUB: [194],
      END_TYPE: [194],
      END_WITH: [194],
      END: [194],
      ENUM: [194],
      EQV: [194],
      ERASE: [194],
      EVENT: [194],
      EXIT_DO: [194],
      EXIT_FOR: [194],
      EXIT_FUNCTION: [194],
      EXIT_PROPERTY: [194],
      EXIT_SUB: [194],
      FALSE: [194],
      FRIEND: [194],
      FOR: [194],
      FUNCTION: [194],
      GET: [194],
      GLOBAL: [194],
      GOSUB: [194],
      GOTO: [194],
      IF: [194],
      IMPLEMENTS: [194],
      IN: [194],
      ISNOT: [194],
      IS: [194],
      INTEGER: [194],
      LONG: [194],
      LOOP: [194],
      LEN: [194],
      LET: [194],
      LIB: [194],
      LIKE: [194],
      LSET: [194],
      MACRO_CONST: [194],
      MACRO_IF: [194],
      MACRO_ELSEIF: [194],
      MACRO_ELSE: [194],
      MACRO_END_IF: [194],
      MOD: [194],
      NEXT: [194],
      NEW: [194],
      NOT: [194],
      NOTHING: [194],
      NULL: [194],
      ON_ERROR: [194],
      ON_LOCAL_ERROR: [194],
      ON: [194],
      OPTIONAL: [194],
      OPTION_BASE: [194],
      OPTION_EXPLICIT: [194],
      OPTION_COMPARE: [194],
      OPTION_PRIVATE_MODULE: [194],
      OR: [194],
      PARAMARRAY: [194],
      PRESERVE: [194],
      PRIVATE: [194],
      PROPERTY_GET: [194],
      PROPERTY_LET: [194],
      PROPERTY_SET: [194],
      PTRSAFE: [194],
      PUBLIC: [194],
      RAISEEVENT: [194],
      REDIM: [194],
      RESET: [194],
      RESUME: [194],
      RETURN: [194],
      SELECT: [194],
      SET: [194],
      SINGLE: [194],
      STATIC: [194],
      STEP: [194],
      STOP: [194],
      STRING: [194],
      SUB: [194],
      THEN: [194],
      TO: [194],
      TRUE: [194],
      TYPEOF: [194],
      UNTIL: [194],
      VARIANT: [194],
      WEND: [194],
      WHILE: [194],
      WITH: [194],
      WITHEVENTS: [194],
      XOR: [194],
      IMP: [194],
      IDENTIFIER: [194],
    },
    type_: {
      BOOLEAN: [196],
      BYTE: [196],
      DOUBLE: [196],
      INTEGER: [196],
      LONG: [196],
      SINGLE: [196],
      VARIANT: [196],
      STRING: [196],
      ALIAS: [196],
      AND: [196],
      ATTRIBUTE: [196],
      AS: [196],
      BEGIN: [196],
      BYVAL: [196],
      BYREF: [196],
      CALL: [196],
      CASE: [196],
      CONST: [196],
      DECLARE: [196],
      DEFBOOL: [196],
      DEFBYTE: [196],
      DEFDATE: [196],
      DEFDBL: [196],
      DEFDEC: [196],
      DEFCUR: [196],
      DEFINT: [196],
      DEFLNG: [196],
      DEFOBJ: [196],
      DEFSNG: [196],
      DEFSTR: [196],
      DEFVAR: [196],
      DIM: [196],
      DO: [196],
      EACH: [196],
      ELSE: [196],
      ELSEIF: [196],
      END_ENUM: [196],
      END_FUNCTION: [196],
      END_IF: [196],
      END_PROPERTY: [196],
      END_SELECT: [196],
      END_SUB: [196],
      END_TYPE: [196],
      END_WITH: [196],
      END: [196],
      ENUM: [196],
      EQV: [196],
      ERASE: [196],
      EVENT: [196],
      EXIT_DO: [196],
      EXIT_FOR: [196],
      EXIT_FUNCTION: [196],
      EXIT_PROPERTY: [196],
      EXIT_SUB: [196],
      FALSE: [196],
      FRIEND: [196],
      FOR: [196],
      FUNCTION: [196],
      GET: [196],
      GLOBAL: [196],
      GOSUB: [196],
      GOTO: [196],
      IF: [196],
      IMPLEMENTS: [196],
      IN: [196],
      ISNOT: [196],
      IS: [196],
      LOOP: [196],
      LEN: [196],
      LET: [196],
      LIB: [196],
      LIKE: [196],
      LSET: [196],
      MACRO_CONST: [196],
      MACRO_IF: [196],
      MACRO_ELSEIF: [196],
      MACRO_ELSE: [196],
      MACRO_END_IF: [196],
      MOD: [196],
      NEXT: [196],
      NEW: [196],
      NOT: [196],
      NOTHING: [196],
      NULL: [196],
      ON_ERROR: [196],
      ON_LOCAL_ERROR: [196],
      ON: [196],
      OPTIONAL: [196],
      OPTION_BASE: [196],
      OPTION_EXPLICIT: [196],
      OPTION_COMPARE: [196],
      OPTION_PRIVATE_MODULE: [196],
      OR: [196],
      PARAMARRAY: [196],
      PRESERVE: [196],
      PRIVATE: [196],
      PROPERTY_GET: [196],
      PROPERTY_LET: [196],
      PROPERTY_SET: [196],
      PTRSAFE: [196],
      PUBLIC: [196],
      RAISEEVENT: [196],
      REDIM: [196],
      RESET: [196],
      RESUME: [196],
      RETURN: [196],
      SELECT: [196],
      SET: [196],
      STATIC: [196],
      STEP: [196],
      STOP: [196],
      SUB: [196],
      THEN: [196],
      TO: [196],
      TRUE: [196],
      TYPEOF: [196],
      UNTIL: [196],
      WEND: [196],
      WHILE: [196],
      WITH: [196],
      WITHEVENTS: [196],
      XOR: [196],
      IMP: [196],
      IDENTIFIER: [196],
    },
    complexType_group_def_83: {
      '.': [197],
    },
    complexType_group_82: {
      '.': [198],
      '!': [200],
    },
    complexType_group_def_84: {
      '!': [199],
    },
    complexType_group_def_85: {
      '.': [201],
      '!': [201],
    },
    complexType: {
      ALIAS: [202],
      AND: [202],
      ATTRIBUTE: [202],
      AS: [202],
      BEGIN: [202],
      BOOLEAN: [202],
      BYVAL: [202],
      BYREF: [202],
      BYTE: [202],
      CALL: [202],
      CASE: [202],
      CONST: [202],
      DECLARE: [202],
      DEFBOOL: [202],
      DEFBYTE: [202],
      DEFDATE: [202],
      DEFDBL: [202],
      DEFDEC: [202],
      DEFCUR: [202],
      DEFINT: [202],
      DEFLNG: [202],
      DEFOBJ: [202],
      DEFSNG: [202],
      DEFSTR: [202],
      DEFVAR: [202],
      DIM: [202],
      DO: [202],
      DOUBLE: [202],
      EACH: [202],
      ELSE: [202],
      ELSEIF: [202],
      END_ENUM: [202],
      END_FUNCTION: [202],
      END_IF: [202],
      END_PROPERTY: [202],
      END_SELECT: [202],
      END_SUB: [202],
      END_TYPE: [202],
      END_WITH: [202],
      END: [202],
      ENUM: [202],
      EQV: [202],
      ERASE: [202],
      EVENT: [202],
      EXIT_DO: [202],
      EXIT_FOR: [202],
      EXIT_FUNCTION: [202],
      EXIT_PROPERTY: [202],
      EXIT_SUB: [202],
      FALSE: [202],
      FRIEND: [202],
      FOR: [202],
      FUNCTION: [202],
      GET: [202],
      GLOBAL: [202],
      GOSUB: [202],
      GOTO: [202],
      IF: [202],
      IMPLEMENTS: [202],
      IN: [202],
      ISNOT: [202],
      IS: [202],
      INTEGER: [202],
      LONG: [202],
      LOOP: [202],
      LEN: [202],
      LET: [202],
      LIB: [202],
      LIKE: [202],
      LSET: [202],
      MACRO_CONST: [202],
      MACRO_IF: [202],
      MACRO_ELSEIF: [202],
      MACRO_ELSE: [202],
      MACRO_END_IF: [202],
      MOD: [202],
      NEXT: [202],
      NEW: [202],
      NOT: [202],
      NOTHING: [202],
      NULL: [202],
      ON_ERROR: [202],
      ON_LOCAL_ERROR: [202],
      ON: [202],
      OPTIONAL: [202],
      OPTION_BASE: [202],
      OPTION_EXPLICIT: [202],
      OPTION_COMPARE: [202],
      OPTION_PRIVATE_MODULE: [202],
      OR: [202],
      PARAMARRAY: [202],
      PRESERVE: [202],
      PRIVATE: [202],
      PROPERTY_GET: [202],
      PROPERTY_LET: [202],
      PROPERTY_SET: [202],
      PTRSAFE: [202],
      PUBLIC: [202],
      RAISEEVENT: [202],
      REDIM: [202],
      RESET: [202],
      RESUME: [202],
      RETURN: [202],
      SELECT: [202],
      SET: [202],
      SINGLE: [202],
      STATIC: [202],
      STEP: [202],
      STOP: [202],
      STRING: [202],
      SUB: [202],
      THEN: [202],
      TO: [202],
      TRUE: [202],
      TYPEOF: [202],
      UNTIL: [202],
      VARIANT: [202],
      WEND: [202],
      WHILE: [202],
      WITH: [202],
      WITHEVENTS: [202],
      XOR: [202],
      IMP: [202],
      IDENTIFIER: [202],
    },
    baseType: {
      BOOLEAN: [203],
      BYTE: [204],
      DOUBLE: [205],
      INTEGER: [206],
      LONG: [207],
      SINGLE: [208],
      VARIANT: [209],
      STRING: [211],
    },
    baseType_group_def_87: {
      MULT: [210],
    },
    fieldLength: {
      MULT: [212, 213],
    },
    ambiguousIdentifier: {
      ALIAS: [214],
      AND: [215],
      ATTRIBUTE: [216],
      AS: [217],
      BEGIN: [218],
      BOOLEAN: [219],
      BYVAL: [220],
      BYREF: [221],
      BYTE: [222],
      CALL: [223],
      CASE: [224],
      CONST: [225],
      DECLARE: [226],
      DEFBOOL: [227],
      DEFBYTE: [228],
      DEFDATE: [229],
      DEFDBL: [230],
      DEFDEC: [231],
      DEFCUR: [232],
      DEFINT: [233],
      DEFLNG: [234],
      DEFOBJ: [235],
      DEFSNG: [236],
      DEFSTR: [237],
      DEFVAR: [238],
      DIM: [239],
      DO: [240],
      DOUBLE: [241],
      EACH: [242],
      ELSE: [243],
      ELSEIF: [244],
      END_ENUM: [245],
      END_FUNCTION: [246],
      END_IF: [247],
      END_PROPERTY: [248],
      END_SELECT: [249],
      END_SUB: [250],
      END_TYPE: [251],
      END_WITH: [252],
      END: [253],
      ENUM: [254],
      EQV: [255],
      ERASE: [256],
      EVENT: [257],
      EXIT_DO: [258],
      EXIT_FOR: [259],
      EXIT_FUNCTION: [260],
      EXIT_PROPERTY: [261],
      EXIT_SUB: [262],
      FALSE: [263],
      FRIEND: [264],
      FOR: [265],
      FUNCTION: [266],
      GET: [267],
      GLOBAL: [268],
      GOSUB: [269],
      GOTO: [270],
      IF: [271],
      IMPLEMENTS: [272],
      IN: [273],
      ISNOT: [274],
      IS: [275],
      INTEGER: [276],
      LONG: [277],
      LOOP: [278],
      LEN: [279],
      LET: [280],
      LIB: [281],
      LIKE: [282],
      LSET: [283],
      MACRO_CONST: [284],
      MACRO_IF: [285],
      MACRO_ELSEIF: [286],
      MACRO_ELSE: [287],
      MACRO_END_IF: [288],
      MOD: [289],
      NEXT: [290],
      NEW: [291],
      NOT: [292],
      NOTHING: [293],
      NULL: [294],
      ON_ERROR: [295],
      ON_LOCAL_ERROR: [296],
      ON: [297],
      OPTIONAL: [298],
      OPTION_BASE: [299],
      OPTION_EXPLICIT: [300],
      OPTION_COMPARE: [301],
      OPTION_PRIVATE_MODULE: [302],
      OR: [303],
      PARAMARRAY: [304],
      PRESERVE: [305],
      PRIVATE: [306],
      PROPERTY_GET: [307],
      PROPERTY_LET: [308],
      PROPERTY_SET: [309],
      PTRSAFE: [310],
      PUBLIC: [311],
      RAISEEVENT: [312],
      REDIM: [313],
      RESET: [314],
      RESUME: [315],
      RETURN: [316],
      SELECT: [317],
      SET: [318],
      SINGLE: [319],
      STATIC: [320],
      STEP: [321],
      STOP: [322],
      STRING: [323],
      SUB: [324],
      THEN: [325],
      TO: [326],
      TRUE: [327],
      TYPEOF: [328],
      UNTIL: [329],
      VARIANT: [330],
      WEND: [331],
      WHILE: [332],
      WITH: [333],
      WITHEVENTS: [334],
      XOR: [335],
      IMP: [336],
      IDENTIFIER: [338],
    },
    certainIdentifier: {
      IDENTIFIER: [337],
    },
    valueStmt: {
      DOUBLELITERAL: [339],
      INTEGERLITERAL: [339],
      STRINGLITERAL: [339],
      NOTHING: [339],
      NULL: [339],
      TRUE: [339],
      FALSE: [339],
      SPACE_DOT: [339],
      ALIAS: [339],
      AND: [339],
      ATTRIBUTE: [339],
      AS: [339],
      BEGIN: [339],
      BOOLEAN: [339],
      BYVAL: [339],
      BYREF: [339],
      BYTE: [339],
      CALL: [339],
      CASE: [339],
      CONST: [339],
      DECLARE: [339],
      DEFBOOL: [339],
      DEFBYTE: [339],
      DEFDATE: [339],
      DEFDBL: [339],
      DEFDEC: [339],
      DEFCUR: [339],
      DEFINT: [339],
      DEFLNG: [339],
      DEFOBJ: [339],
      DEFSNG: [339],
      DEFSTR: [339],
      DEFVAR: [339],
      DIM: [339],
      DO: [339],
      DOUBLE: [339],
      EACH: [339],
      ELSE: [339],
      ELSEIF: [339],
      END_ENUM: [339],
      END_FUNCTION: [339],
      END_IF: [339],
      END_PROPERTY: [339],
      END_SELECT: [339],
      END_SUB: [339],
      END_TYPE: [339],
      END_WITH: [339],
      END: [339],
      ENUM: [339],
      EQV: [339],
      ERASE: [339],
      EVENT: [339],
      EXIT_DO: [339],
      EXIT_FOR: [339],
      EXIT_FUNCTION: [339],
      EXIT_PROPERTY: [339],
      EXIT_SUB: [339],
      FRIEND: [339],
      FOR: [339],
      FUNCTION: [339],
      GET: [339],
      GLOBAL: [339],
      GOSUB: [339],
      GOTO: [339],
      IF: [339],
      IMPLEMENTS: [339],
      IN: [339],
      ISNOT: [339],
      IS: [339],
      INTEGER: [339],
      LONG: [339],
      LOOP: [339],
      LEN: [339],
      LET: [339],
      LIB: [339],
      LIKE: [339],
      LSET: [339],
      MACRO_CONST: [339],
      MACRO_IF: [339],
      MACRO_ELSEIF: [339],
      MACRO_ELSE: [339],
      MACRO_END_IF: [339],
      MOD: [339],
      NEXT: [339],
      NEW: [339],
      NOT: [339, 340],
      ON_ERROR: [339],
      ON_LOCAL_ERROR: [339],
      ON: [339],
      OPTIONAL: [339],
      OPTION_BASE: [339],
      OPTION_EXPLICIT: [339],
      OPTION_COMPARE: [339],
      OPTION_PRIVATE_MODULE: [339],
      OR: [339],
      PARAMARRAY: [339],
      PRESERVE: [339],
      PRIVATE: [339],
      PROPERTY_GET: [339],
      PROPERTY_LET: [339],
      PROPERTY_SET: [339],
      PTRSAFE: [339],
      PUBLIC: [339],
      RAISEEVENT: [339],
      REDIM: [339],
      RESET: [339],
      RESUME: [339],
      RETURN: [339],
      SELECT: [339],
      SET: [339],
      SINGLE: [339],
      STATIC: [339],
      STEP: [339],
      STOP: [339],
      STRING: [339],
      SUB: [339],
      THEN: [339],
      TO: [339],
      TYPEOF: [339],
      UNTIL: [339],
      VARIANT: [339],
      WEND: [339],
      WHILE: [339],
      WITH: [339],
      WITHEVENTS: [339],
      XOR: [339],
      IMP: [339],
      IDENTIFIER: [339],
      LPAREN: [339],
      MINUS: [339],
      PLUS: [339],
    },
    '(valueStmt_p_2)1_': {
      IS: [341, 368],
      ISNOT: [343, 368],
      GEQ: [344, 368],
      LEQ: [345, 368],
      GT: [346, 368],
      LT: [347, 368],
      NEQ: [348, 368],
      EQ: [349, 368],
      NEWLINE: [368],
      COMMENT: [368],
      REMCOMMENT: [368],
      COLON: [368],
      ALIAS: [368],
      AND: [368],
      ATTRIBUTE: [368],
      AS: [368],
      BEGIN: [368],
      BOOLEAN: [368],
      BYVAL: [368],
      BYREF: [368],
      BYTE: [368],
      CALL: [368],
      CASE: [368],
      CONST: [368],
      DECLARE: [368],
      DEFBOOL: [368],
      DEFBYTE: [368],
      DEFDATE: [368],
      DEFDBL: [368],
      DEFDEC: [368],
      DEFCUR: [368],
      DEFINT: [368],
      DEFLNG: [368],
      DEFOBJ: [368],
      DEFSNG: [368],
      DEFSTR: [368],
      DEFVAR: [368],
      DIM: [368],
      DO: [368],
      DOUBLE: [368],
      EACH: [368],
      ELSE: [368],
      ELSEIF: [368],
      END_ENUM: [368],
      END_FUNCTION: [368],
      END_IF: [368],
      END_PROPERTY: [368],
      END_SELECT: [368],
      END_SUB: [368],
      END_TYPE: [368],
      END_WITH: [368],
      END: [368],
      ENUM: [368],
      EQV: [368],
      ERASE: [368],
      EVENT: [368],
      EXIT_DO: [368],
      EXIT_FOR: [368],
      EXIT_FUNCTION: [368],
      EXIT_PROPERTY: [368],
      EXIT_SUB: [368],
      FALSE: [368],
      FRIEND: [368],
      FOR: [368],
      FUNCTION: [368],
      GET: [368],
      GLOBAL: [368],
      GOSUB: [368],
      GOTO: [368],
      IF: [368],
      IMPLEMENTS: [368],
      IN: [368],
      INTEGER: [368],
      LONG: [368],
      LOOP: [368],
      LEN: [368],
      LET: [368],
      LIB: [368],
      LIKE: [368],
      LSET: [368],
      MACRO_CONST: [368],
      MACRO_IF: [368],
      MACRO_ELSEIF: [368],
      MACRO_ELSE: [368],
      MACRO_END_IF: [368],
      MOD: [368],
      NEXT: [368],
      NEW: [368],
      NOT: [368],
      NOTHING: [368],
      NULL: [368],
      ON_ERROR: [368],
      ON_LOCAL_ERROR: [368],
      ON: [368],
      OPTIONAL: [368],
      OPTION_BASE: [368],
      OPTION_EXPLICIT: [368],
      OPTION_COMPARE: [368],
      OPTION_PRIVATE_MODULE: [368],
      OR: [368],
      PARAMARRAY: [368],
      PRESERVE: [368],
      PRIVATE: [368],
      PROPERTY_GET: [368],
      PROPERTY_LET: [368],
      PROPERTY_SET: [368],
      PTRSAFE: [368],
      PUBLIC: [368],
      RAISEEVENT: [368],
      REDIM: [368],
      RESET: [368],
      RESUME: [368],
      RETURN: [368],
      SELECT: [368],
      SET: [368],
      SINGLE: [368],
      STATIC: [368],
      STEP: [368],
      STOP: [368],
      STRING: [368],
      SUB: [368],
      THEN: [368],
      TO: [368],
      TRUE: [368],
      TYPEOF: [368],
      UNTIL: [368],
      VARIANT: [368],
      WEND: [368],
      WHILE: [368],
      WITH: [368],
      WITHEVENTS: [368],
      XOR: [368],
      IMP: [368],
      IDENTIFIER: [368],
      SPACE_DOT: [368],
      ',': [368],
      RPAREN: [368],
      '!': [368],
      LPAREN: [368],
      POW: [368],
      MULT: [368],
      DIV: [368],
      IDIV: [368],
      PLUS: [368],
      MINUS: [368],
      AMPERSAND: [368],
      $EOF: [368],
    },
    valueStmt_p_2: {
      DOUBLELITERAL: [342],
      INTEGERLITERAL: [342],
      STRINGLITERAL: [342],
      NOTHING: [342],
      NULL: [342],
      TRUE: [342],
      FALSE: [342],
      SPACE_DOT: [342],
      ALIAS: [342],
      AND: [342],
      ATTRIBUTE: [342],
      AS: [342],
      BEGIN: [342],
      BOOLEAN: [342],
      BYVAL: [342],
      BYREF: [342],
      BYTE: [342],
      CALL: [342],
      CASE: [342],
      CONST: [342],
      DECLARE: [342],
      DEFBOOL: [342],
      DEFBYTE: [342],
      DEFDATE: [342],
      DEFDBL: [342],
      DEFDEC: [342],
      DEFCUR: [342],
      DEFINT: [342],
      DEFLNG: [342],
      DEFOBJ: [342],
      DEFSNG: [342],
      DEFSTR: [342],
      DEFVAR: [342],
      DIM: [342],
      DO: [342],
      DOUBLE: [342],
      EACH: [342],
      ELSE: [342],
      ELSEIF: [342],
      END_ENUM: [342],
      END_FUNCTION: [342],
      END_IF: [342],
      END_PROPERTY: [342],
      END_SELECT: [342],
      END_SUB: [342],
      END_TYPE: [342],
      END_WITH: [342],
      END: [342],
      ENUM: [342],
      EQV: [342],
      ERASE: [342],
      EVENT: [342],
      EXIT_DO: [342],
      EXIT_FOR: [342],
      EXIT_FUNCTION: [342],
      EXIT_PROPERTY: [342],
      EXIT_SUB: [342],
      FRIEND: [342],
      FOR: [342],
      FUNCTION: [342],
      GET: [342],
      GLOBAL: [342],
      GOSUB: [342],
      GOTO: [342],
      IF: [342],
      IMPLEMENTS: [342],
      IN: [342],
      ISNOT: [342],
      IS: [342],
      INTEGER: [342],
      LONG: [342],
      LOOP: [342],
      LEN: [342],
      LET: [342],
      LIB: [342],
      LIKE: [342],
      LSET: [342],
      MACRO_CONST: [342],
      MACRO_IF: [342],
      MACRO_ELSEIF: [342],
      MACRO_ELSE: [342],
      MACRO_END_IF: [342],
      MOD: [342],
      NEXT: [342],
      NEW: [342],
      NOT: [342],
      ON_ERROR: [342],
      ON_LOCAL_ERROR: [342],
      ON: [342],
      OPTIONAL: [342],
      OPTION_BASE: [342],
      OPTION_EXPLICIT: [342],
      OPTION_COMPARE: [342],
      OPTION_PRIVATE_MODULE: [342],
      OR: [342],
      PARAMARRAY: [342],
      PRESERVE: [342],
      PRIVATE: [342],
      PROPERTY_GET: [342],
      PROPERTY_LET: [342],
      PROPERTY_SET: [342],
      PTRSAFE: [342],
      PUBLIC: [342],
      RAISEEVENT: [342],
      REDIM: [342],
      RESET: [342],
      RESUME: [342],
      RETURN: [342],
      SELECT: [342],
      SET: [342],
      SINGLE: [342],
      STATIC: [342],
      STEP: [342],
      STOP: [342],
      STRING: [342],
      SUB: [342],
      THEN: [342],
      TO: [342],
      TYPEOF: [342],
      UNTIL: [342],
      VARIANT: [342],
      WEND: [342],
      WHILE: [342],
      WITH: [342],
      WITHEVENTS: [342],
      XOR: [342],
      IMP: [342],
      IDENTIFIER: [342],
      LPAREN: [342],
      MINUS: [342],
      PLUS: [342],
    },
    '(valueStmt_p_3)1_': {
      XOR: [350, 369],
      OR: [352, 369],
      AND: [353, 369],
      IS: [369],
      ISNOT: [369],
      GEQ: [369],
      LEQ: [369],
      GT: [369],
      LT: [369],
      NEQ: [369],
      EQ: [369],
      NEWLINE: [369],
      COMMENT: [369],
      REMCOMMENT: [369],
      COLON: [369],
      ALIAS: [369],
      ATTRIBUTE: [369],
      AS: [369],
      BEGIN: [369],
      BOOLEAN: [369],
      BYVAL: [369],
      BYREF: [369],
      BYTE: [369],
      CALL: [369],
      CASE: [369],
      CONST: [369],
      DECLARE: [369],
      DEFBOOL: [369],
      DEFBYTE: [369],
      DEFDATE: [369],
      DEFDBL: [369],
      DEFDEC: [369],
      DEFCUR: [369],
      DEFINT: [369],
      DEFLNG: [369],
      DEFOBJ: [369],
      DEFSNG: [369],
      DEFSTR: [369],
      DEFVAR: [369],
      DIM: [369],
      DO: [369],
      DOUBLE: [369],
      EACH: [369],
      ELSE: [369],
      ELSEIF: [369],
      END_ENUM: [369],
      END_FUNCTION: [369],
      END_IF: [369],
      END_PROPERTY: [369],
      END_SELECT: [369],
      END_SUB: [369],
      END_TYPE: [369],
      END_WITH: [369],
      END: [369],
      ENUM: [369],
      EQV: [369],
      ERASE: [369],
      EVENT: [369],
      EXIT_DO: [369],
      EXIT_FOR: [369],
      EXIT_FUNCTION: [369],
      EXIT_PROPERTY: [369],
      EXIT_SUB: [369],
      FALSE: [369],
      FRIEND: [369],
      FOR: [369],
      FUNCTION: [369],
      GET: [369],
      GLOBAL: [369],
      GOSUB: [369],
      GOTO: [369],
      IF: [369],
      IMPLEMENTS: [369],
      IN: [369],
      INTEGER: [369],
      LONG: [369],
      LOOP: [369],
      LEN: [369],
      LET: [369],
      LIB: [369],
      LIKE: [369],
      LSET: [369],
      MACRO_CONST: [369],
      MACRO_IF: [369],
      MACRO_ELSEIF: [369],
      MACRO_ELSE: [369],
      MACRO_END_IF: [369],
      MOD: [369],
      NEXT: [369],
      NEW: [369],
      NOT: [369],
      NOTHING: [369],
      NULL: [369],
      ON_ERROR: [369],
      ON_LOCAL_ERROR: [369],
      ON: [369],
      OPTIONAL: [369],
      OPTION_BASE: [369],
      OPTION_EXPLICIT: [369],
      OPTION_COMPARE: [369],
      OPTION_PRIVATE_MODULE: [369],
      PARAMARRAY: [369],
      PRESERVE: [369],
      PRIVATE: [369],
      PROPERTY_GET: [369],
      PROPERTY_LET: [369],
      PROPERTY_SET: [369],
      PTRSAFE: [369],
      PUBLIC: [369],
      RAISEEVENT: [369],
      REDIM: [369],
      RESET: [369],
      RESUME: [369],
      RETURN: [369],
      SELECT: [369],
      SET: [369],
      SINGLE: [369],
      STATIC: [369],
      STEP: [369],
      STOP: [369],
      STRING: [369],
      SUB: [369],
      THEN: [369],
      TO: [369],
      TRUE: [369],
      TYPEOF: [369],
      UNTIL: [369],
      VARIANT: [369],
      WEND: [369],
      WHILE: [369],
      WITH: [369],
      WITHEVENTS: [369],
      IMP: [369],
      IDENTIFIER: [369],
      SPACE_DOT: [369],
      ',': [369],
      RPAREN: [369],
      '!': [369],
      LPAREN: [369],
      POW: [369],
      MULT: [369],
      DIV: [369],
      IDIV: [369],
      PLUS: [369],
      MINUS: [369],
      AMPERSAND: [369],
      $EOF: [369],
    },
    valueStmt_p_3: {
      DOUBLELITERAL: [351],
      INTEGERLITERAL: [351],
      STRINGLITERAL: [351],
      NOTHING: [351],
      NULL: [351],
      TRUE: [351],
      FALSE: [351],
      SPACE_DOT: [351],
      ALIAS: [351],
      AND: [351],
      ATTRIBUTE: [351],
      AS: [351],
      BEGIN: [351],
      BOOLEAN: [351],
      BYVAL: [351],
      BYREF: [351],
      BYTE: [351],
      CALL: [351],
      CASE: [351],
      CONST: [351],
      DECLARE: [351],
      DEFBOOL: [351],
      DEFBYTE: [351],
      DEFDATE: [351],
      DEFDBL: [351],
      DEFDEC: [351],
      DEFCUR: [351],
      DEFINT: [351],
      DEFLNG: [351],
      DEFOBJ: [351],
      DEFSNG: [351],
      DEFSTR: [351],
      DEFVAR: [351],
      DIM: [351],
      DO: [351],
      DOUBLE: [351],
      EACH: [351],
      ELSE: [351],
      ELSEIF: [351],
      END_ENUM: [351],
      END_FUNCTION: [351],
      END_IF: [351],
      END_PROPERTY: [351],
      END_SELECT: [351],
      END_SUB: [351],
      END_TYPE: [351],
      END_WITH: [351],
      END: [351],
      ENUM: [351],
      EQV: [351],
      ERASE: [351],
      EVENT: [351],
      EXIT_DO: [351],
      EXIT_FOR: [351],
      EXIT_FUNCTION: [351],
      EXIT_PROPERTY: [351],
      EXIT_SUB: [351],
      FRIEND: [351],
      FOR: [351],
      FUNCTION: [351],
      GET: [351],
      GLOBAL: [351],
      GOSUB: [351],
      GOTO: [351],
      IF: [351],
      IMPLEMENTS: [351],
      IN: [351],
      ISNOT: [351],
      IS: [351],
      INTEGER: [351],
      LONG: [351],
      LOOP: [351],
      LEN: [351],
      LET: [351],
      LIB: [351],
      LIKE: [351],
      LSET: [351],
      MACRO_CONST: [351],
      MACRO_IF: [351],
      MACRO_ELSEIF: [351],
      MACRO_ELSE: [351],
      MACRO_END_IF: [351],
      MOD: [351],
      NEXT: [351],
      NEW: [351],
      NOT: [351],
      ON_ERROR: [351],
      ON_LOCAL_ERROR: [351],
      ON: [351],
      OPTIONAL: [351],
      OPTION_BASE: [351],
      OPTION_EXPLICIT: [351],
      OPTION_COMPARE: [351],
      OPTION_PRIVATE_MODULE: [351],
      OR: [351],
      PARAMARRAY: [351],
      PRESERVE: [351],
      PRIVATE: [351],
      PROPERTY_GET: [351],
      PROPERTY_LET: [351],
      PROPERTY_SET: [351],
      PTRSAFE: [351],
      PUBLIC: [351],
      RAISEEVENT: [351],
      REDIM: [351],
      RESET: [351],
      RESUME: [351],
      RETURN: [351],
      SELECT: [351],
      SET: [351],
      SINGLE: [351],
      STATIC: [351],
      STEP: [351],
      STOP: [351],
      STRING: [351],
      SUB: [351],
      THEN: [351],
      TO: [351],
      TYPEOF: [351],
      UNTIL: [351],
      VARIANT: [351],
      WEND: [351],
      WHILE: [351],
      WITH: [351],
      WITHEVENTS: [351],
      XOR: [351],
      IMP: [351],
      IDENTIFIER: [351],
      LPAREN: [351],
      MINUS: [351],
      PLUS: [351],
    },
    '(valueStmt_p_4)1_': {
      PLUS: [354, 370],
      MINUS: [356, 370],
      AMPERSAND: [357, 370],
      XOR: [370],
      OR: [370],
      AND: [370],
      IS: [370],
      ISNOT: [370],
      GEQ: [370],
      LEQ: [370],
      GT: [370],
      LT: [370],
      NEQ: [370],
      EQ: [370],
      NEWLINE: [370],
      COMMENT: [370],
      REMCOMMENT: [370],
      COLON: [370],
      ALIAS: [370],
      ATTRIBUTE: [370],
      AS: [370],
      BEGIN: [370],
      BOOLEAN: [370],
      BYVAL: [370],
      BYREF: [370],
      BYTE: [370],
      CALL: [370],
      CASE: [370],
      CONST: [370],
      DECLARE: [370],
      DEFBOOL: [370],
      DEFBYTE: [370],
      DEFDATE: [370],
      DEFDBL: [370],
      DEFDEC: [370],
      DEFCUR: [370],
      DEFINT: [370],
      DEFLNG: [370],
      DEFOBJ: [370],
      DEFSNG: [370],
      DEFSTR: [370],
      DEFVAR: [370],
      DIM: [370],
      DO: [370],
      DOUBLE: [370],
      EACH: [370],
      ELSE: [370],
      ELSEIF: [370],
      END_ENUM: [370],
      END_FUNCTION: [370],
      END_IF: [370],
      END_PROPERTY: [370],
      END_SELECT: [370],
      END_SUB: [370],
      END_TYPE: [370],
      END_WITH: [370],
      END: [370],
      ENUM: [370],
      EQV: [370],
      ERASE: [370],
      EVENT: [370],
      EXIT_DO: [370],
      EXIT_FOR: [370],
      EXIT_FUNCTION: [370],
      EXIT_PROPERTY: [370],
      EXIT_SUB: [370],
      FALSE: [370],
      FRIEND: [370],
      FOR: [370],
      FUNCTION: [370],
      GET: [370],
      GLOBAL: [370],
      GOSUB: [370],
      GOTO: [370],
      IF: [370],
      IMPLEMENTS: [370],
      IN: [370],
      INTEGER: [370],
      LONG: [370],
      LOOP: [370],
      LEN: [370],
      LET: [370],
      LIB: [370],
      LIKE: [370],
      LSET: [370],
      MACRO_CONST: [370],
      MACRO_IF: [370],
      MACRO_ELSEIF: [370],
      MACRO_ELSE: [370],
      MACRO_END_IF: [370],
      MOD: [370],
      NEXT: [370],
      NEW: [370],
      NOT: [370],
      NOTHING: [370],
      NULL: [370],
      ON_ERROR: [370],
      ON_LOCAL_ERROR: [370],
      ON: [370],
      OPTIONAL: [370],
      OPTION_BASE: [370],
      OPTION_EXPLICIT: [370],
      OPTION_COMPARE: [370],
      OPTION_PRIVATE_MODULE: [370],
      PARAMARRAY: [370],
      PRESERVE: [370],
      PRIVATE: [370],
      PROPERTY_GET: [370],
      PROPERTY_LET: [370],
      PROPERTY_SET: [370],
      PTRSAFE: [370],
      PUBLIC: [370],
      RAISEEVENT: [370],
      REDIM: [370],
      RESET: [370],
      RESUME: [370],
      RETURN: [370],
      SELECT: [370],
      SET: [370],
      SINGLE: [370],
      STATIC: [370],
      STEP: [370],
      STOP: [370],
      STRING: [370],
      SUB: [370],
      THEN: [370],
      TO: [370],
      TRUE: [370],
      TYPEOF: [370],
      UNTIL: [370],
      VARIANT: [370],
      WEND: [370],
      WHILE: [370],
      WITH: [370],
      WITHEVENTS: [370],
      IMP: [370],
      IDENTIFIER: [370],
      SPACE_DOT: [370],
      ',': [370],
      RPAREN: [370],
      '!': [370],
      LPAREN: [370],
      POW: [370],
      MULT: [370],
      DIV: [370],
      IDIV: [370],
      $EOF: [370],
    },
    valueStmt_p_4: {
      DOUBLELITERAL: [355],
      INTEGERLITERAL: [355],
      STRINGLITERAL: [355],
      NOTHING: [355],
      NULL: [355],
      TRUE: [355],
      FALSE: [355],
      SPACE_DOT: [355],
      ALIAS: [355],
      AND: [355],
      ATTRIBUTE: [355],
      AS: [355],
      BEGIN: [355],
      BOOLEAN: [355],
      BYVAL: [355],
      BYREF: [355],
      BYTE: [355],
      CALL: [355],
      CASE: [355],
      CONST: [355],
      DECLARE: [355],
      DEFBOOL: [355],
      DEFBYTE: [355],
      DEFDATE: [355],
      DEFDBL: [355],
      DEFDEC: [355],
      DEFCUR: [355],
      DEFINT: [355],
      DEFLNG: [355],
      DEFOBJ: [355],
      DEFSNG: [355],
      DEFSTR: [355],
      DEFVAR: [355],
      DIM: [355],
      DO: [355],
      DOUBLE: [355],
      EACH: [355],
      ELSE: [355],
      ELSEIF: [355],
      END_ENUM: [355],
      END_FUNCTION: [355],
      END_IF: [355],
      END_PROPERTY: [355],
      END_SELECT: [355],
      END_SUB: [355],
      END_TYPE: [355],
      END_WITH: [355],
      END: [355],
      ENUM: [355],
      EQV: [355],
      ERASE: [355],
      EVENT: [355],
      EXIT_DO: [355],
      EXIT_FOR: [355],
      EXIT_FUNCTION: [355],
      EXIT_PROPERTY: [355],
      EXIT_SUB: [355],
      FRIEND: [355],
      FOR: [355],
      FUNCTION: [355],
      GET: [355],
      GLOBAL: [355],
      GOSUB: [355],
      GOTO: [355],
      IF: [355],
      IMPLEMENTS: [355],
      IN: [355],
      ISNOT: [355],
      IS: [355],
      INTEGER: [355],
      LONG: [355],
      LOOP: [355],
      LEN: [355],
      LET: [355],
      LIB: [355],
      LIKE: [355],
      LSET: [355],
      MACRO_CONST: [355],
      MACRO_IF: [355],
      MACRO_ELSEIF: [355],
      MACRO_ELSE: [355],
      MACRO_END_IF: [355],
      MOD: [355],
      NEXT: [355],
      NEW: [355],
      NOT: [355],
      ON_ERROR: [355],
      ON_LOCAL_ERROR: [355],
      ON: [355],
      OPTIONAL: [355],
      OPTION_BASE: [355],
      OPTION_EXPLICIT: [355],
      OPTION_COMPARE: [355],
      OPTION_PRIVATE_MODULE: [355],
      OR: [355],
      PARAMARRAY: [355],
      PRESERVE: [355],
      PRIVATE: [355],
      PROPERTY_GET: [355],
      PROPERTY_LET: [355],
      PROPERTY_SET: [355],
      PTRSAFE: [355],
      PUBLIC: [355],
      RAISEEVENT: [355],
      REDIM: [355],
      RESET: [355],
      RESUME: [355],
      RETURN: [355],
      SELECT: [355],
      SET: [355],
      SINGLE: [355],
      STATIC: [355],
      STEP: [355],
      STOP: [355],
      STRING: [355],
      SUB: [355],
      THEN: [355],
      TO: [355],
      TYPEOF: [355],
      UNTIL: [355],
      VARIANT: [355],
      WEND: [355],
      WHILE: [355],
      WITH: [355],
      WITHEVENTS: [355],
      XOR: [355],
      IMP: [355],
      IDENTIFIER: [355],
      LPAREN: [355],
      MINUS: [355],
      PLUS: [355],
    },
    '(valueStmt_p_5)1_': {
      MULT: [358, 371],
      DIV: [360, 371],
      IDIV: [361, 371],
      MOD: [362, 371],
      PLUS: [371],
      MINUS: [371],
      AMPERSAND: [371],
      XOR: [371],
      OR: [371],
      AND: [371],
      IS: [371],
      ISNOT: [371],
      GEQ: [371],
      LEQ: [371],
      GT: [371],
      LT: [371],
      NEQ: [371],
      EQ: [371],
      NEWLINE: [371],
      COMMENT: [371],
      REMCOMMENT: [371],
      COLON: [371],
      ALIAS: [371],
      ATTRIBUTE: [371],
      AS: [371],
      BEGIN: [371],
      BOOLEAN: [371],
      BYVAL: [371],
      BYREF: [371],
      BYTE: [371],
      CALL: [371],
      CASE: [371],
      CONST: [371],
      DECLARE: [371],
      DEFBOOL: [371],
      DEFBYTE: [371],
      DEFDATE: [371],
      DEFDBL: [371],
      DEFDEC: [371],
      DEFCUR: [371],
      DEFINT: [371],
      DEFLNG: [371],
      DEFOBJ: [371],
      DEFSNG: [371],
      DEFSTR: [371],
      DEFVAR: [371],
      DIM: [371],
      DO: [371],
      DOUBLE: [371],
      EACH: [371],
      ELSE: [371],
      ELSEIF: [371],
      END_ENUM: [371],
      END_FUNCTION: [371],
      END_IF: [371],
      END_PROPERTY: [371],
      END_SELECT: [371],
      END_SUB: [371],
      END_TYPE: [371],
      END_WITH: [371],
      END: [371],
      ENUM: [371],
      EQV: [371],
      ERASE: [371],
      EVENT: [371],
      EXIT_DO: [371],
      EXIT_FOR: [371],
      EXIT_FUNCTION: [371],
      EXIT_PROPERTY: [371],
      EXIT_SUB: [371],
      FALSE: [371],
      FRIEND: [371],
      FOR: [371],
      FUNCTION: [371],
      GET: [371],
      GLOBAL: [371],
      GOSUB: [371],
      GOTO: [371],
      IF: [371],
      IMPLEMENTS: [371],
      IN: [371],
      INTEGER: [371],
      LONG: [371],
      LOOP: [371],
      LEN: [371],
      LET: [371],
      LIB: [371],
      LIKE: [371],
      LSET: [371],
      MACRO_CONST: [371],
      MACRO_IF: [371],
      MACRO_ELSEIF: [371],
      MACRO_ELSE: [371],
      MACRO_END_IF: [371],
      NEXT: [371],
      NEW: [371],
      NOT: [371],
      NOTHING: [371],
      NULL: [371],
      ON_ERROR: [371],
      ON_LOCAL_ERROR: [371],
      ON: [371],
      OPTIONAL: [371],
      OPTION_BASE: [371],
      OPTION_EXPLICIT: [371],
      OPTION_COMPARE: [371],
      OPTION_PRIVATE_MODULE: [371],
      PARAMARRAY: [371],
      PRESERVE: [371],
      PRIVATE: [371],
      PROPERTY_GET: [371],
      PROPERTY_LET: [371],
      PROPERTY_SET: [371],
      PTRSAFE: [371],
      PUBLIC: [371],
      RAISEEVENT: [371],
      REDIM: [371],
      RESET: [371],
      RESUME: [371],
      RETURN: [371],
      SELECT: [371],
      SET: [371],
      SINGLE: [371],
      STATIC: [371],
      STEP: [371],
      STOP: [371],
      STRING: [371],
      SUB: [371],
      THEN: [371],
      TO: [371],
      TRUE: [371],
      TYPEOF: [371],
      UNTIL: [371],
      VARIANT: [371],
      WEND: [371],
      WHILE: [371],
      WITH: [371],
      WITHEVENTS: [371],
      IMP: [371],
      IDENTIFIER: [371],
      SPACE_DOT: [371],
      ',': [371],
      RPAREN: [371],
      '!': [371],
      LPAREN: [371],
      POW: [371],
      $EOF: [371],
    },
    valueStmt_p_5: {
      DOUBLELITERAL: [359],
      INTEGERLITERAL: [359],
      STRINGLITERAL: [359],
      NOTHING: [359],
      NULL: [359],
      TRUE: [359],
      FALSE: [359],
      SPACE_DOT: [359],
      ALIAS: [359],
      AND: [359],
      ATTRIBUTE: [359],
      AS: [359],
      BEGIN: [359],
      BOOLEAN: [359],
      BYVAL: [359],
      BYREF: [359],
      BYTE: [359],
      CALL: [359],
      CASE: [359],
      CONST: [359],
      DECLARE: [359],
      DEFBOOL: [359],
      DEFBYTE: [359],
      DEFDATE: [359],
      DEFDBL: [359],
      DEFDEC: [359],
      DEFCUR: [359],
      DEFINT: [359],
      DEFLNG: [359],
      DEFOBJ: [359],
      DEFSNG: [359],
      DEFSTR: [359],
      DEFVAR: [359],
      DIM: [359],
      DO: [359],
      DOUBLE: [359],
      EACH: [359],
      ELSE: [359],
      ELSEIF: [359],
      END_ENUM: [359],
      END_FUNCTION: [359],
      END_IF: [359],
      END_PROPERTY: [359],
      END_SELECT: [359],
      END_SUB: [359],
      END_TYPE: [359],
      END_WITH: [359],
      END: [359],
      ENUM: [359],
      EQV: [359],
      ERASE: [359],
      EVENT: [359],
      EXIT_DO: [359],
      EXIT_FOR: [359],
      EXIT_FUNCTION: [359],
      EXIT_PROPERTY: [359],
      EXIT_SUB: [359],
      FRIEND: [359],
      FOR: [359],
      FUNCTION: [359],
      GET: [359],
      GLOBAL: [359],
      GOSUB: [359],
      GOTO: [359],
      IF: [359],
      IMPLEMENTS: [359],
      IN: [359],
      ISNOT: [359],
      IS: [359],
      INTEGER: [359],
      LONG: [359],
      LOOP: [359],
      LEN: [359],
      LET: [359],
      LIB: [359],
      LIKE: [359],
      LSET: [359],
      MACRO_CONST: [359],
      MACRO_IF: [359],
      MACRO_ELSEIF: [359],
      MACRO_ELSE: [359],
      MACRO_END_IF: [359],
      MOD: [359],
      NEXT: [359],
      NEW: [359],
      NOT: [359],
      ON_ERROR: [359],
      ON_LOCAL_ERROR: [359],
      ON: [359],
      OPTIONAL: [359],
      OPTION_BASE: [359],
      OPTION_EXPLICIT: [359],
      OPTION_COMPARE: [359],
      OPTION_PRIVATE_MODULE: [359],
      OR: [359],
      PARAMARRAY: [359],
      PRESERVE: [359],
      PRIVATE: [359],
      PROPERTY_GET: [359],
      PROPERTY_LET: [359],
      PROPERTY_SET: [359],
      PTRSAFE: [359],
      PUBLIC: [359],
      RAISEEVENT: [359],
      REDIM: [359],
      RESET: [359],
      RESUME: [359],
      RETURN: [359],
      SELECT: [359],
      SET: [359],
      SINGLE: [359],
      STATIC: [359],
      STEP: [359],
      STOP: [359],
      STRING: [359],
      SUB: [359],
      THEN: [359],
      TO: [359],
      TYPEOF: [359],
      UNTIL: [359],
      VARIANT: [359],
      WEND: [359],
      WHILE: [359],
      WITH: [359],
      WITHEVENTS: [359],
      XOR: [359],
      IMP: [359],
      IDENTIFIER: [359],
      LPAREN: [359],
      MINUS: [359],
      PLUS: [359],
    },
    '(valueStmt_p_6)1_': {
      POW: [363, 372],
      MULT: [372],
      DIV: [372],
      IDIV: [372],
      MOD: [372],
      PLUS: [372],
      MINUS: [372],
      AMPERSAND: [372],
      XOR: [372],
      OR: [372],
      AND: [372],
      IS: [372],
      ISNOT: [372],
      GEQ: [372],
      LEQ: [372],
      GT: [372],
      LT: [372],
      NEQ: [372],
      EQ: [372],
      NEWLINE: [372],
      COMMENT: [372],
      REMCOMMENT: [372],
      COLON: [372],
      ALIAS: [372],
      ATTRIBUTE: [372],
      AS: [372],
      BEGIN: [372],
      BOOLEAN: [372],
      BYVAL: [372],
      BYREF: [372],
      BYTE: [372],
      CALL: [372],
      CASE: [372],
      CONST: [372],
      DECLARE: [372],
      DEFBOOL: [372],
      DEFBYTE: [372],
      DEFDATE: [372],
      DEFDBL: [372],
      DEFDEC: [372],
      DEFCUR: [372],
      DEFINT: [372],
      DEFLNG: [372],
      DEFOBJ: [372],
      DEFSNG: [372],
      DEFSTR: [372],
      DEFVAR: [372],
      DIM: [372],
      DO: [372],
      DOUBLE: [372],
      EACH: [372],
      ELSE: [372],
      ELSEIF: [372],
      END_ENUM: [372],
      END_FUNCTION: [372],
      END_IF: [372],
      END_PROPERTY: [372],
      END_SELECT: [372],
      END_SUB: [372],
      END_TYPE: [372],
      END_WITH: [372],
      END: [372],
      ENUM: [372],
      EQV: [372],
      ERASE: [372],
      EVENT: [372],
      EXIT_DO: [372],
      EXIT_FOR: [372],
      EXIT_FUNCTION: [372],
      EXIT_PROPERTY: [372],
      EXIT_SUB: [372],
      FALSE: [372],
      FRIEND: [372],
      FOR: [372],
      FUNCTION: [372],
      GET: [372],
      GLOBAL: [372],
      GOSUB: [372],
      GOTO: [372],
      IF: [372],
      IMPLEMENTS: [372],
      IN: [372],
      INTEGER: [372],
      LONG: [372],
      LOOP: [372],
      LEN: [372],
      LET: [372],
      LIB: [372],
      LIKE: [372],
      LSET: [372],
      MACRO_CONST: [372],
      MACRO_IF: [372],
      MACRO_ELSEIF: [372],
      MACRO_ELSE: [372],
      MACRO_END_IF: [372],
      NEXT: [372],
      NEW: [372],
      NOT: [372],
      NOTHING: [372],
      NULL: [372],
      ON_ERROR: [372],
      ON_LOCAL_ERROR: [372],
      ON: [372],
      OPTIONAL: [372],
      OPTION_BASE: [372],
      OPTION_EXPLICIT: [372],
      OPTION_COMPARE: [372],
      OPTION_PRIVATE_MODULE: [372],
      PARAMARRAY: [372],
      PRESERVE: [372],
      PRIVATE: [372],
      PROPERTY_GET: [372],
      PROPERTY_LET: [372],
      PROPERTY_SET: [372],
      PTRSAFE: [372],
      PUBLIC: [372],
      RAISEEVENT: [372],
      REDIM: [372],
      RESET: [372],
      RESUME: [372],
      RETURN: [372],
      SELECT: [372],
      SET: [372],
      SINGLE: [372],
      STATIC: [372],
      STEP: [372],
      STOP: [372],
      STRING: [372],
      SUB: [372],
      THEN: [372],
      TO: [372],
      TRUE: [372],
      TYPEOF: [372],
      UNTIL: [372],
      VARIANT: [372],
      WEND: [372],
      WHILE: [372],
      WITH: [372],
      WITHEVENTS: [372],
      IMP: [372],
      IDENTIFIER: [372],
      SPACE_DOT: [372],
      ',': [372],
      RPAREN: [372],
      '!': [372],
      LPAREN: [372],
      $EOF: [372],
    },
    valueStmt_p_6: {
      DOUBLELITERAL: [364],
      INTEGERLITERAL: [364],
      STRINGLITERAL: [364],
      NOTHING: [364],
      NULL: [364],
      TRUE: [364],
      FALSE: [364],
      SPACE_DOT: [364],
      ALIAS: [364],
      AND: [364],
      ATTRIBUTE: [364],
      AS: [364],
      BEGIN: [364],
      BOOLEAN: [364],
      BYVAL: [364],
      BYREF: [364],
      BYTE: [364],
      CALL: [364],
      CASE: [364],
      CONST: [364],
      DECLARE: [364],
      DEFBOOL: [364],
      DEFBYTE: [364],
      DEFDATE: [364],
      DEFDBL: [364],
      DEFDEC: [364],
      DEFCUR: [364],
      DEFINT: [364],
      DEFLNG: [364],
      DEFOBJ: [364],
      DEFSNG: [364],
      DEFSTR: [364],
      DEFVAR: [364],
      DIM: [364],
      DO: [364],
      DOUBLE: [364],
      EACH: [364],
      ELSE: [364],
      ELSEIF: [364],
      END_ENUM: [364],
      END_FUNCTION: [364],
      END_IF: [364],
      END_PROPERTY: [364],
      END_SELECT: [364],
      END_SUB: [364],
      END_TYPE: [364],
      END_WITH: [364],
      END: [364],
      ENUM: [364],
      EQV: [364],
      ERASE: [364],
      EVENT: [364],
      EXIT_DO: [364],
      EXIT_FOR: [364],
      EXIT_FUNCTION: [364],
      EXIT_PROPERTY: [364],
      EXIT_SUB: [364],
      FRIEND: [364],
      FOR: [364],
      FUNCTION: [364],
      GET: [364],
      GLOBAL: [364],
      GOSUB: [364],
      GOTO: [364],
      IF: [364],
      IMPLEMENTS: [364],
      IN: [364],
      ISNOT: [364],
      IS: [364],
      INTEGER: [364],
      LONG: [364],
      LOOP: [364],
      LEN: [364],
      LET: [364],
      LIB: [364],
      LIKE: [364],
      LSET: [364],
      MACRO_CONST: [364],
      MACRO_IF: [364],
      MACRO_ELSEIF: [364],
      MACRO_ELSE: [364],
      MACRO_END_IF: [364],
      MOD: [364],
      NEXT: [364],
      NEW: [364],
      NOT: [364],
      ON_ERROR: [364],
      ON_LOCAL_ERROR: [364],
      ON: [364],
      OPTIONAL: [364],
      OPTION_BASE: [364],
      OPTION_EXPLICIT: [364],
      OPTION_COMPARE: [364],
      OPTION_PRIVATE_MODULE: [364],
      OR: [364],
      PARAMARRAY: [364],
      PRESERVE: [364],
      PRIVATE: [364],
      PROPERTY_GET: [364],
      PROPERTY_LET: [364],
      PROPERTY_SET: [364],
      PTRSAFE: [364],
      PUBLIC: [364],
      RAISEEVENT: [364],
      REDIM: [364],
      RESET: [364],
      RESUME: [364],
      RETURN: [364],
      SELECT: [364],
      SET: [364],
      SINGLE: [364],
      STATIC: [364],
      STEP: [364],
      STOP: [364],
      STRING: [364],
      SUB: [364],
      THEN: [364],
      TO: [364],
      TYPEOF: [364],
      UNTIL: [364],
      VARIANT: [364],
      WEND: [364],
      WHILE: [364],
      WITH: [364],
      WITHEVENTS: [364],
      XOR: [364],
      IMP: [364],
      IDENTIFIER: [364],
      LPAREN: [364],
      MINUS: [364],
      PLUS: [364],
    },
    valueStmt_p_7: {
      DOUBLELITERAL: [365],
      INTEGERLITERAL: [365],
      STRINGLITERAL: [365],
      NOTHING: [365],
      NULL: [365],
      TRUE: [365],
      FALSE: [365],
      SPACE_DOT: [365],
      ALIAS: [365],
      AND: [365],
      ATTRIBUTE: [365],
      AS: [365],
      BEGIN: [365],
      BOOLEAN: [365],
      BYVAL: [365],
      BYREF: [365],
      BYTE: [365],
      CALL: [365],
      CASE: [365],
      CONST: [365],
      DECLARE: [365],
      DEFBOOL: [365],
      DEFBYTE: [365],
      DEFDATE: [365],
      DEFDBL: [365],
      DEFDEC: [365],
      DEFCUR: [365],
      DEFINT: [365],
      DEFLNG: [365],
      DEFOBJ: [365],
      DEFSNG: [365],
      DEFSTR: [365],
      DEFVAR: [365],
      DIM: [365],
      DO: [365],
      DOUBLE: [365],
      EACH: [365],
      ELSE: [365],
      ELSEIF: [365],
      END_ENUM: [365],
      END_FUNCTION: [365],
      END_IF: [365],
      END_PROPERTY: [365],
      END_SELECT: [365],
      END_SUB: [365],
      END_TYPE: [365],
      END_WITH: [365],
      END: [365],
      ENUM: [365],
      EQV: [365],
      ERASE: [365],
      EVENT: [365],
      EXIT_DO: [365],
      EXIT_FOR: [365],
      EXIT_FUNCTION: [365],
      EXIT_PROPERTY: [365],
      EXIT_SUB: [365],
      FRIEND: [365],
      FOR: [365],
      FUNCTION: [365],
      GET: [365],
      GLOBAL: [365],
      GOSUB: [365],
      GOTO: [365],
      IF: [365],
      IMPLEMENTS: [365],
      IN: [365],
      ISNOT: [365],
      IS: [365],
      INTEGER: [365],
      LONG: [365],
      LOOP: [365],
      LEN: [365],
      LET: [365],
      LIB: [365],
      LIKE: [365],
      LSET: [365],
      MACRO_CONST: [365],
      MACRO_IF: [365],
      MACRO_ELSEIF: [365],
      MACRO_ELSE: [365],
      MACRO_END_IF: [365],
      MOD: [365],
      NEXT: [365],
      NEW: [365],
      NOT: [365],
      ON_ERROR: [365],
      ON_LOCAL_ERROR: [365],
      ON: [365],
      OPTIONAL: [365],
      OPTION_BASE: [365],
      OPTION_EXPLICIT: [365],
      OPTION_COMPARE: [365],
      OPTION_PRIVATE_MODULE: [365],
      OR: [365],
      PARAMARRAY: [365],
      PRESERVE: [365],
      PRIVATE: [365],
      PROPERTY_GET: [365],
      PROPERTY_LET: [365],
      PROPERTY_SET: [365],
      PTRSAFE: [365],
      PUBLIC: [365],
      RAISEEVENT: [365],
      REDIM: [365],
      RESET: [365],
      RESUME: [365],
      RETURN: [365],
      SELECT: [365],
      SET: [365],
      SINGLE: [365],
      STATIC: [365],
      STEP: [365],
      STOP: [365],
      STRING: [365],
      SUB: [365],
      THEN: [365],
      TO: [365],
      TYPEOF: [365],
      UNTIL: [365],
      VARIANT: [365],
      WEND: [365],
      WHILE: [365],
      WITH: [365],
      WITHEVENTS: [365],
      XOR: [365],
      IMP: [365],
      IDENTIFIER: [365],
      LPAREN: [365],
      MINUS: [366],
      PLUS: [367],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }

        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (
        ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX ||
        ruleIndexes.length === 0
      ) {
        // skip this symbol first
        return returnNext();
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 5,
    15: 6,
    16: 6,
    17: 6,
    18: 6,
    19: 7,
    20: 7,
    21: 8,
    22: 8,
    23: 8,
    24: 8,
    25: 8,
    26: 9,
    27: 9,
    28: 9,
    29: 9,
    30: 10,
    31: 11,
    32: 12,
    33: 13,
    34: 14,
    35: 15,
    36: 15,
    37: 16,
    38: 16,
    39: 16,
    40: 16,
    41: 16,
    42: 16,
    43: 16,
    44: 16,
    45: 16,
    46: 16,
    47: 16,
    48: 16,
    49: 16,
    50: 16,
    51: 16,
    52: 16,
    53: 17,
    54: 17,
    55: 18,
    56: 19,
    57: 20,
    58: 21,
    59: 22,
    60: 23,
    61: 24,
    62: 25,
    63: 25,
    64: 26,
    65: 26,
    66: 26,
    67: 26,
    68: 26,
    69: 26,
    70: 26,
    71: 27,
    72: 27,
    73: 28,
    74: 29,
    75: 30,
    76: 31,
    77: 32,
    78: 32,
    79: 32,
    80: 32,
    81: 32,
    82: 33,
    83: 34,
    84: 35,
    85: 35,
    86: 36,
    87: 36,
    88: 37,
    89: 38,
    90: 38,
    91: 38,
    92: 38,
    93: 38,
    94: 38,
    95: 39,
    96: 39,
    97: 39,
    98: 39,
    99: 39,
    100: 39,
    101: 39,
    102: 40,
    103: 41,
    104: 41,
    105: 42,
    106: 42,
    107: 42,
    108: 42,
    109: 42,
    110: 42,
    111: 42,
    112: 43,
    113: 44,
    114: 44,
    115: 45,
    116: 46,
    117: 47,
    118: 47,
    119: 48,
    120: 49,
    121: 49,
    122: 49,
    123: 49,
    124: 49,
    125: 49,
    126: 49,
    127: 50,
    128: 50,
    129: 50,
    130: 50,
    131: 50,
    132: 51,
    133: 51,
    134: 52,
    135: 52,
    136: 53,
    137: 54,
    138: 54,
    139: 55,
    140: 55,
    141: 56,
    142: 57,
    143: 57,
    144: 57,
    145: 58,
    146: 58,
    147: 58,
    148: 58,
    149: 59,
    150: 82,
    151: 82,
    152: 82,
    153: 83,
    154: 83,
    155: 83,
    156: 83,
    157: 83,
    158: 83,
    159: 83,
    160: 83,
    161: 83,
    162: 84,
    163: 84,
    164: 84,
    165: 85,
    166: 85,
    167: 85,
    168: 86,
    169: 87,
    170: 88,
    171: 89,
    172: 89,
    173: 89,
    174: 89,
    175: 89,
    176: 89,
    177: 89,
    178: 90,
    179: 90,
    180: 90,
    181: 90,
    182: 90,
    183: 90,
    184: 91,
    185: 91,
    186: 91,
    187: 91,
    188: 91,
    189: 91,
    190: 92,
    191: 93,
    192: 94,
    193: 94,
    194: 94,
    195: 94,
    196: 94,
    197: 95,
    198: 95,
    199: 95,
    200: 95,
    201: 95,
    202: 95,
    203: 96,
    204: 96,
    205: 96,
    206: 96,
    207: 96,
    208: 96,
    209: 96,
    210: 96,
    211: 96,
    212: 97,
    213: 97,
    214: 98,
    215: 99,
    216: 100,
    217: 101,
    218: 102,
    219: 103,
    220: 104,
    221: 105,
    222: 106,
    223: 107,
    224: 108,
    225: 109,
    226: 110,
    227: 111,
    228: 112,
    229: 113,
    230: 114,
    231: 115,
    232: 116,
    233: 117,
    234: 118,
    235: 119,
    236: 120,
    237: 121,
    238: 122,
    239: 123,
    240: 124,
    241: 125,
    242: 126,
    243: 127,
    244: 128,
    245: 129,
    246: 130,
    247: 131,
    248: 132,
    249: 133,
    250: 134,
    251: 135,
    252: 136,
    253: 137,
    254: 138,
    255: 139,
    256: 140,
    257: 141,
    258: 142,
    259: 143,
    260: 144,
    261: 145,
    262: 146,
    263: 147,
    264: 148,
    265: 149,
    266: 150,
    267: 151,
    268: 152,
    269: 153,
    270: 154,
    271: 155,
    272: 156,
    273: 157,
    274: 158,
    275: 159,
    276: 160,
    277: 161,
    278: 162,
    279: 163,
    280: 164,
    281: 165,
    282: 166,
    283: 167,
    284: 168,
    285: 169,
    286: 170,
    287: 171,
    288: 172,
    289: 173,
    290: 174,
    291: 175,
    292: 176,
    293: 177,
    294: 178,
    295: 179,
    296: 180,
    297: 181,
    298: 182,
    299: 183,
    300: 184,
    301: 185,
    302: 186,
    303: 187,
    304: 188,
    305: 189,
    306: 190,
    307: 191,
    308: 192,
    309: 193,
    310: 194,
    311: 195,
    312: 196,
    313: 197,
    314: 198,
    315: 199,
    316: 200,
    317: 201,
    318: 202,
    319: 203,
    320: 204,
    321: 205,
    322: 206,
    323: 207,
    324: 208,
    325: 209,
    326: 210,
    327: 211,
    328: 212,
    329: 213,
    330: 214,
    331: 215,
    332: 216,
    333: 217,
    334: 218,
    335: 219,
    336: 220,
    337: 221,
    338: 222,
    339: 81,
    340: 81,
    341: 60,
    342: 60,
    343: 61,
    344: 62,
    345: 63,
    346: 64,
    347: 65,
    348: 66,
    349: 67,
    350: 68,
    351: 68,
    352: 69,
    353: 70,
    354: 71,
    355: 71,
    356: 72,
    357: 73,
    358: 74,
    359: 74,
    360: 75,
    361: 76,
    362: 77,
    363: 78,
    364: 78,
    365: 79,
    366: 79,
    367: 80,
  };
  return parser;
})();

export default vbaParser;
