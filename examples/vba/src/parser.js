/*
Generated By kison v0.5.35

Generate time: Thu Dec 02 2021 08:15:11 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token =
      recommendedAction.action === 'add'
        ? lexer.peekTokens()[0]
        : lexer.getCurrentToken();
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      [
        'ALIAS',
        /ALIAS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AND',
        /AND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ATTRIBUTE',
        /ATTRIBUTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AS',
        /AS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BEGIN',
        /BEGIN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BOOLEAN',
        /BOOLEAN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYVAL',
        /BYVAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYREF',
        /BYREF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYTE',
        /BYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CALL',
        /CALL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CASE',
        /CASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CONST',
        /CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DECLARE',
        /DECLARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBOOL',
        /DEFBOOL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBYTE',
        /DEFBYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDATE',
        /DEFDATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDBL',
        /DEFDBL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDEC',
        /DEFDEC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFCUR',
        /DEFCUR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFINT',
        /DEFINT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFLNG',
        /DEFLNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFOBJ',
        /DEFOBJ\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSNG',
        /DEFSNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSTR',
        /DEFSTR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFVAR',
        /DEFVAR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DIM',
        /DIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DO',
        /DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DOUBLE',
        /DOUBLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EACH',
        /EACH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSE',
        /ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSEIF',
        /ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_ENUM',
        /END ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_FUNCTION',
        /END FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_IF',
        /END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_PROPERTY',
        /END PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SELECT',
        /END SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SUB',
        /END SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_TYPE',
        /END TYPE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_WITH',
        /END WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END',
        /END\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ENUM',
        /ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EQV',
        /EQV\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ERASE',
        /ERASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EVENT',
        /EVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_DO',
        /EXIT DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FOR',
        /EXIT FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FUNCTION',
        /EXIT FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_PROPERTY',
        /EXIT PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_SUB',
        /EXIT SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FALSE',
        /FALSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FRIEND',
        /FRIEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FOR',
        /FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FUNCTION',
        /FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GET',
        /GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GLOBAL',
        /GLOBAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOSUB',
        /GOSUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOTO',
        /GOTO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IF',
        /IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMPLEMENTS',
        /IMPLEMENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IN',
        /IN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ISNOT',
        /ISNOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IS',
        /IS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'INTEGER',
        /INTEGER\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LONG',
        /LONG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LOOP',
        /LOOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LEN',
        /LEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LET',
        /LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIB',
        /LIB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIKE',
        /LIKE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LSET',
        /LSET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_CONST',
        /#CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_IF',
        /#IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSEIF',
        /#ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSE',
        /#ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_END_IF',
        /#END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MOD',
        /MOD\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEXT',
        /NEXT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEW',
        /NEW\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOT',
        /NOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOTHING',
        /NOTHING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NULL',
        /NULL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_ERROR',
        /ON ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_LOCAL_ERROR',
        /ON LOCAL ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON',
        /ON\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTIONAL',
        /OPTIONAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_BASE',
        /OPTION BASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_EXPLICIT',
        /OPTION EXPLICIT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_COMPARE',
        /OPTION COMPARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_PRIVATE_MODULE',
        /OPTION PRIVATE MODULE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OR',
        /OR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PARAMARRAY',
        /PARAMARRAY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRESERVE',
        /PRESERVE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRIVATE',
        /PRIVATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_GET',
        /PROPERTY GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_LET',
        /PROPERTY LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_SET',
        /PROPERTY SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PTRSAFE',
        /PTRSAFE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PUBLIC',
        /PUBLIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RAISEEVENT',
        /RAISEEVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'REDIM',
        /REDIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESET',
        /RESET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESUME',
        /RESUME\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RETURN',
        /RETURN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SELECT',
        /SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SET',
        /SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SINGLE',
        /SINGLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STATIC',
        /STATIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STEP',
        /STEP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STOP',
        /STOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STRING',
        /STRING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SUB',
        /SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'THEN',
        /THEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TO',
        /TO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TRUE',
        /TRUE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TYPEOF',
        /TYPEOF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'UNTIL',
        /UNTIL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'VARIANT',
        /VARIANT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WEND',
        /WEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WHILE',
        /WHILE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITH',
        /WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITHEVENTS',
        /WITHEVENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'XOR',
        /XOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMP',
        /IMP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ['DOUBLELITERAL', /[0-9]*\.[0-9]+(E[0-9]+)?/g],
      ['SPACE_DOT', /\s+\./g],
      ['ASSIGN', /:=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['IDIV', /\\/g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS_EQ', /\-=/g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS_EQ', /\+=/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"(""|[^"\r\n])*"/g],
      ['INTEGERLITERAL', /[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ['.', /\./g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1*']],
      [
        'moduleDeclarations_group_def_5',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_5*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_7',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_7*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'RPAREN',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_9', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_9*', 'endOfStatement']],
      ['blockStmt', ['lineLabel']],
      ['blockStmt', ['goToStmt']],
      ['blockStmt', ['onErrorStmt']],
      ['blockStmt', ['withStmt']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['onErrorStmt_group_def_11', ['ambiguousIdentifier']],
      ['onErrorStmt_group_10', ['onErrorStmt_group_def_11']],
      ['onErrorStmt_group_def_12', ['MINUS', 'INTEGERLITERAL']],
      ['onErrorStmt_group_10', ['onErrorStmt_group_def_12']],
      ['onErrorStmt', ['ON_ERROR', 'GOTO', 'onErrorStmt_group_10']],
      ['lineLabel', ['ambiguousIdentifier', 'COLON']],
      ['goToStmt', ['GOTO', 'ambiguousIdentifier']],
      ['eraseStmt_group_def_14', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_14*']],
      ['redimStmt_group_def_16', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_16*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_def_18', ['EQ']],
      ['letStmt_group_17', ['letStmt_group_def_18']],
      ['letStmt_group_def_19', ['PLUS_EQ']],
      ['letStmt_group_17', ['letStmt_group_def_19']],
      ['letStmt_group_def_20', ['MINUS_EQ']],
      ['letStmt_group_17', ['letStmt_group_def_20']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_17', 'valueStmt'],
      ],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_22',
        ['implicitCallStmt_InStmt?', '.'],
      ],
      [
        'eCS_MemberProcedureCall_group_21',
        ['eCS_MemberProcedureCall_group_def_22'],
      ],
      ['eCS_MemberProcedureCall_group_def_23', ['SPACE_DOT']],
      [
        'eCS_MemberProcedureCall_group_21',
        ['eCS_MemberProcedureCall_group_def_23'],
      ],
      [
        'eCS_MemberProcedureCall_group_def_25',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_27', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'eCS_MemberProcedureCall_group_21',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_25?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_25?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall',
        [
          'implicitCallStmt_InStmt',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'ambiguousIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_27?',
        ],
      ],
      ['argsCall_group_def_33', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_33*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_35', ['DIM']],
      ['variableStmt_group_34', ['variableStmt_group_def_35']],
      ['variableStmt_group_def_36', ['STATIC']],
      ['variableStmt_group_34', ['variableStmt_group_def_36']],
      ['variableStmt_group_def_37', ['visibility']],
      ['variableStmt_group_34', ['variableStmt_group_def_37']],
      [
        'variableStmt',
        ['variableStmt_group_34', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['withStmt_group_def_39', ['implicitCallStmt_InStmt']],
      ['withStmt_group_38', ['withStmt_group_def_39']],
      ['withStmt_group_def_40', ['NEW', 'type_']],
      ['withStmt_group_38', ['withStmt_group_def_40']],
      [
        'withStmt',
        ['WITH', 'withStmt_group_38', 'endOfStatement', 'block?', 'END_WITH'],
      ],
      ['variableListStmt_group_def_42', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_42*'],
      ],
      ['variableSubStmt_group_def_44', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_44?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_14*']],
      ['subscript__group_def_47', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_47?', 'valueStmt']],
      ['subscripts_group_def_49', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_49*']],
      ['subscript_', ['subscript__group_def_47?', 'valueStmt']],
      ['argList_group_def_53', [',', 'arg']],
      ['argList_group_def_54', ['arg', 'argList_group_def_53*']],
      ['argList', ['LPAREN', 'argList_group_def_54?', 'RPAREN']],
      ['valueStmt_p_end', ['literal']],
      ['valueStmt_p_end', ['implicitCallStmt_InStmt']],
      ['valueStmt_p_end', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['valueStmt_p_end', ['NEW', 'valueStmt']],
      [
        'valueStmt_p_end',
        ['LPAREN', 'valueStmt', 'RPAREN'],
        undefined,
        'AtomExpression',
      ],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_57', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_56', ['iCS_S_MembersCall_group_def_57']],
      ['iCS_S_MembersCall_group_def_58', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_56', ['iCS_S_MembersCall_group_def_58']],
      [
        'iCS_S_MembersCall_group_def_59',
        ['iCS_S_MembersCall_group_56', 'iCS_S_MemberCall'],
      ],
      ['iCS_S_MembersCall_group_55', ['iCS_S_MembersCall_group_def_59']],
      ['iCS_S_MembersCall_group_def_60', ['iCS_S_SpaceMemberCall']],
      ['iCS_S_MembersCall_group_55', ['iCS_S_MembersCall_group_def_60']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_55',
          'iCS_S_MemberCall*',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      ['iCS_S_MemberCall_group_62', ['iCS_S_MembersCall_group_def_57']],
      ['iCS_S_MemberCall_group_62', ['iCS_S_MembersCall_group_def_58']],
      ['iCS_S_MemberCall', ['.', 'iCS_S_MemberCall_group_62']],
      ['iCS_S_SpaceMemberCall_group_63', ['iCS_S_MembersCall_group_def_57']],
      ['iCS_S_SpaceMemberCall_group_63', ['iCS_S_MembersCall_group_def_58']],
      [
        'iCS_S_SpaceMemberCall',
        ['SPACE_DOT', 'iCS_S_SpaceMemberCall_group_63'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_27*',
        ],
      ],
      ['dictionaryCallStmt', ['!', 'ambiguousIdentifier', 'typeHint?']],
      ['literal', ['DOUBLELITERAL']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_67', ['BYVAL']],
      ['arg_group_66', ['arg_group_def_67']],
      ['arg_group_def_68', ['BYREF']],
      ['arg_group_66', ['arg_group_def_68']],
      ['arg_group_def_70', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_66?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_70?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type__group_def_72', ['baseType']],
      ['type__group_71', ['type__group_def_72']],
      ['type__group_def_73', ['complexType']],
      ['type__group_71', ['type__group_def_73']],
      ['type_', ['type__group_71', 'arg_group_def_70?']],
      ['complexType_group_def_77', ['.']],
      ['complexType_group_76', ['complexType_group_def_77']],
      ['complexType_group_def_78', ['!']],
      ['complexType_group_76', ['complexType_group_def_78']],
      [
        'complexType_group_def_79',
        ['complexType_group_76', 'ambiguousIdentifier'],
      ],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_79*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType_group_def_81', ['MULT', 'valueStmt']],
      ['baseType', ['STRING', 'baseType_group_def_81?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['fieldLength', ['MULT', 'ambiguousIdentifier']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['ISNOT']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IMP']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
      ['valueStmt', ['valueStmt_p_2'], undefined, undefined, undefined, true],
      ['valueStmt', ['NOT', 'valueStmt'], undefined, 'PrefixExpression'],
      [
        '(valueStmt_p_2)1_',
        ['IS', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_2',
        ['valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_2)1_',
        ['ISNOT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['NEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['EQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['XOR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_3',
        ['valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_3)1_',
        ['OR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['AND', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['PLUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_4',
        ['valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_4)1_',
        ['MINUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['AMPERSAND', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MULT', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_5',
        ['valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_5)1_',
        ['DIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['IDIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MOD', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_6)1_',
        ['POW', 'valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_6',
        ['valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['valueStmt_p_end'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['MINUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      [
        'valueStmt_p_7',
        ['PLUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      ['(valueStmt_p_2)1_', []],
      ['(valueStmt_p_3)1_', []],
      ['(valueStmt_p_4)1_', []],
      ['(valueStmt_p_5)1_', []],
      ['(valueStmt_p_6)1_', []],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {
    valueStmt_p_end: 'valueStmt',
    valueStmt_p_1: 'valueStmt',
    valueStmt_p_2: 'valueStmt',
    valueStmt_p_3: 'valueStmt',
    valueStmt_p_4: 'valueStmt',
    valueStmt_p_5: 'valueStmt',
    valueStmt_p_6: 'valueStmt',
    valueStmt_p_7: 'valueStmt',
  };
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 19, 35, 49, 50, 51, 52, 56, 58, 67, 68, 69, 70, 71, 72, 77,
    78, 79, 80, 81, 82, 89, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 104, 106,
    109, 111, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 137,
    138, 156, 157, 158, 159, 160, 164, 165, 166, 167, 169, 170, 171, 172, 173,
    182, 312, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328,
    329, 331, 332, 333, 334, 339, 340, 341, 342, 343,
  ]);
  const parserPredictTable = {
    $START: {
      COMMENT: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      NEWLINE: [0],
      REMCOMMENT: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      COMMENT: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      NEWLINE: [1],
      REMCOMMENT: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
      ALIAS: [9],
      AND: [9],
      ATTRIBUTE: [9],
      AS: [9],
      BEGIN: [9],
      BOOLEAN: [9],
      BYVAL: [9],
      BYREF: [9],
      BYTE: [9],
      CALL: [9],
      CASE: [9],
      CONST: [9],
      DECLARE: [9],
      DEFBOOL: [9],
      DEFBYTE: [9],
      DEFDATE: [9],
      DEFDBL: [9],
      DEFDEC: [9],
      DEFCUR: [9],
      DEFINT: [9],
      DEFLNG: [9],
      DEFOBJ: [9],
      DEFSNG: [9],
      DEFSTR: [9],
      DEFVAR: [9],
      DIM: [9],
      DO: [9],
      DOUBLE: [9],
      EACH: [9],
      ELSE: [9],
      ELSEIF: [9],
      END_ENUM: [9],
      END_FUNCTION: [9],
      END_IF: [9],
      END_PROPERTY: [9],
      END_SELECT: [9],
      END_SUB: [9],
      END_TYPE: [9],
      END_WITH: [9],
      END: [9],
      ENUM: [9],
      EQV: [9],
      ERASE: [9],
      EVENT: [9],
      EXIT_DO: [9],
      EXIT_FOR: [9],
      EXIT_FUNCTION: [9],
      EXIT_PROPERTY: [9],
      EXIT_SUB: [9],
      FALSE: [9],
      FRIEND: [9],
      FOR: [9],
      FUNCTION: [9],
      GET: [9],
      GLOBAL: [9],
      GOSUB: [9],
      GOTO: [9],
      IF: [9],
      IMPLEMENTS: [9],
      IN: [9],
      ISNOT: [9],
      IS: [9],
      INTEGER: [9],
      LONG: [9],
      LOOP: [9],
      LEN: [9],
      LET: [9],
      LIB: [9],
      LIKE: [9],
      LSET: [9],
      MACRO_CONST: [9],
      MACRO_IF: [9],
      MACRO_ELSEIF: [9],
      MACRO_ELSE: [9],
      MACRO_END_IF: [9],
      MOD: [9],
      NEXT: [9],
      NEW: [9],
      NOT: [9],
      NOTHING: [9],
      NULL: [9],
      ON_ERROR: [9],
      ON_LOCAL_ERROR: [9],
      ON: [9],
      OPTIONAL: [9],
      OPTION_BASE: [9],
      OPTION_EXPLICIT: [9],
      OPTION_COMPARE: [9],
      OPTION_PRIVATE_MODULE: [9],
      OR: [9],
      PARAMARRAY: [9],
      PRESERVE: [9],
      PRIVATE: [9],
      PROPERTY_GET: [9],
      PROPERTY_LET: [9],
      PROPERTY_SET: [9],
      PTRSAFE: [9],
      PUBLIC: [9],
      RAISEEVENT: [9],
      REDIM: [9],
      RESET: [9],
      RESUME: [9],
      RETURN: [9],
      SELECT: [9],
      SET: [9],
      SINGLE: [9],
      STATIC: [9],
      STEP: [9],
      STOP: [9],
      STRING: [9],
      SUB: [9],
      THEN: [9],
      TO: [9],
      TRUE: [9],
      TYPEOF: [9],
      UNTIL: [9],
      VARIANT: [9],
      WEND: [9],
      WHILE: [9],
      WITH: [9],
      WITHEVENTS: [9],
      XOR: [9],
      IMP: [9],
      IDENTIFIER: [9],
      SPACE_DOT: [9],
    },
    moduleDeclarations_group_def_5: {
      NEWLINE: [10],
      COMMENT: [10],
      REMCOMMENT: [10],
    },
    moduleDeclarations: {
      COMMENT: [11],
      DIM: [11],
      STATIC: [11],
      PRIVATE: [11],
      PUBLIC: [11],
      FRIEND: [11],
      GLOBAL: [11],
      OPTION_BASE: [11],
      OPTION_COMPARE: [11],
      OPTION_EXPLICIT: [11],
      OPTION_PRIVATE_MODULE: [11],
    },
    moduleDeclarationsElement: {
      COMMENT: [12],
      DIM: [13],
      STATIC: [13],
      PRIVATE: [13],
      PUBLIC: [13],
      FRIEND: [13],
      GLOBAL: [13],
      OPTION_BASE: [14],
      OPTION_COMPARE: [14],
      OPTION_EXPLICIT: [14],
      OPTION_PRIVATE_MODULE: [14],
    },
    moduleOption: {
      OPTION_BASE: [15],
      OPTION_COMPARE: [16],
      OPTION_EXPLICIT: [17],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleBody_group_def_7: {
      NEWLINE: [19],
      COMMENT: [19],
      REMCOMMENT: [19],
    },
    moduleBody: {
      PRIVATE: [20],
      PUBLIC: [20],
      FRIEND: [20],
      GLOBAL: [20],
      STATIC: [20],
      FUNCTION: [20],
      PROPERTY_GET: [20],
      PROPERTY_SET: [20],
      PROPERTY_LET: [20],
      SUB: [20],
    },
    moduleBodyElement: {
      PRIVATE: [21, 22, 23, 24, 25],
      PUBLIC: [21, 22, 23, 24, 25],
      FRIEND: [21, 22, 23, 24, 25],
      GLOBAL: [21, 22, 23, 24, 25],
      STATIC: [21, 22, 23, 24, 25],
      FUNCTION: [21],
      PROPERTY_GET: [22],
      PROPERTY_SET: [23],
      PROPERTY_LET: [24],
      SUB: [25],
    },
    visibility: {
      PRIVATE: [26],
      PUBLIC: [27],
      FRIEND: [28],
      GLOBAL: [29],
    },
    subStmt: {
      PRIVATE: [30],
      PUBLIC: [30],
      FRIEND: [30],
      GLOBAL: [30],
      STATIC: [30],
      SUB: [30],
    },
    propertyGetStmt: {
      PRIVATE: [31],
      PUBLIC: [31],
      FRIEND: [31],
      GLOBAL: [31],
      STATIC: [31],
      PROPERTY_GET: [31],
    },
    propertySetStmt: {
      PRIVATE: [32],
      PUBLIC: [32],
      FRIEND: [32],
      GLOBAL: [32],
      STATIC: [32],
      PROPERTY_SET: [32],
    },
    propertyLetStmt: {
      PRIVATE: [33],
      PUBLIC: [33],
      FRIEND: [33],
      GLOBAL: [33],
      STATIC: [33],
      PROPERTY_LET: [33],
    },
    functionStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      FUNCTION: [34],
    },
    block_group_def_9: {
      NEWLINE: [35],
      COMMENT: [35],
      REMCOMMENT: [35],
      COLON: [35],
      ALIAS: [35],
      AND: [35],
      ATTRIBUTE: [35],
      AS: [35],
      BEGIN: [35],
      BOOLEAN: [35],
      BYVAL: [35],
      BYREF: [35],
      BYTE: [35],
      CALL: [35],
      CASE: [35],
      CONST: [35],
      DECLARE: [35],
      DEFBOOL: [35],
      DEFBYTE: [35],
      DEFDATE: [35],
      DEFDBL: [35],
      DEFDEC: [35],
      DEFCUR: [35],
      DEFINT: [35],
      DEFLNG: [35],
      DEFOBJ: [35],
      DEFSNG: [35],
      DEFSTR: [35],
      DEFVAR: [35],
      DIM: [35],
      DO: [35],
      DOUBLE: [35],
      EACH: [35],
      ELSE: [35],
      ELSEIF: [35],
      END_ENUM: [35],
      END_FUNCTION: [35],
      END_IF: [35],
      END_PROPERTY: [35],
      END_SELECT: [35],
      END_SUB: [35],
      END_TYPE: [35],
      END_WITH: [35],
      END: [35],
      ENUM: [35],
      EQV: [35],
      ERASE: [35],
      EVENT: [35],
      EXIT_DO: [35],
      EXIT_FOR: [35],
      EXIT_FUNCTION: [35],
      EXIT_PROPERTY: [35],
      EXIT_SUB: [35],
      FALSE: [35],
      FRIEND: [35],
      FOR: [35],
      FUNCTION: [35],
      GET: [35],
      GLOBAL: [35],
      GOSUB: [35],
      GOTO: [35],
      IF: [35],
      IMPLEMENTS: [35],
      IN: [35],
      ISNOT: [35],
      IS: [35],
      INTEGER: [35],
      LONG: [35],
      LOOP: [35],
      LEN: [35],
      LET: [35],
      LIB: [35],
      LIKE: [35],
      LSET: [35],
      MACRO_CONST: [35],
      MACRO_IF: [35],
      MACRO_ELSEIF: [35],
      MACRO_ELSE: [35],
      MACRO_END_IF: [35],
      MOD: [35],
      NEXT: [35],
      NEW: [35],
      NOT: [35],
      NOTHING: [35],
      NULL: [35],
      ON_ERROR: [35],
      ON_LOCAL_ERROR: [35],
      ON: [35],
      OPTIONAL: [35],
      OPTION_BASE: [35],
      OPTION_EXPLICIT: [35],
      OPTION_COMPARE: [35],
      OPTION_PRIVATE_MODULE: [35],
      OR: [35],
      PARAMARRAY: [35],
      PRESERVE: [35],
      PRIVATE: [35],
      PROPERTY_GET: [35],
      PROPERTY_LET: [35],
      PROPERTY_SET: [35],
      PTRSAFE: [35],
      PUBLIC: [35],
      RAISEEVENT: [35],
      REDIM: [35],
      RESET: [35],
      RESUME: [35],
      RETURN: [35],
      SELECT: [35],
      SET: [35],
      SINGLE: [35],
      STATIC: [35],
      STEP: [35],
      STOP: [35],
      STRING: [35],
      SUB: [35],
      THEN: [35],
      TO: [35],
      TRUE: [35],
      TYPEOF: [35],
      UNTIL: [35],
      VARIANT: [35],
      WEND: [35],
      WHILE: [35],
      WITH: [35],
      WITHEVENTS: [35],
      XOR: [35],
      IMP: [35],
      IDENTIFIER: [35],
      SPACE_DOT: [35],
    },
    block: {
      ALIAS: [36],
      AND: [36],
      ATTRIBUTE: [36],
      AS: [36],
      BEGIN: [36],
      BOOLEAN: [36],
      BYVAL: [36],
      BYREF: [36],
      BYTE: [36],
      CALL: [36],
      CASE: [36],
      CONST: [36],
      DECLARE: [36],
      DEFBOOL: [36],
      DEFBYTE: [36],
      DEFDATE: [36],
      DEFDBL: [36],
      DEFDEC: [36],
      DEFCUR: [36],
      DEFINT: [36],
      DEFLNG: [36],
      DEFOBJ: [36],
      DEFSNG: [36],
      DEFSTR: [36],
      DEFVAR: [36],
      DIM: [36],
      DO: [36],
      DOUBLE: [36],
      EACH: [36],
      ELSE: [36],
      ELSEIF: [36],
      END_ENUM: [36],
      END_FUNCTION: [36],
      END_IF: [36],
      END_PROPERTY: [36],
      END_SELECT: [36],
      END_SUB: [36],
      END_TYPE: [36],
      END_WITH: [36],
      END: [36],
      ENUM: [36],
      EQV: [36],
      ERASE: [36],
      EVENT: [36],
      EXIT_DO: [36],
      EXIT_FOR: [36],
      EXIT_FUNCTION: [36],
      EXIT_PROPERTY: [36],
      EXIT_SUB: [36],
      FALSE: [36],
      FRIEND: [36],
      FOR: [36],
      FUNCTION: [36],
      GET: [36],
      GLOBAL: [36],
      GOSUB: [36],
      GOTO: [36],
      IF: [36],
      IMPLEMENTS: [36],
      IN: [36],
      ISNOT: [36],
      IS: [36],
      INTEGER: [36],
      LONG: [36],
      LOOP: [36],
      LEN: [36],
      LET: [36],
      LIB: [36],
      LIKE: [36],
      LSET: [36],
      MACRO_CONST: [36],
      MACRO_IF: [36],
      MACRO_ELSEIF: [36],
      MACRO_ELSE: [36],
      MACRO_END_IF: [36],
      MOD: [36],
      NEXT: [36],
      NEW: [36],
      NOT: [36],
      NOTHING: [36],
      NULL: [36],
      ON_ERROR: [36],
      ON_LOCAL_ERROR: [36],
      ON: [36],
      OPTIONAL: [36],
      OPTION_BASE: [36],
      OPTION_EXPLICIT: [36],
      OPTION_COMPARE: [36],
      OPTION_PRIVATE_MODULE: [36],
      OR: [36],
      PARAMARRAY: [36],
      PRESERVE: [36],
      PRIVATE: [36],
      PROPERTY_GET: [36],
      PROPERTY_LET: [36],
      PROPERTY_SET: [36],
      PTRSAFE: [36],
      PUBLIC: [36],
      RAISEEVENT: [36],
      REDIM: [36],
      RESET: [36],
      RESUME: [36],
      RETURN: [36],
      SELECT: [36],
      SET: [36],
      SINGLE: [36],
      STATIC: [36],
      STEP: [36],
      STOP: [36],
      STRING: [36],
      SUB: [36],
      THEN: [36],
      TO: [36],
      TRUE: [36],
      TYPEOF: [36],
      UNTIL: [36],
      VARIANT: [36],
      WEND: [36],
      WHILE: [36],
      WITH: [36],
      WITHEVENTS: [36],
      XOR: [36],
      IMP: [36],
      IDENTIFIER: [36],
      SPACE_DOT: [36],
    },
    blockStmt: {
      ALIAS: [37, 46, 48],
      AND: [37, 46, 48],
      ATTRIBUTE: [37, 46, 48],
      AS: [37, 46, 48],
      BEGIN: [37, 46, 48],
      BOOLEAN: [37, 46, 48],
      BYVAL: [37, 46, 48],
      BYREF: [37, 46, 48],
      BYTE: [37, 46, 48],
      CALL: [37, 43, 46, 48],
      CASE: [37, 46, 48],
      CONST: [37, 46, 48],
      DECLARE: [37, 46, 48],
      DEFBOOL: [37, 46, 48],
      DEFBYTE: [37, 46, 48],
      DEFDATE: [37, 46, 48],
      DEFDBL: [37, 46, 48],
      DEFDEC: [37, 46, 48],
      DEFCUR: [37, 46, 48],
      DEFINT: [37, 46, 48],
      DEFLNG: [37, 46, 48],
      DEFOBJ: [37, 46, 48],
      DEFSNG: [37, 46, 48],
      DEFSTR: [37, 46, 48],
      DEFVAR: [37, 46, 48],
      DIM: [37, 46, 47, 48],
      DO: [37, 46, 48],
      DOUBLE: [37, 46, 48],
      EACH: [37, 46, 48],
      ELSE: [37, 46, 48],
      ELSEIF: [37, 46, 48],
      END_ENUM: [37, 46, 48],
      END_FUNCTION: [37, 46, 48],
      END_IF: [37, 46, 48],
      END_PROPERTY: [37, 46, 48],
      END_SELECT: [37, 46, 48],
      END_SUB: [37, 46, 48],
      END_TYPE: [37, 46, 48],
      END_WITH: [37, 46, 48],
      END: [37, 42, 46, 48],
      ENUM: [37, 46, 48],
      EQV: [37, 46, 48],
      ERASE: [37, 41, 46, 48],
      EVENT: [37, 46, 48],
      EXIT_DO: [37, 42, 46, 48],
      EXIT_FOR: [37, 42, 46, 48],
      EXIT_FUNCTION: [37, 42, 46, 48],
      EXIT_PROPERTY: [37, 42, 46, 48],
      EXIT_SUB: [37, 42, 46, 48],
      FALSE: [37, 46, 48],
      FRIEND: [37, 46, 47, 48],
      FOR: [37, 46, 48],
      FUNCTION: [37, 46, 48],
      GET: [37, 46, 48],
      GLOBAL: [37, 46, 47, 48],
      GOSUB: [37, 46, 48],
      GOTO: [37, 38, 46, 48],
      IF: [37, 46, 48],
      IMPLEMENTS: [37, 46, 48],
      IN: [37, 46, 48],
      ISNOT: [37, 46, 48],
      IS: [37, 46, 48],
      INTEGER: [37, 46, 48],
      LONG: [37, 46, 48],
      LOOP: [37, 46, 48],
      LEN: [37, 46, 48],
      LET: [37, 46, 48],
      LIB: [37, 46, 48],
      LIKE: [37, 46, 48],
      LSET: [37, 46, 48],
      MACRO_CONST: [37, 46, 48],
      MACRO_IF: [37, 46, 48],
      MACRO_ELSEIF: [37, 46, 48],
      MACRO_ELSE: [37, 46, 48],
      MACRO_END_IF: [37, 46, 48],
      MOD: [37, 46, 48],
      NEXT: [37, 46, 48],
      NEW: [37, 46, 48],
      NOT: [37, 46, 48],
      NOTHING: [37, 46, 48],
      NULL: [37, 46, 48],
      ON_ERROR: [37, 39, 46, 48],
      ON_LOCAL_ERROR: [37, 46, 48],
      ON: [37, 46, 48],
      OPTIONAL: [37, 46, 48],
      OPTION_BASE: [37, 46, 48],
      OPTION_EXPLICIT: [37, 46, 48],
      OPTION_COMPARE: [37, 46, 48],
      OPTION_PRIVATE_MODULE: [37, 46, 48],
      OR: [37, 46, 48],
      PARAMARRAY: [37, 46, 48],
      PRESERVE: [37, 46, 48],
      PRIVATE: [37, 46, 47, 48],
      PROPERTY_GET: [37, 46, 48],
      PROPERTY_LET: [37, 46, 48],
      PROPERTY_SET: [37, 46, 48],
      PTRSAFE: [37, 46, 48],
      PUBLIC: [37, 46, 47, 48],
      RAISEEVENT: [37, 46, 48],
      REDIM: [37, 45, 46, 48],
      RESET: [37, 46, 48],
      RESUME: [37, 46, 48],
      RETURN: [37, 46, 48],
      SELECT: [37, 46, 48],
      SET: [37, 44, 46, 48],
      SINGLE: [37, 46, 48],
      STATIC: [37, 46, 47, 48],
      STEP: [37, 46, 48],
      STOP: [37, 46, 48],
      STRING: [37, 46, 48],
      SUB: [37, 46, 48],
      THEN: [37, 46, 48],
      TO: [37, 46, 48],
      TRUE: [37, 46, 48],
      TYPEOF: [37, 46, 48],
      UNTIL: [37, 46, 48],
      VARIANT: [37, 46, 48],
      WEND: [37, 46, 48],
      WHILE: [37, 46, 48],
      WITH: [37, 40, 46, 48],
      WITHEVENTS: [37, 46, 48],
      XOR: [37, 46, 48],
      IMP: [37, 46, 48],
      IDENTIFIER: [37, 46, 48],
      SPACE_DOT: [46, 48],
    },
    onErrorStmt_group_def_11: {
      ALIAS: [49],
      AND: [49],
      ATTRIBUTE: [49],
      AS: [49],
      BEGIN: [49],
      BOOLEAN: [49],
      BYVAL: [49],
      BYREF: [49],
      BYTE: [49],
      CALL: [49],
      CASE: [49],
      CONST: [49],
      DECLARE: [49],
      DEFBOOL: [49],
      DEFBYTE: [49],
      DEFDATE: [49],
      DEFDBL: [49],
      DEFDEC: [49],
      DEFCUR: [49],
      DEFINT: [49],
      DEFLNG: [49],
      DEFOBJ: [49],
      DEFSNG: [49],
      DEFSTR: [49],
      DEFVAR: [49],
      DIM: [49],
      DO: [49],
      DOUBLE: [49],
      EACH: [49],
      ELSE: [49],
      ELSEIF: [49],
      END_ENUM: [49],
      END_FUNCTION: [49],
      END_IF: [49],
      END_PROPERTY: [49],
      END_SELECT: [49],
      END_SUB: [49],
      END_TYPE: [49],
      END_WITH: [49],
      END: [49],
      ENUM: [49],
      EQV: [49],
      ERASE: [49],
      EVENT: [49],
      EXIT_DO: [49],
      EXIT_FOR: [49],
      EXIT_FUNCTION: [49],
      EXIT_PROPERTY: [49],
      EXIT_SUB: [49],
      FALSE: [49],
      FRIEND: [49],
      FOR: [49],
      FUNCTION: [49],
      GET: [49],
      GLOBAL: [49],
      GOSUB: [49],
      GOTO: [49],
      IF: [49],
      IMPLEMENTS: [49],
      IN: [49],
      ISNOT: [49],
      IS: [49],
      INTEGER: [49],
      LONG: [49],
      LOOP: [49],
      LEN: [49],
      LET: [49],
      LIB: [49],
      LIKE: [49],
      LSET: [49],
      MACRO_CONST: [49],
      MACRO_IF: [49],
      MACRO_ELSEIF: [49],
      MACRO_ELSE: [49],
      MACRO_END_IF: [49],
      MOD: [49],
      NEXT: [49],
      NEW: [49],
      NOT: [49],
      NOTHING: [49],
      NULL: [49],
      ON_ERROR: [49],
      ON_LOCAL_ERROR: [49],
      ON: [49],
      OPTIONAL: [49],
      OPTION_BASE: [49],
      OPTION_EXPLICIT: [49],
      OPTION_COMPARE: [49],
      OPTION_PRIVATE_MODULE: [49],
      OR: [49],
      PARAMARRAY: [49],
      PRESERVE: [49],
      PRIVATE: [49],
      PROPERTY_GET: [49],
      PROPERTY_LET: [49],
      PROPERTY_SET: [49],
      PTRSAFE: [49],
      PUBLIC: [49],
      RAISEEVENT: [49],
      REDIM: [49],
      RESET: [49],
      RESUME: [49],
      RETURN: [49],
      SELECT: [49],
      SET: [49],
      SINGLE: [49],
      STATIC: [49],
      STEP: [49],
      STOP: [49],
      STRING: [49],
      SUB: [49],
      THEN: [49],
      TO: [49],
      TRUE: [49],
      TYPEOF: [49],
      UNTIL: [49],
      VARIANT: [49],
      WEND: [49],
      WHILE: [49],
      WITH: [49],
      WITHEVENTS: [49],
      XOR: [49],
      IMP: [49],
      IDENTIFIER: [49],
    },
    onErrorStmt_group_10: {
      ALIAS: [50],
      AND: [50],
      ATTRIBUTE: [50],
      AS: [50],
      BEGIN: [50],
      BOOLEAN: [50],
      BYVAL: [50],
      BYREF: [50],
      BYTE: [50],
      CALL: [50],
      CASE: [50],
      CONST: [50],
      DECLARE: [50],
      DEFBOOL: [50],
      DEFBYTE: [50],
      DEFDATE: [50],
      DEFDBL: [50],
      DEFDEC: [50],
      DEFCUR: [50],
      DEFINT: [50],
      DEFLNG: [50],
      DEFOBJ: [50],
      DEFSNG: [50],
      DEFSTR: [50],
      DEFVAR: [50],
      DIM: [50],
      DO: [50],
      DOUBLE: [50],
      EACH: [50],
      ELSE: [50],
      ELSEIF: [50],
      END_ENUM: [50],
      END_FUNCTION: [50],
      END_IF: [50],
      END_PROPERTY: [50],
      END_SELECT: [50],
      END_SUB: [50],
      END_TYPE: [50],
      END_WITH: [50],
      END: [50],
      ENUM: [50],
      EQV: [50],
      ERASE: [50],
      EVENT: [50],
      EXIT_DO: [50],
      EXIT_FOR: [50],
      EXIT_FUNCTION: [50],
      EXIT_PROPERTY: [50],
      EXIT_SUB: [50],
      FALSE: [50],
      FRIEND: [50],
      FOR: [50],
      FUNCTION: [50],
      GET: [50],
      GLOBAL: [50],
      GOSUB: [50],
      GOTO: [50],
      IF: [50],
      IMPLEMENTS: [50],
      IN: [50],
      ISNOT: [50],
      IS: [50],
      INTEGER: [50],
      LONG: [50],
      LOOP: [50],
      LEN: [50],
      LET: [50],
      LIB: [50],
      LIKE: [50],
      LSET: [50],
      MACRO_CONST: [50],
      MACRO_IF: [50],
      MACRO_ELSEIF: [50],
      MACRO_ELSE: [50],
      MACRO_END_IF: [50],
      MOD: [50],
      NEXT: [50],
      NEW: [50],
      NOT: [50],
      NOTHING: [50],
      NULL: [50],
      ON_ERROR: [50],
      ON_LOCAL_ERROR: [50],
      ON: [50],
      OPTIONAL: [50],
      OPTION_BASE: [50],
      OPTION_EXPLICIT: [50],
      OPTION_COMPARE: [50],
      OPTION_PRIVATE_MODULE: [50],
      OR: [50],
      PARAMARRAY: [50],
      PRESERVE: [50],
      PRIVATE: [50],
      PROPERTY_GET: [50],
      PROPERTY_LET: [50],
      PROPERTY_SET: [50],
      PTRSAFE: [50],
      PUBLIC: [50],
      RAISEEVENT: [50],
      REDIM: [50],
      RESET: [50],
      RESUME: [50],
      RETURN: [50],
      SELECT: [50],
      SET: [50],
      SINGLE: [50],
      STATIC: [50],
      STEP: [50],
      STOP: [50],
      STRING: [50],
      SUB: [50],
      THEN: [50],
      TO: [50],
      TRUE: [50],
      TYPEOF: [50],
      UNTIL: [50],
      VARIANT: [50],
      WEND: [50],
      WHILE: [50],
      WITH: [50],
      WITHEVENTS: [50],
      XOR: [50],
      IMP: [50],
      IDENTIFIER: [50],
      MINUS: [52],
    },
    onErrorStmt_group_def_12: {
      MINUS: [51],
    },
    onErrorStmt: {
      ON_ERROR: [53],
    },
    lineLabel: {
      ALIAS: [54],
      AND: [54],
      ATTRIBUTE: [54],
      AS: [54],
      BEGIN: [54],
      BOOLEAN: [54],
      BYVAL: [54],
      BYREF: [54],
      BYTE: [54],
      CALL: [54],
      CASE: [54],
      CONST: [54],
      DECLARE: [54],
      DEFBOOL: [54],
      DEFBYTE: [54],
      DEFDATE: [54],
      DEFDBL: [54],
      DEFDEC: [54],
      DEFCUR: [54],
      DEFINT: [54],
      DEFLNG: [54],
      DEFOBJ: [54],
      DEFSNG: [54],
      DEFSTR: [54],
      DEFVAR: [54],
      DIM: [54],
      DO: [54],
      DOUBLE: [54],
      EACH: [54],
      ELSE: [54],
      ELSEIF: [54],
      END_ENUM: [54],
      END_FUNCTION: [54],
      END_IF: [54],
      END_PROPERTY: [54],
      END_SELECT: [54],
      END_SUB: [54],
      END_TYPE: [54],
      END_WITH: [54],
      END: [54],
      ENUM: [54],
      EQV: [54],
      ERASE: [54],
      EVENT: [54],
      EXIT_DO: [54],
      EXIT_FOR: [54],
      EXIT_FUNCTION: [54],
      EXIT_PROPERTY: [54],
      EXIT_SUB: [54],
      FALSE: [54],
      FRIEND: [54],
      FOR: [54],
      FUNCTION: [54],
      GET: [54],
      GLOBAL: [54],
      GOSUB: [54],
      GOTO: [54],
      IF: [54],
      IMPLEMENTS: [54],
      IN: [54],
      ISNOT: [54],
      IS: [54],
      INTEGER: [54],
      LONG: [54],
      LOOP: [54],
      LEN: [54],
      LET: [54],
      LIB: [54],
      LIKE: [54],
      LSET: [54],
      MACRO_CONST: [54],
      MACRO_IF: [54],
      MACRO_ELSEIF: [54],
      MACRO_ELSE: [54],
      MACRO_END_IF: [54],
      MOD: [54],
      NEXT: [54],
      NEW: [54],
      NOT: [54],
      NOTHING: [54],
      NULL: [54],
      ON_ERROR: [54],
      ON_LOCAL_ERROR: [54],
      ON: [54],
      OPTIONAL: [54],
      OPTION_BASE: [54],
      OPTION_EXPLICIT: [54],
      OPTION_COMPARE: [54],
      OPTION_PRIVATE_MODULE: [54],
      OR: [54],
      PARAMARRAY: [54],
      PRESERVE: [54],
      PRIVATE: [54],
      PROPERTY_GET: [54],
      PROPERTY_LET: [54],
      PROPERTY_SET: [54],
      PTRSAFE: [54],
      PUBLIC: [54],
      RAISEEVENT: [54],
      REDIM: [54],
      RESET: [54],
      RESUME: [54],
      RETURN: [54],
      SELECT: [54],
      SET: [54],
      SINGLE: [54],
      STATIC: [54],
      STEP: [54],
      STOP: [54],
      STRING: [54],
      SUB: [54],
      THEN: [54],
      TO: [54],
      TRUE: [54],
      TYPEOF: [54],
      UNTIL: [54],
      VARIANT: [54],
      WEND: [54],
      WHILE: [54],
      WITH: [54],
      WITHEVENTS: [54],
      XOR: [54],
      IMP: [54],
      IDENTIFIER: [54],
    },
    goToStmt: {
      GOTO: [55],
    },
    eraseStmt_group_def_14: {
      ',': [56],
    },
    eraseStmt: {
      ERASE: [57],
    },
    redimStmt_group_def_16: {
      ',': [58],
    },
    redimStmt: {
      REDIM: [59],
    },
    redimSubStmt: {
      SPACE_DOT: [60],
      ALIAS: [60],
      AND: [60],
      ATTRIBUTE: [60],
      AS: [60],
      BEGIN: [60],
      BOOLEAN: [60],
      BYVAL: [60],
      BYREF: [60],
      BYTE: [60],
      CALL: [60],
      CASE: [60],
      CONST: [60],
      DECLARE: [60],
      DEFBOOL: [60],
      DEFBYTE: [60],
      DEFDATE: [60],
      DEFDBL: [60],
      DEFDEC: [60],
      DEFCUR: [60],
      DEFINT: [60],
      DEFLNG: [60],
      DEFOBJ: [60],
      DEFSNG: [60],
      DEFSTR: [60],
      DEFVAR: [60],
      DIM: [60],
      DO: [60],
      DOUBLE: [60],
      EACH: [60],
      ELSE: [60],
      ELSEIF: [60],
      END_ENUM: [60],
      END_FUNCTION: [60],
      END_IF: [60],
      END_PROPERTY: [60],
      END_SELECT: [60],
      END_SUB: [60],
      END_TYPE: [60],
      END_WITH: [60],
      END: [60],
      ENUM: [60],
      EQV: [60],
      ERASE: [60],
      EVENT: [60],
      EXIT_DO: [60],
      EXIT_FOR: [60],
      EXIT_FUNCTION: [60],
      EXIT_PROPERTY: [60],
      EXIT_SUB: [60],
      FALSE: [60],
      FRIEND: [60],
      FOR: [60],
      FUNCTION: [60],
      GET: [60],
      GLOBAL: [60],
      GOSUB: [60],
      GOTO: [60],
      IF: [60],
      IMPLEMENTS: [60],
      IN: [60],
      ISNOT: [60],
      IS: [60],
      INTEGER: [60],
      LONG: [60],
      LOOP: [60],
      LEN: [60],
      LET: [60],
      LIB: [60],
      LIKE: [60],
      LSET: [60],
      MACRO_CONST: [60],
      MACRO_IF: [60],
      MACRO_ELSEIF: [60],
      MACRO_ELSE: [60],
      MACRO_END_IF: [60],
      MOD: [60],
      NEXT: [60],
      NEW: [60],
      NOT: [60],
      NOTHING: [60],
      NULL: [60],
      ON_ERROR: [60],
      ON_LOCAL_ERROR: [60],
      ON: [60],
      OPTIONAL: [60],
      OPTION_BASE: [60],
      OPTION_EXPLICIT: [60],
      OPTION_COMPARE: [60],
      OPTION_PRIVATE_MODULE: [60],
      OR: [60],
      PARAMARRAY: [60],
      PRESERVE: [60],
      PRIVATE: [60],
      PROPERTY_GET: [60],
      PROPERTY_LET: [60],
      PROPERTY_SET: [60],
      PTRSAFE: [60],
      PUBLIC: [60],
      RAISEEVENT: [60],
      REDIM: [60],
      RESET: [60],
      RESUME: [60],
      RETURN: [60],
      SELECT: [60],
      SET: [60],
      SINGLE: [60],
      STATIC: [60],
      STEP: [60],
      STOP: [60],
      STRING: [60],
      SUB: [60],
      THEN: [60],
      TO: [60],
      TRUE: [60],
      TYPEOF: [60],
      UNTIL: [60],
      VARIANT: [60],
      WEND: [60],
      WHILE: [60],
      WITH: [60],
      WITHEVENTS: [60],
      XOR: [60],
      IMP: [60],
      IDENTIFIER: [60],
    },
    exitStmt: {
      EXIT_DO: [61],
      EXIT_FOR: [62],
      EXIT_FUNCTION: [63],
      EXIT_PROPERTY: [64],
      EXIT_SUB: [65],
      END: [66],
    },
    letStmt_group_def_18: {
      EQ: [67],
    },
    letStmt_group_17: {
      EQ: [68],
      PLUS_EQ: [70],
      MINUS_EQ: [72],
    },
    letStmt_group_def_19: {
      PLUS_EQ: [69],
    },
    letStmt_group_def_20: {
      MINUS_EQ: [71],
    },
    letStmt: {
      LET: [73],
      SPACE_DOT: [73],
      ALIAS: [73],
      AND: [73],
      ATTRIBUTE: [73],
      AS: [73],
      BEGIN: [73],
      BOOLEAN: [73],
      BYVAL: [73],
      BYREF: [73],
      BYTE: [73],
      CALL: [73],
      CASE: [73],
      CONST: [73],
      DECLARE: [73],
      DEFBOOL: [73],
      DEFBYTE: [73],
      DEFDATE: [73],
      DEFDBL: [73],
      DEFDEC: [73],
      DEFCUR: [73],
      DEFINT: [73],
      DEFLNG: [73],
      DEFOBJ: [73],
      DEFSNG: [73],
      DEFSTR: [73],
      DEFVAR: [73],
      DIM: [73],
      DO: [73],
      DOUBLE: [73],
      EACH: [73],
      ELSE: [73],
      ELSEIF: [73],
      END_ENUM: [73],
      END_FUNCTION: [73],
      END_IF: [73],
      END_PROPERTY: [73],
      END_SELECT: [73],
      END_SUB: [73],
      END_TYPE: [73],
      END_WITH: [73],
      END: [73],
      ENUM: [73],
      EQV: [73],
      ERASE: [73],
      EVENT: [73],
      EXIT_DO: [73],
      EXIT_FOR: [73],
      EXIT_FUNCTION: [73],
      EXIT_PROPERTY: [73],
      EXIT_SUB: [73],
      FALSE: [73],
      FRIEND: [73],
      FOR: [73],
      FUNCTION: [73],
      GET: [73],
      GLOBAL: [73],
      GOSUB: [73],
      GOTO: [73],
      IF: [73],
      IMPLEMENTS: [73],
      IN: [73],
      ISNOT: [73],
      IS: [73],
      INTEGER: [73],
      LONG: [73],
      LOOP: [73],
      LEN: [73],
      LIB: [73],
      LIKE: [73],
      LSET: [73],
      MACRO_CONST: [73],
      MACRO_IF: [73],
      MACRO_ELSEIF: [73],
      MACRO_ELSE: [73],
      MACRO_END_IF: [73],
      MOD: [73],
      NEXT: [73],
      NEW: [73],
      NOT: [73],
      NOTHING: [73],
      NULL: [73],
      ON_ERROR: [73],
      ON_LOCAL_ERROR: [73],
      ON: [73],
      OPTIONAL: [73],
      OPTION_BASE: [73],
      OPTION_EXPLICIT: [73],
      OPTION_COMPARE: [73],
      OPTION_PRIVATE_MODULE: [73],
      OR: [73],
      PARAMARRAY: [73],
      PRESERVE: [73],
      PRIVATE: [73],
      PROPERTY_GET: [73],
      PROPERTY_LET: [73],
      PROPERTY_SET: [73],
      PTRSAFE: [73],
      PUBLIC: [73],
      RAISEEVENT: [73],
      REDIM: [73],
      RESET: [73],
      RESUME: [73],
      RETURN: [73],
      SELECT: [73],
      SET: [73],
      SINGLE: [73],
      STATIC: [73],
      STEP: [73],
      STOP: [73],
      STRING: [73],
      SUB: [73],
      THEN: [73],
      TO: [73],
      TRUE: [73],
      TYPEOF: [73],
      UNTIL: [73],
      VARIANT: [73],
      WEND: [73],
      WHILE: [73],
      WITH: [73],
      WITHEVENTS: [73],
      XOR: [73],
      IMP: [73],
      IDENTIFIER: [73],
    },
    setStmt: {
      SET: [74],
    },
    explicitCallStmt: {
      CALL: [75, 76],
    },
    eCS_MemberProcedureCall_group_def_22: {
      SPACE_DOT: [77],
      ALIAS: [77],
      AND: [77],
      ATTRIBUTE: [77],
      AS: [77],
      BEGIN: [77],
      BOOLEAN: [77],
      BYVAL: [77],
      BYREF: [77],
      BYTE: [77],
      CALL: [77],
      CASE: [77],
      CONST: [77],
      DECLARE: [77],
      DEFBOOL: [77],
      DEFBYTE: [77],
      DEFDATE: [77],
      DEFDBL: [77],
      DEFDEC: [77],
      DEFCUR: [77],
      DEFINT: [77],
      DEFLNG: [77],
      DEFOBJ: [77],
      DEFSNG: [77],
      DEFSTR: [77],
      DEFVAR: [77],
      DIM: [77],
      DO: [77],
      DOUBLE: [77],
      EACH: [77],
      ELSE: [77],
      ELSEIF: [77],
      END_ENUM: [77],
      END_FUNCTION: [77],
      END_IF: [77],
      END_PROPERTY: [77],
      END_SELECT: [77],
      END_SUB: [77],
      END_TYPE: [77],
      END_WITH: [77],
      END: [77],
      ENUM: [77],
      EQV: [77],
      ERASE: [77],
      EVENT: [77],
      EXIT_DO: [77],
      EXIT_FOR: [77],
      EXIT_FUNCTION: [77],
      EXIT_PROPERTY: [77],
      EXIT_SUB: [77],
      FALSE: [77],
      FRIEND: [77],
      FOR: [77],
      FUNCTION: [77],
      GET: [77],
      GLOBAL: [77],
      GOSUB: [77],
      GOTO: [77],
      IF: [77],
      IMPLEMENTS: [77],
      IN: [77],
      ISNOT: [77],
      IS: [77],
      INTEGER: [77],
      LONG: [77],
      LOOP: [77],
      LEN: [77],
      LET: [77],
      LIB: [77],
      LIKE: [77],
      LSET: [77],
      MACRO_CONST: [77],
      MACRO_IF: [77],
      MACRO_ELSEIF: [77],
      MACRO_ELSE: [77],
      MACRO_END_IF: [77],
      MOD: [77],
      NEXT: [77],
      NEW: [77],
      NOT: [77],
      NOTHING: [77],
      NULL: [77],
      ON_ERROR: [77],
      ON_LOCAL_ERROR: [77],
      ON: [77],
      OPTIONAL: [77],
      OPTION_BASE: [77],
      OPTION_EXPLICIT: [77],
      OPTION_COMPARE: [77],
      OPTION_PRIVATE_MODULE: [77],
      OR: [77],
      PARAMARRAY: [77],
      PRESERVE: [77],
      PRIVATE: [77],
      PROPERTY_GET: [77],
      PROPERTY_LET: [77],
      PROPERTY_SET: [77],
      PTRSAFE: [77],
      PUBLIC: [77],
      RAISEEVENT: [77],
      REDIM: [77],
      RESET: [77],
      RESUME: [77],
      RETURN: [77],
      SELECT: [77],
      SET: [77],
      SINGLE: [77],
      STATIC: [77],
      STEP: [77],
      STOP: [77],
      STRING: [77],
      SUB: [77],
      THEN: [77],
      TO: [77],
      TRUE: [77],
      TYPEOF: [77],
      UNTIL: [77],
      VARIANT: [77],
      WEND: [77],
      WHILE: [77],
      WITH: [77],
      WITHEVENTS: [77],
      XOR: [77],
      IMP: [77],
      IDENTIFIER: [77],
      '.': [77],
    },
    eCS_MemberProcedureCall_group_21: {
      SPACE_DOT: [78, 80],
      ALIAS: [78],
      AND: [78],
      ATTRIBUTE: [78],
      AS: [78],
      BEGIN: [78],
      BOOLEAN: [78],
      BYVAL: [78],
      BYREF: [78],
      BYTE: [78],
      CALL: [78],
      CASE: [78],
      CONST: [78],
      DECLARE: [78],
      DEFBOOL: [78],
      DEFBYTE: [78],
      DEFDATE: [78],
      DEFDBL: [78],
      DEFDEC: [78],
      DEFCUR: [78],
      DEFINT: [78],
      DEFLNG: [78],
      DEFOBJ: [78],
      DEFSNG: [78],
      DEFSTR: [78],
      DEFVAR: [78],
      DIM: [78],
      DO: [78],
      DOUBLE: [78],
      EACH: [78],
      ELSE: [78],
      ELSEIF: [78],
      END_ENUM: [78],
      END_FUNCTION: [78],
      END_IF: [78],
      END_PROPERTY: [78],
      END_SELECT: [78],
      END_SUB: [78],
      END_TYPE: [78],
      END_WITH: [78],
      END: [78],
      ENUM: [78],
      EQV: [78],
      ERASE: [78],
      EVENT: [78],
      EXIT_DO: [78],
      EXIT_FOR: [78],
      EXIT_FUNCTION: [78],
      EXIT_PROPERTY: [78],
      EXIT_SUB: [78],
      FALSE: [78],
      FRIEND: [78],
      FOR: [78],
      FUNCTION: [78],
      GET: [78],
      GLOBAL: [78],
      GOSUB: [78],
      GOTO: [78],
      IF: [78],
      IMPLEMENTS: [78],
      IN: [78],
      ISNOT: [78],
      IS: [78],
      INTEGER: [78],
      LONG: [78],
      LOOP: [78],
      LEN: [78],
      LET: [78],
      LIB: [78],
      LIKE: [78],
      LSET: [78],
      MACRO_CONST: [78],
      MACRO_IF: [78],
      MACRO_ELSEIF: [78],
      MACRO_ELSE: [78],
      MACRO_END_IF: [78],
      MOD: [78],
      NEXT: [78],
      NEW: [78],
      NOT: [78],
      NOTHING: [78],
      NULL: [78],
      ON_ERROR: [78],
      ON_LOCAL_ERROR: [78],
      ON: [78],
      OPTIONAL: [78],
      OPTION_BASE: [78],
      OPTION_EXPLICIT: [78],
      OPTION_COMPARE: [78],
      OPTION_PRIVATE_MODULE: [78],
      OR: [78],
      PARAMARRAY: [78],
      PRESERVE: [78],
      PRIVATE: [78],
      PROPERTY_GET: [78],
      PROPERTY_LET: [78],
      PROPERTY_SET: [78],
      PTRSAFE: [78],
      PUBLIC: [78],
      RAISEEVENT: [78],
      REDIM: [78],
      RESET: [78],
      RESUME: [78],
      RETURN: [78],
      SELECT: [78],
      SET: [78],
      SINGLE: [78],
      STATIC: [78],
      STEP: [78],
      STOP: [78],
      STRING: [78],
      SUB: [78],
      THEN: [78],
      TO: [78],
      TRUE: [78],
      TYPEOF: [78],
      UNTIL: [78],
      VARIANT: [78],
      WEND: [78],
      WHILE: [78],
      WITH: [78],
      WITHEVENTS: [78],
      XOR: [78],
      IMP: [78],
      IDENTIFIER: [78],
      '.': [78],
    },
    eCS_MemberProcedureCall_group_def_23: {
      SPACE_DOT: [79],
    },
    eCS_MemberProcedureCall_group_def_25: {
      LPAREN: [81],
    },
    eCS_MemberProcedureCall_group_def_27: {
      LPAREN: [82],
    },
    eCS_MemberProcedureCall: {
      CALL: [83],
    },
    eCS_ProcedureCall: {
      CALL: [84],
    },
    implicitCallStmt_InBlock: {
      SPACE_DOT: [85],
      ALIAS: [85, 86],
      AND: [85, 86],
      ATTRIBUTE: [85, 86],
      AS: [85, 86],
      BEGIN: [85, 86],
      BOOLEAN: [85, 86],
      BYVAL: [85, 86],
      BYREF: [85, 86],
      BYTE: [85, 86],
      CALL: [85, 86],
      CASE: [85, 86],
      CONST: [85, 86],
      DECLARE: [85, 86],
      DEFBOOL: [85, 86],
      DEFBYTE: [85, 86],
      DEFDATE: [85, 86],
      DEFDBL: [85, 86],
      DEFDEC: [85, 86],
      DEFCUR: [85, 86],
      DEFINT: [85, 86],
      DEFLNG: [85, 86],
      DEFOBJ: [85, 86],
      DEFSNG: [85, 86],
      DEFSTR: [85, 86],
      DEFVAR: [85, 86],
      DIM: [85, 86],
      DO: [85, 86],
      DOUBLE: [85, 86],
      EACH: [85, 86],
      ELSE: [85, 86],
      ELSEIF: [85, 86],
      END_ENUM: [85, 86],
      END_FUNCTION: [85, 86],
      END_IF: [85, 86],
      END_PROPERTY: [85, 86],
      END_SELECT: [85, 86],
      END_SUB: [85, 86],
      END_TYPE: [85, 86],
      END_WITH: [85, 86],
      END: [85, 86],
      ENUM: [85, 86],
      EQV: [85, 86],
      ERASE: [85, 86],
      EVENT: [85, 86],
      EXIT_DO: [85, 86],
      EXIT_FOR: [85, 86],
      EXIT_FUNCTION: [85, 86],
      EXIT_PROPERTY: [85, 86],
      EXIT_SUB: [85, 86],
      FALSE: [85, 86],
      FRIEND: [85, 86],
      FOR: [85, 86],
      FUNCTION: [85, 86],
      GET: [85, 86],
      GLOBAL: [85, 86],
      GOSUB: [85, 86],
      GOTO: [85, 86],
      IF: [85, 86],
      IMPLEMENTS: [85, 86],
      IN: [85, 86],
      ISNOT: [85, 86],
      IS: [85, 86],
      INTEGER: [85, 86],
      LONG: [85, 86],
      LOOP: [85, 86],
      LEN: [85, 86],
      LET: [85, 86],
      LIB: [85, 86],
      LIKE: [85, 86],
      LSET: [85, 86],
      MACRO_CONST: [85, 86],
      MACRO_IF: [85, 86],
      MACRO_ELSEIF: [85, 86],
      MACRO_ELSE: [85, 86],
      MACRO_END_IF: [85, 86],
      MOD: [85, 86],
      NEXT: [85, 86],
      NEW: [85, 86],
      NOT: [85, 86],
      NOTHING: [85, 86],
      NULL: [85, 86],
      ON_ERROR: [85, 86],
      ON_LOCAL_ERROR: [85, 86],
      ON: [85, 86],
      OPTIONAL: [85, 86],
      OPTION_BASE: [85, 86],
      OPTION_EXPLICIT: [85, 86],
      OPTION_COMPARE: [85, 86],
      OPTION_PRIVATE_MODULE: [85, 86],
      OR: [85, 86],
      PARAMARRAY: [85, 86],
      PRESERVE: [85, 86],
      PRIVATE: [85, 86],
      PROPERTY_GET: [85, 86],
      PROPERTY_LET: [85, 86],
      PROPERTY_SET: [85, 86],
      PTRSAFE: [85, 86],
      PUBLIC: [85, 86],
      RAISEEVENT: [85, 86],
      REDIM: [85, 86],
      RESET: [85, 86],
      RESUME: [85, 86],
      RETURN: [85, 86],
      SELECT: [85, 86],
      SET: [85, 86],
      SINGLE: [85, 86],
      STATIC: [85, 86],
      STEP: [85, 86],
      STOP: [85, 86],
      STRING: [85, 86],
      SUB: [85, 86],
      THEN: [85, 86],
      TO: [85, 86],
      TRUE: [85, 86],
      TYPEOF: [85, 86],
      UNTIL: [85, 86],
      VARIANT: [85, 86],
      WEND: [85, 86],
      WHILE: [85, 86],
      WITH: [85, 86],
      WITHEVENTS: [85, 86],
      XOR: [85, 86],
      IMP: [85, 86],
      IDENTIFIER: [85, 86],
    },
    iCS_B_MemberProcedureCall: {
      SPACE_DOT: [87],
      ALIAS: [87],
      AND: [87],
      ATTRIBUTE: [87],
      AS: [87],
      BEGIN: [87],
      BOOLEAN: [87],
      BYVAL: [87],
      BYREF: [87],
      BYTE: [87],
      CALL: [87],
      CASE: [87],
      CONST: [87],
      DECLARE: [87],
      DEFBOOL: [87],
      DEFBYTE: [87],
      DEFDATE: [87],
      DEFDBL: [87],
      DEFDEC: [87],
      DEFCUR: [87],
      DEFINT: [87],
      DEFLNG: [87],
      DEFOBJ: [87],
      DEFSNG: [87],
      DEFSTR: [87],
      DEFVAR: [87],
      DIM: [87],
      DO: [87],
      DOUBLE: [87],
      EACH: [87],
      ELSE: [87],
      ELSEIF: [87],
      END_ENUM: [87],
      END_FUNCTION: [87],
      END_IF: [87],
      END_PROPERTY: [87],
      END_SELECT: [87],
      END_SUB: [87],
      END_TYPE: [87],
      END_WITH: [87],
      END: [87],
      ENUM: [87],
      EQV: [87],
      ERASE: [87],
      EVENT: [87],
      EXIT_DO: [87],
      EXIT_FOR: [87],
      EXIT_FUNCTION: [87],
      EXIT_PROPERTY: [87],
      EXIT_SUB: [87],
      FALSE: [87],
      FRIEND: [87],
      FOR: [87],
      FUNCTION: [87],
      GET: [87],
      GLOBAL: [87],
      GOSUB: [87],
      GOTO: [87],
      IF: [87],
      IMPLEMENTS: [87],
      IN: [87],
      ISNOT: [87],
      IS: [87],
      INTEGER: [87],
      LONG: [87],
      LOOP: [87],
      LEN: [87],
      LET: [87],
      LIB: [87],
      LIKE: [87],
      LSET: [87],
      MACRO_CONST: [87],
      MACRO_IF: [87],
      MACRO_ELSEIF: [87],
      MACRO_ELSE: [87],
      MACRO_END_IF: [87],
      MOD: [87],
      NEXT: [87],
      NEW: [87],
      NOT: [87],
      NOTHING: [87],
      NULL: [87],
      ON_ERROR: [87],
      ON_LOCAL_ERROR: [87],
      ON: [87],
      OPTIONAL: [87],
      OPTION_BASE: [87],
      OPTION_EXPLICIT: [87],
      OPTION_COMPARE: [87],
      OPTION_PRIVATE_MODULE: [87],
      OR: [87],
      PARAMARRAY: [87],
      PRESERVE: [87],
      PRIVATE: [87],
      PROPERTY_GET: [87],
      PROPERTY_LET: [87],
      PROPERTY_SET: [87],
      PTRSAFE: [87],
      PUBLIC: [87],
      RAISEEVENT: [87],
      REDIM: [87],
      RESET: [87],
      RESUME: [87],
      RETURN: [87],
      SELECT: [87],
      SET: [87],
      SINGLE: [87],
      STATIC: [87],
      STEP: [87],
      STOP: [87],
      STRING: [87],
      SUB: [87],
      THEN: [87],
      TO: [87],
      TRUE: [87],
      TYPEOF: [87],
      UNTIL: [87],
      VARIANT: [87],
      WEND: [87],
      WHILE: [87],
      WITH: [87],
      WITHEVENTS: [87],
      XOR: [87],
      IMP: [87],
      IDENTIFIER: [87],
    },
    iCS_B_ProcedureCall: {
      ALIAS: [88],
      AND: [88],
      ATTRIBUTE: [88],
      AS: [88],
      BEGIN: [88],
      BOOLEAN: [88],
      BYVAL: [88],
      BYREF: [88],
      BYTE: [88],
      CALL: [88],
      CASE: [88],
      CONST: [88],
      DECLARE: [88],
      DEFBOOL: [88],
      DEFBYTE: [88],
      DEFDATE: [88],
      DEFDBL: [88],
      DEFDEC: [88],
      DEFCUR: [88],
      DEFINT: [88],
      DEFLNG: [88],
      DEFOBJ: [88],
      DEFSNG: [88],
      DEFSTR: [88],
      DEFVAR: [88],
      DIM: [88],
      DO: [88],
      DOUBLE: [88],
      EACH: [88],
      ELSE: [88],
      ELSEIF: [88],
      END_ENUM: [88],
      END_FUNCTION: [88],
      END_IF: [88],
      END_PROPERTY: [88],
      END_SELECT: [88],
      END_SUB: [88],
      END_TYPE: [88],
      END_WITH: [88],
      END: [88],
      ENUM: [88],
      EQV: [88],
      ERASE: [88],
      EVENT: [88],
      EXIT_DO: [88],
      EXIT_FOR: [88],
      EXIT_FUNCTION: [88],
      EXIT_PROPERTY: [88],
      EXIT_SUB: [88],
      FALSE: [88],
      FRIEND: [88],
      FOR: [88],
      FUNCTION: [88],
      GET: [88],
      GLOBAL: [88],
      GOSUB: [88],
      GOTO: [88],
      IF: [88],
      IMPLEMENTS: [88],
      IN: [88],
      ISNOT: [88],
      IS: [88],
      INTEGER: [88],
      LONG: [88],
      LOOP: [88],
      LEN: [88],
      LET: [88],
      LIB: [88],
      LIKE: [88],
      LSET: [88],
      MACRO_CONST: [88],
      MACRO_IF: [88],
      MACRO_ELSEIF: [88],
      MACRO_ELSE: [88],
      MACRO_END_IF: [88],
      MOD: [88],
      NEXT: [88],
      NEW: [88],
      NOT: [88],
      NOTHING: [88],
      NULL: [88],
      ON_ERROR: [88],
      ON_LOCAL_ERROR: [88],
      ON: [88],
      OPTIONAL: [88],
      OPTION_BASE: [88],
      OPTION_EXPLICIT: [88],
      OPTION_COMPARE: [88],
      OPTION_PRIVATE_MODULE: [88],
      OR: [88],
      PARAMARRAY: [88],
      PRESERVE: [88],
      PRIVATE: [88],
      PROPERTY_GET: [88],
      PROPERTY_LET: [88],
      PROPERTY_SET: [88],
      PTRSAFE: [88],
      PUBLIC: [88],
      RAISEEVENT: [88],
      REDIM: [88],
      RESET: [88],
      RESUME: [88],
      RETURN: [88],
      SELECT: [88],
      SET: [88],
      SINGLE: [88],
      STATIC: [88],
      STEP: [88],
      STOP: [88],
      STRING: [88],
      SUB: [88],
      THEN: [88],
      TO: [88],
      TRUE: [88],
      TYPEOF: [88],
      UNTIL: [88],
      VARIANT: [88],
      WEND: [88],
      WHILE: [88],
      WITH: [88],
      WITHEVENTS: [88],
      XOR: [88],
      IMP: [88],
      IDENTIFIER: [88],
    },
    argsCall_group_def_33: {
      ',': [89],
    },
    argsCall: {
      ',': [90],
      DOUBLELITERAL: [90],
      INTEGERLITERAL: [90],
      STRINGLITERAL: [90],
      NOTHING: [90],
      NULL: [90],
      TRUE: [90],
      FALSE: [90],
      SPACE_DOT: [90],
      ALIAS: [90],
      AND: [90],
      ATTRIBUTE: [90],
      AS: [90],
      BEGIN: [90],
      BOOLEAN: [90],
      BYVAL: [90],
      BYREF: [90],
      BYTE: [90],
      CALL: [90],
      CASE: [90],
      CONST: [90],
      DECLARE: [90],
      DEFBOOL: [90],
      DEFBYTE: [90],
      DEFDATE: [90],
      DEFDBL: [90],
      DEFDEC: [90],
      DEFCUR: [90],
      DEFINT: [90],
      DEFLNG: [90],
      DEFOBJ: [90],
      DEFSNG: [90],
      DEFSTR: [90],
      DEFVAR: [90],
      DIM: [90],
      DO: [90],
      DOUBLE: [90],
      EACH: [90],
      ELSE: [90],
      ELSEIF: [90],
      END_ENUM: [90],
      END_FUNCTION: [90],
      END_IF: [90],
      END_PROPERTY: [90],
      END_SELECT: [90],
      END_SUB: [90],
      END_TYPE: [90],
      END_WITH: [90],
      END: [90],
      ENUM: [90],
      EQV: [90],
      ERASE: [90],
      EVENT: [90],
      EXIT_DO: [90],
      EXIT_FOR: [90],
      EXIT_FUNCTION: [90],
      EXIT_PROPERTY: [90],
      EXIT_SUB: [90],
      FRIEND: [90],
      FOR: [90],
      FUNCTION: [90],
      GET: [90],
      GLOBAL: [90],
      GOSUB: [90],
      GOTO: [90],
      IF: [90],
      IMPLEMENTS: [90],
      IN: [90],
      ISNOT: [90],
      IS: [90],
      INTEGER: [90],
      LONG: [90],
      LOOP: [90],
      LEN: [90],
      LET: [90],
      LIB: [90],
      LIKE: [90],
      LSET: [90],
      MACRO_CONST: [90],
      MACRO_IF: [90],
      MACRO_ELSEIF: [90],
      MACRO_ELSE: [90],
      MACRO_END_IF: [90],
      MOD: [90],
      NEXT: [90],
      NEW: [90],
      NOT: [90],
      ON_ERROR: [90],
      ON_LOCAL_ERROR: [90],
      ON: [90],
      OPTIONAL: [90],
      OPTION_BASE: [90],
      OPTION_EXPLICIT: [90],
      OPTION_COMPARE: [90],
      OPTION_PRIVATE_MODULE: [90],
      OR: [90],
      PARAMARRAY: [90],
      PRESERVE: [90],
      PRIVATE: [90],
      PROPERTY_GET: [90],
      PROPERTY_LET: [90],
      PROPERTY_SET: [90],
      PTRSAFE: [90],
      PUBLIC: [90],
      RAISEEVENT: [90],
      REDIM: [90],
      RESET: [90],
      RESUME: [90],
      RETURN: [90],
      SELECT: [90],
      SET: [90],
      SINGLE: [90],
      STATIC: [90],
      STEP: [90],
      STOP: [90],
      STRING: [90],
      SUB: [90],
      THEN: [90],
      TO: [90],
      TYPEOF: [90],
      UNTIL: [90],
      VARIANT: [90],
      WEND: [90],
      WHILE: [90],
      WITH: [90],
      WITHEVENTS: [90],
      XOR: [90],
      IMP: [90],
      IDENTIFIER: [90],
      LPAREN: [90],
      MINUS: [90],
      PLUS: [90],
    },
    argCall: {
      DOUBLELITERAL: [91],
      INTEGERLITERAL: [91],
      STRINGLITERAL: [91],
      NOTHING: [91],
      NULL: [91],
      TRUE: [91],
      FALSE: [91],
      SPACE_DOT: [91],
      ALIAS: [91],
      AND: [91],
      ATTRIBUTE: [91],
      AS: [91],
      BEGIN: [91],
      BOOLEAN: [91],
      BYVAL: [91],
      BYREF: [91],
      BYTE: [91],
      CALL: [91],
      CASE: [91],
      CONST: [91],
      DECLARE: [91],
      DEFBOOL: [91],
      DEFBYTE: [91],
      DEFDATE: [91],
      DEFDBL: [91],
      DEFDEC: [91],
      DEFCUR: [91],
      DEFINT: [91],
      DEFLNG: [91],
      DEFOBJ: [91],
      DEFSNG: [91],
      DEFSTR: [91],
      DEFVAR: [91],
      DIM: [91],
      DO: [91],
      DOUBLE: [91],
      EACH: [91],
      ELSE: [91],
      ELSEIF: [91],
      END_ENUM: [91],
      END_FUNCTION: [91],
      END_IF: [91],
      END_PROPERTY: [91],
      END_SELECT: [91],
      END_SUB: [91],
      END_TYPE: [91],
      END_WITH: [91],
      END: [91],
      ENUM: [91],
      EQV: [91],
      ERASE: [91],
      EVENT: [91],
      EXIT_DO: [91],
      EXIT_FOR: [91],
      EXIT_FUNCTION: [91],
      EXIT_PROPERTY: [91],
      EXIT_SUB: [91],
      FRIEND: [91],
      FOR: [91],
      FUNCTION: [91],
      GET: [91],
      GLOBAL: [91],
      GOSUB: [91],
      GOTO: [91],
      IF: [91],
      IMPLEMENTS: [91],
      IN: [91],
      ISNOT: [91],
      IS: [91],
      INTEGER: [91],
      LONG: [91],
      LOOP: [91],
      LEN: [91],
      LET: [91],
      LIB: [91],
      LIKE: [91],
      LSET: [91],
      MACRO_CONST: [91],
      MACRO_IF: [91],
      MACRO_ELSEIF: [91],
      MACRO_ELSE: [91],
      MACRO_END_IF: [91],
      MOD: [91],
      NEXT: [91],
      NEW: [91],
      NOT: [91],
      ON_ERROR: [91],
      ON_LOCAL_ERROR: [91],
      ON: [91],
      OPTIONAL: [91],
      OPTION_BASE: [91],
      OPTION_EXPLICIT: [91],
      OPTION_COMPARE: [91],
      OPTION_PRIVATE_MODULE: [91],
      OR: [91],
      PARAMARRAY: [91],
      PRESERVE: [91],
      PRIVATE: [91],
      PROPERTY_GET: [91],
      PROPERTY_LET: [91],
      PROPERTY_SET: [91],
      PTRSAFE: [91],
      PUBLIC: [91],
      RAISEEVENT: [91],
      REDIM: [91],
      RESET: [91],
      RESUME: [91],
      RETURN: [91],
      SELECT: [91],
      SET: [91],
      SINGLE: [91],
      STATIC: [91],
      STEP: [91],
      STOP: [91],
      STRING: [91],
      SUB: [91],
      THEN: [91],
      TO: [91],
      TYPEOF: [91],
      UNTIL: [91],
      VARIANT: [91],
      WEND: [91],
      WHILE: [91],
      WITH: [91],
      WITHEVENTS: [91],
      XOR: [91],
      IMP: [91],
      IDENTIFIER: [91],
      LPAREN: [91],
      MINUS: [91],
      PLUS: [91],
    },
    variableStmt_group_def_35: {
      DIM: [92],
    },
    variableStmt_group_34: {
      DIM: [93],
      STATIC: [95],
      PRIVATE: [97],
      PUBLIC: [97],
      FRIEND: [97],
      GLOBAL: [97],
    },
    variableStmt_group_def_36: {
      STATIC: [94],
    },
    variableStmt_group_def_37: {
      PRIVATE: [96],
      PUBLIC: [96],
      FRIEND: [96],
      GLOBAL: [96],
    },
    variableStmt: {
      DIM: [98],
      STATIC: [98],
      PRIVATE: [98],
      PUBLIC: [98],
      FRIEND: [98],
      GLOBAL: [98],
    },
    withStmt_group_def_39: {
      SPACE_DOT: [99],
      ALIAS: [99],
      AND: [99],
      ATTRIBUTE: [99],
      AS: [99],
      BEGIN: [99],
      BOOLEAN: [99],
      BYVAL: [99],
      BYREF: [99],
      BYTE: [99],
      CALL: [99],
      CASE: [99],
      CONST: [99],
      DECLARE: [99],
      DEFBOOL: [99],
      DEFBYTE: [99],
      DEFDATE: [99],
      DEFDBL: [99],
      DEFDEC: [99],
      DEFCUR: [99],
      DEFINT: [99],
      DEFLNG: [99],
      DEFOBJ: [99],
      DEFSNG: [99],
      DEFSTR: [99],
      DEFVAR: [99],
      DIM: [99],
      DO: [99],
      DOUBLE: [99],
      EACH: [99],
      ELSE: [99],
      ELSEIF: [99],
      END_ENUM: [99],
      END_FUNCTION: [99],
      END_IF: [99],
      END_PROPERTY: [99],
      END_SELECT: [99],
      END_SUB: [99],
      END_TYPE: [99],
      END_WITH: [99],
      END: [99],
      ENUM: [99],
      EQV: [99],
      ERASE: [99],
      EVENT: [99],
      EXIT_DO: [99],
      EXIT_FOR: [99],
      EXIT_FUNCTION: [99],
      EXIT_PROPERTY: [99],
      EXIT_SUB: [99],
      FALSE: [99],
      FRIEND: [99],
      FOR: [99],
      FUNCTION: [99],
      GET: [99],
      GLOBAL: [99],
      GOSUB: [99],
      GOTO: [99],
      IF: [99],
      IMPLEMENTS: [99],
      IN: [99],
      ISNOT: [99],
      IS: [99],
      INTEGER: [99],
      LONG: [99],
      LOOP: [99],
      LEN: [99],
      LET: [99],
      LIB: [99],
      LIKE: [99],
      LSET: [99],
      MACRO_CONST: [99],
      MACRO_IF: [99],
      MACRO_ELSEIF: [99],
      MACRO_ELSE: [99],
      MACRO_END_IF: [99],
      MOD: [99],
      NEXT: [99],
      NEW: [99],
      NOT: [99],
      NOTHING: [99],
      NULL: [99],
      ON_ERROR: [99],
      ON_LOCAL_ERROR: [99],
      ON: [99],
      OPTIONAL: [99],
      OPTION_BASE: [99],
      OPTION_EXPLICIT: [99],
      OPTION_COMPARE: [99],
      OPTION_PRIVATE_MODULE: [99],
      OR: [99],
      PARAMARRAY: [99],
      PRESERVE: [99],
      PRIVATE: [99],
      PROPERTY_GET: [99],
      PROPERTY_LET: [99],
      PROPERTY_SET: [99],
      PTRSAFE: [99],
      PUBLIC: [99],
      RAISEEVENT: [99],
      REDIM: [99],
      RESET: [99],
      RESUME: [99],
      RETURN: [99],
      SELECT: [99],
      SET: [99],
      SINGLE: [99],
      STATIC: [99],
      STEP: [99],
      STOP: [99],
      STRING: [99],
      SUB: [99],
      THEN: [99],
      TO: [99],
      TRUE: [99],
      TYPEOF: [99],
      UNTIL: [99],
      VARIANT: [99],
      WEND: [99],
      WHILE: [99],
      WITH: [99],
      WITHEVENTS: [99],
      XOR: [99],
      IMP: [99],
      IDENTIFIER: [99],
    },
    withStmt_group_38: {
      SPACE_DOT: [100],
      ALIAS: [100],
      AND: [100],
      ATTRIBUTE: [100],
      AS: [100],
      BEGIN: [100],
      BOOLEAN: [100],
      BYVAL: [100],
      BYREF: [100],
      BYTE: [100],
      CALL: [100],
      CASE: [100],
      CONST: [100],
      DECLARE: [100],
      DEFBOOL: [100],
      DEFBYTE: [100],
      DEFDATE: [100],
      DEFDBL: [100],
      DEFDEC: [100],
      DEFCUR: [100],
      DEFINT: [100],
      DEFLNG: [100],
      DEFOBJ: [100],
      DEFSNG: [100],
      DEFSTR: [100],
      DEFVAR: [100],
      DIM: [100],
      DO: [100],
      DOUBLE: [100],
      EACH: [100],
      ELSE: [100],
      ELSEIF: [100],
      END_ENUM: [100],
      END_FUNCTION: [100],
      END_IF: [100],
      END_PROPERTY: [100],
      END_SELECT: [100],
      END_SUB: [100],
      END_TYPE: [100],
      END_WITH: [100],
      END: [100],
      ENUM: [100],
      EQV: [100],
      ERASE: [100],
      EVENT: [100],
      EXIT_DO: [100],
      EXIT_FOR: [100],
      EXIT_FUNCTION: [100],
      EXIT_PROPERTY: [100],
      EXIT_SUB: [100],
      FALSE: [100],
      FRIEND: [100],
      FOR: [100],
      FUNCTION: [100],
      GET: [100],
      GLOBAL: [100],
      GOSUB: [100],
      GOTO: [100],
      IF: [100],
      IMPLEMENTS: [100],
      IN: [100],
      ISNOT: [100],
      IS: [100],
      INTEGER: [100],
      LONG: [100],
      LOOP: [100],
      LEN: [100],
      LET: [100],
      LIB: [100],
      LIKE: [100],
      LSET: [100],
      MACRO_CONST: [100],
      MACRO_IF: [100],
      MACRO_ELSEIF: [100],
      MACRO_ELSE: [100],
      MACRO_END_IF: [100],
      MOD: [100],
      NEXT: [100],
      NEW: [100, 102],
      NOT: [100],
      NOTHING: [100],
      NULL: [100],
      ON_ERROR: [100],
      ON_LOCAL_ERROR: [100],
      ON: [100],
      OPTIONAL: [100],
      OPTION_BASE: [100],
      OPTION_EXPLICIT: [100],
      OPTION_COMPARE: [100],
      OPTION_PRIVATE_MODULE: [100],
      OR: [100],
      PARAMARRAY: [100],
      PRESERVE: [100],
      PRIVATE: [100],
      PROPERTY_GET: [100],
      PROPERTY_LET: [100],
      PROPERTY_SET: [100],
      PTRSAFE: [100],
      PUBLIC: [100],
      RAISEEVENT: [100],
      REDIM: [100],
      RESET: [100],
      RESUME: [100],
      RETURN: [100],
      SELECT: [100],
      SET: [100],
      SINGLE: [100],
      STATIC: [100],
      STEP: [100],
      STOP: [100],
      STRING: [100],
      SUB: [100],
      THEN: [100],
      TO: [100],
      TRUE: [100],
      TYPEOF: [100],
      UNTIL: [100],
      VARIANT: [100],
      WEND: [100],
      WHILE: [100],
      WITH: [100],
      WITHEVENTS: [100],
      XOR: [100],
      IMP: [100],
      IDENTIFIER: [100],
    },
    withStmt_group_def_40: {
      NEW: [101],
    },
    withStmt: {
      WITH: [103],
    },
    variableListStmt_group_def_42: {
      ',': [104],
    },
    variableListStmt: {
      ALIAS: [105],
      AND: [105],
      ATTRIBUTE: [105],
      AS: [105],
      BEGIN: [105],
      BOOLEAN: [105],
      BYVAL: [105],
      BYREF: [105],
      BYTE: [105],
      CALL: [105],
      CASE: [105],
      CONST: [105],
      DECLARE: [105],
      DEFBOOL: [105],
      DEFBYTE: [105],
      DEFDATE: [105],
      DEFDBL: [105],
      DEFDEC: [105],
      DEFCUR: [105],
      DEFINT: [105],
      DEFLNG: [105],
      DEFOBJ: [105],
      DEFSNG: [105],
      DEFSTR: [105],
      DEFVAR: [105],
      DIM: [105],
      DO: [105],
      DOUBLE: [105],
      EACH: [105],
      ELSE: [105],
      ELSEIF: [105],
      END_ENUM: [105],
      END_FUNCTION: [105],
      END_IF: [105],
      END_PROPERTY: [105],
      END_SELECT: [105],
      END_SUB: [105],
      END_TYPE: [105],
      END_WITH: [105],
      END: [105],
      ENUM: [105],
      EQV: [105],
      ERASE: [105],
      EVENT: [105],
      EXIT_DO: [105],
      EXIT_FOR: [105],
      EXIT_FUNCTION: [105],
      EXIT_PROPERTY: [105],
      EXIT_SUB: [105],
      FALSE: [105],
      FRIEND: [105],
      FOR: [105],
      FUNCTION: [105],
      GET: [105],
      GLOBAL: [105],
      GOSUB: [105],
      GOTO: [105],
      IF: [105],
      IMPLEMENTS: [105],
      IN: [105],
      ISNOT: [105],
      IS: [105],
      INTEGER: [105],
      LONG: [105],
      LOOP: [105],
      LEN: [105],
      LET: [105],
      LIB: [105],
      LIKE: [105],
      LSET: [105],
      MACRO_CONST: [105],
      MACRO_IF: [105],
      MACRO_ELSEIF: [105],
      MACRO_ELSE: [105],
      MACRO_END_IF: [105],
      MOD: [105],
      NEXT: [105],
      NEW: [105],
      NOT: [105],
      NOTHING: [105],
      NULL: [105],
      ON_ERROR: [105],
      ON_LOCAL_ERROR: [105],
      ON: [105],
      OPTIONAL: [105],
      OPTION_BASE: [105],
      OPTION_EXPLICIT: [105],
      OPTION_COMPARE: [105],
      OPTION_PRIVATE_MODULE: [105],
      OR: [105],
      PARAMARRAY: [105],
      PRESERVE: [105],
      PRIVATE: [105],
      PROPERTY_GET: [105],
      PROPERTY_LET: [105],
      PROPERTY_SET: [105],
      PTRSAFE: [105],
      PUBLIC: [105],
      RAISEEVENT: [105],
      REDIM: [105],
      RESET: [105],
      RESUME: [105],
      RETURN: [105],
      SELECT: [105],
      SET: [105],
      SINGLE: [105],
      STATIC: [105],
      STEP: [105],
      STOP: [105],
      STRING: [105],
      SUB: [105],
      THEN: [105],
      TO: [105],
      TRUE: [105],
      TYPEOF: [105],
      UNTIL: [105],
      VARIANT: [105],
      WEND: [105],
      WHILE: [105],
      WITH: [105],
      WITHEVENTS: [105],
      XOR: [105],
      IMP: [105],
      IDENTIFIER: [105],
    },
    variableSubStmt_group_def_44: {
      LPAREN: [106],
    },
    variableSubStmt: {
      ALIAS: [107],
      AND: [107],
      ATTRIBUTE: [107],
      AS: [107],
      BEGIN: [107],
      BOOLEAN: [107],
      BYVAL: [107],
      BYREF: [107],
      BYTE: [107],
      CALL: [107],
      CASE: [107],
      CONST: [107],
      DECLARE: [107],
      DEFBOOL: [107],
      DEFBYTE: [107],
      DEFDATE: [107],
      DEFDBL: [107],
      DEFDEC: [107],
      DEFCUR: [107],
      DEFINT: [107],
      DEFLNG: [107],
      DEFOBJ: [107],
      DEFSNG: [107],
      DEFSTR: [107],
      DEFVAR: [107],
      DIM: [107],
      DO: [107],
      DOUBLE: [107],
      EACH: [107],
      ELSE: [107],
      ELSEIF: [107],
      END_ENUM: [107],
      END_FUNCTION: [107],
      END_IF: [107],
      END_PROPERTY: [107],
      END_SELECT: [107],
      END_SUB: [107],
      END_TYPE: [107],
      END_WITH: [107],
      END: [107],
      ENUM: [107],
      EQV: [107],
      ERASE: [107],
      EVENT: [107],
      EXIT_DO: [107],
      EXIT_FOR: [107],
      EXIT_FUNCTION: [107],
      EXIT_PROPERTY: [107],
      EXIT_SUB: [107],
      FALSE: [107],
      FRIEND: [107],
      FOR: [107],
      FUNCTION: [107],
      GET: [107],
      GLOBAL: [107],
      GOSUB: [107],
      GOTO: [107],
      IF: [107],
      IMPLEMENTS: [107],
      IN: [107],
      ISNOT: [107],
      IS: [107],
      INTEGER: [107],
      LONG: [107],
      LOOP: [107],
      LEN: [107],
      LET: [107],
      LIB: [107],
      LIKE: [107],
      LSET: [107],
      MACRO_CONST: [107],
      MACRO_IF: [107],
      MACRO_ELSEIF: [107],
      MACRO_ELSE: [107],
      MACRO_END_IF: [107],
      MOD: [107],
      NEXT: [107],
      NEW: [107],
      NOT: [107],
      NOTHING: [107],
      NULL: [107],
      ON_ERROR: [107],
      ON_LOCAL_ERROR: [107],
      ON: [107],
      OPTIONAL: [107],
      OPTION_BASE: [107],
      OPTION_EXPLICIT: [107],
      OPTION_COMPARE: [107],
      OPTION_PRIVATE_MODULE: [107],
      OR: [107],
      PARAMARRAY: [107],
      PRESERVE: [107],
      PRIVATE: [107],
      PROPERTY_GET: [107],
      PROPERTY_LET: [107],
      PROPERTY_SET: [107],
      PTRSAFE: [107],
      PUBLIC: [107],
      RAISEEVENT: [107],
      REDIM: [107],
      RESET: [107],
      RESUME: [107],
      RETURN: [107],
      SELECT: [107],
      SET: [107],
      SINGLE: [107],
      STATIC: [107],
      STEP: [107],
      STOP: [107],
      STRING: [107],
      SUB: [107],
      THEN: [107],
      TO: [107],
      TRUE: [107],
      TYPEOF: [107],
      UNTIL: [107],
      VARIANT: [107],
      WEND: [107],
      WHILE: [107],
      WITH: [107],
      WITHEVENTS: [107],
      XOR: [107],
      IMP: [107],
      IDENTIFIER: [107],
    },
    indexes: {
      DOUBLELITERAL: [108],
      INTEGERLITERAL: [108],
      STRINGLITERAL: [108],
      NOTHING: [108],
      NULL: [108],
      TRUE: [108],
      FALSE: [108],
      SPACE_DOT: [108],
      ALIAS: [108],
      AND: [108],
      ATTRIBUTE: [108],
      AS: [108],
      BEGIN: [108],
      BOOLEAN: [108],
      BYVAL: [108],
      BYREF: [108],
      BYTE: [108],
      CALL: [108],
      CASE: [108],
      CONST: [108],
      DECLARE: [108],
      DEFBOOL: [108],
      DEFBYTE: [108],
      DEFDATE: [108],
      DEFDBL: [108],
      DEFDEC: [108],
      DEFCUR: [108],
      DEFINT: [108],
      DEFLNG: [108],
      DEFOBJ: [108],
      DEFSNG: [108],
      DEFSTR: [108],
      DEFVAR: [108],
      DIM: [108],
      DO: [108],
      DOUBLE: [108],
      EACH: [108],
      ELSE: [108],
      ELSEIF: [108],
      END_ENUM: [108],
      END_FUNCTION: [108],
      END_IF: [108],
      END_PROPERTY: [108],
      END_SELECT: [108],
      END_SUB: [108],
      END_TYPE: [108],
      END_WITH: [108],
      END: [108],
      ENUM: [108],
      EQV: [108],
      ERASE: [108],
      EVENT: [108],
      EXIT_DO: [108],
      EXIT_FOR: [108],
      EXIT_FUNCTION: [108],
      EXIT_PROPERTY: [108],
      EXIT_SUB: [108],
      FRIEND: [108],
      FOR: [108],
      FUNCTION: [108],
      GET: [108],
      GLOBAL: [108],
      GOSUB: [108],
      GOTO: [108],
      IF: [108],
      IMPLEMENTS: [108],
      IN: [108],
      ISNOT: [108],
      IS: [108],
      INTEGER: [108],
      LONG: [108],
      LOOP: [108],
      LEN: [108],
      LET: [108],
      LIB: [108],
      LIKE: [108],
      LSET: [108],
      MACRO_CONST: [108],
      MACRO_IF: [108],
      MACRO_ELSEIF: [108],
      MACRO_ELSE: [108],
      MACRO_END_IF: [108],
      MOD: [108],
      NEXT: [108],
      NEW: [108],
      NOT: [108],
      ON_ERROR: [108],
      ON_LOCAL_ERROR: [108],
      ON: [108],
      OPTIONAL: [108],
      OPTION_BASE: [108],
      OPTION_EXPLICIT: [108],
      OPTION_COMPARE: [108],
      OPTION_PRIVATE_MODULE: [108],
      OR: [108],
      PARAMARRAY: [108],
      PRESERVE: [108],
      PRIVATE: [108],
      PROPERTY_GET: [108],
      PROPERTY_LET: [108],
      PROPERTY_SET: [108],
      PTRSAFE: [108],
      PUBLIC: [108],
      RAISEEVENT: [108],
      REDIM: [108],
      RESET: [108],
      RESUME: [108],
      RETURN: [108],
      SELECT: [108],
      SET: [108],
      SINGLE: [108],
      STATIC: [108],
      STEP: [108],
      STOP: [108],
      STRING: [108],
      SUB: [108],
      THEN: [108],
      TO: [108],
      TYPEOF: [108],
      UNTIL: [108],
      VARIANT: [108],
      WEND: [108],
      WHILE: [108],
      WITH: [108],
      WITHEVENTS: [108],
      XOR: [108],
      IMP: [108],
      IDENTIFIER: [108],
      LPAREN: [108],
      MINUS: [108],
      PLUS: [108],
    },
    subscript__group_def_47: {
      DOUBLELITERAL: [109],
      INTEGERLITERAL: [109],
      STRINGLITERAL: [109],
      NOTHING: [109],
      NULL: [109],
      TRUE: [109],
      FALSE: [109],
      SPACE_DOT: [109],
      ALIAS: [109],
      AND: [109],
      ATTRIBUTE: [109],
      AS: [109],
      BEGIN: [109],
      BOOLEAN: [109],
      BYVAL: [109],
      BYREF: [109],
      BYTE: [109],
      CALL: [109],
      CASE: [109],
      CONST: [109],
      DECLARE: [109],
      DEFBOOL: [109],
      DEFBYTE: [109],
      DEFDATE: [109],
      DEFDBL: [109],
      DEFDEC: [109],
      DEFCUR: [109],
      DEFINT: [109],
      DEFLNG: [109],
      DEFOBJ: [109],
      DEFSNG: [109],
      DEFSTR: [109],
      DEFVAR: [109],
      DIM: [109],
      DO: [109],
      DOUBLE: [109],
      EACH: [109],
      ELSE: [109],
      ELSEIF: [109],
      END_ENUM: [109],
      END_FUNCTION: [109],
      END_IF: [109],
      END_PROPERTY: [109],
      END_SELECT: [109],
      END_SUB: [109],
      END_TYPE: [109],
      END_WITH: [109],
      END: [109],
      ENUM: [109],
      EQV: [109],
      ERASE: [109],
      EVENT: [109],
      EXIT_DO: [109],
      EXIT_FOR: [109],
      EXIT_FUNCTION: [109],
      EXIT_PROPERTY: [109],
      EXIT_SUB: [109],
      FRIEND: [109],
      FOR: [109],
      FUNCTION: [109],
      GET: [109],
      GLOBAL: [109],
      GOSUB: [109],
      GOTO: [109],
      IF: [109],
      IMPLEMENTS: [109],
      IN: [109],
      ISNOT: [109],
      IS: [109],
      INTEGER: [109],
      LONG: [109],
      LOOP: [109],
      LEN: [109],
      LET: [109],
      LIB: [109],
      LIKE: [109],
      LSET: [109],
      MACRO_CONST: [109],
      MACRO_IF: [109],
      MACRO_ELSEIF: [109],
      MACRO_ELSE: [109],
      MACRO_END_IF: [109],
      MOD: [109],
      NEXT: [109],
      NEW: [109],
      NOT: [109],
      ON_ERROR: [109],
      ON_LOCAL_ERROR: [109],
      ON: [109],
      OPTIONAL: [109],
      OPTION_BASE: [109],
      OPTION_EXPLICIT: [109],
      OPTION_COMPARE: [109],
      OPTION_PRIVATE_MODULE: [109],
      OR: [109],
      PARAMARRAY: [109],
      PRESERVE: [109],
      PRIVATE: [109],
      PROPERTY_GET: [109],
      PROPERTY_LET: [109],
      PROPERTY_SET: [109],
      PTRSAFE: [109],
      PUBLIC: [109],
      RAISEEVENT: [109],
      REDIM: [109],
      RESET: [109],
      RESUME: [109],
      RETURN: [109],
      SELECT: [109],
      SET: [109],
      SINGLE: [109],
      STATIC: [109],
      STEP: [109],
      STOP: [109],
      STRING: [109],
      SUB: [109],
      THEN: [109],
      TO: [109],
      TYPEOF: [109],
      UNTIL: [109],
      VARIANT: [109],
      WEND: [109],
      WHILE: [109],
      WITH: [109],
      WITHEVENTS: [109],
      XOR: [109],
      IMP: [109],
      IDENTIFIER: [109],
      LPAREN: [109],
      MINUS: [109],
      PLUS: [109],
    },
    subscript_: {
      DOUBLELITERAL: [110, 113],
      INTEGERLITERAL: [110, 113],
      STRINGLITERAL: [110, 113],
      NOTHING: [110, 113],
      NULL: [110, 113],
      TRUE: [110, 113],
      FALSE: [110, 113],
      SPACE_DOT: [110, 113],
      ALIAS: [110, 113],
      AND: [110, 113],
      ATTRIBUTE: [110, 113],
      AS: [110, 113],
      BEGIN: [110, 113],
      BOOLEAN: [110, 113],
      BYVAL: [110, 113],
      BYREF: [110, 113],
      BYTE: [110, 113],
      CALL: [110, 113],
      CASE: [110, 113],
      CONST: [110, 113],
      DECLARE: [110, 113],
      DEFBOOL: [110, 113],
      DEFBYTE: [110, 113],
      DEFDATE: [110, 113],
      DEFDBL: [110, 113],
      DEFDEC: [110, 113],
      DEFCUR: [110, 113],
      DEFINT: [110, 113],
      DEFLNG: [110, 113],
      DEFOBJ: [110, 113],
      DEFSNG: [110, 113],
      DEFSTR: [110, 113],
      DEFVAR: [110, 113],
      DIM: [110, 113],
      DO: [110, 113],
      DOUBLE: [110, 113],
      EACH: [110, 113],
      ELSE: [110, 113],
      ELSEIF: [110, 113],
      END_ENUM: [110, 113],
      END_FUNCTION: [110, 113],
      END_IF: [110, 113],
      END_PROPERTY: [110, 113],
      END_SELECT: [110, 113],
      END_SUB: [110, 113],
      END_TYPE: [110, 113],
      END_WITH: [110, 113],
      END: [110, 113],
      ENUM: [110, 113],
      EQV: [110, 113],
      ERASE: [110, 113],
      EVENT: [110, 113],
      EXIT_DO: [110, 113],
      EXIT_FOR: [110, 113],
      EXIT_FUNCTION: [110, 113],
      EXIT_PROPERTY: [110, 113],
      EXIT_SUB: [110, 113],
      FRIEND: [110, 113],
      FOR: [110, 113],
      FUNCTION: [110, 113],
      GET: [110, 113],
      GLOBAL: [110, 113],
      GOSUB: [110, 113],
      GOTO: [110, 113],
      IF: [110, 113],
      IMPLEMENTS: [110, 113],
      IN: [110, 113],
      ISNOT: [110, 113],
      IS: [110, 113],
      INTEGER: [110, 113],
      LONG: [110, 113],
      LOOP: [110, 113],
      LEN: [110, 113],
      LET: [110, 113],
      LIB: [110, 113],
      LIKE: [110, 113],
      LSET: [110, 113],
      MACRO_CONST: [110, 113],
      MACRO_IF: [110, 113],
      MACRO_ELSEIF: [110, 113],
      MACRO_ELSE: [110, 113],
      MACRO_END_IF: [110, 113],
      MOD: [110, 113],
      NEXT: [110, 113],
      NEW: [110, 113],
      NOT: [110, 113],
      ON_ERROR: [110, 113],
      ON_LOCAL_ERROR: [110, 113],
      ON: [110, 113],
      OPTIONAL: [110, 113],
      OPTION_BASE: [110, 113],
      OPTION_EXPLICIT: [110, 113],
      OPTION_COMPARE: [110, 113],
      OPTION_PRIVATE_MODULE: [110, 113],
      OR: [110, 113],
      PARAMARRAY: [110, 113],
      PRESERVE: [110, 113],
      PRIVATE: [110, 113],
      PROPERTY_GET: [110, 113],
      PROPERTY_LET: [110, 113],
      PROPERTY_SET: [110, 113],
      PTRSAFE: [110, 113],
      PUBLIC: [110, 113],
      RAISEEVENT: [110, 113],
      REDIM: [110, 113],
      RESET: [110, 113],
      RESUME: [110, 113],
      RETURN: [110, 113],
      SELECT: [110, 113],
      SET: [110, 113],
      SINGLE: [110, 113],
      STATIC: [110, 113],
      STEP: [110, 113],
      STOP: [110, 113],
      STRING: [110, 113],
      SUB: [110, 113],
      THEN: [110, 113],
      TO: [110, 113],
      TYPEOF: [110, 113],
      UNTIL: [110, 113],
      VARIANT: [110, 113],
      WEND: [110, 113],
      WHILE: [110, 113],
      WITH: [110, 113],
      WITHEVENTS: [110, 113],
      XOR: [110, 113],
      IMP: [110, 113],
      IDENTIFIER: [110, 113],
      LPAREN: [110, 113],
      MINUS: [110, 113],
      PLUS: [110, 113],
    },
    subscripts_group_def_49: {
      ',': [111],
    },
    subscripts: {
      DOUBLELITERAL: [112],
      INTEGERLITERAL: [112],
      STRINGLITERAL: [112],
      NOTHING: [112],
      NULL: [112],
      TRUE: [112],
      FALSE: [112],
      ALIAS: [112],
      AND: [112],
      ATTRIBUTE: [112],
      AS: [112],
      BEGIN: [112],
      BOOLEAN: [112],
      BYVAL: [112],
      BYREF: [112],
      BYTE: [112],
      CALL: [112],
      CASE: [112],
      CONST: [112],
      DECLARE: [112],
      DEFBOOL: [112],
      DEFBYTE: [112],
      DEFDATE: [112],
      DEFDBL: [112],
      DEFDEC: [112],
      DEFCUR: [112],
      DEFINT: [112],
      DEFLNG: [112],
      DEFOBJ: [112],
      DEFSNG: [112],
      DEFSTR: [112],
      DEFVAR: [112],
      DIM: [112],
      DO: [112],
      DOUBLE: [112],
      EACH: [112],
      ELSE: [112],
      ELSEIF: [112],
      END_ENUM: [112],
      END_FUNCTION: [112],
      END_IF: [112],
      END_PROPERTY: [112],
      END_SELECT: [112],
      END_SUB: [112],
      END_TYPE: [112],
      END_WITH: [112],
      END: [112],
      ENUM: [112],
      EQV: [112],
      ERASE: [112],
      EVENT: [112],
      EXIT_DO: [112],
      EXIT_FOR: [112],
      EXIT_FUNCTION: [112],
      EXIT_PROPERTY: [112],
      EXIT_SUB: [112],
      FRIEND: [112],
      FOR: [112],
      FUNCTION: [112],
      GET: [112],
      GLOBAL: [112],
      GOSUB: [112],
      GOTO: [112],
      IF: [112],
      IMPLEMENTS: [112],
      IN: [112],
      ISNOT: [112],
      IS: [112],
      INTEGER: [112],
      LONG: [112],
      LOOP: [112],
      LEN: [112],
      LET: [112],
      LIB: [112],
      LIKE: [112],
      LSET: [112],
      MACRO_CONST: [112],
      MACRO_IF: [112],
      MACRO_ELSEIF: [112],
      MACRO_ELSE: [112],
      MACRO_END_IF: [112],
      MOD: [112],
      NEXT: [112],
      NEW: [112],
      NOT: [112],
      ON_ERROR: [112],
      ON_LOCAL_ERROR: [112],
      ON: [112],
      OPTIONAL: [112],
      OPTION_BASE: [112],
      OPTION_EXPLICIT: [112],
      OPTION_COMPARE: [112],
      OPTION_PRIVATE_MODULE: [112],
      OR: [112],
      PARAMARRAY: [112],
      PRESERVE: [112],
      PRIVATE: [112],
      PROPERTY_GET: [112],
      PROPERTY_LET: [112],
      PROPERTY_SET: [112],
      PTRSAFE: [112],
      PUBLIC: [112],
      RAISEEVENT: [112],
      REDIM: [112],
      RESET: [112],
      RESUME: [112],
      RETURN: [112],
      SELECT: [112],
      SET: [112],
      SINGLE: [112],
      STATIC: [112],
      STEP: [112],
      STOP: [112],
      STRING: [112],
      SUB: [112],
      THEN: [112],
      TO: [112],
      TYPEOF: [112],
      UNTIL: [112],
      VARIANT: [112],
      WEND: [112],
      WHILE: [112],
      WITH: [112],
      WITHEVENTS: [112],
      XOR: [112],
      IMP: [112],
      IDENTIFIER: [112],
      LPAREN: [112],
      MINUS: [112],
      PLUS: [112],
      SPACE_DOT: [112],
    },
    argList_group_def_53: {
      ',': [114],
    },
    argList_group_def_54: {
      OPTIONAL: [115],
      PARAMARRAY: [115],
      ALIAS: [115],
      AND: [115],
      ATTRIBUTE: [115],
      AS: [115],
      BEGIN: [115],
      BOOLEAN: [115],
      BYVAL: [115],
      BYREF: [115],
      BYTE: [115],
      CALL: [115],
      CASE: [115],
      CONST: [115],
      DECLARE: [115],
      DEFBOOL: [115],
      DEFBYTE: [115],
      DEFDATE: [115],
      DEFDBL: [115],
      DEFDEC: [115],
      DEFCUR: [115],
      DEFINT: [115],
      DEFLNG: [115],
      DEFOBJ: [115],
      DEFSNG: [115],
      DEFSTR: [115],
      DEFVAR: [115],
      DIM: [115],
      DO: [115],
      DOUBLE: [115],
      EACH: [115],
      ELSE: [115],
      ELSEIF: [115],
      END_ENUM: [115],
      END_FUNCTION: [115],
      END_IF: [115],
      END_PROPERTY: [115],
      END_SELECT: [115],
      END_SUB: [115],
      END_TYPE: [115],
      END_WITH: [115],
      END: [115],
      ENUM: [115],
      EQV: [115],
      ERASE: [115],
      EVENT: [115],
      EXIT_DO: [115],
      EXIT_FOR: [115],
      EXIT_FUNCTION: [115],
      EXIT_PROPERTY: [115],
      EXIT_SUB: [115],
      FALSE: [115],
      FRIEND: [115],
      FOR: [115],
      FUNCTION: [115],
      GET: [115],
      GLOBAL: [115],
      GOSUB: [115],
      GOTO: [115],
      IF: [115],
      IMPLEMENTS: [115],
      IN: [115],
      ISNOT: [115],
      IS: [115],
      INTEGER: [115],
      LONG: [115],
      LOOP: [115],
      LEN: [115],
      LET: [115],
      LIB: [115],
      LIKE: [115],
      LSET: [115],
      MACRO_CONST: [115],
      MACRO_IF: [115],
      MACRO_ELSEIF: [115],
      MACRO_ELSE: [115],
      MACRO_END_IF: [115],
      MOD: [115],
      NEXT: [115],
      NEW: [115],
      NOT: [115],
      NOTHING: [115],
      NULL: [115],
      ON_ERROR: [115],
      ON_LOCAL_ERROR: [115],
      ON: [115],
      OPTION_BASE: [115],
      OPTION_EXPLICIT: [115],
      OPTION_COMPARE: [115],
      OPTION_PRIVATE_MODULE: [115],
      OR: [115],
      PRESERVE: [115],
      PRIVATE: [115],
      PROPERTY_GET: [115],
      PROPERTY_LET: [115],
      PROPERTY_SET: [115],
      PTRSAFE: [115],
      PUBLIC: [115],
      RAISEEVENT: [115],
      REDIM: [115],
      RESET: [115],
      RESUME: [115],
      RETURN: [115],
      SELECT: [115],
      SET: [115],
      SINGLE: [115],
      STATIC: [115],
      STEP: [115],
      STOP: [115],
      STRING: [115],
      SUB: [115],
      THEN: [115],
      TO: [115],
      TRUE: [115],
      TYPEOF: [115],
      UNTIL: [115],
      VARIANT: [115],
      WEND: [115],
      WHILE: [115],
      WITH: [115],
      WITHEVENTS: [115],
      XOR: [115],
      IMP: [115],
      IDENTIFIER: [115],
    },
    argList: {
      LPAREN: [116],
    },
    valueStmt_p_end: {
      DOUBLELITERAL: [117],
      INTEGERLITERAL: [117],
      STRINGLITERAL: [117],
      NOTHING: [117, 118, 119],
      NULL: [117, 118, 119],
      TRUE: [117, 118, 119],
      FALSE: [117, 118, 119],
      SPACE_DOT: [118],
      ALIAS: [118, 119],
      AND: [118, 119],
      ATTRIBUTE: [118, 119],
      AS: [118, 119],
      BEGIN: [118, 119],
      BOOLEAN: [118, 119],
      BYVAL: [118, 119],
      BYREF: [118, 119],
      BYTE: [118, 119],
      CALL: [118, 119],
      CASE: [118, 119],
      CONST: [118, 119],
      DECLARE: [118, 119],
      DEFBOOL: [118, 119],
      DEFBYTE: [118, 119],
      DEFDATE: [118, 119],
      DEFDBL: [118, 119],
      DEFDEC: [118, 119],
      DEFCUR: [118, 119],
      DEFINT: [118, 119],
      DEFLNG: [118, 119],
      DEFOBJ: [118, 119],
      DEFSNG: [118, 119],
      DEFSTR: [118, 119],
      DEFVAR: [118, 119],
      DIM: [118, 119],
      DO: [118, 119],
      DOUBLE: [118, 119],
      EACH: [118, 119],
      ELSE: [118, 119],
      ELSEIF: [118, 119],
      END_ENUM: [118, 119],
      END_FUNCTION: [118, 119],
      END_IF: [118, 119],
      END_PROPERTY: [118, 119],
      END_SELECT: [118, 119],
      END_SUB: [118, 119],
      END_TYPE: [118, 119],
      END_WITH: [118, 119],
      END: [118, 119],
      ENUM: [118, 119],
      EQV: [118, 119],
      ERASE: [118, 119],
      EVENT: [118, 119],
      EXIT_DO: [118, 119],
      EXIT_FOR: [118, 119],
      EXIT_FUNCTION: [118, 119],
      EXIT_PROPERTY: [118, 119],
      EXIT_SUB: [118, 119],
      FRIEND: [118, 119],
      FOR: [118, 119],
      FUNCTION: [118, 119],
      GET: [118, 119],
      GLOBAL: [118, 119],
      GOSUB: [118, 119],
      GOTO: [118, 119],
      IF: [118, 119],
      IMPLEMENTS: [118, 119],
      IN: [118, 119],
      ISNOT: [118, 119],
      IS: [118, 119],
      INTEGER: [118, 119],
      LONG: [118, 119],
      LOOP: [118, 119],
      LEN: [118, 119],
      LET: [118, 119],
      LIB: [118, 119],
      LIKE: [118, 119],
      LSET: [118, 119],
      MACRO_CONST: [118, 119],
      MACRO_IF: [118, 119],
      MACRO_ELSEIF: [118, 119],
      MACRO_ELSE: [118, 119],
      MACRO_END_IF: [118, 119],
      MOD: [118, 119],
      NEXT: [118, 119],
      NEW: [118, 119, 120],
      NOT: [118, 119],
      ON_ERROR: [118, 119],
      ON_LOCAL_ERROR: [118, 119],
      ON: [118, 119],
      OPTIONAL: [118, 119],
      OPTION_BASE: [118, 119],
      OPTION_EXPLICIT: [118, 119],
      OPTION_COMPARE: [118, 119],
      OPTION_PRIVATE_MODULE: [118, 119],
      OR: [118, 119],
      PARAMARRAY: [118, 119],
      PRESERVE: [118, 119],
      PRIVATE: [118, 119],
      PROPERTY_GET: [118, 119],
      PROPERTY_LET: [118, 119],
      PROPERTY_SET: [118, 119],
      PTRSAFE: [118, 119],
      PUBLIC: [118, 119],
      RAISEEVENT: [118, 119],
      REDIM: [118, 119],
      RESET: [118, 119],
      RESUME: [118, 119],
      RETURN: [118, 119],
      SELECT: [118, 119],
      SET: [118, 119],
      SINGLE: [118, 119],
      STATIC: [118, 119],
      STEP: [118, 119],
      STOP: [118, 119],
      STRING: [118, 119],
      SUB: [118, 119],
      THEN: [118, 119],
      TO: [118, 119],
      TYPEOF: [118, 119],
      UNTIL: [118, 119],
      VARIANT: [118, 119],
      WEND: [118, 119],
      WHILE: [118, 119],
      WITH: [118, 119],
      WITHEVENTS: [118, 119],
      XOR: [118, 119],
      IMP: [118, 119],
      IDENTIFIER: [118, 119],
      LPAREN: [121],
    },
    implicitCallStmt_InStmt: {
      ALIAS: [122, 123, 124],
      AND: [122, 123, 124],
      ATTRIBUTE: [122, 123, 124],
      AS: [122, 123, 124],
      BEGIN: [122, 123, 124],
      BOOLEAN: [122, 123, 124],
      BYVAL: [122, 123, 124],
      BYREF: [122, 123, 124],
      BYTE: [122, 123, 124],
      CALL: [122, 123, 124],
      CASE: [122, 123, 124],
      CONST: [122, 123, 124],
      DECLARE: [122, 123, 124],
      DEFBOOL: [122, 123, 124],
      DEFBYTE: [122, 123, 124],
      DEFDATE: [122, 123, 124],
      DEFDBL: [122, 123, 124],
      DEFDEC: [122, 123, 124],
      DEFCUR: [122, 123, 124],
      DEFINT: [122, 123, 124],
      DEFLNG: [122, 123, 124],
      DEFOBJ: [122, 123, 124],
      DEFSNG: [122, 123, 124],
      DEFSTR: [122, 123, 124],
      DEFVAR: [122, 123, 124],
      DIM: [122, 123, 124],
      DO: [122, 123, 124],
      DOUBLE: [122, 123, 124],
      EACH: [122, 123, 124],
      ELSE: [122, 123, 124],
      ELSEIF: [122, 123, 124],
      END_ENUM: [122, 123, 124],
      END_FUNCTION: [122, 123, 124],
      END_IF: [122, 123, 124],
      END_PROPERTY: [122, 123, 124],
      END_SELECT: [122, 123, 124],
      END_SUB: [122, 123, 124],
      END_TYPE: [122, 123, 124],
      END_WITH: [122, 123, 124],
      END: [122, 123, 124],
      ENUM: [122, 123, 124],
      EQV: [122, 123, 124],
      ERASE: [122, 123, 124],
      EVENT: [122, 123, 124],
      EXIT_DO: [122, 123, 124],
      EXIT_FOR: [122, 123, 124],
      EXIT_FUNCTION: [122, 123, 124],
      EXIT_PROPERTY: [122, 123, 124],
      EXIT_SUB: [122, 123, 124],
      FALSE: [122, 123, 124],
      FRIEND: [122, 123, 124],
      FOR: [122, 123, 124],
      FUNCTION: [122, 123, 124],
      GET: [122, 123, 124],
      GLOBAL: [122, 123, 124],
      GOSUB: [122, 123, 124],
      GOTO: [122, 123, 124],
      IF: [122, 123, 124],
      IMPLEMENTS: [122, 123, 124],
      IN: [122, 123, 124],
      ISNOT: [122, 123, 124],
      IS: [122, 123, 124],
      INTEGER: [122, 123, 124],
      LONG: [122, 123, 124],
      LOOP: [122, 123, 124],
      LEN: [122, 123, 124],
      LET: [122, 123, 124],
      LIB: [122, 123, 124],
      LIKE: [122, 123, 124],
      LSET: [122, 123, 124],
      MACRO_CONST: [122, 123, 124],
      MACRO_IF: [122, 123, 124],
      MACRO_ELSEIF: [122, 123, 124],
      MACRO_ELSE: [122, 123, 124],
      MACRO_END_IF: [122, 123, 124],
      MOD: [122, 123, 124],
      NEXT: [122, 123, 124],
      NEW: [122, 123, 124],
      NOT: [122, 123, 124],
      NOTHING: [122, 123, 124],
      NULL: [122, 123, 124],
      ON_ERROR: [122, 123, 124],
      ON_LOCAL_ERROR: [122, 123, 124],
      ON: [122, 123, 124],
      OPTIONAL: [122, 123, 124],
      OPTION_BASE: [122, 123, 124],
      OPTION_EXPLICIT: [122, 123, 124],
      OPTION_COMPARE: [122, 123, 124],
      OPTION_PRIVATE_MODULE: [122, 123, 124],
      OR: [122, 123, 124],
      PARAMARRAY: [122, 123, 124],
      PRESERVE: [122, 123, 124],
      PRIVATE: [122, 123, 124],
      PROPERTY_GET: [122, 123, 124],
      PROPERTY_LET: [122, 123, 124],
      PROPERTY_SET: [122, 123, 124],
      PTRSAFE: [122, 123, 124],
      PUBLIC: [122, 123, 124],
      RAISEEVENT: [122, 123, 124],
      REDIM: [122, 123, 124],
      RESET: [122, 123, 124],
      RESUME: [122, 123, 124],
      RETURN: [122, 123, 124],
      SELECT: [122, 123, 124],
      SET: [122, 123, 124],
      SINGLE: [122, 123, 124],
      STATIC: [122, 123, 124],
      STEP: [122, 123, 124],
      STOP: [122, 123, 124],
      STRING: [122, 123, 124],
      SUB: [122, 123, 124],
      THEN: [122, 123, 124],
      TO: [122, 123, 124],
      TRUE: [122, 123, 124],
      TYPEOF: [122, 123, 124],
      UNTIL: [122, 123, 124],
      VARIANT: [122, 123, 124],
      WEND: [122, 123, 124],
      WHILE: [122, 123, 124],
      WITH: [122, 123, 124],
      WITHEVENTS: [122, 123, 124],
      XOR: [122, 123, 124],
      IMP: [122, 123, 124],
      IDENTIFIER: [122, 123, 124],
      SPACE_DOT: [122],
    },
    iCS_S_MembersCall_group_def_57: {
      ALIAS: [125],
      AND: [125],
      ATTRIBUTE: [125],
      AS: [125],
      BEGIN: [125],
      BOOLEAN: [125],
      BYVAL: [125],
      BYREF: [125],
      BYTE: [125],
      CALL: [125],
      CASE: [125],
      CONST: [125],
      DECLARE: [125],
      DEFBOOL: [125],
      DEFBYTE: [125],
      DEFDATE: [125],
      DEFDBL: [125],
      DEFDEC: [125],
      DEFCUR: [125],
      DEFINT: [125],
      DEFLNG: [125],
      DEFOBJ: [125],
      DEFSNG: [125],
      DEFSTR: [125],
      DEFVAR: [125],
      DIM: [125],
      DO: [125],
      DOUBLE: [125],
      EACH: [125],
      ELSE: [125],
      ELSEIF: [125],
      END_ENUM: [125],
      END_FUNCTION: [125],
      END_IF: [125],
      END_PROPERTY: [125],
      END_SELECT: [125],
      END_SUB: [125],
      END_TYPE: [125],
      END_WITH: [125],
      END: [125],
      ENUM: [125],
      EQV: [125],
      ERASE: [125],
      EVENT: [125],
      EXIT_DO: [125],
      EXIT_FOR: [125],
      EXIT_FUNCTION: [125],
      EXIT_PROPERTY: [125],
      EXIT_SUB: [125],
      FALSE: [125],
      FRIEND: [125],
      FOR: [125],
      FUNCTION: [125],
      GET: [125],
      GLOBAL: [125],
      GOSUB: [125],
      GOTO: [125],
      IF: [125],
      IMPLEMENTS: [125],
      IN: [125],
      ISNOT: [125],
      IS: [125],
      INTEGER: [125],
      LONG: [125],
      LOOP: [125],
      LEN: [125],
      LET: [125],
      LIB: [125],
      LIKE: [125],
      LSET: [125],
      MACRO_CONST: [125],
      MACRO_IF: [125],
      MACRO_ELSEIF: [125],
      MACRO_ELSE: [125],
      MACRO_END_IF: [125],
      MOD: [125],
      NEXT: [125],
      NEW: [125],
      NOT: [125],
      NOTHING: [125],
      NULL: [125],
      ON_ERROR: [125],
      ON_LOCAL_ERROR: [125],
      ON: [125],
      OPTIONAL: [125],
      OPTION_BASE: [125],
      OPTION_EXPLICIT: [125],
      OPTION_COMPARE: [125],
      OPTION_PRIVATE_MODULE: [125],
      OR: [125],
      PARAMARRAY: [125],
      PRESERVE: [125],
      PRIVATE: [125],
      PROPERTY_GET: [125],
      PROPERTY_LET: [125],
      PROPERTY_SET: [125],
      PTRSAFE: [125],
      PUBLIC: [125],
      RAISEEVENT: [125],
      REDIM: [125],
      RESET: [125],
      RESUME: [125],
      RETURN: [125],
      SELECT: [125],
      SET: [125],
      SINGLE: [125],
      STATIC: [125],
      STEP: [125],
      STOP: [125],
      STRING: [125],
      SUB: [125],
      THEN: [125],
      TO: [125],
      TRUE: [125],
      TYPEOF: [125],
      UNTIL: [125],
      VARIANT: [125],
      WEND: [125],
      WHILE: [125],
      WITH: [125],
      WITHEVENTS: [125],
      XOR: [125],
      IMP: [125],
      IDENTIFIER: [125],
    },
    iCS_S_MembersCall_group_56: {
      ALIAS: [126, 128],
      AND: [126, 128],
      ATTRIBUTE: [126, 128],
      AS: [126, 128],
      BEGIN: [126, 128],
      BOOLEAN: [126, 128],
      BYVAL: [126, 128],
      BYREF: [126, 128],
      BYTE: [126, 128],
      CALL: [126, 128],
      CASE: [126, 128],
      CONST: [126, 128],
      DECLARE: [126, 128],
      DEFBOOL: [126, 128],
      DEFBYTE: [126, 128],
      DEFDATE: [126, 128],
      DEFDBL: [126, 128],
      DEFDEC: [126, 128],
      DEFCUR: [126, 128],
      DEFINT: [126, 128],
      DEFLNG: [126, 128],
      DEFOBJ: [126, 128],
      DEFSNG: [126, 128],
      DEFSTR: [126, 128],
      DEFVAR: [126, 128],
      DIM: [126, 128],
      DO: [126, 128],
      DOUBLE: [126, 128],
      EACH: [126, 128],
      ELSE: [126, 128],
      ELSEIF: [126, 128],
      END_ENUM: [126, 128],
      END_FUNCTION: [126, 128],
      END_IF: [126, 128],
      END_PROPERTY: [126, 128],
      END_SELECT: [126, 128],
      END_SUB: [126, 128],
      END_TYPE: [126, 128],
      END_WITH: [126, 128],
      END: [126, 128],
      ENUM: [126, 128],
      EQV: [126, 128],
      ERASE: [126, 128],
      EVENT: [126, 128],
      EXIT_DO: [126, 128],
      EXIT_FOR: [126, 128],
      EXIT_FUNCTION: [126, 128],
      EXIT_PROPERTY: [126, 128],
      EXIT_SUB: [126, 128],
      FALSE: [126, 128],
      FRIEND: [126, 128],
      FOR: [126, 128],
      FUNCTION: [126, 128],
      GET: [126, 128],
      GLOBAL: [126, 128],
      GOSUB: [126, 128],
      GOTO: [126, 128],
      IF: [126, 128],
      IMPLEMENTS: [126, 128],
      IN: [126, 128],
      ISNOT: [126, 128],
      IS: [126, 128],
      INTEGER: [126, 128],
      LONG: [126, 128],
      LOOP: [126, 128],
      LEN: [126, 128],
      LET: [126, 128],
      LIB: [126, 128],
      LIKE: [126, 128],
      LSET: [126, 128],
      MACRO_CONST: [126, 128],
      MACRO_IF: [126, 128],
      MACRO_ELSEIF: [126, 128],
      MACRO_ELSE: [126, 128],
      MACRO_END_IF: [126, 128],
      MOD: [126, 128],
      NEXT: [126, 128],
      NEW: [126, 128],
      NOT: [126, 128],
      NOTHING: [126, 128],
      NULL: [126, 128],
      ON_ERROR: [126, 128],
      ON_LOCAL_ERROR: [126, 128],
      ON: [126, 128],
      OPTIONAL: [126, 128],
      OPTION_BASE: [126, 128],
      OPTION_EXPLICIT: [126, 128],
      OPTION_COMPARE: [126, 128],
      OPTION_PRIVATE_MODULE: [126, 128],
      OR: [126, 128],
      PARAMARRAY: [126, 128],
      PRESERVE: [126, 128],
      PRIVATE: [126, 128],
      PROPERTY_GET: [126, 128],
      PROPERTY_LET: [126, 128],
      PROPERTY_SET: [126, 128],
      PTRSAFE: [126, 128],
      PUBLIC: [126, 128],
      RAISEEVENT: [126, 128],
      REDIM: [126, 128],
      RESET: [126, 128],
      RESUME: [126, 128],
      RETURN: [126, 128],
      SELECT: [126, 128],
      SET: [126, 128],
      SINGLE: [126, 128],
      STATIC: [126, 128],
      STEP: [126, 128],
      STOP: [126, 128],
      STRING: [126, 128],
      SUB: [126, 128],
      THEN: [126, 128],
      TO: [126, 128],
      TRUE: [126, 128],
      TYPEOF: [126, 128],
      UNTIL: [126, 128],
      VARIANT: [126, 128],
      WEND: [126, 128],
      WHILE: [126, 128],
      WITH: [126, 128],
      WITHEVENTS: [126, 128],
      XOR: [126, 128],
      IMP: [126, 128],
      IDENTIFIER: [126, 128],
    },
    iCS_S_MembersCall_group_def_58: {
      ALIAS: [127],
      AND: [127],
      ATTRIBUTE: [127],
      AS: [127],
      BEGIN: [127],
      BOOLEAN: [127],
      BYVAL: [127],
      BYREF: [127],
      BYTE: [127],
      CALL: [127],
      CASE: [127],
      CONST: [127],
      DECLARE: [127],
      DEFBOOL: [127],
      DEFBYTE: [127],
      DEFDATE: [127],
      DEFDBL: [127],
      DEFDEC: [127],
      DEFCUR: [127],
      DEFINT: [127],
      DEFLNG: [127],
      DEFOBJ: [127],
      DEFSNG: [127],
      DEFSTR: [127],
      DEFVAR: [127],
      DIM: [127],
      DO: [127],
      DOUBLE: [127],
      EACH: [127],
      ELSE: [127],
      ELSEIF: [127],
      END_ENUM: [127],
      END_FUNCTION: [127],
      END_IF: [127],
      END_PROPERTY: [127],
      END_SELECT: [127],
      END_SUB: [127],
      END_TYPE: [127],
      END_WITH: [127],
      END: [127],
      ENUM: [127],
      EQV: [127],
      ERASE: [127],
      EVENT: [127],
      EXIT_DO: [127],
      EXIT_FOR: [127],
      EXIT_FUNCTION: [127],
      EXIT_PROPERTY: [127],
      EXIT_SUB: [127],
      FALSE: [127],
      FRIEND: [127],
      FOR: [127],
      FUNCTION: [127],
      GET: [127],
      GLOBAL: [127],
      GOSUB: [127],
      GOTO: [127],
      IF: [127],
      IMPLEMENTS: [127],
      IN: [127],
      ISNOT: [127],
      IS: [127],
      INTEGER: [127],
      LONG: [127],
      LOOP: [127],
      LEN: [127],
      LET: [127],
      LIB: [127],
      LIKE: [127],
      LSET: [127],
      MACRO_CONST: [127],
      MACRO_IF: [127],
      MACRO_ELSEIF: [127],
      MACRO_ELSE: [127],
      MACRO_END_IF: [127],
      MOD: [127],
      NEXT: [127],
      NEW: [127],
      NOT: [127],
      NOTHING: [127],
      NULL: [127],
      ON_ERROR: [127],
      ON_LOCAL_ERROR: [127],
      ON: [127],
      OPTIONAL: [127],
      OPTION_BASE: [127],
      OPTION_EXPLICIT: [127],
      OPTION_COMPARE: [127],
      OPTION_PRIVATE_MODULE: [127],
      OR: [127],
      PARAMARRAY: [127],
      PRESERVE: [127],
      PRIVATE: [127],
      PROPERTY_GET: [127],
      PROPERTY_LET: [127],
      PROPERTY_SET: [127],
      PTRSAFE: [127],
      PUBLIC: [127],
      RAISEEVENT: [127],
      REDIM: [127],
      RESET: [127],
      RESUME: [127],
      RETURN: [127],
      SELECT: [127],
      SET: [127],
      SINGLE: [127],
      STATIC: [127],
      STEP: [127],
      STOP: [127],
      STRING: [127],
      SUB: [127],
      THEN: [127],
      TO: [127],
      TRUE: [127],
      TYPEOF: [127],
      UNTIL: [127],
      VARIANT: [127],
      WEND: [127],
      WHILE: [127],
      WITH: [127],
      WITHEVENTS: [127],
      XOR: [127],
      IMP: [127],
      IDENTIFIER: [127],
    },
    iCS_S_MembersCall_group_def_59: {
      ALIAS: [129],
      AND: [129],
      ATTRIBUTE: [129],
      AS: [129],
      BEGIN: [129],
      BOOLEAN: [129],
      BYVAL: [129],
      BYREF: [129],
      BYTE: [129],
      CALL: [129],
      CASE: [129],
      CONST: [129],
      DECLARE: [129],
      DEFBOOL: [129],
      DEFBYTE: [129],
      DEFDATE: [129],
      DEFDBL: [129],
      DEFDEC: [129],
      DEFCUR: [129],
      DEFINT: [129],
      DEFLNG: [129],
      DEFOBJ: [129],
      DEFSNG: [129],
      DEFSTR: [129],
      DEFVAR: [129],
      DIM: [129],
      DO: [129],
      DOUBLE: [129],
      EACH: [129],
      ELSE: [129],
      ELSEIF: [129],
      END_ENUM: [129],
      END_FUNCTION: [129],
      END_IF: [129],
      END_PROPERTY: [129],
      END_SELECT: [129],
      END_SUB: [129],
      END_TYPE: [129],
      END_WITH: [129],
      END: [129],
      ENUM: [129],
      EQV: [129],
      ERASE: [129],
      EVENT: [129],
      EXIT_DO: [129],
      EXIT_FOR: [129],
      EXIT_FUNCTION: [129],
      EXIT_PROPERTY: [129],
      EXIT_SUB: [129],
      FALSE: [129],
      FRIEND: [129],
      FOR: [129],
      FUNCTION: [129],
      GET: [129],
      GLOBAL: [129],
      GOSUB: [129],
      GOTO: [129],
      IF: [129],
      IMPLEMENTS: [129],
      IN: [129],
      ISNOT: [129],
      IS: [129],
      INTEGER: [129],
      LONG: [129],
      LOOP: [129],
      LEN: [129],
      LET: [129],
      LIB: [129],
      LIKE: [129],
      LSET: [129],
      MACRO_CONST: [129],
      MACRO_IF: [129],
      MACRO_ELSEIF: [129],
      MACRO_ELSE: [129],
      MACRO_END_IF: [129],
      MOD: [129],
      NEXT: [129],
      NEW: [129],
      NOT: [129],
      NOTHING: [129],
      NULL: [129],
      ON_ERROR: [129],
      ON_LOCAL_ERROR: [129],
      ON: [129],
      OPTIONAL: [129],
      OPTION_BASE: [129],
      OPTION_EXPLICIT: [129],
      OPTION_COMPARE: [129],
      OPTION_PRIVATE_MODULE: [129],
      OR: [129],
      PARAMARRAY: [129],
      PRESERVE: [129],
      PRIVATE: [129],
      PROPERTY_GET: [129],
      PROPERTY_LET: [129],
      PROPERTY_SET: [129],
      PTRSAFE: [129],
      PUBLIC: [129],
      RAISEEVENT: [129],
      REDIM: [129],
      RESET: [129],
      RESUME: [129],
      RETURN: [129],
      SELECT: [129],
      SET: [129],
      SINGLE: [129],
      STATIC: [129],
      STEP: [129],
      STOP: [129],
      STRING: [129],
      SUB: [129],
      THEN: [129],
      TO: [129],
      TRUE: [129],
      TYPEOF: [129],
      UNTIL: [129],
      VARIANT: [129],
      WEND: [129],
      WHILE: [129],
      WITH: [129],
      WITHEVENTS: [129],
      XOR: [129],
      IMP: [129],
      IDENTIFIER: [129],
    },
    iCS_S_MembersCall_group_55: {
      ALIAS: [130],
      AND: [130],
      ATTRIBUTE: [130],
      AS: [130],
      BEGIN: [130],
      BOOLEAN: [130],
      BYVAL: [130],
      BYREF: [130],
      BYTE: [130],
      CALL: [130],
      CASE: [130],
      CONST: [130],
      DECLARE: [130],
      DEFBOOL: [130],
      DEFBYTE: [130],
      DEFDATE: [130],
      DEFDBL: [130],
      DEFDEC: [130],
      DEFCUR: [130],
      DEFINT: [130],
      DEFLNG: [130],
      DEFOBJ: [130],
      DEFSNG: [130],
      DEFSTR: [130],
      DEFVAR: [130],
      DIM: [130],
      DO: [130],
      DOUBLE: [130],
      EACH: [130],
      ELSE: [130],
      ELSEIF: [130],
      END_ENUM: [130],
      END_FUNCTION: [130],
      END_IF: [130],
      END_PROPERTY: [130],
      END_SELECT: [130],
      END_SUB: [130],
      END_TYPE: [130],
      END_WITH: [130],
      END: [130],
      ENUM: [130],
      EQV: [130],
      ERASE: [130],
      EVENT: [130],
      EXIT_DO: [130],
      EXIT_FOR: [130],
      EXIT_FUNCTION: [130],
      EXIT_PROPERTY: [130],
      EXIT_SUB: [130],
      FALSE: [130],
      FRIEND: [130],
      FOR: [130],
      FUNCTION: [130],
      GET: [130],
      GLOBAL: [130],
      GOSUB: [130],
      GOTO: [130],
      IF: [130],
      IMPLEMENTS: [130],
      IN: [130],
      ISNOT: [130],
      IS: [130],
      INTEGER: [130],
      LONG: [130],
      LOOP: [130],
      LEN: [130],
      LET: [130],
      LIB: [130],
      LIKE: [130],
      LSET: [130],
      MACRO_CONST: [130],
      MACRO_IF: [130],
      MACRO_ELSEIF: [130],
      MACRO_ELSE: [130],
      MACRO_END_IF: [130],
      MOD: [130],
      NEXT: [130],
      NEW: [130],
      NOT: [130],
      NOTHING: [130],
      NULL: [130],
      ON_ERROR: [130],
      ON_LOCAL_ERROR: [130],
      ON: [130],
      OPTIONAL: [130],
      OPTION_BASE: [130],
      OPTION_EXPLICIT: [130],
      OPTION_COMPARE: [130],
      OPTION_PRIVATE_MODULE: [130],
      OR: [130],
      PARAMARRAY: [130],
      PRESERVE: [130],
      PRIVATE: [130],
      PROPERTY_GET: [130],
      PROPERTY_LET: [130],
      PROPERTY_SET: [130],
      PTRSAFE: [130],
      PUBLIC: [130],
      RAISEEVENT: [130],
      REDIM: [130],
      RESET: [130],
      RESUME: [130],
      RETURN: [130],
      SELECT: [130],
      SET: [130],
      SINGLE: [130],
      STATIC: [130],
      STEP: [130],
      STOP: [130],
      STRING: [130],
      SUB: [130],
      THEN: [130],
      TO: [130],
      TRUE: [130],
      TYPEOF: [130],
      UNTIL: [130],
      VARIANT: [130],
      WEND: [130],
      WHILE: [130],
      WITH: [130],
      WITHEVENTS: [130],
      XOR: [130],
      IMP: [130],
      IDENTIFIER: [130],
      SPACE_DOT: [132],
    },
    iCS_S_MembersCall_group_def_60: {
      SPACE_DOT: [131],
    },
    iCS_S_MembersCall: {
      ALIAS: [133],
      AND: [133],
      ATTRIBUTE: [133],
      AS: [133],
      BEGIN: [133],
      BOOLEAN: [133],
      BYVAL: [133],
      BYREF: [133],
      BYTE: [133],
      CALL: [133],
      CASE: [133],
      CONST: [133],
      DECLARE: [133],
      DEFBOOL: [133],
      DEFBYTE: [133],
      DEFDATE: [133],
      DEFDBL: [133],
      DEFDEC: [133],
      DEFCUR: [133],
      DEFINT: [133],
      DEFLNG: [133],
      DEFOBJ: [133],
      DEFSNG: [133],
      DEFSTR: [133],
      DEFVAR: [133],
      DIM: [133],
      DO: [133],
      DOUBLE: [133],
      EACH: [133],
      ELSE: [133],
      ELSEIF: [133],
      END_ENUM: [133],
      END_FUNCTION: [133],
      END_IF: [133],
      END_PROPERTY: [133],
      END_SELECT: [133],
      END_SUB: [133],
      END_TYPE: [133],
      END_WITH: [133],
      END: [133],
      ENUM: [133],
      EQV: [133],
      ERASE: [133],
      EVENT: [133],
      EXIT_DO: [133],
      EXIT_FOR: [133],
      EXIT_FUNCTION: [133],
      EXIT_PROPERTY: [133],
      EXIT_SUB: [133],
      FALSE: [133],
      FRIEND: [133],
      FOR: [133],
      FUNCTION: [133],
      GET: [133],
      GLOBAL: [133],
      GOSUB: [133],
      GOTO: [133],
      IF: [133],
      IMPLEMENTS: [133],
      IN: [133],
      ISNOT: [133],
      IS: [133],
      INTEGER: [133],
      LONG: [133],
      LOOP: [133],
      LEN: [133],
      LET: [133],
      LIB: [133],
      LIKE: [133],
      LSET: [133],
      MACRO_CONST: [133],
      MACRO_IF: [133],
      MACRO_ELSEIF: [133],
      MACRO_ELSE: [133],
      MACRO_END_IF: [133],
      MOD: [133],
      NEXT: [133],
      NEW: [133],
      NOT: [133],
      NOTHING: [133],
      NULL: [133],
      ON_ERROR: [133],
      ON_LOCAL_ERROR: [133],
      ON: [133],
      OPTIONAL: [133],
      OPTION_BASE: [133],
      OPTION_EXPLICIT: [133],
      OPTION_COMPARE: [133],
      OPTION_PRIVATE_MODULE: [133],
      OR: [133],
      PARAMARRAY: [133],
      PRESERVE: [133],
      PRIVATE: [133],
      PROPERTY_GET: [133],
      PROPERTY_LET: [133],
      PROPERTY_SET: [133],
      PTRSAFE: [133],
      PUBLIC: [133],
      RAISEEVENT: [133],
      REDIM: [133],
      RESET: [133],
      RESUME: [133],
      RETURN: [133],
      SELECT: [133],
      SET: [133],
      SINGLE: [133],
      STATIC: [133],
      STEP: [133],
      STOP: [133],
      STRING: [133],
      SUB: [133],
      THEN: [133],
      TO: [133],
      TRUE: [133],
      TYPEOF: [133],
      UNTIL: [133],
      VARIANT: [133],
      WEND: [133],
      WHILE: [133],
      WITH: [133],
      WITHEVENTS: [133],
      XOR: [133],
      IMP: [133],
      IDENTIFIER: [133],
      SPACE_DOT: [133],
    },
    iCS_S_MemberCall_group_62: {
      ALIAS: [134, 135],
      AND: [134, 135],
      ATTRIBUTE: [134, 135],
      AS: [134, 135],
      BEGIN: [134, 135],
      BOOLEAN: [134, 135],
      BYVAL: [134, 135],
      BYREF: [134, 135],
      BYTE: [134, 135],
      CALL: [134, 135],
      CASE: [134, 135],
      CONST: [134, 135],
      DECLARE: [134, 135],
      DEFBOOL: [134, 135],
      DEFBYTE: [134, 135],
      DEFDATE: [134, 135],
      DEFDBL: [134, 135],
      DEFDEC: [134, 135],
      DEFCUR: [134, 135],
      DEFINT: [134, 135],
      DEFLNG: [134, 135],
      DEFOBJ: [134, 135],
      DEFSNG: [134, 135],
      DEFSTR: [134, 135],
      DEFVAR: [134, 135],
      DIM: [134, 135],
      DO: [134, 135],
      DOUBLE: [134, 135],
      EACH: [134, 135],
      ELSE: [134, 135],
      ELSEIF: [134, 135],
      END_ENUM: [134, 135],
      END_FUNCTION: [134, 135],
      END_IF: [134, 135],
      END_PROPERTY: [134, 135],
      END_SELECT: [134, 135],
      END_SUB: [134, 135],
      END_TYPE: [134, 135],
      END_WITH: [134, 135],
      END: [134, 135],
      ENUM: [134, 135],
      EQV: [134, 135],
      ERASE: [134, 135],
      EVENT: [134, 135],
      EXIT_DO: [134, 135],
      EXIT_FOR: [134, 135],
      EXIT_FUNCTION: [134, 135],
      EXIT_PROPERTY: [134, 135],
      EXIT_SUB: [134, 135],
      FALSE: [134, 135],
      FRIEND: [134, 135],
      FOR: [134, 135],
      FUNCTION: [134, 135],
      GET: [134, 135],
      GLOBAL: [134, 135],
      GOSUB: [134, 135],
      GOTO: [134, 135],
      IF: [134, 135],
      IMPLEMENTS: [134, 135],
      IN: [134, 135],
      ISNOT: [134, 135],
      IS: [134, 135],
      INTEGER: [134, 135],
      LONG: [134, 135],
      LOOP: [134, 135],
      LEN: [134, 135],
      LET: [134, 135],
      LIB: [134, 135],
      LIKE: [134, 135],
      LSET: [134, 135],
      MACRO_CONST: [134, 135],
      MACRO_IF: [134, 135],
      MACRO_ELSEIF: [134, 135],
      MACRO_ELSE: [134, 135],
      MACRO_END_IF: [134, 135],
      MOD: [134, 135],
      NEXT: [134, 135],
      NEW: [134, 135],
      NOT: [134, 135],
      NOTHING: [134, 135],
      NULL: [134, 135],
      ON_ERROR: [134, 135],
      ON_LOCAL_ERROR: [134, 135],
      ON: [134, 135],
      OPTIONAL: [134, 135],
      OPTION_BASE: [134, 135],
      OPTION_EXPLICIT: [134, 135],
      OPTION_COMPARE: [134, 135],
      OPTION_PRIVATE_MODULE: [134, 135],
      OR: [134, 135],
      PARAMARRAY: [134, 135],
      PRESERVE: [134, 135],
      PRIVATE: [134, 135],
      PROPERTY_GET: [134, 135],
      PROPERTY_LET: [134, 135],
      PROPERTY_SET: [134, 135],
      PTRSAFE: [134, 135],
      PUBLIC: [134, 135],
      RAISEEVENT: [134, 135],
      REDIM: [134, 135],
      RESET: [134, 135],
      RESUME: [134, 135],
      RETURN: [134, 135],
      SELECT: [134, 135],
      SET: [134, 135],
      SINGLE: [134, 135],
      STATIC: [134, 135],
      STEP: [134, 135],
      STOP: [134, 135],
      STRING: [134, 135],
      SUB: [134, 135],
      THEN: [134, 135],
      TO: [134, 135],
      TRUE: [134, 135],
      TYPEOF: [134, 135],
      UNTIL: [134, 135],
      VARIANT: [134, 135],
      WEND: [134, 135],
      WHILE: [134, 135],
      WITH: [134, 135],
      WITHEVENTS: [134, 135],
      XOR: [134, 135],
      IMP: [134, 135],
      IDENTIFIER: [134, 135],
    },
    iCS_S_MemberCall: {
      '.': [136],
    },
    iCS_S_SpaceMemberCall_group_63: {
      ALIAS: [137, 138],
      AND: [137, 138],
      ATTRIBUTE: [137, 138],
      AS: [137, 138],
      BEGIN: [137, 138],
      BOOLEAN: [137, 138],
      BYVAL: [137, 138],
      BYREF: [137, 138],
      BYTE: [137, 138],
      CALL: [137, 138],
      CASE: [137, 138],
      CONST: [137, 138],
      DECLARE: [137, 138],
      DEFBOOL: [137, 138],
      DEFBYTE: [137, 138],
      DEFDATE: [137, 138],
      DEFDBL: [137, 138],
      DEFDEC: [137, 138],
      DEFCUR: [137, 138],
      DEFINT: [137, 138],
      DEFLNG: [137, 138],
      DEFOBJ: [137, 138],
      DEFSNG: [137, 138],
      DEFSTR: [137, 138],
      DEFVAR: [137, 138],
      DIM: [137, 138],
      DO: [137, 138],
      DOUBLE: [137, 138],
      EACH: [137, 138],
      ELSE: [137, 138],
      ELSEIF: [137, 138],
      END_ENUM: [137, 138],
      END_FUNCTION: [137, 138],
      END_IF: [137, 138],
      END_PROPERTY: [137, 138],
      END_SELECT: [137, 138],
      END_SUB: [137, 138],
      END_TYPE: [137, 138],
      END_WITH: [137, 138],
      END: [137, 138],
      ENUM: [137, 138],
      EQV: [137, 138],
      ERASE: [137, 138],
      EVENT: [137, 138],
      EXIT_DO: [137, 138],
      EXIT_FOR: [137, 138],
      EXIT_FUNCTION: [137, 138],
      EXIT_PROPERTY: [137, 138],
      EXIT_SUB: [137, 138],
      FALSE: [137, 138],
      FRIEND: [137, 138],
      FOR: [137, 138],
      FUNCTION: [137, 138],
      GET: [137, 138],
      GLOBAL: [137, 138],
      GOSUB: [137, 138],
      GOTO: [137, 138],
      IF: [137, 138],
      IMPLEMENTS: [137, 138],
      IN: [137, 138],
      ISNOT: [137, 138],
      IS: [137, 138],
      INTEGER: [137, 138],
      LONG: [137, 138],
      LOOP: [137, 138],
      LEN: [137, 138],
      LET: [137, 138],
      LIB: [137, 138],
      LIKE: [137, 138],
      LSET: [137, 138],
      MACRO_CONST: [137, 138],
      MACRO_IF: [137, 138],
      MACRO_ELSEIF: [137, 138],
      MACRO_ELSE: [137, 138],
      MACRO_END_IF: [137, 138],
      MOD: [137, 138],
      NEXT: [137, 138],
      NEW: [137, 138],
      NOT: [137, 138],
      NOTHING: [137, 138],
      NULL: [137, 138],
      ON_ERROR: [137, 138],
      ON_LOCAL_ERROR: [137, 138],
      ON: [137, 138],
      OPTIONAL: [137, 138],
      OPTION_BASE: [137, 138],
      OPTION_EXPLICIT: [137, 138],
      OPTION_COMPARE: [137, 138],
      OPTION_PRIVATE_MODULE: [137, 138],
      OR: [137, 138],
      PARAMARRAY: [137, 138],
      PRESERVE: [137, 138],
      PRIVATE: [137, 138],
      PROPERTY_GET: [137, 138],
      PROPERTY_LET: [137, 138],
      PROPERTY_SET: [137, 138],
      PTRSAFE: [137, 138],
      PUBLIC: [137, 138],
      RAISEEVENT: [137, 138],
      REDIM: [137, 138],
      RESET: [137, 138],
      RESUME: [137, 138],
      RETURN: [137, 138],
      SELECT: [137, 138],
      SET: [137, 138],
      SINGLE: [137, 138],
      STATIC: [137, 138],
      STEP: [137, 138],
      STOP: [137, 138],
      STRING: [137, 138],
      SUB: [137, 138],
      THEN: [137, 138],
      TO: [137, 138],
      TRUE: [137, 138],
      TYPEOF: [137, 138],
      UNTIL: [137, 138],
      VARIANT: [137, 138],
      WEND: [137, 138],
      WHILE: [137, 138],
      WITH: [137, 138],
      WITHEVENTS: [137, 138],
      XOR: [137, 138],
      IMP: [137, 138],
      IDENTIFIER: [137, 138],
    },
    iCS_S_SpaceMemberCall: {
      SPACE_DOT: [139],
    },
    iCS_S_ProcedureOrArrayCall: {
      ALIAS: [140],
      AND: [140],
      ATTRIBUTE: [140],
      AS: [140],
      BEGIN: [140],
      BOOLEAN: [140],
      BYVAL: [140],
      BYREF: [140],
      BYTE: [140],
      CALL: [140],
      CASE: [140],
      CONST: [140],
      DECLARE: [140],
      DEFBOOL: [140],
      DEFBYTE: [140],
      DEFDATE: [140],
      DEFDBL: [140],
      DEFDEC: [140],
      DEFCUR: [140],
      DEFINT: [140],
      DEFLNG: [140],
      DEFOBJ: [140],
      DEFSNG: [140],
      DEFSTR: [140],
      DEFVAR: [140],
      DIM: [140],
      DO: [140],
      DOUBLE: [140],
      EACH: [140],
      ELSE: [140],
      ELSEIF: [140],
      END_ENUM: [140],
      END_FUNCTION: [140],
      END_IF: [140],
      END_PROPERTY: [140],
      END_SELECT: [140],
      END_SUB: [140],
      END_TYPE: [140],
      END_WITH: [140],
      END: [140],
      ENUM: [140],
      EQV: [140],
      ERASE: [140],
      EVENT: [140],
      EXIT_DO: [140],
      EXIT_FOR: [140],
      EXIT_FUNCTION: [140],
      EXIT_PROPERTY: [140],
      EXIT_SUB: [140],
      FALSE: [140],
      FRIEND: [140],
      FOR: [140],
      FUNCTION: [140],
      GET: [140],
      GLOBAL: [140],
      GOSUB: [140],
      GOTO: [140],
      IF: [140],
      IMPLEMENTS: [140],
      IN: [140],
      ISNOT: [140],
      IS: [140],
      INTEGER: [140],
      LONG: [140],
      LOOP: [140],
      LEN: [140],
      LET: [140],
      LIB: [140],
      LIKE: [140],
      LSET: [140],
      MACRO_CONST: [140],
      MACRO_IF: [140],
      MACRO_ELSEIF: [140],
      MACRO_ELSE: [140],
      MACRO_END_IF: [140],
      MOD: [140],
      NEXT: [140],
      NEW: [140],
      NOT: [140],
      NOTHING: [140],
      NULL: [140],
      ON_ERROR: [140],
      ON_LOCAL_ERROR: [140],
      ON: [140],
      OPTIONAL: [140],
      OPTION_BASE: [140],
      OPTION_EXPLICIT: [140],
      OPTION_COMPARE: [140],
      OPTION_PRIVATE_MODULE: [140],
      OR: [140],
      PARAMARRAY: [140],
      PRESERVE: [140],
      PRIVATE: [140],
      PROPERTY_GET: [140],
      PROPERTY_LET: [140],
      PROPERTY_SET: [140],
      PTRSAFE: [140],
      PUBLIC: [140],
      RAISEEVENT: [140],
      REDIM: [140],
      RESET: [140],
      RESUME: [140],
      RETURN: [140],
      SELECT: [140],
      SET: [140],
      SINGLE: [140],
      STATIC: [140],
      STEP: [140],
      STOP: [140],
      STRING: [140],
      SUB: [140],
      THEN: [140],
      TO: [140],
      TRUE: [140],
      TYPEOF: [140],
      UNTIL: [140],
      VARIANT: [140],
      WEND: [140],
      WHILE: [140],
      WITH: [140],
      WITHEVENTS: [140],
      XOR: [140],
      IMP: [140],
      IDENTIFIER: [140],
    },
    iCS_S_VariableOrProcedureCall: {
      ALIAS: [141],
      AND: [141],
      ATTRIBUTE: [141],
      AS: [141],
      BEGIN: [141],
      BOOLEAN: [141],
      BYVAL: [141],
      BYREF: [141],
      BYTE: [141],
      CALL: [141],
      CASE: [141],
      CONST: [141],
      DECLARE: [141],
      DEFBOOL: [141],
      DEFBYTE: [141],
      DEFDATE: [141],
      DEFDBL: [141],
      DEFDEC: [141],
      DEFCUR: [141],
      DEFINT: [141],
      DEFLNG: [141],
      DEFOBJ: [141],
      DEFSNG: [141],
      DEFSTR: [141],
      DEFVAR: [141],
      DIM: [141],
      DO: [141],
      DOUBLE: [141],
      EACH: [141],
      ELSE: [141],
      ELSEIF: [141],
      END_ENUM: [141],
      END_FUNCTION: [141],
      END_IF: [141],
      END_PROPERTY: [141],
      END_SELECT: [141],
      END_SUB: [141],
      END_TYPE: [141],
      END_WITH: [141],
      END: [141],
      ENUM: [141],
      EQV: [141],
      ERASE: [141],
      EVENT: [141],
      EXIT_DO: [141],
      EXIT_FOR: [141],
      EXIT_FUNCTION: [141],
      EXIT_PROPERTY: [141],
      EXIT_SUB: [141],
      FALSE: [141],
      FRIEND: [141],
      FOR: [141],
      FUNCTION: [141],
      GET: [141],
      GLOBAL: [141],
      GOSUB: [141],
      GOTO: [141],
      IF: [141],
      IMPLEMENTS: [141],
      IN: [141],
      ISNOT: [141],
      IS: [141],
      INTEGER: [141],
      LONG: [141],
      LOOP: [141],
      LEN: [141],
      LET: [141],
      LIB: [141],
      LIKE: [141],
      LSET: [141],
      MACRO_CONST: [141],
      MACRO_IF: [141],
      MACRO_ELSEIF: [141],
      MACRO_ELSE: [141],
      MACRO_END_IF: [141],
      MOD: [141],
      NEXT: [141],
      NEW: [141],
      NOT: [141],
      NOTHING: [141],
      NULL: [141],
      ON_ERROR: [141],
      ON_LOCAL_ERROR: [141],
      ON: [141],
      OPTIONAL: [141],
      OPTION_BASE: [141],
      OPTION_EXPLICIT: [141],
      OPTION_COMPARE: [141],
      OPTION_PRIVATE_MODULE: [141],
      OR: [141],
      PARAMARRAY: [141],
      PRESERVE: [141],
      PRIVATE: [141],
      PROPERTY_GET: [141],
      PROPERTY_LET: [141],
      PROPERTY_SET: [141],
      PTRSAFE: [141],
      PUBLIC: [141],
      RAISEEVENT: [141],
      REDIM: [141],
      RESET: [141],
      RESUME: [141],
      RETURN: [141],
      SELECT: [141],
      SET: [141],
      SINGLE: [141],
      STATIC: [141],
      STEP: [141],
      STOP: [141],
      STRING: [141],
      SUB: [141],
      THEN: [141],
      TO: [141],
      TRUE: [141],
      TYPEOF: [141],
      UNTIL: [141],
      VARIANT: [141],
      WEND: [141],
      WHILE: [141],
      WITH: [141],
      WITHEVENTS: [141],
      XOR: [141],
      IMP: [141],
      IDENTIFIER: [141],
    },
    dictionaryCallStmt: {
      '!': [142],
    },
    literal: {
      DOUBLELITERAL: [143],
      INTEGERLITERAL: [144],
      STRINGLITERAL: [145],
      NOTHING: [146],
      NULL: [147],
      TRUE: [148],
      FALSE: [149],
    },
    typeHint: {
      '&': [150],
      '%': [151],
      '#': [152],
      '!': [153],
      '@': [154],
      $: [155],
    },
    arg_group_def_67: {
      BYVAL: [156],
    },
    arg_group_66: {
      BYVAL: [157],
      BYREF: [159],
    },
    arg_group_def_68: {
      BYREF: [158],
    },
    arg_group_def_70: {
      LPAREN: [160],
    },
    arg: {
      OPTIONAL: [161],
      BYVAL: [161],
      BYREF: [161],
      PARAMARRAY: [161],
      ALIAS: [161],
      AND: [161],
      ATTRIBUTE: [161],
      AS: [161],
      BEGIN: [161],
      BOOLEAN: [161],
      BYTE: [161],
      CALL: [161],
      CASE: [161],
      CONST: [161],
      DECLARE: [161],
      DEFBOOL: [161],
      DEFBYTE: [161],
      DEFDATE: [161],
      DEFDBL: [161],
      DEFDEC: [161],
      DEFCUR: [161],
      DEFINT: [161],
      DEFLNG: [161],
      DEFOBJ: [161],
      DEFSNG: [161],
      DEFSTR: [161],
      DEFVAR: [161],
      DIM: [161],
      DO: [161],
      DOUBLE: [161],
      EACH: [161],
      ELSE: [161],
      ELSEIF: [161],
      END_ENUM: [161],
      END_FUNCTION: [161],
      END_IF: [161],
      END_PROPERTY: [161],
      END_SELECT: [161],
      END_SUB: [161],
      END_TYPE: [161],
      END_WITH: [161],
      END: [161],
      ENUM: [161],
      EQV: [161],
      ERASE: [161],
      EVENT: [161],
      EXIT_DO: [161],
      EXIT_FOR: [161],
      EXIT_FUNCTION: [161],
      EXIT_PROPERTY: [161],
      EXIT_SUB: [161],
      FALSE: [161],
      FRIEND: [161],
      FOR: [161],
      FUNCTION: [161],
      GET: [161],
      GLOBAL: [161],
      GOSUB: [161],
      GOTO: [161],
      IF: [161],
      IMPLEMENTS: [161],
      IN: [161],
      ISNOT: [161],
      IS: [161],
      INTEGER: [161],
      LONG: [161],
      LOOP: [161],
      LEN: [161],
      LET: [161],
      LIB: [161],
      LIKE: [161],
      LSET: [161],
      MACRO_CONST: [161],
      MACRO_IF: [161],
      MACRO_ELSEIF: [161],
      MACRO_ELSE: [161],
      MACRO_END_IF: [161],
      MOD: [161],
      NEXT: [161],
      NEW: [161],
      NOT: [161],
      NOTHING: [161],
      NULL: [161],
      ON_ERROR: [161],
      ON_LOCAL_ERROR: [161],
      ON: [161],
      OPTION_BASE: [161],
      OPTION_EXPLICIT: [161],
      OPTION_COMPARE: [161],
      OPTION_PRIVATE_MODULE: [161],
      OR: [161],
      PRESERVE: [161],
      PRIVATE: [161],
      PROPERTY_GET: [161],
      PROPERTY_LET: [161],
      PROPERTY_SET: [161],
      PTRSAFE: [161],
      PUBLIC: [161],
      RAISEEVENT: [161],
      REDIM: [161],
      RESET: [161],
      RESUME: [161],
      RETURN: [161],
      SELECT: [161],
      SET: [161],
      SINGLE: [161],
      STATIC: [161],
      STEP: [161],
      STOP: [161],
      STRING: [161],
      SUB: [161],
      THEN: [161],
      TO: [161],
      TRUE: [161],
      TYPEOF: [161],
      UNTIL: [161],
      VARIANT: [161],
      WEND: [161],
      WHILE: [161],
      WITH: [161],
      WITHEVENTS: [161],
      XOR: [161],
      IMP: [161],
      IDENTIFIER: [161],
    },
    argDefaultValue: {
      EQ: [162],
    },
    asTypeClause: {
      AS: [163],
    },
    type__group_def_72: {
      BOOLEAN: [164],
      BYTE: [164],
      DOUBLE: [164],
      INTEGER: [164],
      LONG: [164],
      SINGLE: [164],
      VARIANT: [164],
      STRING: [164],
    },
    type__group_71: {
      BOOLEAN: [165, 167],
      BYTE: [165, 167],
      DOUBLE: [165, 167],
      INTEGER: [165, 167],
      LONG: [165, 167],
      SINGLE: [165, 167],
      VARIANT: [165, 167],
      STRING: [165, 167],
      ALIAS: [167],
      AND: [167],
      ATTRIBUTE: [167],
      AS: [167],
      BEGIN: [167],
      BYVAL: [167],
      BYREF: [167],
      CALL: [167],
      CASE: [167],
      CONST: [167],
      DECLARE: [167],
      DEFBOOL: [167],
      DEFBYTE: [167],
      DEFDATE: [167],
      DEFDBL: [167],
      DEFDEC: [167],
      DEFCUR: [167],
      DEFINT: [167],
      DEFLNG: [167],
      DEFOBJ: [167],
      DEFSNG: [167],
      DEFSTR: [167],
      DEFVAR: [167],
      DIM: [167],
      DO: [167],
      EACH: [167],
      ELSE: [167],
      ELSEIF: [167],
      END_ENUM: [167],
      END_FUNCTION: [167],
      END_IF: [167],
      END_PROPERTY: [167],
      END_SELECT: [167],
      END_SUB: [167],
      END_TYPE: [167],
      END_WITH: [167],
      END: [167],
      ENUM: [167],
      EQV: [167],
      ERASE: [167],
      EVENT: [167],
      EXIT_DO: [167],
      EXIT_FOR: [167],
      EXIT_FUNCTION: [167],
      EXIT_PROPERTY: [167],
      EXIT_SUB: [167],
      FALSE: [167],
      FRIEND: [167],
      FOR: [167],
      FUNCTION: [167],
      GET: [167],
      GLOBAL: [167],
      GOSUB: [167],
      GOTO: [167],
      IF: [167],
      IMPLEMENTS: [167],
      IN: [167],
      ISNOT: [167],
      IS: [167],
      LOOP: [167],
      LEN: [167],
      LET: [167],
      LIB: [167],
      LIKE: [167],
      LSET: [167],
      MACRO_CONST: [167],
      MACRO_IF: [167],
      MACRO_ELSEIF: [167],
      MACRO_ELSE: [167],
      MACRO_END_IF: [167],
      MOD: [167],
      NEXT: [167],
      NEW: [167],
      NOT: [167],
      NOTHING: [167],
      NULL: [167],
      ON_ERROR: [167],
      ON_LOCAL_ERROR: [167],
      ON: [167],
      OPTIONAL: [167],
      OPTION_BASE: [167],
      OPTION_EXPLICIT: [167],
      OPTION_COMPARE: [167],
      OPTION_PRIVATE_MODULE: [167],
      OR: [167],
      PARAMARRAY: [167],
      PRESERVE: [167],
      PRIVATE: [167],
      PROPERTY_GET: [167],
      PROPERTY_LET: [167],
      PROPERTY_SET: [167],
      PTRSAFE: [167],
      PUBLIC: [167],
      RAISEEVENT: [167],
      REDIM: [167],
      RESET: [167],
      RESUME: [167],
      RETURN: [167],
      SELECT: [167],
      SET: [167],
      STATIC: [167],
      STEP: [167],
      STOP: [167],
      SUB: [167],
      THEN: [167],
      TO: [167],
      TRUE: [167],
      TYPEOF: [167],
      UNTIL: [167],
      WEND: [167],
      WHILE: [167],
      WITH: [167],
      WITHEVENTS: [167],
      XOR: [167],
      IMP: [167],
      IDENTIFIER: [167],
    },
    type__group_def_73: {
      ALIAS: [166],
      AND: [166],
      ATTRIBUTE: [166],
      AS: [166],
      BEGIN: [166],
      BOOLEAN: [166],
      BYVAL: [166],
      BYREF: [166],
      BYTE: [166],
      CALL: [166],
      CASE: [166],
      CONST: [166],
      DECLARE: [166],
      DEFBOOL: [166],
      DEFBYTE: [166],
      DEFDATE: [166],
      DEFDBL: [166],
      DEFDEC: [166],
      DEFCUR: [166],
      DEFINT: [166],
      DEFLNG: [166],
      DEFOBJ: [166],
      DEFSNG: [166],
      DEFSTR: [166],
      DEFVAR: [166],
      DIM: [166],
      DO: [166],
      DOUBLE: [166],
      EACH: [166],
      ELSE: [166],
      ELSEIF: [166],
      END_ENUM: [166],
      END_FUNCTION: [166],
      END_IF: [166],
      END_PROPERTY: [166],
      END_SELECT: [166],
      END_SUB: [166],
      END_TYPE: [166],
      END_WITH: [166],
      END: [166],
      ENUM: [166],
      EQV: [166],
      ERASE: [166],
      EVENT: [166],
      EXIT_DO: [166],
      EXIT_FOR: [166],
      EXIT_FUNCTION: [166],
      EXIT_PROPERTY: [166],
      EXIT_SUB: [166],
      FALSE: [166],
      FRIEND: [166],
      FOR: [166],
      FUNCTION: [166],
      GET: [166],
      GLOBAL: [166],
      GOSUB: [166],
      GOTO: [166],
      IF: [166],
      IMPLEMENTS: [166],
      IN: [166],
      ISNOT: [166],
      IS: [166],
      INTEGER: [166],
      LONG: [166],
      LOOP: [166],
      LEN: [166],
      LET: [166],
      LIB: [166],
      LIKE: [166],
      LSET: [166],
      MACRO_CONST: [166],
      MACRO_IF: [166],
      MACRO_ELSEIF: [166],
      MACRO_ELSE: [166],
      MACRO_END_IF: [166],
      MOD: [166],
      NEXT: [166],
      NEW: [166],
      NOT: [166],
      NOTHING: [166],
      NULL: [166],
      ON_ERROR: [166],
      ON_LOCAL_ERROR: [166],
      ON: [166],
      OPTIONAL: [166],
      OPTION_BASE: [166],
      OPTION_EXPLICIT: [166],
      OPTION_COMPARE: [166],
      OPTION_PRIVATE_MODULE: [166],
      OR: [166],
      PARAMARRAY: [166],
      PRESERVE: [166],
      PRIVATE: [166],
      PROPERTY_GET: [166],
      PROPERTY_LET: [166],
      PROPERTY_SET: [166],
      PTRSAFE: [166],
      PUBLIC: [166],
      RAISEEVENT: [166],
      REDIM: [166],
      RESET: [166],
      RESUME: [166],
      RETURN: [166],
      SELECT: [166],
      SET: [166],
      SINGLE: [166],
      STATIC: [166],
      STEP: [166],
      STOP: [166],
      STRING: [166],
      SUB: [166],
      THEN: [166],
      TO: [166],
      TRUE: [166],
      TYPEOF: [166],
      UNTIL: [166],
      VARIANT: [166],
      WEND: [166],
      WHILE: [166],
      WITH: [166],
      WITHEVENTS: [166],
      XOR: [166],
      IMP: [166],
      IDENTIFIER: [166],
    },
    type_: {
      BOOLEAN: [168],
      BYTE: [168],
      DOUBLE: [168],
      INTEGER: [168],
      LONG: [168],
      SINGLE: [168],
      VARIANT: [168],
      STRING: [168],
      ALIAS: [168],
      AND: [168],
      ATTRIBUTE: [168],
      AS: [168],
      BEGIN: [168],
      BYVAL: [168],
      BYREF: [168],
      CALL: [168],
      CASE: [168],
      CONST: [168],
      DECLARE: [168],
      DEFBOOL: [168],
      DEFBYTE: [168],
      DEFDATE: [168],
      DEFDBL: [168],
      DEFDEC: [168],
      DEFCUR: [168],
      DEFINT: [168],
      DEFLNG: [168],
      DEFOBJ: [168],
      DEFSNG: [168],
      DEFSTR: [168],
      DEFVAR: [168],
      DIM: [168],
      DO: [168],
      EACH: [168],
      ELSE: [168],
      ELSEIF: [168],
      END_ENUM: [168],
      END_FUNCTION: [168],
      END_IF: [168],
      END_PROPERTY: [168],
      END_SELECT: [168],
      END_SUB: [168],
      END_TYPE: [168],
      END_WITH: [168],
      END: [168],
      ENUM: [168],
      EQV: [168],
      ERASE: [168],
      EVENT: [168],
      EXIT_DO: [168],
      EXIT_FOR: [168],
      EXIT_FUNCTION: [168],
      EXIT_PROPERTY: [168],
      EXIT_SUB: [168],
      FALSE: [168],
      FRIEND: [168],
      FOR: [168],
      FUNCTION: [168],
      GET: [168],
      GLOBAL: [168],
      GOSUB: [168],
      GOTO: [168],
      IF: [168],
      IMPLEMENTS: [168],
      IN: [168],
      ISNOT: [168],
      IS: [168],
      LOOP: [168],
      LEN: [168],
      LET: [168],
      LIB: [168],
      LIKE: [168],
      LSET: [168],
      MACRO_CONST: [168],
      MACRO_IF: [168],
      MACRO_ELSEIF: [168],
      MACRO_ELSE: [168],
      MACRO_END_IF: [168],
      MOD: [168],
      NEXT: [168],
      NEW: [168],
      NOT: [168],
      NOTHING: [168],
      NULL: [168],
      ON_ERROR: [168],
      ON_LOCAL_ERROR: [168],
      ON: [168],
      OPTIONAL: [168],
      OPTION_BASE: [168],
      OPTION_EXPLICIT: [168],
      OPTION_COMPARE: [168],
      OPTION_PRIVATE_MODULE: [168],
      OR: [168],
      PARAMARRAY: [168],
      PRESERVE: [168],
      PRIVATE: [168],
      PROPERTY_GET: [168],
      PROPERTY_LET: [168],
      PROPERTY_SET: [168],
      PTRSAFE: [168],
      PUBLIC: [168],
      RAISEEVENT: [168],
      REDIM: [168],
      RESET: [168],
      RESUME: [168],
      RETURN: [168],
      SELECT: [168],
      SET: [168],
      STATIC: [168],
      STEP: [168],
      STOP: [168],
      SUB: [168],
      THEN: [168],
      TO: [168],
      TRUE: [168],
      TYPEOF: [168],
      UNTIL: [168],
      WEND: [168],
      WHILE: [168],
      WITH: [168],
      WITHEVENTS: [168],
      XOR: [168],
      IMP: [168],
      IDENTIFIER: [168],
    },
    complexType_group_def_77: {
      '.': [169],
    },
    complexType_group_76: {
      '.': [170],
      '!': [172],
    },
    complexType_group_def_78: {
      '!': [171],
    },
    complexType_group_def_79: {
      '.': [173],
      '!': [173],
    },
    complexType: {
      ALIAS: [174],
      AND: [174],
      ATTRIBUTE: [174],
      AS: [174],
      BEGIN: [174],
      BOOLEAN: [174],
      BYVAL: [174],
      BYREF: [174],
      BYTE: [174],
      CALL: [174],
      CASE: [174],
      CONST: [174],
      DECLARE: [174],
      DEFBOOL: [174],
      DEFBYTE: [174],
      DEFDATE: [174],
      DEFDBL: [174],
      DEFDEC: [174],
      DEFCUR: [174],
      DEFINT: [174],
      DEFLNG: [174],
      DEFOBJ: [174],
      DEFSNG: [174],
      DEFSTR: [174],
      DEFVAR: [174],
      DIM: [174],
      DO: [174],
      DOUBLE: [174],
      EACH: [174],
      ELSE: [174],
      ELSEIF: [174],
      END_ENUM: [174],
      END_FUNCTION: [174],
      END_IF: [174],
      END_PROPERTY: [174],
      END_SELECT: [174],
      END_SUB: [174],
      END_TYPE: [174],
      END_WITH: [174],
      END: [174],
      ENUM: [174],
      EQV: [174],
      ERASE: [174],
      EVENT: [174],
      EXIT_DO: [174],
      EXIT_FOR: [174],
      EXIT_FUNCTION: [174],
      EXIT_PROPERTY: [174],
      EXIT_SUB: [174],
      FALSE: [174],
      FRIEND: [174],
      FOR: [174],
      FUNCTION: [174],
      GET: [174],
      GLOBAL: [174],
      GOSUB: [174],
      GOTO: [174],
      IF: [174],
      IMPLEMENTS: [174],
      IN: [174],
      ISNOT: [174],
      IS: [174],
      INTEGER: [174],
      LONG: [174],
      LOOP: [174],
      LEN: [174],
      LET: [174],
      LIB: [174],
      LIKE: [174],
      LSET: [174],
      MACRO_CONST: [174],
      MACRO_IF: [174],
      MACRO_ELSEIF: [174],
      MACRO_ELSE: [174],
      MACRO_END_IF: [174],
      MOD: [174],
      NEXT: [174],
      NEW: [174],
      NOT: [174],
      NOTHING: [174],
      NULL: [174],
      ON_ERROR: [174],
      ON_LOCAL_ERROR: [174],
      ON: [174],
      OPTIONAL: [174],
      OPTION_BASE: [174],
      OPTION_EXPLICIT: [174],
      OPTION_COMPARE: [174],
      OPTION_PRIVATE_MODULE: [174],
      OR: [174],
      PARAMARRAY: [174],
      PRESERVE: [174],
      PRIVATE: [174],
      PROPERTY_GET: [174],
      PROPERTY_LET: [174],
      PROPERTY_SET: [174],
      PTRSAFE: [174],
      PUBLIC: [174],
      RAISEEVENT: [174],
      REDIM: [174],
      RESET: [174],
      RESUME: [174],
      RETURN: [174],
      SELECT: [174],
      SET: [174],
      SINGLE: [174],
      STATIC: [174],
      STEP: [174],
      STOP: [174],
      STRING: [174],
      SUB: [174],
      THEN: [174],
      TO: [174],
      TRUE: [174],
      TYPEOF: [174],
      UNTIL: [174],
      VARIANT: [174],
      WEND: [174],
      WHILE: [174],
      WITH: [174],
      WITHEVENTS: [174],
      XOR: [174],
      IMP: [174],
      IDENTIFIER: [174],
    },
    baseType: {
      BOOLEAN: [175],
      BYTE: [176],
      DOUBLE: [177],
      INTEGER: [178],
      LONG: [179],
      SINGLE: [180],
      VARIANT: [181],
      STRING: [183],
    },
    baseType_group_def_81: {
      MULT: [182],
    },
    fieldLength: {
      MULT: [184, 185],
    },
    ambiguousIdentifier: {
      ALIAS: [186],
      AND: [187],
      ATTRIBUTE: [188],
      AS: [189],
      BEGIN: [190],
      BOOLEAN: [191],
      BYVAL: [192],
      BYREF: [193],
      BYTE: [194],
      CALL: [195],
      CASE: [196],
      CONST: [197],
      DECLARE: [198],
      DEFBOOL: [199],
      DEFBYTE: [200],
      DEFDATE: [201],
      DEFDBL: [202],
      DEFDEC: [203],
      DEFCUR: [204],
      DEFINT: [205],
      DEFLNG: [206],
      DEFOBJ: [207],
      DEFSNG: [208],
      DEFSTR: [209],
      DEFVAR: [210],
      DIM: [211],
      DO: [212],
      DOUBLE: [213],
      EACH: [214],
      ELSE: [215],
      ELSEIF: [216],
      END_ENUM: [217],
      END_FUNCTION: [218],
      END_IF: [219],
      END_PROPERTY: [220],
      END_SELECT: [221],
      END_SUB: [222],
      END_TYPE: [223],
      END_WITH: [224],
      END: [225],
      ENUM: [226],
      EQV: [227],
      ERASE: [228],
      EVENT: [229],
      EXIT_DO: [230],
      EXIT_FOR: [231],
      EXIT_FUNCTION: [232],
      EXIT_PROPERTY: [233],
      EXIT_SUB: [234],
      FALSE: [235],
      FRIEND: [236],
      FOR: [237],
      FUNCTION: [238],
      GET: [239],
      GLOBAL: [240],
      GOSUB: [241],
      GOTO: [242],
      IF: [243],
      IMPLEMENTS: [244],
      IN: [245],
      ISNOT: [246],
      IS: [247],
      INTEGER: [248],
      LONG: [249],
      LOOP: [250],
      LEN: [251],
      LET: [252],
      LIB: [253],
      LIKE: [254],
      LSET: [255],
      MACRO_CONST: [256],
      MACRO_IF: [257],
      MACRO_ELSEIF: [258],
      MACRO_ELSE: [259],
      MACRO_END_IF: [260],
      MOD: [261],
      NEXT: [262],
      NEW: [263],
      NOT: [264],
      NOTHING: [265],
      NULL: [266],
      ON_ERROR: [267],
      ON_LOCAL_ERROR: [268],
      ON: [269],
      OPTIONAL: [270],
      OPTION_BASE: [271],
      OPTION_EXPLICIT: [272],
      OPTION_COMPARE: [273],
      OPTION_PRIVATE_MODULE: [274],
      OR: [275],
      PARAMARRAY: [276],
      PRESERVE: [277],
      PRIVATE: [278],
      PROPERTY_GET: [279],
      PROPERTY_LET: [280],
      PROPERTY_SET: [281],
      PTRSAFE: [282],
      PUBLIC: [283],
      RAISEEVENT: [284],
      REDIM: [285],
      RESET: [286],
      RESUME: [287],
      RETURN: [288],
      SELECT: [289],
      SET: [290],
      SINGLE: [291],
      STATIC: [292],
      STEP: [293],
      STOP: [294],
      STRING: [295],
      SUB: [296],
      THEN: [297],
      TO: [298],
      TRUE: [299],
      TYPEOF: [300],
      UNTIL: [301],
      VARIANT: [302],
      WEND: [303],
      WHILE: [304],
      WITH: [305],
      WITHEVENTS: [306],
      XOR: [307],
      IMP: [308],
      IDENTIFIER: [309],
    },
    valueStmt: {
      DOUBLELITERAL: [310],
      INTEGERLITERAL: [310],
      STRINGLITERAL: [310],
      NOTHING: [310],
      NULL: [310],
      TRUE: [310],
      FALSE: [310],
      SPACE_DOT: [310],
      ALIAS: [310],
      AND: [310],
      ATTRIBUTE: [310],
      AS: [310],
      BEGIN: [310],
      BOOLEAN: [310],
      BYVAL: [310],
      BYREF: [310],
      BYTE: [310],
      CALL: [310],
      CASE: [310],
      CONST: [310],
      DECLARE: [310],
      DEFBOOL: [310],
      DEFBYTE: [310],
      DEFDATE: [310],
      DEFDBL: [310],
      DEFDEC: [310],
      DEFCUR: [310],
      DEFINT: [310],
      DEFLNG: [310],
      DEFOBJ: [310],
      DEFSNG: [310],
      DEFSTR: [310],
      DEFVAR: [310],
      DIM: [310],
      DO: [310],
      DOUBLE: [310],
      EACH: [310],
      ELSE: [310],
      ELSEIF: [310],
      END_ENUM: [310],
      END_FUNCTION: [310],
      END_IF: [310],
      END_PROPERTY: [310],
      END_SELECT: [310],
      END_SUB: [310],
      END_TYPE: [310],
      END_WITH: [310],
      END: [310],
      ENUM: [310],
      EQV: [310],
      ERASE: [310],
      EVENT: [310],
      EXIT_DO: [310],
      EXIT_FOR: [310],
      EXIT_FUNCTION: [310],
      EXIT_PROPERTY: [310],
      EXIT_SUB: [310],
      FRIEND: [310],
      FOR: [310],
      FUNCTION: [310],
      GET: [310],
      GLOBAL: [310],
      GOSUB: [310],
      GOTO: [310],
      IF: [310],
      IMPLEMENTS: [310],
      IN: [310],
      ISNOT: [310],
      IS: [310],
      INTEGER: [310],
      LONG: [310],
      LOOP: [310],
      LEN: [310],
      LET: [310],
      LIB: [310],
      LIKE: [310],
      LSET: [310],
      MACRO_CONST: [310],
      MACRO_IF: [310],
      MACRO_ELSEIF: [310],
      MACRO_ELSE: [310],
      MACRO_END_IF: [310],
      MOD: [310],
      NEXT: [310],
      NEW: [310],
      NOT: [310, 311],
      ON_ERROR: [310],
      ON_LOCAL_ERROR: [310],
      ON: [310],
      OPTIONAL: [310],
      OPTION_BASE: [310],
      OPTION_EXPLICIT: [310],
      OPTION_COMPARE: [310],
      OPTION_PRIVATE_MODULE: [310],
      OR: [310],
      PARAMARRAY: [310],
      PRESERVE: [310],
      PRIVATE: [310],
      PROPERTY_GET: [310],
      PROPERTY_LET: [310],
      PROPERTY_SET: [310],
      PTRSAFE: [310],
      PUBLIC: [310],
      RAISEEVENT: [310],
      REDIM: [310],
      RESET: [310],
      RESUME: [310],
      RETURN: [310],
      SELECT: [310],
      SET: [310],
      SINGLE: [310],
      STATIC: [310],
      STEP: [310],
      STOP: [310],
      STRING: [310],
      SUB: [310],
      THEN: [310],
      TO: [310],
      TYPEOF: [310],
      UNTIL: [310],
      VARIANT: [310],
      WEND: [310],
      WHILE: [310],
      WITH: [310],
      WITHEVENTS: [310],
      XOR: [310],
      IMP: [310],
      IDENTIFIER: [310],
      LPAREN: [310],
      MINUS: [310],
      PLUS: [310],
    },
    '(valueStmt_p_2)1_': {
      IS: [312, 339],
      ISNOT: [314, 339],
      GEQ: [315, 339],
      LEQ: [316, 339],
      GT: [317, 339],
      LT: [318, 339],
      NEQ: [319, 339],
      EQ: [320, 339],
      ',': [339],
      NEWLINE: [339],
      COMMENT: [339],
      REMCOMMENT: [339],
      COLON: [339],
      ALIAS: [339],
      AND: [339],
      ATTRIBUTE: [339],
      AS: [339],
      BEGIN: [339],
      BOOLEAN: [339],
      BYVAL: [339],
      BYREF: [339],
      BYTE: [339],
      CALL: [339],
      CASE: [339],
      CONST: [339],
      DECLARE: [339],
      DEFBOOL: [339],
      DEFBYTE: [339],
      DEFDATE: [339],
      DEFDBL: [339],
      DEFDEC: [339],
      DEFCUR: [339],
      DEFINT: [339],
      DEFLNG: [339],
      DEFOBJ: [339],
      DEFSNG: [339],
      DEFSTR: [339],
      DEFVAR: [339],
      DIM: [339],
      DO: [339],
      DOUBLE: [339],
      EACH: [339],
      ELSE: [339],
      ELSEIF: [339],
      END_ENUM: [339],
      END_FUNCTION: [339],
      END_IF: [339],
      END_PROPERTY: [339],
      END_SELECT: [339],
      END_SUB: [339],
      END_TYPE: [339],
      END_WITH: [339],
      END: [339],
      ENUM: [339],
      EQV: [339],
      ERASE: [339],
      EVENT: [339],
      EXIT_DO: [339],
      EXIT_FOR: [339],
      EXIT_FUNCTION: [339],
      EXIT_PROPERTY: [339],
      EXIT_SUB: [339],
      FALSE: [339],
      FRIEND: [339],
      FOR: [339],
      FUNCTION: [339],
      GET: [339],
      GLOBAL: [339],
      GOSUB: [339],
      GOTO: [339],
      IF: [339],
      IMPLEMENTS: [339],
      IN: [339],
      INTEGER: [339],
      LONG: [339],
      LOOP: [339],
      LEN: [339],
      LET: [339],
      LIB: [339],
      LIKE: [339],
      LSET: [339],
      MACRO_CONST: [339],
      MACRO_IF: [339],
      MACRO_ELSEIF: [339],
      MACRO_ELSE: [339],
      MACRO_END_IF: [339],
      MOD: [339],
      NEXT: [339],
      NEW: [339],
      NOT: [339],
      NOTHING: [339],
      NULL: [339],
      ON_ERROR: [339],
      ON_LOCAL_ERROR: [339],
      ON: [339],
      OPTIONAL: [339],
      OPTION_BASE: [339],
      OPTION_EXPLICIT: [339],
      OPTION_COMPARE: [339],
      OPTION_PRIVATE_MODULE: [339],
      OR: [339],
      PARAMARRAY: [339],
      PRESERVE: [339],
      PRIVATE: [339],
      PROPERTY_GET: [339],
      PROPERTY_LET: [339],
      PROPERTY_SET: [339],
      PTRSAFE: [339],
      PUBLIC: [339],
      RAISEEVENT: [339],
      REDIM: [339],
      RESET: [339],
      RESUME: [339],
      RETURN: [339],
      SELECT: [339],
      SET: [339],
      SINGLE: [339],
      STATIC: [339],
      STEP: [339],
      STOP: [339],
      STRING: [339],
      SUB: [339],
      THEN: [339],
      TO: [339],
      TRUE: [339],
      TYPEOF: [339],
      UNTIL: [339],
      VARIANT: [339],
      WEND: [339],
      WHILE: [339],
      WITH: [339],
      WITHEVENTS: [339],
      XOR: [339],
      IMP: [339],
      IDENTIFIER: [339],
      SPACE_DOT: [339],
      RPAREN: [339],
      '!': [339],
      LPAREN: [339],
      POW: [339],
      MULT: [339],
      DIV: [339],
      IDIV: [339],
      PLUS: [339],
      MINUS: [339],
      AMPERSAND: [339],
      $EOF: [339],
    },
    valueStmt_p_2: {
      DOUBLELITERAL: [313],
      INTEGERLITERAL: [313],
      STRINGLITERAL: [313],
      NOTHING: [313],
      NULL: [313],
      TRUE: [313],
      FALSE: [313],
      SPACE_DOT: [313],
      ALIAS: [313],
      AND: [313],
      ATTRIBUTE: [313],
      AS: [313],
      BEGIN: [313],
      BOOLEAN: [313],
      BYVAL: [313],
      BYREF: [313],
      BYTE: [313],
      CALL: [313],
      CASE: [313],
      CONST: [313],
      DECLARE: [313],
      DEFBOOL: [313],
      DEFBYTE: [313],
      DEFDATE: [313],
      DEFDBL: [313],
      DEFDEC: [313],
      DEFCUR: [313],
      DEFINT: [313],
      DEFLNG: [313],
      DEFOBJ: [313],
      DEFSNG: [313],
      DEFSTR: [313],
      DEFVAR: [313],
      DIM: [313],
      DO: [313],
      DOUBLE: [313],
      EACH: [313],
      ELSE: [313],
      ELSEIF: [313],
      END_ENUM: [313],
      END_FUNCTION: [313],
      END_IF: [313],
      END_PROPERTY: [313],
      END_SELECT: [313],
      END_SUB: [313],
      END_TYPE: [313],
      END_WITH: [313],
      END: [313],
      ENUM: [313],
      EQV: [313],
      ERASE: [313],
      EVENT: [313],
      EXIT_DO: [313],
      EXIT_FOR: [313],
      EXIT_FUNCTION: [313],
      EXIT_PROPERTY: [313],
      EXIT_SUB: [313],
      FRIEND: [313],
      FOR: [313],
      FUNCTION: [313],
      GET: [313],
      GLOBAL: [313],
      GOSUB: [313],
      GOTO: [313],
      IF: [313],
      IMPLEMENTS: [313],
      IN: [313],
      ISNOT: [313],
      IS: [313],
      INTEGER: [313],
      LONG: [313],
      LOOP: [313],
      LEN: [313],
      LET: [313],
      LIB: [313],
      LIKE: [313],
      LSET: [313],
      MACRO_CONST: [313],
      MACRO_IF: [313],
      MACRO_ELSEIF: [313],
      MACRO_ELSE: [313],
      MACRO_END_IF: [313],
      MOD: [313],
      NEXT: [313],
      NEW: [313],
      NOT: [313],
      ON_ERROR: [313],
      ON_LOCAL_ERROR: [313],
      ON: [313],
      OPTIONAL: [313],
      OPTION_BASE: [313],
      OPTION_EXPLICIT: [313],
      OPTION_COMPARE: [313],
      OPTION_PRIVATE_MODULE: [313],
      OR: [313],
      PARAMARRAY: [313],
      PRESERVE: [313],
      PRIVATE: [313],
      PROPERTY_GET: [313],
      PROPERTY_LET: [313],
      PROPERTY_SET: [313],
      PTRSAFE: [313],
      PUBLIC: [313],
      RAISEEVENT: [313],
      REDIM: [313],
      RESET: [313],
      RESUME: [313],
      RETURN: [313],
      SELECT: [313],
      SET: [313],
      SINGLE: [313],
      STATIC: [313],
      STEP: [313],
      STOP: [313],
      STRING: [313],
      SUB: [313],
      THEN: [313],
      TO: [313],
      TYPEOF: [313],
      UNTIL: [313],
      VARIANT: [313],
      WEND: [313],
      WHILE: [313],
      WITH: [313],
      WITHEVENTS: [313],
      XOR: [313],
      IMP: [313],
      IDENTIFIER: [313],
      LPAREN: [313],
      MINUS: [313],
      PLUS: [313],
    },
    '(valueStmt_p_3)1_': {
      XOR: [321, 340],
      OR: [323, 340],
      AND: [324, 340],
      IS: [340],
      ISNOT: [340],
      GEQ: [340],
      LEQ: [340],
      GT: [340],
      LT: [340],
      NEQ: [340],
      EQ: [340],
      ',': [340],
      NEWLINE: [340],
      COMMENT: [340],
      REMCOMMENT: [340],
      COLON: [340],
      ALIAS: [340],
      ATTRIBUTE: [340],
      AS: [340],
      BEGIN: [340],
      BOOLEAN: [340],
      BYVAL: [340],
      BYREF: [340],
      BYTE: [340],
      CALL: [340],
      CASE: [340],
      CONST: [340],
      DECLARE: [340],
      DEFBOOL: [340],
      DEFBYTE: [340],
      DEFDATE: [340],
      DEFDBL: [340],
      DEFDEC: [340],
      DEFCUR: [340],
      DEFINT: [340],
      DEFLNG: [340],
      DEFOBJ: [340],
      DEFSNG: [340],
      DEFSTR: [340],
      DEFVAR: [340],
      DIM: [340],
      DO: [340],
      DOUBLE: [340],
      EACH: [340],
      ELSE: [340],
      ELSEIF: [340],
      END_ENUM: [340],
      END_FUNCTION: [340],
      END_IF: [340],
      END_PROPERTY: [340],
      END_SELECT: [340],
      END_SUB: [340],
      END_TYPE: [340],
      END_WITH: [340],
      END: [340],
      ENUM: [340],
      EQV: [340],
      ERASE: [340],
      EVENT: [340],
      EXIT_DO: [340],
      EXIT_FOR: [340],
      EXIT_FUNCTION: [340],
      EXIT_PROPERTY: [340],
      EXIT_SUB: [340],
      FALSE: [340],
      FRIEND: [340],
      FOR: [340],
      FUNCTION: [340],
      GET: [340],
      GLOBAL: [340],
      GOSUB: [340],
      GOTO: [340],
      IF: [340],
      IMPLEMENTS: [340],
      IN: [340],
      INTEGER: [340],
      LONG: [340],
      LOOP: [340],
      LEN: [340],
      LET: [340],
      LIB: [340],
      LIKE: [340],
      LSET: [340],
      MACRO_CONST: [340],
      MACRO_IF: [340],
      MACRO_ELSEIF: [340],
      MACRO_ELSE: [340],
      MACRO_END_IF: [340],
      MOD: [340],
      NEXT: [340],
      NEW: [340],
      NOT: [340],
      NOTHING: [340],
      NULL: [340],
      ON_ERROR: [340],
      ON_LOCAL_ERROR: [340],
      ON: [340],
      OPTIONAL: [340],
      OPTION_BASE: [340],
      OPTION_EXPLICIT: [340],
      OPTION_COMPARE: [340],
      OPTION_PRIVATE_MODULE: [340],
      PARAMARRAY: [340],
      PRESERVE: [340],
      PRIVATE: [340],
      PROPERTY_GET: [340],
      PROPERTY_LET: [340],
      PROPERTY_SET: [340],
      PTRSAFE: [340],
      PUBLIC: [340],
      RAISEEVENT: [340],
      REDIM: [340],
      RESET: [340],
      RESUME: [340],
      RETURN: [340],
      SELECT: [340],
      SET: [340],
      SINGLE: [340],
      STATIC: [340],
      STEP: [340],
      STOP: [340],
      STRING: [340],
      SUB: [340],
      THEN: [340],
      TO: [340],
      TRUE: [340],
      TYPEOF: [340],
      UNTIL: [340],
      VARIANT: [340],
      WEND: [340],
      WHILE: [340],
      WITH: [340],
      WITHEVENTS: [340],
      IMP: [340],
      IDENTIFIER: [340],
      SPACE_DOT: [340],
      RPAREN: [340],
      '!': [340],
      LPAREN: [340],
      POW: [340],
      MULT: [340],
      DIV: [340],
      IDIV: [340],
      PLUS: [340],
      MINUS: [340],
      AMPERSAND: [340],
      $EOF: [340],
    },
    valueStmt_p_3: {
      DOUBLELITERAL: [322],
      INTEGERLITERAL: [322],
      STRINGLITERAL: [322],
      NOTHING: [322],
      NULL: [322],
      TRUE: [322],
      FALSE: [322],
      SPACE_DOT: [322],
      ALIAS: [322],
      AND: [322],
      ATTRIBUTE: [322],
      AS: [322],
      BEGIN: [322],
      BOOLEAN: [322],
      BYVAL: [322],
      BYREF: [322],
      BYTE: [322],
      CALL: [322],
      CASE: [322],
      CONST: [322],
      DECLARE: [322],
      DEFBOOL: [322],
      DEFBYTE: [322],
      DEFDATE: [322],
      DEFDBL: [322],
      DEFDEC: [322],
      DEFCUR: [322],
      DEFINT: [322],
      DEFLNG: [322],
      DEFOBJ: [322],
      DEFSNG: [322],
      DEFSTR: [322],
      DEFVAR: [322],
      DIM: [322],
      DO: [322],
      DOUBLE: [322],
      EACH: [322],
      ELSE: [322],
      ELSEIF: [322],
      END_ENUM: [322],
      END_FUNCTION: [322],
      END_IF: [322],
      END_PROPERTY: [322],
      END_SELECT: [322],
      END_SUB: [322],
      END_TYPE: [322],
      END_WITH: [322],
      END: [322],
      ENUM: [322],
      EQV: [322],
      ERASE: [322],
      EVENT: [322],
      EXIT_DO: [322],
      EXIT_FOR: [322],
      EXIT_FUNCTION: [322],
      EXIT_PROPERTY: [322],
      EXIT_SUB: [322],
      FRIEND: [322],
      FOR: [322],
      FUNCTION: [322],
      GET: [322],
      GLOBAL: [322],
      GOSUB: [322],
      GOTO: [322],
      IF: [322],
      IMPLEMENTS: [322],
      IN: [322],
      ISNOT: [322],
      IS: [322],
      INTEGER: [322],
      LONG: [322],
      LOOP: [322],
      LEN: [322],
      LET: [322],
      LIB: [322],
      LIKE: [322],
      LSET: [322],
      MACRO_CONST: [322],
      MACRO_IF: [322],
      MACRO_ELSEIF: [322],
      MACRO_ELSE: [322],
      MACRO_END_IF: [322],
      MOD: [322],
      NEXT: [322],
      NEW: [322],
      NOT: [322],
      ON_ERROR: [322],
      ON_LOCAL_ERROR: [322],
      ON: [322],
      OPTIONAL: [322],
      OPTION_BASE: [322],
      OPTION_EXPLICIT: [322],
      OPTION_COMPARE: [322],
      OPTION_PRIVATE_MODULE: [322],
      OR: [322],
      PARAMARRAY: [322],
      PRESERVE: [322],
      PRIVATE: [322],
      PROPERTY_GET: [322],
      PROPERTY_LET: [322],
      PROPERTY_SET: [322],
      PTRSAFE: [322],
      PUBLIC: [322],
      RAISEEVENT: [322],
      REDIM: [322],
      RESET: [322],
      RESUME: [322],
      RETURN: [322],
      SELECT: [322],
      SET: [322],
      SINGLE: [322],
      STATIC: [322],
      STEP: [322],
      STOP: [322],
      STRING: [322],
      SUB: [322],
      THEN: [322],
      TO: [322],
      TYPEOF: [322],
      UNTIL: [322],
      VARIANT: [322],
      WEND: [322],
      WHILE: [322],
      WITH: [322],
      WITHEVENTS: [322],
      XOR: [322],
      IMP: [322],
      IDENTIFIER: [322],
      LPAREN: [322],
      MINUS: [322],
      PLUS: [322],
    },
    '(valueStmt_p_4)1_': {
      PLUS: [325, 341],
      MINUS: [327, 341],
      AMPERSAND: [328, 341],
      XOR: [341],
      OR: [341],
      AND: [341],
      IS: [341],
      ISNOT: [341],
      GEQ: [341],
      LEQ: [341],
      GT: [341],
      LT: [341],
      NEQ: [341],
      EQ: [341],
      ',': [341],
      NEWLINE: [341],
      COMMENT: [341],
      REMCOMMENT: [341],
      COLON: [341],
      ALIAS: [341],
      ATTRIBUTE: [341],
      AS: [341],
      BEGIN: [341],
      BOOLEAN: [341],
      BYVAL: [341],
      BYREF: [341],
      BYTE: [341],
      CALL: [341],
      CASE: [341],
      CONST: [341],
      DECLARE: [341],
      DEFBOOL: [341],
      DEFBYTE: [341],
      DEFDATE: [341],
      DEFDBL: [341],
      DEFDEC: [341],
      DEFCUR: [341],
      DEFINT: [341],
      DEFLNG: [341],
      DEFOBJ: [341],
      DEFSNG: [341],
      DEFSTR: [341],
      DEFVAR: [341],
      DIM: [341],
      DO: [341],
      DOUBLE: [341],
      EACH: [341],
      ELSE: [341],
      ELSEIF: [341],
      END_ENUM: [341],
      END_FUNCTION: [341],
      END_IF: [341],
      END_PROPERTY: [341],
      END_SELECT: [341],
      END_SUB: [341],
      END_TYPE: [341],
      END_WITH: [341],
      END: [341],
      ENUM: [341],
      EQV: [341],
      ERASE: [341],
      EVENT: [341],
      EXIT_DO: [341],
      EXIT_FOR: [341],
      EXIT_FUNCTION: [341],
      EXIT_PROPERTY: [341],
      EXIT_SUB: [341],
      FALSE: [341],
      FRIEND: [341],
      FOR: [341],
      FUNCTION: [341],
      GET: [341],
      GLOBAL: [341],
      GOSUB: [341],
      GOTO: [341],
      IF: [341],
      IMPLEMENTS: [341],
      IN: [341],
      INTEGER: [341],
      LONG: [341],
      LOOP: [341],
      LEN: [341],
      LET: [341],
      LIB: [341],
      LIKE: [341],
      LSET: [341],
      MACRO_CONST: [341],
      MACRO_IF: [341],
      MACRO_ELSEIF: [341],
      MACRO_ELSE: [341],
      MACRO_END_IF: [341],
      MOD: [341],
      NEXT: [341],
      NEW: [341],
      NOT: [341],
      NOTHING: [341],
      NULL: [341],
      ON_ERROR: [341],
      ON_LOCAL_ERROR: [341],
      ON: [341],
      OPTIONAL: [341],
      OPTION_BASE: [341],
      OPTION_EXPLICIT: [341],
      OPTION_COMPARE: [341],
      OPTION_PRIVATE_MODULE: [341],
      PARAMARRAY: [341],
      PRESERVE: [341],
      PRIVATE: [341],
      PROPERTY_GET: [341],
      PROPERTY_LET: [341],
      PROPERTY_SET: [341],
      PTRSAFE: [341],
      PUBLIC: [341],
      RAISEEVENT: [341],
      REDIM: [341],
      RESET: [341],
      RESUME: [341],
      RETURN: [341],
      SELECT: [341],
      SET: [341],
      SINGLE: [341],
      STATIC: [341],
      STEP: [341],
      STOP: [341],
      STRING: [341],
      SUB: [341],
      THEN: [341],
      TO: [341],
      TRUE: [341],
      TYPEOF: [341],
      UNTIL: [341],
      VARIANT: [341],
      WEND: [341],
      WHILE: [341],
      WITH: [341],
      WITHEVENTS: [341],
      IMP: [341],
      IDENTIFIER: [341],
      SPACE_DOT: [341],
      RPAREN: [341],
      '!': [341],
      LPAREN: [341],
      POW: [341],
      MULT: [341],
      DIV: [341],
      IDIV: [341],
      $EOF: [341],
    },
    valueStmt_p_4: {
      DOUBLELITERAL: [326],
      INTEGERLITERAL: [326],
      STRINGLITERAL: [326],
      NOTHING: [326],
      NULL: [326],
      TRUE: [326],
      FALSE: [326],
      SPACE_DOT: [326],
      ALIAS: [326],
      AND: [326],
      ATTRIBUTE: [326],
      AS: [326],
      BEGIN: [326],
      BOOLEAN: [326],
      BYVAL: [326],
      BYREF: [326],
      BYTE: [326],
      CALL: [326],
      CASE: [326],
      CONST: [326],
      DECLARE: [326],
      DEFBOOL: [326],
      DEFBYTE: [326],
      DEFDATE: [326],
      DEFDBL: [326],
      DEFDEC: [326],
      DEFCUR: [326],
      DEFINT: [326],
      DEFLNG: [326],
      DEFOBJ: [326],
      DEFSNG: [326],
      DEFSTR: [326],
      DEFVAR: [326],
      DIM: [326],
      DO: [326],
      DOUBLE: [326],
      EACH: [326],
      ELSE: [326],
      ELSEIF: [326],
      END_ENUM: [326],
      END_FUNCTION: [326],
      END_IF: [326],
      END_PROPERTY: [326],
      END_SELECT: [326],
      END_SUB: [326],
      END_TYPE: [326],
      END_WITH: [326],
      END: [326],
      ENUM: [326],
      EQV: [326],
      ERASE: [326],
      EVENT: [326],
      EXIT_DO: [326],
      EXIT_FOR: [326],
      EXIT_FUNCTION: [326],
      EXIT_PROPERTY: [326],
      EXIT_SUB: [326],
      FRIEND: [326],
      FOR: [326],
      FUNCTION: [326],
      GET: [326],
      GLOBAL: [326],
      GOSUB: [326],
      GOTO: [326],
      IF: [326],
      IMPLEMENTS: [326],
      IN: [326],
      ISNOT: [326],
      IS: [326],
      INTEGER: [326],
      LONG: [326],
      LOOP: [326],
      LEN: [326],
      LET: [326],
      LIB: [326],
      LIKE: [326],
      LSET: [326],
      MACRO_CONST: [326],
      MACRO_IF: [326],
      MACRO_ELSEIF: [326],
      MACRO_ELSE: [326],
      MACRO_END_IF: [326],
      MOD: [326],
      NEXT: [326],
      NEW: [326],
      NOT: [326],
      ON_ERROR: [326],
      ON_LOCAL_ERROR: [326],
      ON: [326],
      OPTIONAL: [326],
      OPTION_BASE: [326],
      OPTION_EXPLICIT: [326],
      OPTION_COMPARE: [326],
      OPTION_PRIVATE_MODULE: [326],
      OR: [326],
      PARAMARRAY: [326],
      PRESERVE: [326],
      PRIVATE: [326],
      PROPERTY_GET: [326],
      PROPERTY_LET: [326],
      PROPERTY_SET: [326],
      PTRSAFE: [326],
      PUBLIC: [326],
      RAISEEVENT: [326],
      REDIM: [326],
      RESET: [326],
      RESUME: [326],
      RETURN: [326],
      SELECT: [326],
      SET: [326],
      SINGLE: [326],
      STATIC: [326],
      STEP: [326],
      STOP: [326],
      STRING: [326],
      SUB: [326],
      THEN: [326],
      TO: [326],
      TYPEOF: [326],
      UNTIL: [326],
      VARIANT: [326],
      WEND: [326],
      WHILE: [326],
      WITH: [326],
      WITHEVENTS: [326],
      XOR: [326],
      IMP: [326],
      IDENTIFIER: [326],
      LPAREN: [326],
      MINUS: [326],
      PLUS: [326],
    },
    '(valueStmt_p_5)1_': {
      MULT: [329, 342],
      DIV: [331, 342],
      IDIV: [332, 342],
      MOD: [333, 342],
      PLUS: [342],
      MINUS: [342],
      AMPERSAND: [342],
      XOR: [342],
      OR: [342],
      AND: [342],
      IS: [342],
      ISNOT: [342],
      GEQ: [342],
      LEQ: [342],
      GT: [342],
      LT: [342],
      NEQ: [342],
      EQ: [342],
      ',': [342],
      NEWLINE: [342],
      COMMENT: [342],
      REMCOMMENT: [342],
      COLON: [342],
      ALIAS: [342],
      ATTRIBUTE: [342],
      AS: [342],
      BEGIN: [342],
      BOOLEAN: [342],
      BYVAL: [342],
      BYREF: [342],
      BYTE: [342],
      CALL: [342],
      CASE: [342],
      CONST: [342],
      DECLARE: [342],
      DEFBOOL: [342],
      DEFBYTE: [342],
      DEFDATE: [342],
      DEFDBL: [342],
      DEFDEC: [342],
      DEFCUR: [342],
      DEFINT: [342],
      DEFLNG: [342],
      DEFOBJ: [342],
      DEFSNG: [342],
      DEFSTR: [342],
      DEFVAR: [342],
      DIM: [342],
      DO: [342],
      DOUBLE: [342],
      EACH: [342],
      ELSE: [342],
      ELSEIF: [342],
      END_ENUM: [342],
      END_FUNCTION: [342],
      END_IF: [342],
      END_PROPERTY: [342],
      END_SELECT: [342],
      END_SUB: [342],
      END_TYPE: [342],
      END_WITH: [342],
      END: [342],
      ENUM: [342],
      EQV: [342],
      ERASE: [342],
      EVENT: [342],
      EXIT_DO: [342],
      EXIT_FOR: [342],
      EXIT_FUNCTION: [342],
      EXIT_PROPERTY: [342],
      EXIT_SUB: [342],
      FALSE: [342],
      FRIEND: [342],
      FOR: [342],
      FUNCTION: [342],
      GET: [342],
      GLOBAL: [342],
      GOSUB: [342],
      GOTO: [342],
      IF: [342],
      IMPLEMENTS: [342],
      IN: [342],
      INTEGER: [342],
      LONG: [342],
      LOOP: [342],
      LEN: [342],
      LET: [342],
      LIB: [342],
      LIKE: [342],
      LSET: [342],
      MACRO_CONST: [342],
      MACRO_IF: [342],
      MACRO_ELSEIF: [342],
      MACRO_ELSE: [342],
      MACRO_END_IF: [342],
      NEXT: [342],
      NEW: [342],
      NOT: [342],
      NOTHING: [342],
      NULL: [342],
      ON_ERROR: [342],
      ON_LOCAL_ERROR: [342],
      ON: [342],
      OPTIONAL: [342],
      OPTION_BASE: [342],
      OPTION_EXPLICIT: [342],
      OPTION_COMPARE: [342],
      OPTION_PRIVATE_MODULE: [342],
      PARAMARRAY: [342],
      PRESERVE: [342],
      PRIVATE: [342],
      PROPERTY_GET: [342],
      PROPERTY_LET: [342],
      PROPERTY_SET: [342],
      PTRSAFE: [342],
      PUBLIC: [342],
      RAISEEVENT: [342],
      REDIM: [342],
      RESET: [342],
      RESUME: [342],
      RETURN: [342],
      SELECT: [342],
      SET: [342],
      SINGLE: [342],
      STATIC: [342],
      STEP: [342],
      STOP: [342],
      STRING: [342],
      SUB: [342],
      THEN: [342],
      TO: [342],
      TRUE: [342],
      TYPEOF: [342],
      UNTIL: [342],
      VARIANT: [342],
      WEND: [342],
      WHILE: [342],
      WITH: [342],
      WITHEVENTS: [342],
      IMP: [342],
      IDENTIFIER: [342],
      SPACE_DOT: [342],
      RPAREN: [342],
      '!': [342],
      LPAREN: [342],
      POW: [342],
      $EOF: [342],
    },
    valueStmt_p_5: {
      DOUBLELITERAL: [330],
      INTEGERLITERAL: [330],
      STRINGLITERAL: [330],
      NOTHING: [330],
      NULL: [330],
      TRUE: [330],
      FALSE: [330],
      SPACE_DOT: [330],
      ALIAS: [330],
      AND: [330],
      ATTRIBUTE: [330],
      AS: [330],
      BEGIN: [330],
      BOOLEAN: [330],
      BYVAL: [330],
      BYREF: [330],
      BYTE: [330],
      CALL: [330],
      CASE: [330],
      CONST: [330],
      DECLARE: [330],
      DEFBOOL: [330],
      DEFBYTE: [330],
      DEFDATE: [330],
      DEFDBL: [330],
      DEFDEC: [330],
      DEFCUR: [330],
      DEFINT: [330],
      DEFLNG: [330],
      DEFOBJ: [330],
      DEFSNG: [330],
      DEFSTR: [330],
      DEFVAR: [330],
      DIM: [330],
      DO: [330],
      DOUBLE: [330],
      EACH: [330],
      ELSE: [330],
      ELSEIF: [330],
      END_ENUM: [330],
      END_FUNCTION: [330],
      END_IF: [330],
      END_PROPERTY: [330],
      END_SELECT: [330],
      END_SUB: [330],
      END_TYPE: [330],
      END_WITH: [330],
      END: [330],
      ENUM: [330],
      EQV: [330],
      ERASE: [330],
      EVENT: [330],
      EXIT_DO: [330],
      EXIT_FOR: [330],
      EXIT_FUNCTION: [330],
      EXIT_PROPERTY: [330],
      EXIT_SUB: [330],
      FRIEND: [330],
      FOR: [330],
      FUNCTION: [330],
      GET: [330],
      GLOBAL: [330],
      GOSUB: [330],
      GOTO: [330],
      IF: [330],
      IMPLEMENTS: [330],
      IN: [330],
      ISNOT: [330],
      IS: [330],
      INTEGER: [330],
      LONG: [330],
      LOOP: [330],
      LEN: [330],
      LET: [330],
      LIB: [330],
      LIKE: [330],
      LSET: [330],
      MACRO_CONST: [330],
      MACRO_IF: [330],
      MACRO_ELSEIF: [330],
      MACRO_ELSE: [330],
      MACRO_END_IF: [330],
      MOD: [330],
      NEXT: [330],
      NEW: [330],
      NOT: [330],
      ON_ERROR: [330],
      ON_LOCAL_ERROR: [330],
      ON: [330],
      OPTIONAL: [330],
      OPTION_BASE: [330],
      OPTION_EXPLICIT: [330],
      OPTION_COMPARE: [330],
      OPTION_PRIVATE_MODULE: [330],
      OR: [330],
      PARAMARRAY: [330],
      PRESERVE: [330],
      PRIVATE: [330],
      PROPERTY_GET: [330],
      PROPERTY_LET: [330],
      PROPERTY_SET: [330],
      PTRSAFE: [330],
      PUBLIC: [330],
      RAISEEVENT: [330],
      REDIM: [330],
      RESET: [330],
      RESUME: [330],
      RETURN: [330],
      SELECT: [330],
      SET: [330],
      SINGLE: [330],
      STATIC: [330],
      STEP: [330],
      STOP: [330],
      STRING: [330],
      SUB: [330],
      THEN: [330],
      TO: [330],
      TYPEOF: [330],
      UNTIL: [330],
      VARIANT: [330],
      WEND: [330],
      WHILE: [330],
      WITH: [330],
      WITHEVENTS: [330],
      XOR: [330],
      IMP: [330],
      IDENTIFIER: [330],
      LPAREN: [330],
      MINUS: [330],
      PLUS: [330],
    },
    '(valueStmt_p_6)1_': {
      POW: [334, 343],
      MULT: [343],
      DIV: [343],
      IDIV: [343],
      MOD: [343],
      PLUS: [343],
      MINUS: [343],
      AMPERSAND: [343],
      XOR: [343],
      OR: [343],
      AND: [343],
      IS: [343],
      ISNOT: [343],
      GEQ: [343],
      LEQ: [343],
      GT: [343],
      LT: [343],
      NEQ: [343],
      EQ: [343],
      ',': [343],
      NEWLINE: [343],
      COMMENT: [343],
      REMCOMMENT: [343],
      COLON: [343],
      ALIAS: [343],
      ATTRIBUTE: [343],
      AS: [343],
      BEGIN: [343],
      BOOLEAN: [343],
      BYVAL: [343],
      BYREF: [343],
      BYTE: [343],
      CALL: [343],
      CASE: [343],
      CONST: [343],
      DECLARE: [343],
      DEFBOOL: [343],
      DEFBYTE: [343],
      DEFDATE: [343],
      DEFDBL: [343],
      DEFDEC: [343],
      DEFCUR: [343],
      DEFINT: [343],
      DEFLNG: [343],
      DEFOBJ: [343],
      DEFSNG: [343],
      DEFSTR: [343],
      DEFVAR: [343],
      DIM: [343],
      DO: [343],
      DOUBLE: [343],
      EACH: [343],
      ELSE: [343],
      ELSEIF: [343],
      END_ENUM: [343],
      END_FUNCTION: [343],
      END_IF: [343],
      END_PROPERTY: [343],
      END_SELECT: [343],
      END_SUB: [343],
      END_TYPE: [343],
      END_WITH: [343],
      END: [343],
      ENUM: [343],
      EQV: [343],
      ERASE: [343],
      EVENT: [343],
      EXIT_DO: [343],
      EXIT_FOR: [343],
      EXIT_FUNCTION: [343],
      EXIT_PROPERTY: [343],
      EXIT_SUB: [343],
      FALSE: [343],
      FRIEND: [343],
      FOR: [343],
      FUNCTION: [343],
      GET: [343],
      GLOBAL: [343],
      GOSUB: [343],
      GOTO: [343],
      IF: [343],
      IMPLEMENTS: [343],
      IN: [343],
      INTEGER: [343],
      LONG: [343],
      LOOP: [343],
      LEN: [343],
      LET: [343],
      LIB: [343],
      LIKE: [343],
      LSET: [343],
      MACRO_CONST: [343],
      MACRO_IF: [343],
      MACRO_ELSEIF: [343],
      MACRO_ELSE: [343],
      MACRO_END_IF: [343],
      NEXT: [343],
      NEW: [343],
      NOT: [343],
      NOTHING: [343],
      NULL: [343],
      ON_ERROR: [343],
      ON_LOCAL_ERROR: [343],
      ON: [343],
      OPTIONAL: [343],
      OPTION_BASE: [343],
      OPTION_EXPLICIT: [343],
      OPTION_COMPARE: [343],
      OPTION_PRIVATE_MODULE: [343],
      PARAMARRAY: [343],
      PRESERVE: [343],
      PRIVATE: [343],
      PROPERTY_GET: [343],
      PROPERTY_LET: [343],
      PROPERTY_SET: [343],
      PTRSAFE: [343],
      PUBLIC: [343],
      RAISEEVENT: [343],
      REDIM: [343],
      RESET: [343],
      RESUME: [343],
      RETURN: [343],
      SELECT: [343],
      SET: [343],
      SINGLE: [343],
      STATIC: [343],
      STEP: [343],
      STOP: [343],
      STRING: [343],
      SUB: [343],
      THEN: [343],
      TO: [343],
      TRUE: [343],
      TYPEOF: [343],
      UNTIL: [343],
      VARIANT: [343],
      WEND: [343],
      WHILE: [343],
      WITH: [343],
      WITHEVENTS: [343],
      IMP: [343],
      IDENTIFIER: [343],
      SPACE_DOT: [343],
      RPAREN: [343],
      '!': [343],
      LPAREN: [343],
      $EOF: [343],
    },
    valueStmt_p_6: {
      DOUBLELITERAL: [335],
      INTEGERLITERAL: [335],
      STRINGLITERAL: [335],
      NOTHING: [335],
      NULL: [335],
      TRUE: [335],
      FALSE: [335],
      SPACE_DOT: [335],
      ALIAS: [335],
      AND: [335],
      ATTRIBUTE: [335],
      AS: [335],
      BEGIN: [335],
      BOOLEAN: [335],
      BYVAL: [335],
      BYREF: [335],
      BYTE: [335],
      CALL: [335],
      CASE: [335],
      CONST: [335],
      DECLARE: [335],
      DEFBOOL: [335],
      DEFBYTE: [335],
      DEFDATE: [335],
      DEFDBL: [335],
      DEFDEC: [335],
      DEFCUR: [335],
      DEFINT: [335],
      DEFLNG: [335],
      DEFOBJ: [335],
      DEFSNG: [335],
      DEFSTR: [335],
      DEFVAR: [335],
      DIM: [335],
      DO: [335],
      DOUBLE: [335],
      EACH: [335],
      ELSE: [335],
      ELSEIF: [335],
      END_ENUM: [335],
      END_FUNCTION: [335],
      END_IF: [335],
      END_PROPERTY: [335],
      END_SELECT: [335],
      END_SUB: [335],
      END_TYPE: [335],
      END_WITH: [335],
      END: [335],
      ENUM: [335],
      EQV: [335],
      ERASE: [335],
      EVENT: [335],
      EXIT_DO: [335],
      EXIT_FOR: [335],
      EXIT_FUNCTION: [335],
      EXIT_PROPERTY: [335],
      EXIT_SUB: [335],
      FRIEND: [335],
      FOR: [335],
      FUNCTION: [335],
      GET: [335],
      GLOBAL: [335],
      GOSUB: [335],
      GOTO: [335],
      IF: [335],
      IMPLEMENTS: [335],
      IN: [335],
      ISNOT: [335],
      IS: [335],
      INTEGER: [335],
      LONG: [335],
      LOOP: [335],
      LEN: [335],
      LET: [335],
      LIB: [335],
      LIKE: [335],
      LSET: [335],
      MACRO_CONST: [335],
      MACRO_IF: [335],
      MACRO_ELSEIF: [335],
      MACRO_ELSE: [335],
      MACRO_END_IF: [335],
      MOD: [335],
      NEXT: [335],
      NEW: [335],
      NOT: [335],
      ON_ERROR: [335],
      ON_LOCAL_ERROR: [335],
      ON: [335],
      OPTIONAL: [335],
      OPTION_BASE: [335],
      OPTION_EXPLICIT: [335],
      OPTION_COMPARE: [335],
      OPTION_PRIVATE_MODULE: [335],
      OR: [335],
      PARAMARRAY: [335],
      PRESERVE: [335],
      PRIVATE: [335],
      PROPERTY_GET: [335],
      PROPERTY_LET: [335],
      PROPERTY_SET: [335],
      PTRSAFE: [335],
      PUBLIC: [335],
      RAISEEVENT: [335],
      REDIM: [335],
      RESET: [335],
      RESUME: [335],
      RETURN: [335],
      SELECT: [335],
      SET: [335],
      SINGLE: [335],
      STATIC: [335],
      STEP: [335],
      STOP: [335],
      STRING: [335],
      SUB: [335],
      THEN: [335],
      TO: [335],
      TYPEOF: [335],
      UNTIL: [335],
      VARIANT: [335],
      WEND: [335],
      WHILE: [335],
      WITH: [335],
      WITHEVENTS: [335],
      XOR: [335],
      IMP: [335],
      IDENTIFIER: [335],
      LPAREN: [335],
      MINUS: [335],
      PLUS: [335],
    },
    valueStmt_p_7: {
      DOUBLELITERAL: [336],
      INTEGERLITERAL: [336],
      STRINGLITERAL: [336],
      NOTHING: [336],
      NULL: [336],
      TRUE: [336],
      FALSE: [336],
      SPACE_DOT: [336],
      ALIAS: [336],
      AND: [336],
      ATTRIBUTE: [336],
      AS: [336],
      BEGIN: [336],
      BOOLEAN: [336],
      BYVAL: [336],
      BYREF: [336],
      BYTE: [336],
      CALL: [336],
      CASE: [336],
      CONST: [336],
      DECLARE: [336],
      DEFBOOL: [336],
      DEFBYTE: [336],
      DEFDATE: [336],
      DEFDBL: [336],
      DEFDEC: [336],
      DEFCUR: [336],
      DEFINT: [336],
      DEFLNG: [336],
      DEFOBJ: [336],
      DEFSNG: [336],
      DEFSTR: [336],
      DEFVAR: [336],
      DIM: [336],
      DO: [336],
      DOUBLE: [336],
      EACH: [336],
      ELSE: [336],
      ELSEIF: [336],
      END_ENUM: [336],
      END_FUNCTION: [336],
      END_IF: [336],
      END_PROPERTY: [336],
      END_SELECT: [336],
      END_SUB: [336],
      END_TYPE: [336],
      END_WITH: [336],
      END: [336],
      ENUM: [336],
      EQV: [336],
      ERASE: [336],
      EVENT: [336],
      EXIT_DO: [336],
      EXIT_FOR: [336],
      EXIT_FUNCTION: [336],
      EXIT_PROPERTY: [336],
      EXIT_SUB: [336],
      FRIEND: [336],
      FOR: [336],
      FUNCTION: [336],
      GET: [336],
      GLOBAL: [336],
      GOSUB: [336],
      GOTO: [336],
      IF: [336],
      IMPLEMENTS: [336],
      IN: [336],
      ISNOT: [336],
      IS: [336],
      INTEGER: [336],
      LONG: [336],
      LOOP: [336],
      LEN: [336],
      LET: [336],
      LIB: [336],
      LIKE: [336],
      LSET: [336],
      MACRO_CONST: [336],
      MACRO_IF: [336],
      MACRO_ELSEIF: [336],
      MACRO_ELSE: [336],
      MACRO_END_IF: [336],
      MOD: [336],
      NEXT: [336],
      NEW: [336],
      NOT: [336],
      ON_ERROR: [336],
      ON_LOCAL_ERROR: [336],
      ON: [336],
      OPTIONAL: [336],
      OPTION_BASE: [336],
      OPTION_EXPLICIT: [336],
      OPTION_COMPARE: [336],
      OPTION_PRIVATE_MODULE: [336],
      OR: [336],
      PARAMARRAY: [336],
      PRESERVE: [336],
      PRIVATE: [336],
      PROPERTY_GET: [336],
      PROPERTY_LET: [336],
      PROPERTY_SET: [336],
      PTRSAFE: [336],
      PUBLIC: [336],
      RAISEEVENT: [336],
      REDIM: [336],
      RESET: [336],
      RESUME: [336],
      RETURN: [336],
      SELECT: [336],
      SET: [336],
      SINGLE: [336],
      STATIC: [336],
      STEP: [336],
      STOP: [336],
      STRING: [336],
      SUB: [336],
      THEN: [336],
      TO: [336],
      TYPEOF: [336],
      UNTIL: [336],
      VARIANT: [336],
      WEND: [336],
      WHILE: [336],
      WITH: [336],
      WITHEVENTS: [336],
      XOR: [336],
      IMP: [336],
      IDENTIFIER: [336],
      LPAREN: [336],
      MINUS: [337],
      PLUS: [338],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }

        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (
        ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX ||
        ruleIndexes.length === 0
      ) {
        // skip this symbol first
        return returnNext();
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 5,
    15: 6,
    16: 6,
    17: 6,
    18: 6,
    19: 7,
    20: 7,
    21: 8,
    22: 8,
    23: 8,
    24: 8,
    25: 8,
    26: 9,
    27: 9,
    28: 9,
    29: 9,
    30: 10,
    31: 11,
    32: 12,
    33: 13,
    34: 14,
    35: 15,
    36: 15,
    37: 16,
    38: 16,
    39: 16,
    40: 16,
    41: 16,
    42: 16,
    43: 16,
    44: 16,
    45: 16,
    46: 16,
    47: 16,
    48: 16,
    49: 17,
    50: 17,
    51: 17,
    52: 17,
    53: 17,
    54: 18,
    55: 19,
    56: 20,
    57: 20,
    58: 21,
    59: 21,
    60: 22,
    61: 23,
    62: 23,
    63: 23,
    64: 23,
    65: 23,
    66: 23,
    67: 24,
    68: 24,
    69: 24,
    70: 24,
    71: 24,
    72: 24,
    73: 24,
    74: 25,
    75: 26,
    76: 26,
    77: 27,
    78: 27,
    79: 27,
    80: 27,
    81: 27,
    82: 27,
    83: 27,
    84: 28,
    85: 29,
    86: 29,
    87: 30,
    88: 31,
    89: 32,
    90: 32,
    91: 33,
    92: 34,
    93: 34,
    94: 34,
    95: 34,
    96: 34,
    97: 34,
    98: 34,
    99: 35,
    100: 35,
    101: 35,
    102: 35,
    103: 35,
    104: 36,
    105: 36,
    106: 37,
    107: 37,
    108: 38,
    109: 39,
    110: 39,
    111: 40,
    112: 40,
    113: 41,
    114: 42,
    115: 42,
    116: 42,
    117: 43,
    118: 43,
    119: 43,
    120: 43,
    121: 44,
    122: 67,
    123: 67,
    124: 67,
    125: 68,
    126: 68,
    127: 68,
    128: 68,
    129: 68,
    130: 68,
    131: 68,
    132: 68,
    133: 68,
    134: 69,
    135: 69,
    136: 69,
    137: 70,
    138: 70,
    139: 70,
    140: 71,
    141: 72,
    142: 73,
    143: 74,
    144: 74,
    145: 74,
    146: 74,
    147: 74,
    148: 74,
    149: 74,
    150: 75,
    151: 75,
    152: 75,
    153: 75,
    154: 75,
    155: 75,
    156: 76,
    157: 76,
    158: 76,
    159: 76,
    160: 76,
    161: 76,
    162: 77,
    163: 78,
    164: 79,
    165: 79,
    166: 79,
    167: 79,
    168: 79,
    169: 80,
    170: 80,
    171: 80,
    172: 80,
    173: 80,
    174: 80,
    175: 81,
    176: 81,
    177: 81,
    178: 81,
    179: 81,
    180: 81,
    181: 81,
    182: 81,
    183: 81,
    184: 82,
    185: 82,
    186: 83,
    187: 84,
    188: 85,
    189: 86,
    190: 87,
    191: 88,
    192: 89,
    193: 90,
    194: 91,
    195: 92,
    196: 93,
    197: 94,
    198: 95,
    199: 96,
    200: 97,
    201: 98,
    202: 99,
    203: 100,
    204: 101,
    205: 102,
    206: 103,
    207: 104,
    208: 105,
    209: 106,
    210: 107,
    211: 108,
    212: 109,
    213: 110,
    214: 111,
    215: 112,
    216: 113,
    217: 114,
    218: 115,
    219: 116,
    220: 117,
    221: 118,
    222: 119,
    223: 120,
    224: 121,
    225: 122,
    226: 123,
    227: 124,
    228: 125,
    229: 126,
    230: 127,
    231: 128,
    232: 129,
    233: 130,
    234: 131,
    235: 132,
    236: 133,
    237: 134,
    238: 135,
    239: 136,
    240: 137,
    241: 138,
    242: 139,
    243: 140,
    244: 141,
    245: 142,
    246: 143,
    247: 144,
    248: 145,
    249: 146,
    250: 147,
    251: 148,
    252: 149,
    253: 150,
    254: 151,
    255: 152,
    256: 153,
    257: 154,
    258: 155,
    259: 156,
    260: 157,
    261: 158,
    262: 159,
    263: 160,
    264: 161,
    265: 162,
    266: 163,
    267: 164,
    268: 165,
    269: 166,
    270: 167,
    271: 168,
    272: 169,
    273: 170,
    274: 171,
    275: 172,
    276: 173,
    277: 174,
    278: 175,
    279: 176,
    280: 177,
    281: 178,
    282: 179,
    283: 180,
    284: 181,
    285: 182,
    286: 183,
    287: 184,
    288: 185,
    289: 186,
    290: 187,
    291: 188,
    292: 189,
    293: 190,
    294: 191,
    295: 192,
    296: 193,
    297: 194,
    298: 195,
    299: 196,
    300: 197,
    301: 198,
    302: 199,
    303: 200,
    304: 201,
    305: 202,
    306: 203,
    307: 204,
    308: 205,
    309: 206,
    310: 66,
    311: 66,
    312: 45,
    313: 45,
    314: 46,
    315: 47,
    316: 48,
    317: 49,
    318: 50,
    319: 51,
    320: 52,
    321: 53,
    322: 53,
    323: 54,
    324: 55,
    325: 56,
    326: 56,
    327: 57,
    328: 58,
    329: 59,
    330: 59,
    331: 60,
    332: 61,
    333: 62,
    334: 63,
    335: 63,
    336: 64,
    337: 64,
    338: 65,
  };
  return parser;
})();

export default vbaParser;
