/*
Generated By kison v0.5.36

Generate time: Thu Dec 02 2021 15:37:02 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token =
      recommendedAction.action === 'add'
        ? lexer.peekTokens()[0]
        : lexer.getCurrentToken();
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      [
        'ALIAS',
        /ALIAS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AND',
        /AND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ATTRIBUTE',
        /ATTRIBUTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AS',
        /AS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BEGIN',
        /BEGIN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BOOLEAN',
        /BOOLEAN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYVAL',
        /BYVAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYREF',
        /BYREF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYTE',
        /BYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CALL',
        /CALL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CASE',
        /CASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CONST',
        /CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DECLARE',
        /DECLARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBOOL',
        /DEFBOOL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBYTE',
        /DEFBYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDATE',
        /DEFDATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDBL',
        /DEFDBL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDEC',
        /DEFDEC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFCUR',
        /DEFCUR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFINT',
        /DEFINT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFLNG',
        /DEFLNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFOBJ',
        /DEFOBJ\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSNG',
        /DEFSNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSTR',
        /DEFSTR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFVAR',
        /DEFVAR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DIM',
        /DIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DO',
        /DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DOUBLE',
        /DOUBLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EACH',
        /EACH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSE',
        /ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSEIF',
        /ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_ENUM',
        /END ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_FUNCTION',
        /END FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_IF',
        /END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_PROPERTY',
        /END PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SELECT',
        /END SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SUB',
        /END SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_TYPE',
        /END TYPE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_WITH',
        /END WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END',
        /END\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ENUM',
        /ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EQV',
        /EQV\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ERASE',
        /ERASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EVENT',
        /EVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_DO',
        /EXIT DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FOR',
        /EXIT FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FUNCTION',
        /EXIT FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_PROPERTY',
        /EXIT PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_SUB',
        /EXIT SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FALSE',
        /FALSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FRIEND',
        /FRIEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FOR',
        /FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FUNCTION',
        /FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GET',
        /GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GLOBAL',
        /GLOBAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOSUB',
        /GOSUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOTO',
        /GOTO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IF',
        /IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMPLEMENTS',
        /IMPLEMENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IN',
        /IN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ISNOT',
        /ISNOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IS',
        /IS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'INTEGER',
        /INTEGER\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LONG',
        /LONG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LOOP',
        /LOOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LEN',
        /LEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LET',
        /LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIB',
        /LIB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIKE',
        /LIKE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LSET',
        /LSET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_CONST',
        /#CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_IF',
        /#IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSEIF',
        /#ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSE',
        /#ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_END_IF',
        /#END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MOD',
        /MOD\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEXT',
        /NEXT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEW',
        /NEW\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOT',
        /NOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOTHING',
        /NOTHING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NULL',
        /NULL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_ERROR',
        /ON ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_LOCAL_ERROR',
        /ON LOCAL ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON',
        /ON\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTIONAL',
        /OPTIONAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_BASE',
        /OPTION BASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_EXPLICIT',
        /OPTION EXPLICIT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_COMPARE',
        /OPTION COMPARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_PRIVATE_MODULE',
        /OPTION PRIVATE MODULE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OR',
        /OR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PARAMARRAY',
        /PARAMARRAY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRESERVE',
        /PRESERVE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRIVATE',
        /PRIVATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_GET',
        /PROPERTY GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_LET',
        /PROPERTY LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_SET',
        /PROPERTY SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PTRSAFE',
        /PTRSAFE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PUBLIC',
        /PUBLIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RAISEEVENT',
        /RAISEEVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'REDIM',
        /REDIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESET',
        /RESET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESUME',
        /RESUME\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RETURN',
        /RETURN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SELECT',
        /SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SET',
        /SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SINGLE',
        /SINGLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STATIC',
        /STATIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STEP',
        /STEP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STOP',
        /STOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STRING',
        /STRING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SUB',
        /SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'THEN',
        /THEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TO',
        /TO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TRUE',
        /TRUE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TYPEOF',
        /TYPEOF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'UNTIL',
        /UNTIL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'VARIANT',
        /VARIANT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WEND',
        /WEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WHILE',
        /WHILE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITH',
        /WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITHEVENTS',
        /WITHEVENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'XOR',
        /XOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMP',
        /IMP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ['DOUBLELITERAL', /[0-9]*\.[0-9]+(E[0-9]+)?/g],
      ['SPACE_DOT', /\s+\./g],
      ['ASSIGN', /:=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['IDIV', /\\/g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS_EQ', /\-=/g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS_EQ', /\+=/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"(""|[^"\r\n])*"/g],
      ['INTEGERLITERAL', /[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ['.', /\./g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1*']],
      [
        'moduleDeclarations_group_def_5',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_5*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_7',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_7*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'RPAREN',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_9', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_9*', 'endOfStatement']],
      ['blockStmt', ['lineLabel']],
      ['blockStmt', ['goToStmt']],
      ['blockStmt', ['ifThenElseStmt']],
      ['blockStmt', ['selectCaseStmt']],
      ['blockStmt', ['onErrorStmt']],
      ['blockStmt', ['withStmt']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      [
        'selectCaseStmt',
        [
          'SELECT',
          'CASE',
          'valueStmt',
          'endOfStatement',
          'sC_Case*',
          'END_SELECT',
        ],
      ],
      [
        'sC_Selection',
        ['IS', 'comparisonOperator', 'valueStmt'],
        undefined,
        'caseCondIs',
      ],
      [
        'sC_Selection',
        ['valueStmt', 'TO', 'valueStmt'],
        undefined,
        'caseCondTo',
      ],
      ['sC_Selection', ['valueStmt'], undefined, 'caseCondValue'],
      ['sC_Case', ['CASE', 'sC_Cond', 'endOfStatement', 'block?']],
      ['sC_Cond', ['ELSE'], undefined, 'caseCondElse'],
      ['sC_Cond_group_def_11', [',', 'sC_Selection']],
      [
        'sC_Cond',
        ['sC_Selection', 'sC_Cond_group_def_11*'],
        undefined,
        'caseCondSelection',
      ],
      ['comparisonOperator', ['LT']],
      ['comparisonOperator', ['LEQ']],
      ['comparisonOperator', ['GT']],
      ['comparisonOperator', ['GEQ']],
      ['comparisonOperator', ['EQ']],
      ['comparisonOperator', ['NEQ']],
      ['comparisonOperator', ['IS']],
      ['ifThenElseStmt_group_def_13', ['ELSE', 'blockStmt']],
      [
        'ifThenElseStmt',
        [
          'IF',
          'valueStmt',
          'THEN',
          'blockStmt',
          'ifThenElseStmt_group_def_13?',
        ],
        undefined,
        'InlineIfThenElse',
      ],
      [
        'ifThenElseStmt',
        ['ifBlockStmt', 'ifElseIfBlockStmt*', 'ifElseBlockStmt?', 'END_IF'],
        undefined,
        'BlockIfThenElse',
      ],
      ['ifBlockStmt', ['IF', 'valueStmt', 'THEN', 'endOfStatement', 'block?']],
      [
        'ifElseIfBlockStmt',
        ['ELSEIF', 'valueStmt', 'THEN', 'endOfStatement', 'block?'],
      ],
      ['ifElseBlockStmt', ['ELSE', 'endOfStatement', 'block?']],
      ['onErrorStmt_group_def_15', ['ambiguousIdentifier']],
      ['onErrorStmt_group_14', ['onErrorStmt_group_def_15']],
      ['onErrorStmt_group_def_16', ['MINUS', 'INTEGERLITERAL']],
      ['onErrorStmt_group_14', ['onErrorStmt_group_def_16']],
      ['onErrorStmt', ['ON_ERROR', 'GOTO', 'onErrorStmt_group_14']],
      ['lineLabel', ['ambiguousIdentifier', 'COLON']],
      ['goToStmt', ['GOTO', 'ambiguousIdentifier']],
      ['eraseStmt_group_def_18', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_18*']],
      ['redimStmt_group_def_20', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_20*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_def_22', ['EQ']],
      ['letStmt_group_21', ['letStmt_group_def_22']],
      ['letStmt_group_def_23', ['PLUS_EQ']],
      ['letStmt_group_21', ['letStmt_group_def_23']],
      ['letStmt_group_def_24', ['MINUS_EQ']],
      ['letStmt_group_21', ['letStmt_group_def_24']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_21', 'valueStmt'],
      ],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_26',
        ['implicitCallStmt_InStmt?', '.'],
      ],
      [
        'eCS_MemberProcedureCall_group_25',
        ['eCS_MemberProcedureCall_group_def_26'],
      ],
      ['eCS_MemberProcedureCall_group_def_27', ['SPACE_DOT']],
      [
        'eCS_MemberProcedureCall_group_25',
        ['eCS_MemberProcedureCall_group_def_27'],
      ],
      [
        'eCS_MemberProcedureCall_group_def_29',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_31', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'eCS_MemberProcedureCall_group_25',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_29?',
          'eCS_MemberProcedureCall_group_def_31*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_29?',
          'eCS_MemberProcedureCall_group_def_31*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall',
        [
          'implicitCallStmt_InStmt',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_31*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'certainIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_31?',
        ],
      ],
      ['argsCall_group_def_37', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_37*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_39', ['DIM']],
      ['variableStmt_group_38', ['variableStmt_group_def_39']],
      ['variableStmt_group_def_40', ['STATIC']],
      ['variableStmt_group_38', ['variableStmt_group_def_40']],
      ['variableStmt_group_def_41', ['visibility']],
      ['variableStmt_group_38', ['variableStmt_group_def_41']],
      [
        'variableStmt',
        ['variableStmt_group_38', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['withStmt_group_def_43', ['implicitCallStmt_InStmt']],
      ['withStmt_group_42', ['withStmt_group_def_43']],
      ['withStmt_group_def_44', ['NEW', 'type_']],
      ['withStmt_group_42', ['withStmt_group_def_44']],
      [
        'withStmt',
        ['WITH', 'withStmt_group_42', 'endOfStatement', 'block?', 'END_WITH'],
      ],
      ['variableListStmt_group_def_46', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_46*'],
      ],
      ['variableSubStmt_group_def_48', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_48?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_18*']],
      ['subscript__group_def_51', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_51?', 'valueStmt']],
      ['subscripts_group_def_53', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_53*']],
      ['subscript_', ['subscript__group_def_51?', 'valueStmt']],
      ['argList_group_def_57', [',', 'arg']],
      ['argList_group_def_58', ['arg', 'argList_group_def_57*']],
      ['argList', ['LPAREN', 'argList_group_def_58?', 'RPAREN']],
      ['valueStmt_p_end', ['literal']],
      ['valueStmt_p_end', ['implicitCallStmt_InStmt']],
      ['valueStmt_p_end', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['valueStmt_p_end', ['NEW', 'valueStmt']],
      [
        'valueStmt_p_end',
        ['LPAREN', 'valueStmt', 'RPAREN'],
        undefined,
        'AtomExpression',
      ],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_61', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_60', ['iCS_S_MembersCall_group_def_61']],
      ['iCS_S_MembersCall_group_def_62', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_60', ['iCS_S_MembersCall_group_def_62']],
      [
        'iCS_S_MembersCall_group_def_63',
        ['iCS_S_MembersCall_group_60', 'iCS_S_MemberCall'],
      ],
      ['iCS_S_MembersCall_group_59', ['iCS_S_MembersCall_group_def_63']],
      ['iCS_S_MembersCall_group_def_64', ['iCS_S_SpaceMemberCall']],
      ['iCS_S_MembersCall_group_59', ['iCS_S_MembersCall_group_def_64']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_59',
          'iCS_S_MemberCall*',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_31*',
        ],
      ],
      ['iCS_S_MemberCall_group_66', ['iCS_S_MembersCall_group_def_61']],
      ['iCS_S_MemberCall_group_66', ['iCS_S_MembersCall_group_def_62']],
      ['iCS_S_MemberCall', ['.', 'iCS_S_MemberCall_group_66']],
      ['iCS_S_SpaceMemberCall_group_67', ['iCS_S_MembersCall_group_def_61']],
      ['iCS_S_SpaceMemberCall_group_67', ['iCS_S_MembersCall_group_def_62']],
      [
        'iCS_S_SpaceMemberCall',
        ['SPACE_DOT', 'iCS_S_SpaceMemberCall_group_67'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_31*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_31*',
        ],
      ],
      ['dictionaryCallStmt', ['!', 'ambiguousIdentifier', 'typeHint?']],
      ['literal', ['DOUBLELITERAL']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_71', ['BYVAL']],
      ['arg_group_70', ['arg_group_def_71']],
      ['arg_group_def_72', ['BYREF']],
      ['arg_group_70', ['arg_group_def_72']],
      ['arg_group_def_74', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_70?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_74?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type__group_def_76', ['baseType']],
      ['type__group_75', ['type__group_def_76']],
      ['type__group_def_77', ['complexType']],
      ['type__group_75', ['type__group_def_77']],
      ['type_', ['type__group_75', 'arg_group_def_74?']],
      ['complexType_group_def_81', ['.']],
      ['complexType_group_80', ['complexType_group_def_81']],
      ['complexType_group_def_82', ['!']],
      ['complexType_group_80', ['complexType_group_def_82']],
      [
        'complexType_group_def_83',
        ['complexType_group_80', 'ambiguousIdentifier'],
      ],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_83*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType_group_def_85', ['MULT', 'valueStmt']],
      ['baseType', ['STRING', 'baseType_group_def_85?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['fieldLength', ['MULT', 'ambiguousIdentifier']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['ISNOT']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IMP']],
      ['certainIdentifier', ['IDENTIFIER']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
      ['valueStmt', ['valueStmt_p_2'], undefined, undefined, undefined, true],
      ['valueStmt', ['NOT', 'valueStmt'], undefined, 'PrefixExpression'],
      [
        '(valueStmt_p_2)1_',
        ['IS', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_2',
        ['valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_2)1_',
        ['ISNOT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['NEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['EQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['XOR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_3',
        ['valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_3)1_',
        ['OR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['AND', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['PLUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_4',
        ['valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_4)1_',
        ['MINUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['AMPERSAND', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MULT', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_5',
        ['valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_5)1_',
        ['DIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['IDIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MOD', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_6)1_',
        ['POW', 'valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_6',
        ['valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['valueStmt_p_end'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['MINUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      [
        'valueStmt_p_7',
        ['PLUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      ['(valueStmt_p_2)1_', []],
      ['(valueStmt_p_3)1_', []],
      ['(valueStmt_p_4)1_', []],
      ['(valueStmt_p_5)1_', []],
      ['(valueStmt_p_6)1_', []],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {
    valueStmt_p_end: 'valueStmt',
    valueStmt_p_1: 'valueStmt',
    valueStmt_p_2: 'valueStmt',
    valueStmt_p_3: 'valueStmt',
    valueStmt_p_4: 'valueStmt',
    valueStmt_p_5: 'valueStmt',
    valueStmt_p_6: 'valueStmt',
    valueStmt_p_7: 'valueStmt',
  };
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 19, 35, 57, 66, 72, 73, 74, 75, 79, 81, 90, 91, 92, 93, 94,
    95, 100, 101, 102, 103, 104, 105, 112, 115, 116, 117, 118, 119, 120, 122,
    123, 124, 125, 127, 129, 132, 134, 137, 138, 148, 149, 150, 151, 152, 153,
    154, 155, 157, 158, 160, 161, 179, 180, 181, 182, 183, 187, 188, 189, 190,
    192, 193, 194, 195, 196, 205, 336, 338, 339, 340, 341, 342, 343, 344, 345,
    347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 364, 365, 366, 367,
  ]);
  const parserPredictTable = {
    $START: {
      COMMENT: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      NEWLINE: [0],
      REMCOMMENT: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      COMMENT: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      NEWLINE: [1],
      REMCOMMENT: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
      ALIAS: [9],
      AND: [9],
      ATTRIBUTE: [9],
      AS: [9],
      BEGIN: [9],
      BOOLEAN: [9],
      BYVAL: [9],
      BYREF: [9],
      BYTE: [9],
      CALL: [9],
      CASE: [9],
      CONST: [9],
      DECLARE: [9],
      DEFBOOL: [9],
      DEFBYTE: [9],
      DEFDATE: [9],
      DEFDBL: [9],
      DEFDEC: [9],
      DEFCUR: [9],
      DEFINT: [9],
      DEFLNG: [9],
      DEFOBJ: [9],
      DEFSNG: [9],
      DEFSTR: [9],
      DEFVAR: [9],
      DIM: [9],
      DO: [9],
      DOUBLE: [9],
      EACH: [9],
      ELSE: [9],
      ELSEIF: [9],
      END_ENUM: [9],
      END_FUNCTION: [9],
      END_IF: [9],
      END_PROPERTY: [9],
      END_SELECT: [9],
      END_SUB: [9],
      END_TYPE: [9],
      END_WITH: [9],
      END: [9],
      ENUM: [9],
      EQV: [9],
      ERASE: [9],
      EVENT: [9],
      EXIT_DO: [9],
      EXIT_FOR: [9],
      EXIT_FUNCTION: [9],
      EXIT_PROPERTY: [9],
      EXIT_SUB: [9],
      FALSE: [9],
      FRIEND: [9],
      FOR: [9],
      FUNCTION: [9],
      GET: [9],
      GLOBAL: [9],
      GOSUB: [9],
      GOTO: [9],
      IF: [9],
      IMPLEMENTS: [9],
      IN: [9],
      ISNOT: [9],
      IS: [9],
      INTEGER: [9],
      LONG: [9],
      LOOP: [9],
      LEN: [9],
      LET: [9],
      LIB: [9],
      LIKE: [9],
      LSET: [9],
      MACRO_CONST: [9],
      MACRO_IF: [9],
      MACRO_ELSEIF: [9],
      MACRO_ELSE: [9],
      MACRO_END_IF: [9],
      MOD: [9],
      NEXT: [9],
      NEW: [9],
      NOT: [9],
      NOTHING: [9],
      NULL: [9],
      ON_ERROR: [9],
      ON_LOCAL_ERROR: [9],
      ON: [9],
      OPTIONAL: [9],
      OPTION_BASE: [9],
      OPTION_EXPLICIT: [9],
      OPTION_COMPARE: [9],
      OPTION_PRIVATE_MODULE: [9],
      OR: [9],
      PARAMARRAY: [9],
      PRESERVE: [9],
      PRIVATE: [9],
      PROPERTY_GET: [9],
      PROPERTY_LET: [9],
      PROPERTY_SET: [9],
      PTRSAFE: [9],
      PUBLIC: [9],
      RAISEEVENT: [9],
      REDIM: [9],
      RESET: [9],
      RESUME: [9],
      RETURN: [9],
      SELECT: [9],
      SET: [9],
      SINGLE: [9],
      STATIC: [9],
      STEP: [9],
      STOP: [9],
      STRING: [9],
      SUB: [9],
      THEN: [9],
      TO: [9],
      TRUE: [9],
      TYPEOF: [9],
      UNTIL: [9],
      VARIANT: [9],
      WEND: [9],
      WHILE: [9],
      WITH: [9],
      WITHEVENTS: [9],
      XOR: [9],
      IMP: [9],
      IDENTIFIER: [9],
      SPACE_DOT: [9],
    },
    moduleDeclarations_group_def_5: {
      NEWLINE: [10],
      COMMENT: [10],
      REMCOMMENT: [10],
    },
    moduleDeclarations: {
      COMMENT: [11],
      DIM: [11],
      STATIC: [11],
      PRIVATE: [11],
      PUBLIC: [11],
      FRIEND: [11],
      GLOBAL: [11],
      OPTION_BASE: [11],
      OPTION_COMPARE: [11],
      OPTION_EXPLICIT: [11],
      OPTION_PRIVATE_MODULE: [11],
    },
    moduleDeclarationsElement: {
      COMMENT: [12],
      DIM: [13],
      STATIC: [13],
      PRIVATE: [13],
      PUBLIC: [13],
      FRIEND: [13],
      GLOBAL: [13],
      OPTION_BASE: [14],
      OPTION_COMPARE: [14],
      OPTION_EXPLICIT: [14],
      OPTION_PRIVATE_MODULE: [14],
    },
    moduleOption: {
      OPTION_BASE: [15],
      OPTION_COMPARE: [16],
      OPTION_EXPLICIT: [17],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleBody_group_def_7: {
      NEWLINE: [19],
      COMMENT: [19],
      REMCOMMENT: [19],
    },
    moduleBody: {
      PRIVATE: [20],
      PUBLIC: [20],
      FRIEND: [20],
      GLOBAL: [20],
      STATIC: [20],
      FUNCTION: [20],
      PROPERTY_GET: [20],
      PROPERTY_SET: [20],
      PROPERTY_LET: [20],
      SUB: [20],
    },
    moduleBodyElement: {
      PRIVATE: [21, 22, 23, 24, 25],
      PUBLIC: [21, 22, 23, 24, 25],
      FRIEND: [21, 22, 23, 24, 25],
      GLOBAL: [21, 22, 23, 24, 25],
      STATIC: [21, 22, 23, 24, 25],
      FUNCTION: [21],
      PROPERTY_GET: [22],
      PROPERTY_SET: [23],
      PROPERTY_LET: [24],
      SUB: [25],
    },
    visibility: {
      PRIVATE: [26],
      PUBLIC: [27],
      FRIEND: [28],
      GLOBAL: [29],
    },
    subStmt: {
      PRIVATE: [30],
      PUBLIC: [30],
      FRIEND: [30],
      GLOBAL: [30],
      STATIC: [30],
      SUB: [30],
    },
    propertyGetStmt: {
      PRIVATE: [31],
      PUBLIC: [31],
      FRIEND: [31],
      GLOBAL: [31],
      STATIC: [31],
      PROPERTY_GET: [31],
    },
    propertySetStmt: {
      PRIVATE: [32],
      PUBLIC: [32],
      FRIEND: [32],
      GLOBAL: [32],
      STATIC: [32],
      PROPERTY_SET: [32],
    },
    propertyLetStmt: {
      PRIVATE: [33],
      PUBLIC: [33],
      FRIEND: [33],
      GLOBAL: [33],
      STATIC: [33],
      PROPERTY_LET: [33],
    },
    functionStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      FUNCTION: [34],
    },
    block_group_def_9: {
      NEWLINE: [35],
      COMMENT: [35],
      REMCOMMENT: [35],
      COLON: [35],
      ALIAS: [35],
      AND: [35],
      ATTRIBUTE: [35],
      AS: [35],
      BEGIN: [35],
      BOOLEAN: [35],
      BYVAL: [35],
      BYREF: [35],
      BYTE: [35],
      CALL: [35],
      CASE: [35],
      CONST: [35],
      DECLARE: [35],
      DEFBOOL: [35],
      DEFBYTE: [35],
      DEFDATE: [35],
      DEFDBL: [35],
      DEFDEC: [35],
      DEFCUR: [35],
      DEFINT: [35],
      DEFLNG: [35],
      DEFOBJ: [35],
      DEFSNG: [35],
      DEFSTR: [35],
      DEFVAR: [35],
      DIM: [35],
      DO: [35],
      DOUBLE: [35],
      EACH: [35],
      ELSE: [35],
      ELSEIF: [35],
      END_ENUM: [35],
      END_FUNCTION: [35],
      END_IF: [35],
      END_PROPERTY: [35],
      END_SELECT: [35],
      END_SUB: [35],
      END_TYPE: [35],
      END_WITH: [35],
      END: [35],
      ENUM: [35],
      EQV: [35],
      ERASE: [35],
      EVENT: [35],
      EXIT_DO: [35],
      EXIT_FOR: [35],
      EXIT_FUNCTION: [35],
      EXIT_PROPERTY: [35],
      EXIT_SUB: [35],
      FALSE: [35],
      FRIEND: [35],
      FOR: [35],
      FUNCTION: [35],
      GET: [35],
      GLOBAL: [35],
      GOSUB: [35],
      GOTO: [35],
      IF: [35],
      IMPLEMENTS: [35],
      IN: [35],
      ISNOT: [35],
      IS: [35],
      INTEGER: [35],
      LONG: [35],
      LOOP: [35],
      LEN: [35],
      LET: [35],
      LIB: [35],
      LIKE: [35],
      LSET: [35],
      MACRO_CONST: [35],
      MACRO_IF: [35],
      MACRO_ELSEIF: [35],
      MACRO_ELSE: [35],
      MACRO_END_IF: [35],
      MOD: [35],
      NEXT: [35],
      NEW: [35],
      NOT: [35],
      NOTHING: [35],
      NULL: [35],
      ON_ERROR: [35],
      ON_LOCAL_ERROR: [35],
      ON: [35],
      OPTIONAL: [35],
      OPTION_BASE: [35],
      OPTION_EXPLICIT: [35],
      OPTION_COMPARE: [35],
      OPTION_PRIVATE_MODULE: [35],
      OR: [35],
      PARAMARRAY: [35],
      PRESERVE: [35],
      PRIVATE: [35],
      PROPERTY_GET: [35],
      PROPERTY_LET: [35],
      PROPERTY_SET: [35],
      PTRSAFE: [35],
      PUBLIC: [35],
      RAISEEVENT: [35],
      REDIM: [35],
      RESET: [35],
      RESUME: [35],
      RETURN: [35],
      SELECT: [35],
      SET: [35],
      SINGLE: [35],
      STATIC: [35],
      STEP: [35],
      STOP: [35],
      STRING: [35],
      SUB: [35],
      THEN: [35],
      TO: [35],
      TRUE: [35],
      TYPEOF: [35],
      UNTIL: [35],
      VARIANT: [35],
      WEND: [35],
      WHILE: [35],
      WITH: [35],
      WITHEVENTS: [35],
      XOR: [35],
      IMP: [35],
      IDENTIFIER: [35],
      SPACE_DOT: [35],
    },
    block: {
      ALIAS: [36],
      AND: [36],
      ATTRIBUTE: [36],
      AS: [36],
      BEGIN: [36],
      BOOLEAN: [36],
      BYVAL: [36],
      BYREF: [36],
      BYTE: [36],
      CALL: [36],
      CASE: [36],
      CONST: [36],
      DECLARE: [36],
      DEFBOOL: [36],
      DEFBYTE: [36],
      DEFDATE: [36],
      DEFDBL: [36],
      DEFDEC: [36],
      DEFCUR: [36],
      DEFINT: [36],
      DEFLNG: [36],
      DEFOBJ: [36],
      DEFSNG: [36],
      DEFSTR: [36],
      DEFVAR: [36],
      DIM: [36],
      DO: [36],
      DOUBLE: [36],
      EACH: [36],
      ELSE: [36],
      ELSEIF: [36],
      END_ENUM: [36],
      END_FUNCTION: [36],
      END_IF: [36],
      END_PROPERTY: [36],
      END_SELECT: [36],
      END_SUB: [36],
      END_TYPE: [36],
      END_WITH: [36],
      END: [36],
      ENUM: [36],
      EQV: [36],
      ERASE: [36],
      EVENT: [36],
      EXIT_DO: [36],
      EXIT_FOR: [36],
      EXIT_FUNCTION: [36],
      EXIT_PROPERTY: [36],
      EXIT_SUB: [36],
      FALSE: [36],
      FRIEND: [36],
      FOR: [36],
      FUNCTION: [36],
      GET: [36],
      GLOBAL: [36],
      GOSUB: [36],
      GOTO: [36],
      IF: [36],
      IMPLEMENTS: [36],
      IN: [36],
      ISNOT: [36],
      IS: [36],
      INTEGER: [36],
      LONG: [36],
      LOOP: [36],
      LEN: [36],
      LET: [36],
      LIB: [36],
      LIKE: [36],
      LSET: [36],
      MACRO_CONST: [36],
      MACRO_IF: [36],
      MACRO_ELSEIF: [36],
      MACRO_ELSE: [36],
      MACRO_END_IF: [36],
      MOD: [36],
      NEXT: [36],
      NEW: [36],
      NOT: [36],
      NOTHING: [36],
      NULL: [36],
      ON_ERROR: [36],
      ON_LOCAL_ERROR: [36],
      ON: [36],
      OPTIONAL: [36],
      OPTION_BASE: [36],
      OPTION_EXPLICIT: [36],
      OPTION_COMPARE: [36],
      OPTION_PRIVATE_MODULE: [36],
      OR: [36],
      PARAMARRAY: [36],
      PRESERVE: [36],
      PRIVATE: [36],
      PROPERTY_GET: [36],
      PROPERTY_LET: [36],
      PROPERTY_SET: [36],
      PTRSAFE: [36],
      PUBLIC: [36],
      RAISEEVENT: [36],
      REDIM: [36],
      RESET: [36],
      RESUME: [36],
      RETURN: [36],
      SELECT: [36],
      SET: [36],
      SINGLE: [36],
      STATIC: [36],
      STEP: [36],
      STOP: [36],
      STRING: [36],
      SUB: [36],
      THEN: [36],
      TO: [36],
      TRUE: [36],
      TYPEOF: [36],
      UNTIL: [36],
      VARIANT: [36],
      WEND: [36],
      WHILE: [36],
      WITH: [36],
      WITHEVENTS: [36],
      XOR: [36],
      IMP: [36],
      IDENTIFIER: [36],
      SPACE_DOT: [36],
    },
    blockStmt: {
      ALIAS: [37, 48, 50],
      AND: [37, 48, 50],
      ATTRIBUTE: [37, 48, 50],
      AS: [37, 48, 50],
      BEGIN: [37, 48, 50],
      BOOLEAN: [37, 48, 50],
      BYVAL: [37, 48, 50],
      BYREF: [37, 48, 50],
      BYTE: [37, 48, 50],
      CALL: [37, 45, 48, 50],
      CASE: [37, 48, 50],
      CONST: [37, 48, 50],
      DECLARE: [37, 48, 50],
      DEFBOOL: [37, 48, 50],
      DEFBYTE: [37, 48, 50],
      DEFDATE: [37, 48, 50],
      DEFDBL: [37, 48, 50],
      DEFDEC: [37, 48, 50],
      DEFCUR: [37, 48, 50],
      DEFINT: [37, 48, 50],
      DEFLNG: [37, 48, 50],
      DEFOBJ: [37, 48, 50],
      DEFSNG: [37, 48, 50],
      DEFSTR: [37, 48, 50],
      DEFVAR: [37, 48, 50],
      DIM: [37, 48, 49, 50],
      DO: [37, 48, 50],
      DOUBLE: [37, 48, 50],
      EACH: [37, 48, 50],
      ELSE: [37, 48, 50],
      ELSEIF: [37, 48, 50],
      END_ENUM: [37, 48, 50],
      END_FUNCTION: [37, 48, 50],
      END_IF: [37, 48, 50],
      END_PROPERTY: [37, 48, 50],
      END_SELECT: [37, 48, 50],
      END_SUB: [37, 48, 50],
      END_TYPE: [37, 48, 50],
      END_WITH: [37, 48, 50],
      END: [37, 44, 48, 50],
      ENUM: [37, 48, 50],
      EQV: [37, 48, 50],
      ERASE: [37, 43, 48, 50],
      EVENT: [37, 48, 50],
      EXIT_DO: [37, 44, 48, 50],
      EXIT_FOR: [37, 44, 48, 50],
      EXIT_FUNCTION: [37, 44, 48, 50],
      EXIT_PROPERTY: [37, 44, 48, 50],
      EXIT_SUB: [37, 44, 48, 50],
      FALSE: [37, 48, 50],
      FRIEND: [37, 48, 49, 50],
      FOR: [37, 48, 50],
      FUNCTION: [37, 48, 50],
      GET: [37, 48, 50],
      GLOBAL: [37, 48, 49, 50],
      GOSUB: [37, 48, 50],
      GOTO: [37, 38, 48, 50],
      IF: [37, 39, 48, 50],
      IMPLEMENTS: [37, 48, 50],
      IN: [37, 48, 50],
      ISNOT: [37, 48, 50],
      IS: [37, 48, 50],
      INTEGER: [37, 48, 50],
      LONG: [37, 48, 50],
      LOOP: [37, 48, 50],
      LEN: [37, 48, 50],
      LET: [37, 48, 50],
      LIB: [37, 48, 50],
      LIKE: [37, 48, 50],
      LSET: [37, 48, 50],
      MACRO_CONST: [37, 48, 50],
      MACRO_IF: [37, 48, 50],
      MACRO_ELSEIF: [37, 48, 50],
      MACRO_ELSE: [37, 48, 50],
      MACRO_END_IF: [37, 48, 50],
      MOD: [37, 48, 50],
      NEXT: [37, 48, 50],
      NEW: [37, 48, 50],
      NOT: [37, 48, 50],
      NOTHING: [37, 48, 50],
      NULL: [37, 48, 50],
      ON_ERROR: [37, 41, 48, 50],
      ON_LOCAL_ERROR: [37, 48, 50],
      ON: [37, 48, 50],
      OPTIONAL: [37, 48, 50],
      OPTION_BASE: [37, 48, 50],
      OPTION_EXPLICIT: [37, 48, 50],
      OPTION_COMPARE: [37, 48, 50],
      OPTION_PRIVATE_MODULE: [37, 48, 50],
      OR: [37, 48, 50],
      PARAMARRAY: [37, 48, 50],
      PRESERVE: [37, 48, 50],
      PRIVATE: [37, 48, 49, 50],
      PROPERTY_GET: [37, 48, 50],
      PROPERTY_LET: [37, 48, 50],
      PROPERTY_SET: [37, 48, 50],
      PTRSAFE: [37, 48, 50],
      PUBLIC: [37, 48, 49, 50],
      RAISEEVENT: [37, 48, 50],
      REDIM: [37, 47, 48, 50],
      RESET: [37, 48, 50],
      RESUME: [37, 48, 50],
      RETURN: [37, 48, 50],
      SELECT: [37, 40, 48, 50],
      SET: [37, 46, 48, 50],
      SINGLE: [37, 48, 50],
      STATIC: [37, 48, 49, 50],
      STEP: [37, 48, 50],
      STOP: [37, 48, 50],
      STRING: [37, 48, 50],
      SUB: [37, 48, 50],
      THEN: [37, 48, 50],
      TO: [37, 48, 50],
      TRUE: [37, 48, 50],
      TYPEOF: [37, 48, 50],
      UNTIL: [37, 48, 50],
      VARIANT: [37, 48, 50],
      WEND: [37, 48, 50],
      WHILE: [37, 48, 50],
      WITH: [37, 42, 48, 50],
      WITHEVENTS: [37, 48, 50],
      XOR: [37, 48, 50],
      IMP: [37, 48, 50],
      IDENTIFIER: [37, 48, 50],
      SPACE_DOT: [48, 50],
    },
    selectCaseStmt: {
      SELECT: [51],
    },
    sC_Selection: {
      IS: [52, 53, 54],
      DOUBLELITERAL: [53, 54],
      INTEGERLITERAL: [53, 54],
      STRINGLITERAL: [53, 54],
      NOTHING: [53, 54],
      NULL: [53, 54],
      TRUE: [53, 54],
      FALSE: [53, 54],
      SPACE_DOT: [53, 54],
      ALIAS: [53, 54],
      AND: [53, 54],
      ATTRIBUTE: [53, 54],
      AS: [53, 54],
      BEGIN: [53, 54],
      BOOLEAN: [53, 54],
      BYVAL: [53, 54],
      BYREF: [53, 54],
      BYTE: [53, 54],
      CALL: [53, 54],
      CASE: [53, 54],
      CONST: [53, 54],
      DECLARE: [53, 54],
      DEFBOOL: [53, 54],
      DEFBYTE: [53, 54],
      DEFDATE: [53, 54],
      DEFDBL: [53, 54],
      DEFDEC: [53, 54],
      DEFCUR: [53, 54],
      DEFINT: [53, 54],
      DEFLNG: [53, 54],
      DEFOBJ: [53, 54],
      DEFSNG: [53, 54],
      DEFSTR: [53, 54],
      DEFVAR: [53, 54],
      DIM: [53, 54],
      DO: [53, 54],
      DOUBLE: [53, 54],
      EACH: [53, 54],
      ELSE: [53, 54],
      ELSEIF: [53, 54],
      END_ENUM: [53, 54],
      END_FUNCTION: [53, 54],
      END_IF: [53, 54],
      END_PROPERTY: [53, 54],
      END_SELECT: [53, 54],
      END_SUB: [53, 54],
      END_TYPE: [53, 54],
      END_WITH: [53, 54],
      END: [53, 54],
      ENUM: [53, 54],
      EQV: [53, 54],
      ERASE: [53, 54],
      EVENT: [53, 54],
      EXIT_DO: [53, 54],
      EXIT_FOR: [53, 54],
      EXIT_FUNCTION: [53, 54],
      EXIT_PROPERTY: [53, 54],
      EXIT_SUB: [53, 54],
      FRIEND: [53, 54],
      FOR: [53, 54],
      FUNCTION: [53, 54],
      GET: [53, 54],
      GLOBAL: [53, 54],
      GOSUB: [53, 54],
      GOTO: [53, 54],
      IF: [53, 54],
      IMPLEMENTS: [53, 54],
      IN: [53, 54],
      ISNOT: [53, 54],
      INTEGER: [53, 54],
      LONG: [53, 54],
      LOOP: [53, 54],
      LEN: [53, 54],
      LET: [53, 54],
      LIB: [53, 54],
      LIKE: [53, 54],
      LSET: [53, 54],
      MACRO_CONST: [53, 54],
      MACRO_IF: [53, 54],
      MACRO_ELSEIF: [53, 54],
      MACRO_ELSE: [53, 54],
      MACRO_END_IF: [53, 54],
      MOD: [53, 54],
      NEXT: [53, 54],
      NEW: [53, 54],
      NOT: [53, 54],
      ON_ERROR: [53, 54],
      ON_LOCAL_ERROR: [53, 54],
      ON: [53, 54],
      OPTIONAL: [53, 54],
      OPTION_BASE: [53, 54],
      OPTION_EXPLICIT: [53, 54],
      OPTION_COMPARE: [53, 54],
      OPTION_PRIVATE_MODULE: [53, 54],
      OR: [53, 54],
      PARAMARRAY: [53, 54],
      PRESERVE: [53, 54],
      PRIVATE: [53, 54],
      PROPERTY_GET: [53, 54],
      PROPERTY_LET: [53, 54],
      PROPERTY_SET: [53, 54],
      PTRSAFE: [53, 54],
      PUBLIC: [53, 54],
      RAISEEVENT: [53, 54],
      REDIM: [53, 54],
      RESET: [53, 54],
      RESUME: [53, 54],
      RETURN: [53, 54],
      SELECT: [53, 54],
      SET: [53, 54],
      SINGLE: [53, 54],
      STATIC: [53, 54],
      STEP: [53, 54],
      STOP: [53, 54],
      STRING: [53, 54],
      SUB: [53, 54],
      THEN: [53, 54],
      TO: [53, 54],
      TYPEOF: [53, 54],
      UNTIL: [53, 54],
      VARIANT: [53, 54],
      WEND: [53, 54],
      WHILE: [53, 54],
      WITH: [53, 54],
      WITHEVENTS: [53, 54],
      XOR: [53, 54],
      IMP: [53, 54],
      IDENTIFIER: [53, 54],
      LPAREN: [53, 54],
      MINUS: [53, 54],
      PLUS: [53, 54],
    },
    sC_Case: {
      CASE: [55],
    },
    sC_Cond: {
      ELSE: [56, 58],
      IS: [58],
      DOUBLELITERAL: [58],
      INTEGERLITERAL: [58],
      STRINGLITERAL: [58],
      NOTHING: [58],
      NULL: [58],
      TRUE: [58],
      FALSE: [58],
      SPACE_DOT: [58],
      ALIAS: [58],
      AND: [58],
      ATTRIBUTE: [58],
      AS: [58],
      BEGIN: [58],
      BOOLEAN: [58],
      BYVAL: [58],
      BYREF: [58],
      BYTE: [58],
      CALL: [58],
      CASE: [58],
      CONST: [58],
      DECLARE: [58],
      DEFBOOL: [58],
      DEFBYTE: [58],
      DEFDATE: [58],
      DEFDBL: [58],
      DEFDEC: [58],
      DEFCUR: [58],
      DEFINT: [58],
      DEFLNG: [58],
      DEFOBJ: [58],
      DEFSNG: [58],
      DEFSTR: [58],
      DEFVAR: [58],
      DIM: [58],
      DO: [58],
      DOUBLE: [58],
      EACH: [58],
      ELSEIF: [58],
      END_ENUM: [58],
      END_FUNCTION: [58],
      END_IF: [58],
      END_PROPERTY: [58],
      END_SELECT: [58],
      END_SUB: [58],
      END_TYPE: [58],
      END_WITH: [58],
      END: [58],
      ENUM: [58],
      EQV: [58],
      ERASE: [58],
      EVENT: [58],
      EXIT_DO: [58],
      EXIT_FOR: [58],
      EXIT_FUNCTION: [58],
      EXIT_PROPERTY: [58],
      EXIT_SUB: [58],
      FRIEND: [58],
      FOR: [58],
      FUNCTION: [58],
      GET: [58],
      GLOBAL: [58],
      GOSUB: [58],
      GOTO: [58],
      IF: [58],
      IMPLEMENTS: [58],
      IN: [58],
      ISNOT: [58],
      INTEGER: [58],
      LONG: [58],
      LOOP: [58],
      LEN: [58],
      LET: [58],
      LIB: [58],
      LIKE: [58],
      LSET: [58],
      MACRO_CONST: [58],
      MACRO_IF: [58],
      MACRO_ELSEIF: [58],
      MACRO_ELSE: [58],
      MACRO_END_IF: [58],
      MOD: [58],
      NEXT: [58],
      NEW: [58],
      NOT: [58],
      ON_ERROR: [58],
      ON_LOCAL_ERROR: [58],
      ON: [58],
      OPTIONAL: [58],
      OPTION_BASE: [58],
      OPTION_EXPLICIT: [58],
      OPTION_COMPARE: [58],
      OPTION_PRIVATE_MODULE: [58],
      OR: [58],
      PARAMARRAY: [58],
      PRESERVE: [58],
      PRIVATE: [58],
      PROPERTY_GET: [58],
      PROPERTY_LET: [58],
      PROPERTY_SET: [58],
      PTRSAFE: [58],
      PUBLIC: [58],
      RAISEEVENT: [58],
      REDIM: [58],
      RESET: [58],
      RESUME: [58],
      RETURN: [58],
      SELECT: [58],
      SET: [58],
      SINGLE: [58],
      STATIC: [58],
      STEP: [58],
      STOP: [58],
      STRING: [58],
      SUB: [58],
      THEN: [58],
      TO: [58],
      TYPEOF: [58],
      UNTIL: [58],
      VARIANT: [58],
      WEND: [58],
      WHILE: [58],
      WITH: [58],
      WITHEVENTS: [58],
      XOR: [58],
      IMP: [58],
      IDENTIFIER: [58],
      LPAREN: [58],
      MINUS: [58],
      PLUS: [58],
    },
    sC_Cond_group_def_11: {
      ',': [57],
    },
    comparisonOperator: {
      LT: [59],
      LEQ: [60],
      GT: [61],
      GEQ: [62],
      EQ: [63],
      NEQ: [64],
      IS: [65],
    },
    ifThenElseStmt_group_def_13: {
      ELSE: [66],
    },
    ifThenElseStmt: {
      IF: [67, 68],
    },
    ifBlockStmt: {
      IF: [69],
    },
    ifElseIfBlockStmt: {
      ELSEIF: [70],
    },
    ifElseBlockStmt: {
      ELSE: [71],
    },
    onErrorStmt_group_def_15: {
      ALIAS: [72],
      AND: [72],
      ATTRIBUTE: [72],
      AS: [72],
      BEGIN: [72],
      BOOLEAN: [72],
      BYVAL: [72],
      BYREF: [72],
      BYTE: [72],
      CALL: [72],
      CASE: [72],
      CONST: [72],
      DECLARE: [72],
      DEFBOOL: [72],
      DEFBYTE: [72],
      DEFDATE: [72],
      DEFDBL: [72],
      DEFDEC: [72],
      DEFCUR: [72],
      DEFINT: [72],
      DEFLNG: [72],
      DEFOBJ: [72],
      DEFSNG: [72],
      DEFSTR: [72],
      DEFVAR: [72],
      DIM: [72],
      DO: [72],
      DOUBLE: [72],
      EACH: [72],
      ELSE: [72],
      ELSEIF: [72],
      END_ENUM: [72],
      END_FUNCTION: [72],
      END_IF: [72],
      END_PROPERTY: [72],
      END_SELECT: [72],
      END_SUB: [72],
      END_TYPE: [72],
      END_WITH: [72],
      END: [72],
      ENUM: [72],
      EQV: [72],
      ERASE: [72],
      EVENT: [72],
      EXIT_DO: [72],
      EXIT_FOR: [72],
      EXIT_FUNCTION: [72],
      EXIT_PROPERTY: [72],
      EXIT_SUB: [72],
      FALSE: [72],
      FRIEND: [72],
      FOR: [72],
      FUNCTION: [72],
      GET: [72],
      GLOBAL: [72],
      GOSUB: [72],
      GOTO: [72],
      IF: [72],
      IMPLEMENTS: [72],
      IN: [72],
      ISNOT: [72],
      IS: [72],
      INTEGER: [72],
      LONG: [72],
      LOOP: [72],
      LEN: [72],
      LET: [72],
      LIB: [72],
      LIKE: [72],
      LSET: [72],
      MACRO_CONST: [72],
      MACRO_IF: [72],
      MACRO_ELSEIF: [72],
      MACRO_ELSE: [72],
      MACRO_END_IF: [72],
      MOD: [72],
      NEXT: [72],
      NEW: [72],
      NOT: [72],
      NOTHING: [72],
      NULL: [72],
      ON_ERROR: [72],
      ON_LOCAL_ERROR: [72],
      ON: [72],
      OPTIONAL: [72],
      OPTION_BASE: [72],
      OPTION_EXPLICIT: [72],
      OPTION_COMPARE: [72],
      OPTION_PRIVATE_MODULE: [72],
      OR: [72],
      PARAMARRAY: [72],
      PRESERVE: [72],
      PRIVATE: [72],
      PROPERTY_GET: [72],
      PROPERTY_LET: [72],
      PROPERTY_SET: [72],
      PTRSAFE: [72],
      PUBLIC: [72],
      RAISEEVENT: [72],
      REDIM: [72],
      RESET: [72],
      RESUME: [72],
      RETURN: [72],
      SELECT: [72],
      SET: [72],
      SINGLE: [72],
      STATIC: [72],
      STEP: [72],
      STOP: [72],
      STRING: [72],
      SUB: [72],
      THEN: [72],
      TO: [72],
      TRUE: [72],
      TYPEOF: [72],
      UNTIL: [72],
      VARIANT: [72],
      WEND: [72],
      WHILE: [72],
      WITH: [72],
      WITHEVENTS: [72],
      XOR: [72],
      IMP: [72],
      IDENTIFIER: [72],
    },
    onErrorStmt_group_14: {
      ALIAS: [73],
      AND: [73],
      ATTRIBUTE: [73],
      AS: [73],
      BEGIN: [73],
      BOOLEAN: [73],
      BYVAL: [73],
      BYREF: [73],
      BYTE: [73],
      CALL: [73],
      CASE: [73],
      CONST: [73],
      DECLARE: [73],
      DEFBOOL: [73],
      DEFBYTE: [73],
      DEFDATE: [73],
      DEFDBL: [73],
      DEFDEC: [73],
      DEFCUR: [73],
      DEFINT: [73],
      DEFLNG: [73],
      DEFOBJ: [73],
      DEFSNG: [73],
      DEFSTR: [73],
      DEFVAR: [73],
      DIM: [73],
      DO: [73],
      DOUBLE: [73],
      EACH: [73],
      ELSE: [73],
      ELSEIF: [73],
      END_ENUM: [73],
      END_FUNCTION: [73],
      END_IF: [73],
      END_PROPERTY: [73],
      END_SELECT: [73],
      END_SUB: [73],
      END_TYPE: [73],
      END_WITH: [73],
      END: [73],
      ENUM: [73],
      EQV: [73],
      ERASE: [73],
      EVENT: [73],
      EXIT_DO: [73],
      EXIT_FOR: [73],
      EXIT_FUNCTION: [73],
      EXIT_PROPERTY: [73],
      EXIT_SUB: [73],
      FALSE: [73],
      FRIEND: [73],
      FOR: [73],
      FUNCTION: [73],
      GET: [73],
      GLOBAL: [73],
      GOSUB: [73],
      GOTO: [73],
      IF: [73],
      IMPLEMENTS: [73],
      IN: [73],
      ISNOT: [73],
      IS: [73],
      INTEGER: [73],
      LONG: [73],
      LOOP: [73],
      LEN: [73],
      LET: [73],
      LIB: [73],
      LIKE: [73],
      LSET: [73],
      MACRO_CONST: [73],
      MACRO_IF: [73],
      MACRO_ELSEIF: [73],
      MACRO_ELSE: [73],
      MACRO_END_IF: [73],
      MOD: [73],
      NEXT: [73],
      NEW: [73],
      NOT: [73],
      NOTHING: [73],
      NULL: [73],
      ON_ERROR: [73],
      ON_LOCAL_ERROR: [73],
      ON: [73],
      OPTIONAL: [73],
      OPTION_BASE: [73],
      OPTION_EXPLICIT: [73],
      OPTION_COMPARE: [73],
      OPTION_PRIVATE_MODULE: [73],
      OR: [73],
      PARAMARRAY: [73],
      PRESERVE: [73],
      PRIVATE: [73],
      PROPERTY_GET: [73],
      PROPERTY_LET: [73],
      PROPERTY_SET: [73],
      PTRSAFE: [73],
      PUBLIC: [73],
      RAISEEVENT: [73],
      REDIM: [73],
      RESET: [73],
      RESUME: [73],
      RETURN: [73],
      SELECT: [73],
      SET: [73],
      SINGLE: [73],
      STATIC: [73],
      STEP: [73],
      STOP: [73],
      STRING: [73],
      SUB: [73],
      THEN: [73],
      TO: [73],
      TRUE: [73],
      TYPEOF: [73],
      UNTIL: [73],
      VARIANT: [73],
      WEND: [73],
      WHILE: [73],
      WITH: [73],
      WITHEVENTS: [73],
      XOR: [73],
      IMP: [73],
      IDENTIFIER: [73],
      MINUS: [75],
    },
    onErrorStmt_group_def_16: {
      MINUS: [74],
    },
    onErrorStmt: {
      ON_ERROR: [76],
    },
    lineLabel: {
      ALIAS: [77],
      AND: [77],
      ATTRIBUTE: [77],
      AS: [77],
      BEGIN: [77],
      BOOLEAN: [77],
      BYVAL: [77],
      BYREF: [77],
      BYTE: [77],
      CALL: [77],
      CASE: [77],
      CONST: [77],
      DECLARE: [77],
      DEFBOOL: [77],
      DEFBYTE: [77],
      DEFDATE: [77],
      DEFDBL: [77],
      DEFDEC: [77],
      DEFCUR: [77],
      DEFINT: [77],
      DEFLNG: [77],
      DEFOBJ: [77],
      DEFSNG: [77],
      DEFSTR: [77],
      DEFVAR: [77],
      DIM: [77],
      DO: [77],
      DOUBLE: [77],
      EACH: [77],
      ELSE: [77],
      ELSEIF: [77],
      END_ENUM: [77],
      END_FUNCTION: [77],
      END_IF: [77],
      END_PROPERTY: [77],
      END_SELECT: [77],
      END_SUB: [77],
      END_TYPE: [77],
      END_WITH: [77],
      END: [77],
      ENUM: [77],
      EQV: [77],
      ERASE: [77],
      EVENT: [77],
      EXIT_DO: [77],
      EXIT_FOR: [77],
      EXIT_FUNCTION: [77],
      EXIT_PROPERTY: [77],
      EXIT_SUB: [77],
      FALSE: [77],
      FRIEND: [77],
      FOR: [77],
      FUNCTION: [77],
      GET: [77],
      GLOBAL: [77],
      GOSUB: [77],
      GOTO: [77],
      IF: [77],
      IMPLEMENTS: [77],
      IN: [77],
      ISNOT: [77],
      IS: [77],
      INTEGER: [77],
      LONG: [77],
      LOOP: [77],
      LEN: [77],
      LET: [77],
      LIB: [77],
      LIKE: [77],
      LSET: [77],
      MACRO_CONST: [77],
      MACRO_IF: [77],
      MACRO_ELSEIF: [77],
      MACRO_ELSE: [77],
      MACRO_END_IF: [77],
      MOD: [77],
      NEXT: [77],
      NEW: [77],
      NOT: [77],
      NOTHING: [77],
      NULL: [77],
      ON_ERROR: [77],
      ON_LOCAL_ERROR: [77],
      ON: [77],
      OPTIONAL: [77],
      OPTION_BASE: [77],
      OPTION_EXPLICIT: [77],
      OPTION_COMPARE: [77],
      OPTION_PRIVATE_MODULE: [77],
      OR: [77],
      PARAMARRAY: [77],
      PRESERVE: [77],
      PRIVATE: [77],
      PROPERTY_GET: [77],
      PROPERTY_LET: [77],
      PROPERTY_SET: [77],
      PTRSAFE: [77],
      PUBLIC: [77],
      RAISEEVENT: [77],
      REDIM: [77],
      RESET: [77],
      RESUME: [77],
      RETURN: [77],
      SELECT: [77],
      SET: [77],
      SINGLE: [77],
      STATIC: [77],
      STEP: [77],
      STOP: [77],
      STRING: [77],
      SUB: [77],
      THEN: [77],
      TO: [77],
      TRUE: [77],
      TYPEOF: [77],
      UNTIL: [77],
      VARIANT: [77],
      WEND: [77],
      WHILE: [77],
      WITH: [77],
      WITHEVENTS: [77],
      XOR: [77],
      IMP: [77],
      IDENTIFIER: [77],
    },
    goToStmt: {
      GOTO: [78],
    },
    eraseStmt_group_def_18: {
      ',': [79],
    },
    eraseStmt: {
      ERASE: [80],
    },
    redimStmt_group_def_20: {
      ',': [81],
    },
    redimStmt: {
      REDIM: [82],
    },
    redimSubStmt: {
      SPACE_DOT: [83],
      ALIAS: [83],
      AND: [83],
      ATTRIBUTE: [83],
      AS: [83],
      BEGIN: [83],
      BOOLEAN: [83],
      BYVAL: [83],
      BYREF: [83],
      BYTE: [83],
      CALL: [83],
      CASE: [83],
      CONST: [83],
      DECLARE: [83],
      DEFBOOL: [83],
      DEFBYTE: [83],
      DEFDATE: [83],
      DEFDBL: [83],
      DEFDEC: [83],
      DEFCUR: [83],
      DEFINT: [83],
      DEFLNG: [83],
      DEFOBJ: [83],
      DEFSNG: [83],
      DEFSTR: [83],
      DEFVAR: [83],
      DIM: [83],
      DO: [83],
      DOUBLE: [83],
      EACH: [83],
      ELSE: [83],
      ELSEIF: [83],
      END_ENUM: [83],
      END_FUNCTION: [83],
      END_IF: [83],
      END_PROPERTY: [83],
      END_SELECT: [83],
      END_SUB: [83],
      END_TYPE: [83],
      END_WITH: [83],
      END: [83],
      ENUM: [83],
      EQV: [83],
      ERASE: [83],
      EVENT: [83],
      EXIT_DO: [83],
      EXIT_FOR: [83],
      EXIT_FUNCTION: [83],
      EXIT_PROPERTY: [83],
      EXIT_SUB: [83],
      FALSE: [83],
      FRIEND: [83],
      FOR: [83],
      FUNCTION: [83],
      GET: [83],
      GLOBAL: [83],
      GOSUB: [83],
      GOTO: [83],
      IF: [83],
      IMPLEMENTS: [83],
      IN: [83],
      ISNOT: [83],
      IS: [83],
      INTEGER: [83],
      LONG: [83],
      LOOP: [83],
      LEN: [83],
      LET: [83],
      LIB: [83],
      LIKE: [83],
      LSET: [83],
      MACRO_CONST: [83],
      MACRO_IF: [83],
      MACRO_ELSEIF: [83],
      MACRO_ELSE: [83],
      MACRO_END_IF: [83],
      MOD: [83],
      NEXT: [83],
      NEW: [83],
      NOT: [83],
      NOTHING: [83],
      NULL: [83],
      ON_ERROR: [83],
      ON_LOCAL_ERROR: [83],
      ON: [83],
      OPTIONAL: [83],
      OPTION_BASE: [83],
      OPTION_EXPLICIT: [83],
      OPTION_COMPARE: [83],
      OPTION_PRIVATE_MODULE: [83],
      OR: [83],
      PARAMARRAY: [83],
      PRESERVE: [83],
      PRIVATE: [83],
      PROPERTY_GET: [83],
      PROPERTY_LET: [83],
      PROPERTY_SET: [83],
      PTRSAFE: [83],
      PUBLIC: [83],
      RAISEEVENT: [83],
      REDIM: [83],
      RESET: [83],
      RESUME: [83],
      RETURN: [83],
      SELECT: [83],
      SET: [83],
      SINGLE: [83],
      STATIC: [83],
      STEP: [83],
      STOP: [83],
      STRING: [83],
      SUB: [83],
      THEN: [83],
      TO: [83],
      TRUE: [83],
      TYPEOF: [83],
      UNTIL: [83],
      VARIANT: [83],
      WEND: [83],
      WHILE: [83],
      WITH: [83],
      WITHEVENTS: [83],
      XOR: [83],
      IMP: [83],
      IDENTIFIER: [83],
    },
    exitStmt: {
      EXIT_DO: [84],
      EXIT_FOR: [85],
      EXIT_FUNCTION: [86],
      EXIT_PROPERTY: [87],
      EXIT_SUB: [88],
      END: [89],
    },
    letStmt_group_def_22: {
      EQ: [90],
    },
    letStmt_group_21: {
      EQ: [91],
      PLUS_EQ: [93],
      MINUS_EQ: [95],
    },
    letStmt_group_def_23: {
      PLUS_EQ: [92],
    },
    letStmt_group_def_24: {
      MINUS_EQ: [94],
    },
    letStmt: {
      LET: [96],
      SPACE_DOT: [96],
      ALIAS: [96],
      AND: [96],
      ATTRIBUTE: [96],
      AS: [96],
      BEGIN: [96],
      BOOLEAN: [96],
      BYVAL: [96],
      BYREF: [96],
      BYTE: [96],
      CALL: [96],
      CASE: [96],
      CONST: [96],
      DECLARE: [96],
      DEFBOOL: [96],
      DEFBYTE: [96],
      DEFDATE: [96],
      DEFDBL: [96],
      DEFDEC: [96],
      DEFCUR: [96],
      DEFINT: [96],
      DEFLNG: [96],
      DEFOBJ: [96],
      DEFSNG: [96],
      DEFSTR: [96],
      DEFVAR: [96],
      DIM: [96],
      DO: [96],
      DOUBLE: [96],
      EACH: [96],
      ELSE: [96],
      ELSEIF: [96],
      END_ENUM: [96],
      END_FUNCTION: [96],
      END_IF: [96],
      END_PROPERTY: [96],
      END_SELECT: [96],
      END_SUB: [96],
      END_TYPE: [96],
      END_WITH: [96],
      END: [96],
      ENUM: [96],
      EQV: [96],
      ERASE: [96],
      EVENT: [96],
      EXIT_DO: [96],
      EXIT_FOR: [96],
      EXIT_FUNCTION: [96],
      EXIT_PROPERTY: [96],
      EXIT_SUB: [96],
      FALSE: [96],
      FRIEND: [96],
      FOR: [96],
      FUNCTION: [96],
      GET: [96],
      GLOBAL: [96],
      GOSUB: [96],
      GOTO: [96],
      IF: [96],
      IMPLEMENTS: [96],
      IN: [96],
      ISNOT: [96],
      IS: [96],
      INTEGER: [96],
      LONG: [96],
      LOOP: [96],
      LEN: [96],
      LIB: [96],
      LIKE: [96],
      LSET: [96],
      MACRO_CONST: [96],
      MACRO_IF: [96],
      MACRO_ELSEIF: [96],
      MACRO_ELSE: [96],
      MACRO_END_IF: [96],
      MOD: [96],
      NEXT: [96],
      NEW: [96],
      NOT: [96],
      NOTHING: [96],
      NULL: [96],
      ON_ERROR: [96],
      ON_LOCAL_ERROR: [96],
      ON: [96],
      OPTIONAL: [96],
      OPTION_BASE: [96],
      OPTION_EXPLICIT: [96],
      OPTION_COMPARE: [96],
      OPTION_PRIVATE_MODULE: [96],
      OR: [96],
      PARAMARRAY: [96],
      PRESERVE: [96],
      PRIVATE: [96],
      PROPERTY_GET: [96],
      PROPERTY_LET: [96],
      PROPERTY_SET: [96],
      PTRSAFE: [96],
      PUBLIC: [96],
      RAISEEVENT: [96],
      REDIM: [96],
      RESET: [96],
      RESUME: [96],
      RETURN: [96],
      SELECT: [96],
      SET: [96],
      SINGLE: [96],
      STATIC: [96],
      STEP: [96],
      STOP: [96],
      STRING: [96],
      SUB: [96],
      THEN: [96],
      TO: [96],
      TRUE: [96],
      TYPEOF: [96],
      UNTIL: [96],
      VARIANT: [96],
      WEND: [96],
      WHILE: [96],
      WITH: [96],
      WITHEVENTS: [96],
      XOR: [96],
      IMP: [96],
      IDENTIFIER: [96],
    },
    setStmt: {
      SET: [97],
    },
    explicitCallStmt: {
      CALL: [98, 99],
    },
    eCS_MemberProcedureCall_group_def_26: {
      SPACE_DOT: [100],
      ALIAS: [100],
      AND: [100],
      ATTRIBUTE: [100],
      AS: [100],
      BEGIN: [100],
      BOOLEAN: [100],
      BYVAL: [100],
      BYREF: [100],
      BYTE: [100],
      CALL: [100],
      CASE: [100],
      CONST: [100],
      DECLARE: [100],
      DEFBOOL: [100],
      DEFBYTE: [100],
      DEFDATE: [100],
      DEFDBL: [100],
      DEFDEC: [100],
      DEFCUR: [100],
      DEFINT: [100],
      DEFLNG: [100],
      DEFOBJ: [100],
      DEFSNG: [100],
      DEFSTR: [100],
      DEFVAR: [100],
      DIM: [100],
      DO: [100],
      DOUBLE: [100],
      EACH: [100],
      ELSE: [100],
      ELSEIF: [100],
      END_ENUM: [100],
      END_FUNCTION: [100],
      END_IF: [100],
      END_PROPERTY: [100],
      END_SELECT: [100],
      END_SUB: [100],
      END_TYPE: [100],
      END_WITH: [100],
      END: [100],
      ENUM: [100],
      EQV: [100],
      ERASE: [100],
      EVENT: [100],
      EXIT_DO: [100],
      EXIT_FOR: [100],
      EXIT_FUNCTION: [100],
      EXIT_PROPERTY: [100],
      EXIT_SUB: [100],
      FALSE: [100],
      FRIEND: [100],
      FOR: [100],
      FUNCTION: [100],
      GET: [100],
      GLOBAL: [100],
      GOSUB: [100],
      GOTO: [100],
      IF: [100],
      IMPLEMENTS: [100],
      IN: [100],
      ISNOT: [100],
      IS: [100],
      INTEGER: [100],
      LONG: [100],
      LOOP: [100],
      LEN: [100],
      LET: [100],
      LIB: [100],
      LIKE: [100],
      LSET: [100],
      MACRO_CONST: [100],
      MACRO_IF: [100],
      MACRO_ELSEIF: [100],
      MACRO_ELSE: [100],
      MACRO_END_IF: [100],
      MOD: [100],
      NEXT: [100],
      NEW: [100],
      NOT: [100],
      NOTHING: [100],
      NULL: [100],
      ON_ERROR: [100],
      ON_LOCAL_ERROR: [100],
      ON: [100],
      OPTIONAL: [100],
      OPTION_BASE: [100],
      OPTION_EXPLICIT: [100],
      OPTION_COMPARE: [100],
      OPTION_PRIVATE_MODULE: [100],
      OR: [100],
      PARAMARRAY: [100],
      PRESERVE: [100],
      PRIVATE: [100],
      PROPERTY_GET: [100],
      PROPERTY_LET: [100],
      PROPERTY_SET: [100],
      PTRSAFE: [100],
      PUBLIC: [100],
      RAISEEVENT: [100],
      REDIM: [100],
      RESET: [100],
      RESUME: [100],
      RETURN: [100],
      SELECT: [100],
      SET: [100],
      SINGLE: [100],
      STATIC: [100],
      STEP: [100],
      STOP: [100],
      STRING: [100],
      SUB: [100],
      THEN: [100],
      TO: [100],
      TRUE: [100],
      TYPEOF: [100],
      UNTIL: [100],
      VARIANT: [100],
      WEND: [100],
      WHILE: [100],
      WITH: [100],
      WITHEVENTS: [100],
      XOR: [100],
      IMP: [100],
      IDENTIFIER: [100],
      '.': [100],
    },
    eCS_MemberProcedureCall_group_25: {
      SPACE_DOT: [101, 103],
      ALIAS: [101],
      AND: [101],
      ATTRIBUTE: [101],
      AS: [101],
      BEGIN: [101],
      BOOLEAN: [101],
      BYVAL: [101],
      BYREF: [101],
      BYTE: [101],
      CALL: [101],
      CASE: [101],
      CONST: [101],
      DECLARE: [101],
      DEFBOOL: [101],
      DEFBYTE: [101],
      DEFDATE: [101],
      DEFDBL: [101],
      DEFDEC: [101],
      DEFCUR: [101],
      DEFINT: [101],
      DEFLNG: [101],
      DEFOBJ: [101],
      DEFSNG: [101],
      DEFSTR: [101],
      DEFVAR: [101],
      DIM: [101],
      DO: [101],
      DOUBLE: [101],
      EACH: [101],
      ELSE: [101],
      ELSEIF: [101],
      END_ENUM: [101],
      END_FUNCTION: [101],
      END_IF: [101],
      END_PROPERTY: [101],
      END_SELECT: [101],
      END_SUB: [101],
      END_TYPE: [101],
      END_WITH: [101],
      END: [101],
      ENUM: [101],
      EQV: [101],
      ERASE: [101],
      EVENT: [101],
      EXIT_DO: [101],
      EXIT_FOR: [101],
      EXIT_FUNCTION: [101],
      EXIT_PROPERTY: [101],
      EXIT_SUB: [101],
      FALSE: [101],
      FRIEND: [101],
      FOR: [101],
      FUNCTION: [101],
      GET: [101],
      GLOBAL: [101],
      GOSUB: [101],
      GOTO: [101],
      IF: [101],
      IMPLEMENTS: [101],
      IN: [101],
      ISNOT: [101],
      IS: [101],
      INTEGER: [101],
      LONG: [101],
      LOOP: [101],
      LEN: [101],
      LET: [101],
      LIB: [101],
      LIKE: [101],
      LSET: [101],
      MACRO_CONST: [101],
      MACRO_IF: [101],
      MACRO_ELSEIF: [101],
      MACRO_ELSE: [101],
      MACRO_END_IF: [101],
      MOD: [101],
      NEXT: [101],
      NEW: [101],
      NOT: [101],
      NOTHING: [101],
      NULL: [101],
      ON_ERROR: [101],
      ON_LOCAL_ERROR: [101],
      ON: [101],
      OPTIONAL: [101],
      OPTION_BASE: [101],
      OPTION_EXPLICIT: [101],
      OPTION_COMPARE: [101],
      OPTION_PRIVATE_MODULE: [101],
      OR: [101],
      PARAMARRAY: [101],
      PRESERVE: [101],
      PRIVATE: [101],
      PROPERTY_GET: [101],
      PROPERTY_LET: [101],
      PROPERTY_SET: [101],
      PTRSAFE: [101],
      PUBLIC: [101],
      RAISEEVENT: [101],
      REDIM: [101],
      RESET: [101],
      RESUME: [101],
      RETURN: [101],
      SELECT: [101],
      SET: [101],
      SINGLE: [101],
      STATIC: [101],
      STEP: [101],
      STOP: [101],
      STRING: [101],
      SUB: [101],
      THEN: [101],
      TO: [101],
      TRUE: [101],
      TYPEOF: [101],
      UNTIL: [101],
      VARIANT: [101],
      WEND: [101],
      WHILE: [101],
      WITH: [101],
      WITHEVENTS: [101],
      XOR: [101],
      IMP: [101],
      IDENTIFIER: [101],
      '.': [101],
    },
    eCS_MemberProcedureCall_group_def_27: {
      SPACE_DOT: [102],
    },
    eCS_MemberProcedureCall_group_def_29: {
      LPAREN: [104],
    },
    eCS_MemberProcedureCall_group_def_31: {
      LPAREN: [105],
    },
    eCS_MemberProcedureCall: {
      CALL: [106],
    },
    eCS_ProcedureCall: {
      CALL: [107],
    },
    implicitCallStmt_InBlock: {
      SPACE_DOT: [108],
      ALIAS: [108],
      AND: [108],
      ATTRIBUTE: [108],
      AS: [108],
      BEGIN: [108],
      BOOLEAN: [108],
      BYVAL: [108],
      BYREF: [108],
      BYTE: [108],
      CALL: [108],
      CASE: [108],
      CONST: [108],
      DECLARE: [108],
      DEFBOOL: [108],
      DEFBYTE: [108],
      DEFDATE: [108],
      DEFDBL: [108],
      DEFDEC: [108],
      DEFCUR: [108],
      DEFINT: [108],
      DEFLNG: [108],
      DEFOBJ: [108],
      DEFSNG: [108],
      DEFSTR: [108],
      DEFVAR: [108],
      DIM: [108],
      DO: [108],
      DOUBLE: [108],
      EACH: [108],
      ELSE: [108],
      ELSEIF: [108],
      END_ENUM: [108],
      END_FUNCTION: [108],
      END_IF: [108],
      END_PROPERTY: [108],
      END_SELECT: [108],
      END_SUB: [108],
      END_TYPE: [108],
      END_WITH: [108],
      END: [108],
      ENUM: [108],
      EQV: [108],
      ERASE: [108],
      EVENT: [108],
      EXIT_DO: [108],
      EXIT_FOR: [108],
      EXIT_FUNCTION: [108],
      EXIT_PROPERTY: [108],
      EXIT_SUB: [108],
      FALSE: [108],
      FRIEND: [108],
      FOR: [108],
      FUNCTION: [108],
      GET: [108],
      GLOBAL: [108],
      GOSUB: [108],
      GOTO: [108],
      IF: [108],
      IMPLEMENTS: [108],
      IN: [108],
      ISNOT: [108],
      IS: [108],
      INTEGER: [108],
      LONG: [108],
      LOOP: [108],
      LEN: [108],
      LET: [108],
      LIB: [108],
      LIKE: [108],
      LSET: [108],
      MACRO_CONST: [108],
      MACRO_IF: [108],
      MACRO_ELSEIF: [108],
      MACRO_ELSE: [108],
      MACRO_END_IF: [108],
      MOD: [108],
      NEXT: [108],
      NEW: [108],
      NOT: [108],
      NOTHING: [108],
      NULL: [108],
      ON_ERROR: [108],
      ON_LOCAL_ERROR: [108],
      ON: [108],
      OPTIONAL: [108],
      OPTION_BASE: [108],
      OPTION_EXPLICIT: [108],
      OPTION_COMPARE: [108],
      OPTION_PRIVATE_MODULE: [108],
      OR: [108],
      PARAMARRAY: [108],
      PRESERVE: [108],
      PRIVATE: [108],
      PROPERTY_GET: [108],
      PROPERTY_LET: [108],
      PROPERTY_SET: [108],
      PTRSAFE: [108],
      PUBLIC: [108],
      RAISEEVENT: [108],
      REDIM: [108],
      RESET: [108],
      RESUME: [108],
      RETURN: [108],
      SELECT: [108],
      SET: [108],
      SINGLE: [108],
      STATIC: [108],
      STEP: [108],
      STOP: [108],
      STRING: [108],
      SUB: [108],
      THEN: [108],
      TO: [108],
      TRUE: [108],
      TYPEOF: [108],
      UNTIL: [108],
      VARIANT: [108],
      WEND: [108],
      WHILE: [108],
      WITH: [108],
      WITHEVENTS: [108],
      XOR: [108],
      IMP: [108],
      IDENTIFIER: [108, 109],
    },
    iCS_B_MemberProcedureCall: {
      SPACE_DOT: [110],
      ALIAS: [110],
      AND: [110],
      ATTRIBUTE: [110],
      AS: [110],
      BEGIN: [110],
      BOOLEAN: [110],
      BYVAL: [110],
      BYREF: [110],
      BYTE: [110],
      CALL: [110],
      CASE: [110],
      CONST: [110],
      DECLARE: [110],
      DEFBOOL: [110],
      DEFBYTE: [110],
      DEFDATE: [110],
      DEFDBL: [110],
      DEFDEC: [110],
      DEFCUR: [110],
      DEFINT: [110],
      DEFLNG: [110],
      DEFOBJ: [110],
      DEFSNG: [110],
      DEFSTR: [110],
      DEFVAR: [110],
      DIM: [110],
      DO: [110],
      DOUBLE: [110],
      EACH: [110],
      ELSE: [110],
      ELSEIF: [110],
      END_ENUM: [110],
      END_FUNCTION: [110],
      END_IF: [110],
      END_PROPERTY: [110],
      END_SELECT: [110],
      END_SUB: [110],
      END_TYPE: [110],
      END_WITH: [110],
      END: [110],
      ENUM: [110],
      EQV: [110],
      ERASE: [110],
      EVENT: [110],
      EXIT_DO: [110],
      EXIT_FOR: [110],
      EXIT_FUNCTION: [110],
      EXIT_PROPERTY: [110],
      EXIT_SUB: [110],
      FALSE: [110],
      FRIEND: [110],
      FOR: [110],
      FUNCTION: [110],
      GET: [110],
      GLOBAL: [110],
      GOSUB: [110],
      GOTO: [110],
      IF: [110],
      IMPLEMENTS: [110],
      IN: [110],
      ISNOT: [110],
      IS: [110],
      INTEGER: [110],
      LONG: [110],
      LOOP: [110],
      LEN: [110],
      LET: [110],
      LIB: [110],
      LIKE: [110],
      LSET: [110],
      MACRO_CONST: [110],
      MACRO_IF: [110],
      MACRO_ELSEIF: [110],
      MACRO_ELSE: [110],
      MACRO_END_IF: [110],
      MOD: [110],
      NEXT: [110],
      NEW: [110],
      NOT: [110],
      NOTHING: [110],
      NULL: [110],
      ON_ERROR: [110],
      ON_LOCAL_ERROR: [110],
      ON: [110],
      OPTIONAL: [110],
      OPTION_BASE: [110],
      OPTION_EXPLICIT: [110],
      OPTION_COMPARE: [110],
      OPTION_PRIVATE_MODULE: [110],
      OR: [110],
      PARAMARRAY: [110],
      PRESERVE: [110],
      PRIVATE: [110],
      PROPERTY_GET: [110],
      PROPERTY_LET: [110],
      PROPERTY_SET: [110],
      PTRSAFE: [110],
      PUBLIC: [110],
      RAISEEVENT: [110],
      REDIM: [110],
      RESET: [110],
      RESUME: [110],
      RETURN: [110],
      SELECT: [110],
      SET: [110],
      SINGLE: [110],
      STATIC: [110],
      STEP: [110],
      STOP: [110],
      STRING: [110],
      SUB: [110],
      THEN: [110],
      TO: [110],
      TRUE: [110],
      TYPEOF: [110],
      UNTIL: [110],
      VARIANT: [110],
      WEND: [110],
      WHILE: [110],
      WITH: [110],
      WITHEVENTS: [110],
      XOR: [110],
      IMP: [110],
      IDENTIFIER: [110],
    },
    iCS_B_ProcedureCall: {
      IDENTIFIER: [111],
    },
    argsCall_group_def_37: {
      ',': [112],
    },
    argsCall: {
      ',': [113],
      DOUBLELITERAL: [113],
      INTEGERLITERAL: [113],
      STRINGLITERAL: [113],
      NOTHING: [113],
      NULL: [113],
      TRUE: [113],
      FALSE: [113],
      SPACE_DOT: [113],
      ALIAS: [113],
      AND: [113],
      ATTRIBUTE: [113],
      AS: [113],
      BEGIN: [113],
      BOOLEAN: [113],
      BYVAL: [113],
      BYREF: [113],
      BYTE: [113],
      CALL: [113],
      CASE: [113],
      CONST: [113],
      DECLARE: [113],
      DEFBOOL: [113],
      DEFBYTE: [113],
      DEFDATE: [113],
      DEFDBL: [113],
      DEFDEC: [113],
      DEFCUR: [113],
      DEFINT: [113],
      DEFLNG: [113],
      DEFOBJ: [113],
      DEFSNG: [113],
      DEFSTR: [113],
      DEFVAR: [113],
      DIM: [113],
      DO: [113],
      DOUBLE: [113],
      EACH: [113],
      ELSE: [113],
      ELSEIF: [113],
      END_ENUM: [113],
      END_FUNCTION: [113],
      END_IF: [113],
      END_PROPERTY: [113],
      END_SELECT: [113],
      END_SUB: [113],
      END_TYPE: [113],
      END_WITH: [113],
      END: [113],
      ENUM: [113],
      EQV: [113],
      ERASE: [113],
      EVENT: [113],
      EXIT_DO: [113],
      EXIT_FOR: [113],
      EXIT_FUNCTION: [113],
      EXIT_PROPERTY: [113],
      EXIT_SUB: [113],
      FRIEND: [113],
      FOR: [113],
      FUNCTION: [113],
      GET: [113],
      GLOBAL: [113],
      GOSUB: [113],
      GOTO: [113],
      IF: [113],
      IMPLEMENTS: [113],
      IN: [113],
      ISNOT: [113],
      IS: [113],
      INTEGER: [113],
      LONG: [113],
      LOOP: [113],
      LEN: [113],
      LET: [113],
      LIB: [113],
      LIKE: [113],
      LSET: [113],
      MACRO_CONST: [113],
      MACRO_IF: [113],
      MACRO_ELSEIF: [113],
      MACRO_ELSE: [113],
      MACRO_END_IF: [113],
      MOD: [113],
      NEXT: [113],
      NEW: [113],
      NOT: [113],
      ON_ERROR: [113],
      ON_LOCAL_ERROR: [113],
      ON: [113],
      OPTIONAL: [113],
      OPTION_BASE: [113],
      OPTION_EXPLICIT: [113],
      OPTION_COMPARE: [113],
      OPTION_PRIVATE_MODULE: [113],
      OR: [113],
      PARAMARRAY: [113],
      PRESERVE: [113],
      PRIVATE: [113],
      PROPERTY_GET: [113],
      PROPERTY_LET: [113],
      PROPERTY_SET: [113],
      PTRSAFE: [113],
      PUBLIC: [113],
      RAISEEVENT: [113],
      REDIM: [113],
      RESET: [113],
      RESUME: [113],
      RETURN: [113],
      SELECT: [113],
      SET: [113],
      SINGLE: [113],
      STATIC: [113],
      STEP: [113],
      STOP: [113],
      STRING: [113],
      SUB: [113],
      THEN: [113],
      TO: [113],
      TYPEOF: [113],
      UNTIL: [113],
      VARIANT: [113],
      WEND: [113],
      WHILE: [113],
      WITH: [113],
      WITHEVENTS: [113],
      XOR: [113],
      IMP: [113],
      IDENTIFIER: [113],
      LPAREN: [113],
      MINUS: [113],
      PLUS: [113],
    },
    argCall: {
      DOUBLELITERAL: [114],
      INTEGERLITERAL: [114],
      STRINGLITERAL: [114],
      NOTHING: [114],
      NULL: [114],
      TRUE: [114],
      FALSE: [114],
      SPACE_DOT: [114],
      ALIAS: [114],
      AND: [114],
      ATTRIBUTE: [114],
      AS: [114],
      BEGIN: [114],
      BOOLEAN: [114],
      BYVAL: [114],
      BYREF: [114],
      BYTE: [114],
      CALL: [114],
      CASE: [114],
      CONST: [114],
      DECLARE: [114],
      DEFBOOL: [114],
      DEFBYTE: [114],
      DEFDATE: [114],
      DEFDBL: [114],
      DEFDEC: [114],
      DEFCUR: [114],
      DEFINT: [114],
      DEFLNG: [114],
      DEFOBJ: [114],
      DEFSNG: [114],
      DEFSTR: [114],
      DEFVAR: [114],
      DIM: [114],
      DO: [114],
      DOUBLE: [114],
      EACH: [114],
      ELSE: [114],
      ELSEIF: [114],
      END_ENUM: [114],
      END_FUNCTION: [114],
      END_IF: [114],
      END_PROPERTY: [114],
      END_SELECT: [114],
      END_SUB: [114],
      END_TYPE: [114],
      END_WITH: [114],
      END: [114],
      ENUM: [114],
      EQV: [114],
      ERASE: [114],
      EVENT: [114],
      EXIT_DO: [114],
      EXIT_FOR: [114],
      EXIT_FUNCTION: [114],
      EXIT_PROPERTY: [114],
      EXIT_SUB: [114],
      FRIEND: [114],
      FOR: [114],
      FUNCTION: [114],
      GET: [114],
      GLOBAL: [114],
      GOSUB: [114],
      GOTO: [114],
      IF: [114],
      IMPLEMENTS: [114],
      IN: [114],
      ISNOT: [114],
      IS: [114],
      INTEGER: [114],
      LONG: [114],
      LOOP: [114],
      LEN: [114],
      LET: [114],
      LIB: [114],
      LIKE: [114],
      LSET: [114],
      MACRO_CONST: [114],
      MACRO_IF: [114],
      MACRO_ELSEIF: [114],
      MACRO_ELSE: [114],
      MACRO_END_IF: [114],
      MOD: [114],
      NEXT: [114],
      NEW: [114],
      NOT: [114],
      ON_ERROR: [114],
      ON_LOCAL_ERROR: [114],
      ON: [114],
      OPTIONAL: [114],
      OPTION_BASE: [114],
      OPTION_EXPLICIT: [114],
      OPTION_COMPARE: [114],
      OPTION_PRIVATE_MODULE: [114],
      OR: [114],
      PARAMARRAY: [114],
      PRESERVE: [114],
      PRIVATE: [114],
      PROPERTY_GET: [114],
      PROPERTY_LET: [114],
      PROPERTY_SET: [114],
      PTRSAFE: [114],
      PUBLIC: [114],
      RAISEEVENT: [114],
      REDIM: [114],
      RESET: [114],
      RESUME: [114],
      RETURN: [114],
      SELECT: [114],
      SET: [114],
      SINGLE: [114],
      STATIC: [114],
      STEP: [114],
      STOP: [114],
      STRING: [114],
      SUB: [114],
      THEN: [114],
      TO: [114],
      TYPEOF: [114],
      UNTIL: [114],
      VARIANT: [114],
      WEND: [114],
      WHILE: [114],
      WITH: [114],
      WITHEVENTS: [114],
      XOR: [114],
      IMP: [114],
      IDENTIFIER: [114],
      LPAREN: [114],
      MINUS: [114],
      PLUS: [114],
    },
    variableStmt_group_def_39: {
      DIM: [115],
    },
    variableStmt_group_38: {
      DIM: [116],
      STATIC: [118],
      PRIVATE: [120],
      PUBLIC: [120],
      FRIEND: [120],
      GLOBAL: [120],
    },
    variableStmt_group_def_40: {
      STATIC: [117],
    },
    variableStmt_group_def_41: {
      PRIVATE: [119],
      PUBLIC: [119],
      FRIEND: [119],
      GLOBAL: [119],
    },
    variableStmt: {
      DIM: [121],
      STATIC: [121],
      PRIVATE: [121],
      PUBLIC: [121],
      FRIEND: [121],
      GLOBAL: [121],
    },
    withStmt_group_def_43: {
      SPACE_DOT: [122],
      ALIAS: [122],
      AND: [122],
      ATTRIBUTE: [122],
      AS: [122],
      BEGIN: [122],
      BOOLEAN: [122],
      BYVAL: [122],
      BYREF: [122],
      BYTE: [122],
      CALL: [122],
      CASE: [122],
      CONST: [122],
      DECLARE: [122],
      DEFBOOL: [122],
      DEFBYTE: [122],
      DEFDATE: [122],
      DEFDBL: [122],
      DEFDEC: [122],
      DEFCUR: [122],
      DEFINT: [122],
      DEFLNG: [122],
      DEFOBJ: [122],
      DEFSNG: [122],
      DEFSTR: [122],
      DEFVAR: [122],
      DIM: [122],
      DO: [122],
      DOUBLE: [122],
      EACH: [122],
      ELSE: [122],
      ELSEIF: [122],
      END_ENUM: [122],
      END_FUNCTION: [122],
      END_IF: [122],
      END_PROPERTY: [122],
      END_SELECT: [122],
      END_SUB: [122],
      END_TYPE: [122],
      END_WITH: [122],
      END: [122],
      ENUM: [122],
      EQV: [122],
      ERASE: [122],
      EVENT: [122],
      EXIT_DO: [122],
      EXIT_FOR: [122],
      EXIT_FUNCTION: [122],
      EXIT_PROPERTY: [122],
      EXIT_SUB: [122],
      FALSE: [122],
      FRIEND: [122],
      FOR: [122],
      FUNCTION: [122],
      GET: [122],
      GLOBAL: [122],
      GOSUB: [122],
      GOTO: [122],
      IF: [122],
      IMPLEMENTS: [122],
      IN: [122],
      ISNOT: [122],
      IS: [122],
      INTEGER: [122],
      LONG: [122],
      LOOP: [122],
      LEN: [122],
      LET: [122],
      LIB: [122],
      LIKE: [122],
      LSET: [122],
      MACRO_CONST: [122],
      MACRO_IF: [122],
      MACRO_ELSEIF: [122],
      MACRO_ELSE: [122],
      MACRO_END_IF: [122],
      MOD: [122],
      NEXT: [122],
      NEW: [122],
      NOT: [122],
      NOTHING: [122],
      NULL: [122],
      ON_ERROR: [122],
      ON_LOCAL_ERROR: [122],
      ON: [122],
      OPTIONAL: [122],
      OPTION_BASE: [122],
      OPTION_EXPLICIT: [122],
      OPTION_COMPARE: [122],
      OPTION_PRIVATE_MODULE: [122],
      OR: [122],
      PARAMARRAY: [122],
      PRESERVE: [122],
      PRIVATE: [122],
      PROPERTY_GET: [122],
      PROPERTY_LET: [122],
      PROPERTY_SET: [122],
      PTRSAFE: [122],
      PUBLIC: [122],
      RAISEEVENT: [122],
      REDIM: [122],
      RESET: [122],
      RESUME: [122],
      RETURN: [122],
      SELECT: [122],
      SET: [122],
      SINGLE: [122],
      STATIC: [122],
      STEP: [122],
      STOP: [122],
      STRING: [122],
      SUB: [122],
      THEN: [122],
      TO: [122],
      TRUE: [122],
      TYPEOF: [122],
      UNTIL: [122],
      VARIANT: [122],
      WEND: [122],
      WHILE: [122],
      WITH: [122],
      WITHEVENTS: [122],
      XOR: [122],
      IMP: [122],
      IDENTIFIER: [122],
    },
    withStmt_group_42: {
      SPACE_DOT: [123],
      ALIAS: [123],
      AND: [123],
      ATTRIBUTE: [123],
      AS: [123],
      BEGIN: [123],
      BOOLEAN: [123],
      BYVAL: [123],
      BYREF: [123],
      BYTE: [123],
      CALL: [123],
      CASE: [123],
      CONST: [123],
      DECLARE: [123],
      DEFBOOL: [123],
      DEFBYTE: [123],
      DEFDATE: [123],
      DEFDBL: [123],
      DEFDEC: [123],
      DEFCUR: [123],
      DEFINT: [123],
      DEFLNG: [123],
      DEFOBJ: [123],
      DEFSNG: [123],
      DEFSTR: [123],
      DEFVAR: [123],
      DIM: [123],
      DO: [123],
      DOUBLE: [123],
      EACH: [123],
      ELSE: [123],
      ELSEIF: [123],
      END_ENUM: [123],
      END_FUNCTION: [123],
      END_IF: [123],
      END_PROPERTY: [123],
      END_SELECT: [123],
      END_SUB: [123],
      END_TYPE: [123],
      END_WITH: [123],
      END: [123],
      ENUM: [123],
      EQV: [123],
      ERASE: [123],
      EVENT: [123],
      EXIT_DO: [123],
      EXIT_FOR: [123],
      EXIT_FUNCTION: [123],
      EXIT_PROPERTY: [123],
      EXIT_SUB: [123],
      FALSE: [123],
      FRIEND: [123],
      FOR: [123],
      FUNCTION: [123],
      GET: [123],
      GLOBAL: [123],
      GOSUB: [123],
      GOTO: [123],
      IF: [123],
      IMPLEMENTS: [123],
      IN: [123],
      ISNOT: [123],
      IS: [123],
      INTEGER: [123],
      LONG: [123],
      LOOP: [123],
      LEN: [123],
      LET: [123],
      LIB: [123],
      LIKE: [123],
      LSET: [123],
      MACRO_CONST: [123],
      MACRO_IF: [123],
      MACRO_ELSEIF: [123],
      MACRO_ELSE: [123],
      MACRO_END_IF: [123],
      MOD: [123],
      NEXT: [123],
      NEW: [123, 125],
      NOT: [123],
      NOTHING: [123],
      NULL: [123],
      ON_ERROR: [123],
      ON_LOCAL_ERROR: [123],
      ON: [123],
      OPTIONAL: [123],
      OPTION_BASE: [123],
      OPTION_EXPLICIT: [123],
      OPTION_COMPARE: [123],
      OPTION_PRIVATE_MODULE: [123],
      OR: [123],
      PARAMARRAY: [123],
      PRESERVE: [123],
      PRIVATE: [123],
      PROPERTY_GET: [123],
      PROPERTY_LET: [123],
      PROPERTY_SET: [123],
      PTRSAFE: [123],
      PUBLIC: [123],
      RAISEEVENT: [123],
      REDIM: [123],
      RESET: [123],
      RESUME: [123],
      RETURN: [123],
      SELECT: [123],
      SET: [123],
      SINGLE: [123],
      STATIC: [123],
      STEP: [123],
      STOP: [123],
      STRING: [123],
      SUB: [123],
      THEN: [123],
      TO: [123],
      TRUE: [123],
      TYPEOF: [123],
      UNTIL: [123],
      VARIANT: [123],
      WEND: [123],
      WHILE: [123],
      WITH: [123],
      WITHEVENTS: [123],
      XOR: [123],
      IMP: [123],
      IDENTIFIER: [123],
    },
    withStmt_group_def_44: {
      NEW: [124],
    },
    withStmt: {
      WITH: [126],
    },
    variableListStmt_group_def_46: {
      ',': [127],
    },
    variableListStmt: {
      ALIAS: [128],
      AND: [128],
      ATTRIBUTE: [128],
      AS: [128],
      BEGIN: [128],
      BOOLEAN: [128],
      BYVAL: [128],
      BYREF: [128],
      BYTE: [128],
      CALL: [128],
      CASE: [128],
      CONST: [128],
      DECLARE: [128],
      DEFBOOL: [128],
      DEFBYTE: [128],
      DEFDATE: [128],
      DEFDBL: [128],
      DEFDEC: [128],
      DEFCUR: [128],
      DEFINT: [128],
      DEFLNG: [128],
      DEFOBJ: [128],
      DEFSNG: [128],
      DEFSTR: [128],
      DEFVAR: [128],
      DIM: [128],
      DO: [128],
      DOUBLE: [128],
      EACH: [128],
      ELSE: [128],
      ELSEIF: [128],
      END_ENUM: [128],
      END_FUNCTION: [128],
      END_IF: [128],
      END_PROPERTY: [128],
      END_SELECT: [128],
      END_SUB: [128],
      END_TYPE: [128],
      END_WITH: [128],
      END: [128],
      ENUM: [128],
      EQV: [128],
      ERASE: [128],
      EVENT: [128],
      EXIT_DO: [128],
      EXIT_FOR: [128],
      EXIT_FUNCTION: [128],
      EXIT_PROPERTY: [128],
      EXIT_SUB: [128],
      FALSE: [128],
      FRIEND: [128],
      FOR: [128],
      FUNCTION: [128],
      GET: [128],
      GLOBAL: [128],
      GOSUB: [128],
      GOTO: [128],
      IF: [128],
      IMPLEMENTS: [128],
      IN: [128],
      ISNOT: [128],
      IS: [128],
      INTEGER: [128],
      LONG: [128],
      LOOP: [128],
      LEN: [128],
      LET: [128],
      LIB: [128],
      LIKE: [128],
      LSET: [128],
      MACRO_CONST: [128],
      MACRO_IF: [128],
      MACRO_ELSEIF: [128],
      MACRO_ELSE: [128],
      MACRO_END_IF: [128],
      MOD: [128],
      NEXT: [128],
      NEW: [128],
      NOT: [128],
      NOTHING: [128],
      NULL: [128],
      ON_ERROR: [128],
      ON_LOCAL_ERROR: [128],
      ON: [128],
      OPTIONAL: [128],
      OPTION_BASE: [128],
      OPTION_EXPLICIT: [128],
      OPTION_COMPARE: [128],
      OPTION_PRIVATE_MODULE: [128],
      OR: [128],
      PARAMARRAY: [128],
      PRESERVE: [128],
      PRIVATE: [128],
      PROPERTY_GET: [128],
      PROPERTY_LET: [128],
      PROPERTY_SET: [128],
      PTRSAFE: [128],
      PUBLIC: [128],
      RAISEEVENT: [128],
      REDIM: [128],
      RESET: [128],
      RESUME: [128],
      RETURN: [128],
      SELECT: [128],
      SET: [128],
      SINGLE: [128],
      STATIC: [128],
      STEP: [128],
      STOP: [128],
      STRING: [128],
      SUB: [128],
      THEN: [128],
      TO: [128],
      TRUE: [128],
      TYPEOF: [128],
      UNTIL: [128],
      VARIANT: [128],
      WEND: [128],
      WHILE: [128],
      WITH: [128],
      WITHEVENTS: [128],
      XOR: [128],
      IMP: [128],
      IDENTIFIER: [128],
    },
    variableSubStmt_group_def_48: {
      LPAREN: [129],
    },
    variableSubStmt: {
      ALIAS: [130],
      AND: [130],
      ATTRIBUTE: [130],
      AS: [130],
      BEGIN: [130],
      BOOLEAN: [130],
      BYVAL: [130],
      BYREF: [130],
      BYTE: [130],
      CALL: [130],
      CASE: [130],
      CONST: [130],
      DECLARE: [130],
      DEFBOOL: [130],
      DEFBYTE: [130],
      DEFDATE: [130],
      DEFDBL: [130],
      DEFDEC: [130],
      DEFCUR: [130],
      DEFINT: [130],
      DEFLNG: [130],
      DEFOBJ: [130],
      DEFSNG: [130],
      DEFSTR: [130],
      DEFVAR: [130],
      DIM: [130],
      DO: [130],
      DOUBLE: [130],
      EACH: [130],
      ELSE: [130],
      ELSEIF: [130],
      END_ENUM: [130],
      END_FUNCTION: [130],
      END_IF: [130],
      END_PROPERTY: [130],
      END_SELECT: [130],
      END_SUB: [130],
      END_TYPE: [130],
      END_WITH: [130],
      END: [130],
      ENUM: [130],
      EQV: [130],
      ERASE: [130],
      EVENT: [130],
      EXIT_DO: [130],
      EXIT_FOR: [130],
      EXIT_FUNCTION: [130],
      EXIT_PROPERTY: [130],
      EXIT_SUB: [130],
      FALSE: [130],
      FRIEND: [130],
      FOR: [130],
      FUNCTION: [130],
      GET: [130],
      GLOBAL: [130],
      GOSUB: [130],
      GOTO: [130],
      IF: [130],
      IMPLEMENTS: [130],
      IN: [130],
      ISNOT: [130],
      IS: [130],
      INTEGER: [130],
      LONG: [130],
      LOOP: [130],
      LEN: [130],
      LET: [130],
      LIB: [130],
      LIKE: [130],
      LSET: [130],
      MACRO_CONST: [130],
      MACRO_IF: [130],
      MACRO_ELSEIF: [130],
      MACRO_ELSE: [130],
      MACRO_END_IF: [130],
      MOD: [130],
      NEXT: [130],
      NEW: [130],
      NOT: [130],
      NOTHING: [130],
      NULL: [130],
      ON_ERROR: [130],
      ON_LOCAL_ERROR: [130],
      ON: [130],
      OPTIONAL: [130],
      OPTION_BASE: [130],
      OPTION_EXPLICIT: [130],
      OPTION_COMPARE: [130],
      OPTION_PRIVATE_MODULE: [130],
      OR: [130],
      PARAMARRAY: [130],
      PRESERVE: [130],
      PRIVATE: [130],
      PROPERTY_GET: [130],
      PROPERTY_LET: [130],
      PROPERTY_SET: [130],
      PTRSAFE: [130],
      PUBLIC: [130],
      RAISEEVENT: [130],
      REDIM: [130],
      RESET: [130],
      RESUME: [130],
      RETURN: [130],
      SELECT: [130],
      SET: [130],
      SINGLE: [130],
      STATIC: [130],
      STEP: [130],
      STOP: [130],
      STRING: [130],
      SUB: [130],
      THEN: [130],
      TO: [130],
      TRUE: [130],
      TYPEOF: [130],
      UNTIL: [130],
      VARIANT: [130],
      WEND: [130],
      WHILE: [130],
      WITH: [130],
      WITHEVENTS: [130],
      XOR: [130],
      IMP: [130],
      IDENTIFIER: [130],
    },
    indexes: {
      DOUBLELITERAL: [131],
      INTEGERLITERAL: [131],
      STRINGLITERAL: [131],
      NOTHING: [131],
      NULL: [131],
      TRUE: [131],
      FALSE: [131],
      SPACE_DOT: [131],
      ALIAS: [131],
      AND: [131],
      ATTRIBUTE: [131],
      AS: [131],
      BEGIN: [131],
      BOOLEAN: [131],
      BYVAL: [131],
      BYREF: [131],
      BYTE: [131],
      CALL: [131],
      CASE: [131],
      CONST: [131],
      DECLARE: [131],
      DEFBOOL: [131],
      DEFBYTE: [131],
      DEFDATE: [131],
      DEFDBL: [131],
      DEFDEC: [131],
      DEFCUR: [131],
      DEFINT: [131],
      DEFLNG: [131],
      DEFOBJ: [131],
      DEFSNG: [131],
      DEFSTR: [131],
      DEFVAR: [131],
      DIM: [131],
      DO: [131],
      DOUBLE: [131],
      EACH: [131],
      ELSE: [131],
      ELSEIF: [131],
      END_ENUM: [131],
      END_FUNCTION: [131],
      END_IF: [131],
      END_PROPERTY: [131],
      END_SELECT: [131],
      END_SUB: [131],
      END_TYPE: [131],
      END_WITH: [131],
      END: [131],
      ENUM: [131],
      EQV: [131],
      ERASE: [131],
      EVENT: [131],
      EXIT_DO: [131],
      EXIT_FOR: [131],
      EXIT_FUNCTION: [131],
      EXIT_PROPERTY: [131],
      EXIT_SUB: [131],
      FRIEND: [131],
      FOR: [131],
      FUNCTION: [131],
      GET: [131],
      GLOBAL: [131],
      GOSUB: [131],
      GOTO: [131],
      IF: [131],
      IMPLEMENTS: [131],
      IN: [131],
      ISNOT: [131],
      IS: [131],
      INTEGER: [131],
      LONG: [131],
      LOOP: [131],
      LEN: [131],
      LET: [131],
      LIB: [131],
      LIKE: [131],
      LSET: [131],
      MACRO_CONST: [131],
      MACRO_IF: [131],
      MACRO_ELSEIF: [131],
      MACRO_ELSE: [131],
      MACRO_END_IF: [131],
      MOD: [131],
      NEXT: [131],
      NEW: [131],
      NOT: [131],
      ON_ERROR: [131],
      ON_LOCAL_ERROR: [131],
      ON: [131],
      OPTIONAL: [131],
      OPTION_BASE: [131],
      OPTION_EXPLICIT: [131],
      OPTION_COMPARE: [131],
      OPTION_PRIVATE_MODULE: [131],
      OR: [131],
      PARAMARRAY: [131],
      PRESERVE: [131],
      PRIVATE: [131],
      PROPERTY_GET: [131],
      PROPERTY_LET: [131],
      PROPERTY_SET: [131],
      PTRSAFE: [131],
      PUBLIC: [131],
      RAISEEVENT: [131],
      REDIM: [131],
      RESET: [131],
      RESUME: [131],
      RETURN: [131],
      SELECT: [131],
      SET: [131],
      SINGLE: [131],
      STATIC: [131],
      STEP: [131],
      STOP: [131],
      STRING: [131],
      SUB: [131],
      THEN: [131],
      TO: [131],
      TYPEOF: [131],
      UNTIL: [131],
      VARIANT: [131],
      WEND: [131],
      WHILE: [131],
      WITH: [131],
      WITHEVENTS: [131],
      XOR: [131],
      IMP: [131],
      IDENTIFIER: [131],
      LPAREN: [131],
      MINUS: [131],
      PLUS: [131],
    },
    subscript__group_def_51: {
      DOUBLELITERAL: [132],
      INTEGERLITERAL: [132],
      STRINGLITERAL: [132],
      NOTHING: [132],
      NULL: [132],
      TRUE: [132],
      FALSE: [132],
      SPACE_DOT: [132],
      ALIAS: [132],
      AND: [132],
      ATTRIBUTE: [132],
      AS: [132],
      BEGIN: [132],
      BOOLEAN: [132],
      BYVAL: [132],
      BYREF: [132],
      BYTE: [132],
      CALL: [132],
      CASE: [132],
      CONST: [132],
      DECLARE: [132],
      DEFBOOL: [132],
      DEFBYTE: [132],
      DEFDATE: [132],
      DEFDBL: [132],
      DEFDEC: [132],
      DEFCUR: [132],
      DEFINT: [132],
      DEFLNG: [132],
      DEFOBJ: [132],
      DEFSNG: [132],
      DEFSTR: [132],
      DEFVAR: [132],
      DIM: [132],
      DO: [132],
      DOUBLE: [132],
      EACH: [132],
      ELSE: [132],
      ELSEIF: [132],
      END_ENUM: [132],
      END_FUNCTION: [132],
      END_IF: [132],
      END_PROPERTY: [132],
      END_SELECT: [132],
      END_SUB: [132],
      END_TYPE: [132],
      END_WITH: [132],
      END: [132],
      ENUM: [132],
      EQV: [132],
      ERASE: [132],
      EVENT: [132],
      EXIT_DO: [132],
      EXIT_FOR: [132],
      EXIT_FUNCTION: [132],
      EXIT_PROPERTY: [132],
      EXIT_SUB: [132],
      FRIEND: [132],
      FOR: [132],
      FUNCTION: [132],
      GET: [132],
      GLOBAL: [132],
      GOSUB: [132],
      GOTO: [132],
      IF: [132],
      IMPLEMENTS: [132],
      IN: [132],
      ISNOT: [132],
      IS: [132],
      INTEGER: [132],
      LONG: [132],
      LOOP: [132],
      LEN: [132],
      LET: [132],
      LIB: [132],
      LIKE: [132],
      LSET: [132],
      MACRO_CONST: [132],
      MACRO_IF: [132],
      MACRO_ELSEIF: [132],
      MACRO_ELSE: [132],
      MACRO_END_IF: [132],
      MOD: [132],
      NEXT: [132],
      NEW: [132],
      NOT: [132],
      ON_ERROR: [132],
      ON_LOCAL_ERROR: [132],
      ON: [132],
      OPTIONAL: [132],
      OPTION_BASE: [132],
      OPTION_EXPLICIT: [132],
      OPTION_COMPARE: [132],
      OPTION_PRIVATE_MODULE: [132],
      OR: [132],
      PARAMARRAY: [132],
      PRESERVE: [132],
      PRIVATE: [132],
      PROPERTY_GET: [132],
      PROPERTY_LET: [132],
      PROPERTY_SET: [132],
      PTRSAFE: [132],
      PUBLIC: [132],
      RAISEEVENT: [132],
      REDIM: [132],
      RESET: [132],
      RESUME: [132],
      RETURN: [132],
      SELECT: [132],
      SET: [132],
      SINGLE: [132],
      STATIC: [132],
      STEP: [132],
      STOP: [132],
      STRING: [132],
      SUB: [132],
      THEN: [132],
      TO: [132],
      TYPEOF: [132],
      UNTIL: [132],
      VARIANT: [132],
      WEND: [132],
      WHILE: [132],
      WITH: [132],
      WITHEVENTS: [132],
      XOR: [132],
      IMP: [132],
      IDENTIFIER: [132],
      LPAREN: [132],
      MINUS: [132],
      PLUS: [132],
    },
    subscript_: {
      DOUBLELITERAL: [133, 136],
      INTEGERLITERAL: [133, 136],
      STRINGLITERAL: [133, 136],
      NOTHING: [133, 136],
      NULL: [133, 136],
      TRUE: [133, 136],
      FALSE: [133, 136],
      SPACE_DOT: [133, 136],
      ALIAS: [133, 136],
      AND: [133, 136],
      ATTRIBUTE: [133, 136],
      AS: [133, 136],
      BEGIN: [133, 136],
      BOOLEAN: [133, 136],
      BYVAL: [133, 136],
      BYREF: [133, 136],
      BYTE: [133, 136],
      CALL: [133, 136],
      CASE: [133, 136],
      CONST: [133, 136],
      DECLARE: [133, 136],
      DEFBOOL: [133, 136],
      DEFBYTE: [133, 136],
      DEFDATE: [133, 136],
      DEFDBL: [133, 136],
      DEFDEC: [133, 136],
      DEFCUR: [133, 136],
      DEFINT: [133, 136],
      DEFLNG: [133, 136],
      DEFOBJ: [133, 136],
      DEFSNG: [133, 136],
      DEFSTR: [133, 136],
      DEFVAR: [133, 136],
      DIM: [133, 136],
      DO: [133, 136],
      DOUBLE: [133, 136],
      EACH: [133, 136],
      ELSE: [133, 136],
      ELSEIF: [133, 136],
      END_ENUM: [133, 136],
      END_FUNCTION: [133, 136],
      END_IF: [133, 136],
      END_PROPERTY: [133, 136],
      END_SELECT: [133, 136],
      END_SUB: [133, 136],
      END_TYPE: [133, 136],
      END_WITH: [133, 136],
      END: [133, 136],
      ENUM: [133, 136],
      EQV: [133, 136],
      ERASE: [133, 136],
      EVENT: [133, 136],
      EXIT_DO: [133, 136],
      EXIT_FOR: [133, 136],
      EXIT_FUNCTION: [133, 136],
      EXIT_PROPERTY: [133, 136],
      EXIT_SUB: [133, 136],
      FRIEND: [133, 136],
      FOR: [133, 136],
      FUNCTION: [133, 136],
      GET: [133, 136],
      GLOBAL: [133, 136],
      GOSUB: [133, 136],
      GOTO: [133, 136],
      IF: [133, 136],
      IMPLEMENTS: [133, 136],
      IN: [133, 136],
      ISNOT: [133, 136],
      IS: [133, 136],
      INTEGER: [133, 136],
      LONG: [133, 136],
      LOOP: [133, 136],
      LEN: [133, 136],
      LET: [133, 136],
      LIB: [133, 136],
      LIKE: [133, 136],
      LSET: [133, 136],
      MACRO_CONST: [133, 136],
      MACRO_IF: [133, 136],
      MACRO_ELSEIF: [133, 136],
      MACRO_ELSE: [133, 136],
      MACRO_END_IF: [133, 136],
      MOD: [133, 136],
      NEXT: [133, 136],
      NEW: [133, 136],
      NOT: [133, 136],
      ON_ERROR: [133, 136],
      ON_LOCAL_ERROR: [133, 136],
      ON: [133, 136],
      OPTIONAL: [133, 136],
      OPTION_BASE: [133, 136],
      OPTION_EXPLICIT: [133, 136],
      OPTION_COMPARE: [133, 136],
      OPTION_PRIVATE_MODULE: [133, 136],
      OR: [133, 136],
      PARAMARRAY: [133, 136],
      PRESERVE: [133, 136],
      PRIVATE: [133, 136],
      PROPERTY_GET: [133, 136],
      PROPERTY_LET: [133, 136],
      PROPERTY_SET: [133, 136],
      PTRSAFE: [133, 136],
      PUBLIC: [133, 136],
      RAISEEVENT: [133, 136],
      REDIM: [133, 136],
      RESET: [133, 136],
      RESUME: [133, 136],
      RETURN: [133, 136],
      SELECT: [133, 136],
      SET: [133, 136],
      SINGLE: [133, 136],
      STATIC: [133, 136],
      STEP: [133, 136],
      STOP: [133, 136],
      STRING: [133, 136],
      SUB: [133, 136],
      THEN: [133, 136],
      TO: [133, 136],
      TYPEOF: [133, 136],
      UNTIL: [133, 136],
      VARIANT: [133, 136],
      WEND: [133, 136],
      WHILE: [133, 136],
      WITH: [133, 136],
      WITHEVENTS: [133, 136],
      XOR: [133, 136],
      IMP: [133, 136],
      IDENTIFIER: [133, 136],
      LPAREN: [133, 136],
      MINUS: [133, 136],
      PLUS: [133, 136],
    },
    subscripts_group_def_53: {
      ',': [134],
    },
    subscripts: {
      DOUBLELITERAL: [135],
      INTEGERLITERAL: [135],
      STRINGLITERAL: [135],
      NOTHING: [135],
      NULL: [135],
      TRUE: [135],
      FALSE: [135],
      ALIAS: [135],
      AND: [135],
      ATTRIBUTE: [135],
      AS: [135],
      BEGIN: [135],
      BOOLEAN: [135],
      BYVAL: [135],
      BYREF: [135],
      BYTE: [135],
      CALL: [135],
      CASE: [135],
      CONST: [135],
      DECLARE: [135],
      DEFBOOL: [135],
      DEFBYTE: [135],
      DEFDATE: [135],
      DEFDBL: [135],
      DEFDEC: [135],
      DEFCUR: [135],
      DEFINT: [135],
      DEFLNG: [135],
      DEFOBJ: [135],
      DEFSNG: [135],
      DEFSTR: [135],
      DEFVAR: [135],
      DIM: [135],
      DO: [135],
      DOUBLE: [135],
      EACH: [135],
      ELSE: [135],
      ELSEIF: [135],
      END_ENUM: [135],
      END_FUNCTION: [135],
      END_IF: [135],
      END_PROPERTY: [135],
      END_SELECT: [135],
      END_SUB: [135],
      END_TYPE: [135],
      END_WITH: [135],
      END: [135],
      ENUM: [135],
      EQV: [135],
      ERASE: [135],
      EVENT: [135],
      EXIT_DO: [135],
      EXIT_FOR: [135],
      EXIT_FUNCTION: [135],
      EXIT_PROPERTY: [135],
      EXIT_SUB: [135],
      FRIEND: [135],
      FOR: [135],
      FUNCTION: [135],
      GET: [135],
      GLOBAL: [135],
      GOSUB: [135],
      GOTO: [135],
      IF: [135],
      IMPLEMENTS: [135],
      IN: [135],
      ISNOT: [135],
      IS: [135],
      INTEGER: [135],
      LONG: [135],
      LOOP: [135],
      LEN: [135],
      LET: [135],
      LIB: [135],
      LIKE: [135],
      LSET: [135],
      MACRO_CONST: [135],
      MACRO_IF: [135],
      MACRO_ELSEIF: [135],
      MACRO_ELSE: [135],
      MACRO_END_IF: [135],
      MOD: [135],
      NEXT: [135],
      NEW: [135],
      NOT: [135],
      ON_ERROR: [135],
      ON_LOCAL_ERROR: [135],
      ON: [135],
      OPTIONAL: [135],
      OPTION_BASE: [135],
      OPTION_EXPLICIT: [135],
      OPTION_COMPARE: [135],
      OPTION_PRIVATE_MODULE: [135],
      OR: [135],
      PARAMARRAY: [135],
      PRESERVE: [135],
      PRIVATE: [135],
      PROPERTY_GET: [135],
      PROPERTY_LET: [135],
      PROPERTY_SET: [135],
      PTRSAFE: [135],
      PUBLIC: [135],
      RAISEEVENT: [135],
      REDIM: [135],
      RESET: [135],
      RESUME: [135],
      RETURN: [135],
      SELECT: [135],
      SET: [135],
      SINGLE: [135],
      STATIC: [135],
      STEP: [135],
      STOP: [135],
      STRING: [135],
      SUB: [135],
      THEN: [135],
      TO: [135],
      TYPEOF: [135],
      UNTIL: [135],
      VARIANT: [135],
      WEND: [135],
      WHILE: [135],
      WITH: [135],
      WITHEVENTS: [135],
      XOR: [135],
      IMP: [135],
      IDENTIFIER: [135],
      LPAREN: [135],
      MINUS: [135],
      PLUS: [135],
      SPACE_DOT: [135],
    },
    argList_group_def_57: {
      ',': [137],
    },
    argList_group_def_58: {
      OPTIONAL: [138],
      PARAMARRAY: [138],
      ALIAS: [138],
      AND: [138],
      ATTRIBUTE: [138],
      AS: [138],
      BEGIN: [138],
      BOOLEAN: [138],
      BYVAL: [138],
      BYREF: [138],
      BYTE: [138],
      CALL: [138],
      CASE: [138],
      CONST: [138],
      DECLARE: [138],
      DEFBOOL: [138],
      DEFBYTE: [138],
      DEFDATE: [138],
      DEFDBL: [138],
      DEFDEC: [138],
      DEFCUR: [138],
      DEFINT: [138],
      DEFLNG: [138],
      DEFOBJ: [138],
      DEFSNG: [138],
      DEFSTR: [138],
      DEFVAR: [138],
      DIM: [138],
      DO: [138],
      DOUBLE: [138],
      EACH: [138],
      ELSE: [138],
      ELSEIF: [138],
      END_ENUM: [138],
      END_FUNCTION: [138],
      END_IF: [138],
      END_PROPERTY: [138],
      END_SELECT: [138],
      END_SUB: [138],
      END_TYPE: [138],
      END_WITH: [138],
      END: [138],
      ENUM: [138],
      EQV: [138],
      ERASE: [138],
      EVENT: [138],
      EXIT_DO: [138],
      EXIT_FOR: [138],
      EXIT_FUNCTION: [138],
      EXIT_PROPERTY: [138],
      EXIT_SUB: [138],
      FALSE: [138],
      FRIEND: [138],
      FOR: [138],
      FUNCTION: [138],
      GET: [138],
      GLOBAL: [138],
      GOSUB: [138],
      GOTO: [138],
      IF: [138],
      IMPLEMENTS: [138],
      IN: [138],
      ISNOT: [138],
      IS: [138],
      INTEGER: [138],
      LONG: [138],
      LOOP: [138],
      LEN: [138],
      LET: [138],
      LIB: [138],
      LIKE: [138],
      LSET: [138],
      MACRO_CONST: [138],
      MACRO_IF: [138],
      MACRO_ELSEIF: [138],
      MACRO_ELSE: [138],
      MACRO_END_IF: [138],
      MOD: [138],
      NEXT: [138],
      NEW: [138],
      NOT: [138],
      NOTHING: [138],
      NULL: [138],
      ON_ERROR: [138],
      ON_LOCAL_ERROR: [138],
      ON: [138],
      OPTION_BASE: [138],
      OPTION_EXPLICIT: [138],
      OPTION_COMPARE: [138],
      OPTION_PRIVATE_MODULE: [138],
      OR: [138],
      PRESERVE: [138],
      PRIVATE: [138],
      PROPERTY_GET: [138],
      PROPERTY_LET: [138],
      PROPERTY_SET: [138],
      PTRSAFE: [138],
      PUBLIC: [138],
      RAISEEVENT: [138],
      REDIM: [138],
      RESET: [138],
      RESUME: [138],
      RETURN: [138],
      SELECT: [138],
      SET: [138],
      SINGLE: [138],
      STATIC: [138],
      STEP: [138],
      STOP: [138],
      STRING: [138],
      SUB: [138],
      THEN: [138],
      TO: [138],
      TRUE: [138],
      TYPEOF: [138],
      UNTIL: [138],
      VARIANT: [138],
      WEND: [138],
      WHILE: [138],
      WITH: [138],
      WITHEVENTS: [138],
      XOR: [138],
      IMP: [138],
      IDENTIFIER: [138],
    },
    argList: {
      LPAREN: [139],
    },
    valueStmt_p_end: {
      DOUBLELITERAL: [140],
      INTEGERLITERAL: [140],
      STRINGLITERAL: [140],
      NOTHING: [140, 141, 142],
      NULL: [140, 141, 142],
      TRUE: [140, 141, 142],
      FALSE: [140, 141, 142],
      SPACE_DOT: [141],
      ALIAS: [141, 142],
      AND: [141, 142],
      ATTRIBUTE: [141, 142],
      AS: [141, 142],
      BEGIN: [141, 142],
      BOOLEAN: [141, 142],
      BYVAL: [141, 142],
      BYREF: [141, 142],
      BYTE: [141, 142],
      CALL: [141, 142],
      CASE: [141, 142],
      CONST: [141, 142],
      DECLARE: [141, 142],
      DEFBOOL: [141, 142],
      DEFBYTE: [141, 142],
      DEFDATE: [141, 142],
      DEFDBL: [141, 142],
      DEFDEC: [141, 142],
      DEFCUR: [141, 142],
      DEFINT: [141, 142],
      DEFLNG: [141, 142],
      DEFOBJ: [141, 142],
      DEFSNG: [141, 142],
      DEFSTR: [141, 142],
      DEFVAR: [141, 142],
      DIM: [141, 142],
      DO: [141, 142],
      DOUBLE: [141, 142],
      EACH: [141, 142],
      ELSE: [141, 142],
      ELSEIF: [141, 142],
      END_ENUM: [141, 142],
      END_FUNCTION: [141, 142],
      END_IF: [141, 142],
      END_PROPERTY: [141, 142],
      END_SELECT: [141, 142],
      END_SUB: [141, 142],
      END_TYPE: [141, 142],
      END_WITH: [141, 142],
      END: [141, 142],
      ENUM: [141, 142],
      EQV: [141, 142],
      ERASE: [141, 142],
      EVENT: [141, 142],
      EXIT_DO: [141, 142],
      EXIT_FOR: [141, 142],
      EXIT_FUNCTION: [141, 142],
      EXIT_PROPERTY: [141, 142],
      EXIT_SUB: [141, 142],
      FRIEND: [141, 142],
      FOR: [141, 142],
      FUNCTION: [141, 142],
      GET: [141, 142],
      GLOBAL: [141, 142],
      GOSUB: [141, 142],
      GOTO: [141, 142],
      IF: [141, 142],
      IMPLEMENTS: [141, 142],
      IN: [141, 142],
      ISNOT: [141, 142],
      IS: [141, 142],
      INTEGER: [141, 142],
      LONG: [141, 142],
      LOOP: [141, 142],
      LEN: [141, 142],
      LET: [141, 142],
      LIB: [141, 142],
      LIKE: [141, 142],
      LSET: [141, 142],
      MACRO_CONST: [141, 142],
      MACRO_IF: [141, 142],
      MACRO_ELSEIF: [141, 142],
      MACRO_ELSE: [141, 142],
      MACRO_END_IF: [141, 142],
      MOD: [141, 142],
      NEXT: [141, 142],
      NEW: [141, 142, 143],
      NOT: [141, 142],
      ON_ERROR: [141, 142],
      ON_LOCAL_ERROR: [141, 142],
      ON: [141, 142],
      OPTIONAL: [141, 142],
      OPTION_BASE: [141, 142],
      OPTION_EXPLICIT: [141, 142],
      OPTION_COMPARE: [141, 142],
      OPTION_PRIVATE_MODULE: [141, 142],
      OR: [141, 142],
      PARAMARRAY: [141, 142],
      PRESERVE: [141, 142],
      PRIVATE: [141, 142],
      PROPERTY_GET: [141, 142],
      PROPERTY_LET: [141, 142],
      PROPERTY_SET: [141, 142],
      PTRSAFE: [141, 142],
      PUBLIC: [141, 142],
      RAISEEVENT: [141, 142],
      REDIM: [141, 142],
      RESET: [141, 142],
      RESUME: [141, 142],
      RETURN: [141, 142],
      SELECT: [141, 142],
      SET: [141, 142],
      SINGLE: [141, 142],
      STATIC: [141, 142],
      STEP: [141, 142],
      STOP: [141, 142],
      STRING: [141, 142],
      SUB: [141, 142],
      THEN: [141, 142],
      TO: [141, 142],
      TYPEOF: [141, 142],
      UNTIL: [141, 142],
      VARIANT: [141, 142],
      WEND: [141, 142],
      WHILE: [141, 142],
      WITH: [141, 142],
      WITHEVENTS: [141, 142],
      XOR: [141, 142],
      IMP: [141, 142],
      IDENTIFIER: [141, 142],
      LPAREN: [144],
    },
    implicitCallStmt_InStmt: {
      ALIAS: [145, 146, 147],
      AND: [145, 146, 147],
      ATTRIBUTE: [145, 146, 147],
      AS: [145, 146, 147],
      BEGIN: [145, 146, 147],
      BOOLEAN: [145, 146, 147],
      BYVAL: [145, 146, 147],
      BYREF: [145, 146, 147],
      BYTE: [145, 146, 147],
      CALL: [145, 146, 147],
      CASE: [145, 146, 147],
      CONST: [145, 146, 147],
      DECLARE: [145, 146, 147],
      DEFBOOL: [145, 146, 147],
      DEFBYTE: [145, 146, 147],
      DEFDATE: [145, 146, 147],
      DEFDBL: [145, 146, 147],
      DEFDEC: [145, 146, 147],
      DEFCUR: [145, 146, 147],
      DEFINT: [145, 146, 147],
      DEFLNG: [145, 146, 147],
      DEFOBJ: [145, 146, 147],
      DEFSNG: [145, 146, 147],
      DEFSTR: [145, 146, 147],
      DEFVAR: [145, 146, 147],
      DIM: [145, 146, 147],
      DO: [145, 146, 147],
      DOUBLE: [145, 146, 147],
      EACH: [145, 146, 147],
      ELSE: [145, 146, 147],
      ELSEIF: [145, 146, 147],
      END_ENUM: [145, 146, 147],
      END_FUNCTION: [145, 146, 147],
      END_IF: [145, 146, 147],
      END_PROPERTY: [145, 146, 147],
      END_SELECT: [145, 146, 147],
      END_SUB: [145, 146, 147],
      END_TYPE: [145, 146, 147],
      END_WITH: [145, 146, 147],
      END: [145, 146, 147],
      ENUM: [145, 146, 147],
      EQV: [145, 146, 147],
      ERASE: [145, 146, 147],
      EVENT: [145, 146, 147],
      EXIT_DO: [145, 146, 147],
      EXIT_FOR: [145, 146, 147],
      EXIT_FUNCTION: [145, 146, 147],
      EXIT_PROPERTY: [145, 146, 147],
      EXIT_SUB: [145, 146, 147],
      FALSE: [145, 146, 147],
      FRIEND: [145, 146, 147],
      FOR: [145, 146, 147],
      FUNCTION: [145, 146, 147],
      GET: [145, 146, 147],
      GLOBAL: [145, 146, 147],
      GOSUB: [145, 146, 147],
      GOTO: [145, 146, 147],
      IF: [145, 146, 147],
      IMPLEMENTS: [145, 146, 147],
      IN: [145, 146, 147],
      ISNOT: [145, 146, 147],
      IS: [145, 146, 147],
      INTEGER: [145, 146, 147],
      LONG: [145, 146, 147],
      LOOP: [145, 146, 147],
      LEN: [145, 146, 147],
      LET: [145, 146, 147],
      LIB: [145, 146, 147],
      LIKE: [145, 146, 147],
      LSET: [145, 146, 147],
      MACRO_CONST: [145, 146, 147],
      MACRO_IF: [145, 146, 147],
      MACRO_ELSEIF: [145, 146, 147],
      MACRO_ELSE: [145, 146, 147],
      MACRO_END_IF: [145, 146, 147],
      MOD: [145, 146, 147],
      NEXT: [145, 146, 147],
      NEW: [145, 146, 147],
      NOT: [145, 146, 147],
      NOTHING: [145, 146, 147],
      NULL: [145, 146, 147],
      ON_ERROR: [145, 146, 147],
      ON_LOCAL_ERROR: [145, 146, 147],
      ON: [145, 146, 147],
      OPTIONAL: [145, 146, 147],
      OPTION_BASE: [145, 146, 147],
      OPTION_EXPLICIT: [145, 146, 147],
      OPTION_COMPARE: [145, 146, 147],
      OPTION_PRIVATE_MODULE: [145, 146, 147],
      OR: [145, 146, 147],
      PARAMARRAY: [145, 146, 147],
      PRESERVE: [145, 146, 147],
      PRIVATE: [145, 146, 147],
      PROPERTY_GET: [145, 146, 147],
      PROPERTY_LET: [145, 146, 147],
      PROPERTY_SET: [145, 146, 147],
      PTRSAFE: [145, 146, 147],
      PUBLIC: [145, 146, 147],
      RAISEEVENT: [145, 146, 147],
      REDIM: [145, 146, 147],
      RESET: [145, 146, 147],
      RESUME: [145, 146, 147],
      RETURN: [145, 146, 147],
      SELECT: [145, 146, 147],
      SET: [145, 146, 147],
      SINGLE: [145, 146, 147],
      STATIC: [145, 146, 147],
      STEP: [145, 146, 147],
      STOP: [145, 146, 147],
      STRING: [145, 146, 147],
      SUB: [145, 146, 147],
      THEN: [145, 146, 147],
      TO: [145, 146, 147],
      TRUE: [145, 146, 147],
      TYPEOF: [145, 146, 147],
      UNTIL: [145, 146, 147],
      VARIANT: [145, 146, 147],
      WEND: [145, 146, 147],
      WHILE: [145, 146, 147],
      WITH: [145, 146, 147],
      WITHEVENTS: [145, 146, 147],
      XOR: [145, 146, 147],
      IMP: [145, 146, 147],
      IDENTIFIER: [145, 146, 147],
      SPACE_DOT: [145],
    },
    iCS_S_MembersCall_group_def_61: {
      ALIAS: [148],
      AND: [148],
      ATTRIBUTE: [148],
      AS: [148],
      BEGIN: [148],
      BOOLEAN: [148],
      BYVAL: [148],
      BYREF: [148],
      BYTE: [148],
      CALL: [148],
      CASE: [148],
      CONST: [148],
      DECLARE: [148],
      DEFBOOL: [148],
      DEFBYTE: [148],
      DEFDATE: [148],
      DEFDBL: [148],
      DEFDEC: [148],
      DEFCUR: [148],
      DEFINT: [148],
      DEFLNG: [148],
      DEFOBJ: [148],
      DEFSNG: [148],
      DEFSTR: [148],
      DEFVAR: [148],
      DIM: [148],
      DO: [148],
      DOUBLE: [148],
      EACH: [148],
      ELSE: [148],
      ELSEIF: [148],
      END_ENUM: [148],
      END_FUNCTION: [148],
      END_IF: [148],
      END_PROPERTY: [148],
      END_SELECT: [148],
      END_SUB: [148],
      END_TYPE: [148],
      END_WITH: [148],
      END: [148],
      ENUM: [148],
      EQV: [148],
      ERASE: [148],
      EVENT: [148],
      EXIT_DO: [148],
      EXIT_FOR: [148],
      EXIT_FUNCTION: [148],
      EXIT_PROPERTY: [148],
      EXIT_SUB: [148],
      FALSE: [148],
      FRIEND: [148],
      FOR: [148],
      FUNCTION: [148],
      GET: [148],
      GLOBAL: [148],
      GOSUB: [148],
      GOTO: [148],
      IF: [148],
      IMPLEMENTS: [148],
      IN: [148],
      ISNOT: [148],
      IS: [148],
      INTEGER: [148],
      LONG: [148],
      LOOP: [148],
      LEN: [148],
      LET: [148],
      LIB: [148],
      LIKE: [148],
      LSET: [148],
      MACRO_CONST: [148],
      MACRO_IF: [148],
      MACRO_ELSEIF: [148],
      MACRO_ELSE: [148],
      MACRO_END_IF: [148],
      MOD: [148],
      NEXT: [148],
      NEW: [148],
      NOT: [148],
      NOTHING: [148],
      NULL: [148],
      ON_ERROR: [148],
      ON_LOCAL_ERROR: [148],
      ON: [148],
      OPTIONAL: [148],
      OPTION_BASE: [148],
      OPTION_EXPLICIT: [148],
      OPTION_COMPARE: [148],
      OPTION_PRIVATE_MODULE: [148],
      OR: [148],
      PARAMARRAY: [148],
      PRESERVE: [148],
      PRIVATE: [148],
      PROPERTY_GET: [148],
      PROPERTY_LET: [148],
      PROPERTY_SET: [148],
      PTRSAFE: [148],
      PUBLIC: [148],
      RAISEEVENT: [148],
      REDIM: [148],
      RESET: [148],
      RESUME: [148],
      RETURN: [148],
      SELECT: [148],
      SET: [148],
      SINGLE: [148],
      STATIC: [148],
      STEP: [148],
      STOP: [148],
      STRING: [148],
      SUB: [148],
      THEN: [148],
      TO: [148],
      TRUE: [148],
      TYPEOF: [148],
      UNTIL: [148],
      VARIANT: [148],
      WEND: [148],
      WHILE: [148],
      WITH: [148],
      WITHEVENTS: [148],
      XOR: [148],
      IMP: [148],
      IDENTIFIER: [148],
    },
    iCS_S_MembersCall_group_60: {
      ALIAS: [149, 151],
      AND: [149, 151],
      ATTRIBUTE: [149, 151],
      AS: [149, 151],
      BEGIN: [149, 151],
      BOOLEAN: [149, 151],
      BYVAL: [149, 151],
      BYREF: [149, 151],
      BYTE: [149, 151],
      CALL: [149, 151],
      CASE: [149, 151],
      CONST: [149, 151],
      DECLARE: [149, 151],
      DEFBOOL: [149, 151],
      DEFBYTE: [149, 151],
      DEFDATE: [149, 151],
      DEFDBL: [149, 151],
      DEFDEC: [149, 151],
      DEFCUR: [149, 151],
      DEFINT: [149, 151],
      DEFLNG: [149, 151],
      DEFOBJ: [149, 151],
      DEFSNG: [149, 151],
      DEFSTR: [149, 151],
      DEFVAR: [149, 151],
      DIM: [149, 151],
      DO: [149, 151],
      DOUBLE: [149, 151],
      EACH: [149, 151],
      ELSE: [149, 151],
      ELSEIF: [149, 151],
      END_ENUM: [149, 151],
      END_FUNCTION: [149, 151],
      END_IF: [149, 151],
      END_PROPERTY: [149, 151],
      END_SELECT: [149, 151],
      END_SUB: [149, 151],
      END_TYPE: [149, 151],
      END_WITH: [149, 151],
      END: [149, 151],
      ENUM: [149, 151],
      EQV: [149, 151],
      ERASE: [149, 151],
      EVENT: [149, 151],
      EXIT_DO: [149, 151],
      EXIT_FOR: [149, 151],
      EXIT_FUNCTION: [149, 151],
      EXIT_PROPERTY: [149, 151],
      EXIT_SUB: [149, 151],
      FALSE: [149, 151],
      FRIEND: [149, 151],
      FOR: [149, 151],
      FUNCTION: [149, 151],
      GET: [149, 151],
      GLOBAL: [149, 151],
      GOSUB: [149, 151],
      GOTO: [149, 151],
      IF: [149, 151],
      IMPLEMENTS: [149, 151],
      IN: [149, 151],
      ISNOT: [149, 151],
      IS: [149, 151],
      INTEGER: [149, 151],
      LONG: [149, 151],
      LOOP: [149, 151],
      LEN: [149, 151],
      LET: [149, 151],
      LIB: [149, 151],
      LIKE: [149, 151],
      LSET: [149, 151],
      MACRO_CONST: [149, 151],
      MACRO_IF: [149, 151],
      MACRO_ELSEIF: [149, 151],
      MACRO_ELSE: [149, 151],
      MACRO_END_IF: [149, 151],
      MOD: [149, 151],
      NEXT: [149, 151],
      NEW: [149, 151],
      NOT: [149, 151],
      NOTHING: [149, 151],
      NULL: [149, 151],
      ON_ERROR: [149, 151],
      ON_LOCAL_ERROR: [149, 151],
      ON: [149, 151],
      OPTIONAL: [149, 151],
      OPTION_BASE: [149, 151],
      OPTION_EXPLICIT: [149, 151],
      OPTION_COMPARE: [149, 151],
      OPTION_PRIVATE_MODULE: [149, 151],
      OR: [149, 151],
      PARAMARRAY: [149, 151],
      PRESERVE: [149, 151],
      PRIVATE: [149, 151],
      PROPERTY_GET: [149, 151],
      PROPERTY_LET: [149, 151],
      PROPERTY_SET: [149, 151],
      PTRSAFE: [149, 151],
      PUBLIC: [149, 151],
      RAISEEVENT: [149, 151],
      REDIM: [149, 151],
      RESET: [149, 151],
      RESUME: [149, 151],
      RETURN: [149, 151],
      SELECT: [149, 151],
      SET: [149, 151],
      SINGLE: [149, 151],
      STATIC: [149, 151],
      STEP: [149, 151],
      STOP: [149, 151],
      STRING: [149, 151],
      SUB: [149, 151],
      THEN: [149, 151],
      TO: [149, 151],
      TRUE: [149, 151],
      TYPEOF: [149, 151],
      UNTIL: [149, 151],
      VARIANT: [149, 151],
      WEND: [149, 151],
      WHILE: [149, 151],
      WITH: [149, 151],
      WITHEVENTS: [149, 151],
      XOR: [149, 151],
      IMP: [149, 151],
      IDENTIFIER: [149, 151],
    },
    iCS_S_MembersCall_group_def_62: {
      ALIAS: [150],
      AND: [150],
      ATTRIBUTE: [150],
      AS: [150],
      BEGIN: [150],
      BOOLEAN: [150],
      BYVAL: [150],
      BYREF: [150],
      BYTE: [150],
      CALL: [150],
      CASE: [150],
      CONST: [150],
      DECLARE: [150],
      DEFBOOL: [150],
      DEFBYTE: [150],
      DEFDATE: [150],
      DEFDBL: [150],
      DEFDEC: [150],
      DEFCUR: [150],
      DEFINT: [150],
      DEFLNG: [150],
      DEFOBJ: [150],
      DEFSNG: [150],
      DEFSTR: [150],
      DEFVAR: [150],
      DIM: [150],
      DO: [150],
      DOUBLE: [150],
      EACH: [150],
      ELSE: [150],
      ELSEIF: [150],
      END_ENUM: [150],
      END_FUNCTION: [150],
      END_IF: [150],
      END_PROPERTY: [150],
      END_SELECT: [150],
      END_SUB: [150],
      END_TYPE: [150],
      END_WITH: [150],
      END: [150],
      ENUM: [150],
      EQV: [150],
      ERASE: [150],
      EVENT: [150],
      EXIT_DO: [150],
      EXIT_FOR: [150],
      EXIT_FUNCTION: [150],
      EXIT_PROPERTY: [150],
      EXIT_SUB: [150],
      FALSE: [150],
      FRIEND: [150],
      FOR: [150],
      FUNCTION: [150],
      GET: [150],
      GLOBAL: [150],
      GOSUB: [150],
      GOTO: [150],
      IF: [150],
      IMPLEMENTS: [150],
      IN: [150],
      ISNOT: [150],
      IS: [150],
      INTEGER: [150],
      LONG: [150],
      LOOP: [150],
      LEN: [150],
      LET: [150],
      LIB: [150],
      LIKE: [150],
      LSET: [150],
      MACRO_CONST: [150],
      MACRO_IF: [150],
      MACRO_ELSEIF: [150],
      MACRO_ELSE: [150],
      MACRO_END_IF: [150],
      MOD: [150],
      NEXT: [150],
      NEW: [150],
      NOT: [150],
      NOTHING: [150],
      NULL: [150],
      ON_ERROR: [150],
      ON_LOCAL_ERROR: [150],
      ON: [150],
      OPTIONAL: [150],
      OPTION_BASE: [150],
      OPTION_EXPLICIT: [150],
      OPTION_COMPARE: [150],
      OPTION_PRIVATE_MODULE: [150],
      OR: [150],
      PARAMARRAY: [150],
      PRESERVE: [150],
      PRIVATE: [150],
      PROPERTY_GET: [150],
      PROPERTY_LET: [150],
      PROPERTY_SET: [150],
      PTRSAFE: [150],
      PUBLIC: [150],
      RAISEEVENT: [150],
      REDIM: [150],
      RESET: [150],
      RESUME: [150],
      RETURN: [150],
      SELECT: [150],
      SET: [150],
      SINGLE: [150],
      STATIC: [150],
      STEP: [150],
      STOP: [150],
      STRING: [150],
      SUB: [150],
      THEN: [150],
      TO: [150],
      TRUE: [150],
      TYPEOF: [150],
      UNTIL: [150],
      VARIANT: [150],
      WEND: [150],
      WHILE: [150],
      WITH: [150],
      WITHEVENTS: [150],
      XOR: [150],
      IMP: [150],
      IDENTIFIER: [150],
    },
    iCS_S_MembersCall_group_def_63: {
      ALIAS: [152],
      AND: [152],
      ATTRIBUTE: [152],
      AS: [152],
      BEGIN: [152],
      BOOLEAN: [152],
      BYVAL: [152],
      BYREF: [152],
      BYTE: [152],
      CALL: [152],
      CASE: [152],
      CONST: [152],
      DECLARE: [152],
      DEFBOOL: [152],
      DEFBYTE: [152],
      DEFDATE: [152],
      DEFDBL: [152],
      DEFDEC: [152],
      DEFCUR: [152],
      DEFINT: [152],
      DEFLNG: [152],
      DEFOBJ: [152],
      DEFSNG: [152],
      DEFSTR: [152],
      DEFVAR: [152],
      DIM: [152],
      DO: [152],
      DOUBLE: [152],
      EACH: [152],
      ELSE: [152],
      ELSEIF: [152],
      END_ENUM: [152],
      END_FUNCTION: [152],
      END_IF: [152],
      END_PROPERTY: [152],
      END_SELECT: [152],
      END_SUB: [152],
      END_TYPE: [152],
      END_WITH: [152],
      END: [152],
      ENUM: [152],
      EQV: [152],
      ERASE: [152],
      EVENT: [152],
      EXIT_DO: [152],
      EXIT_FOR: [152],
      EXIT_FUNCTION: [152],
      EXIT_PROPERTY: [152],
      EXIT_SUB: [152],
      FALSE: [152],
      FRIEND: [152],
      FOR: [152],
      FUNCTION: [152],
      GET: [152],
      GLOBAL: [152],
      GOSUB: [152],
      GOTO: [152],
      IF: [152],
      IMPLEMENTS: [152],
      IN: [152],
      ISNOT: [152],
      IS: [152],
      INTEGER: [152],
      LONG: [152],
      LOOP: [152],
      LEN: [152],
      LET: [152],
      LIB: [152],
      LIKE: [152],
      LSET: [152],
      MACRO_CONST: [152],
      MACRO_IF: [152],
      MACRO_ELSEIF: [152],
      MACRO_ELSE: [152],
      MACRO_END_IF: [152],
      MOD: [152],
      NEXT: [152],
      NEW: [152],
      NOT: [152],
      NOTHING: [152],
      NULL: [152],
      ON_ERROR: [152],
      ON_LOCAL_ERROR: [152],
      ON: [152],
      OPTIONAL: [152],
      OPTION_BASE: [152],
      OPTION_EXPLICIT: [152],
      OPTION_COMPARE: [152],
      OPTION_PRIVATE_MODULE: [152],
      OR: [152],
      PARAMARRAY: [152],
      PRESERVE: [152],
      PRIVATE: [152],
      PROPERTY_GET: [152],
      PROPERTY_LET: [152],
      PROPERTY_SET: [152],
      PTRSAFE: [152],
      PUBLIC: [152],
      RAISEEVENT: [152],
      REDIM: [152],
      RESET: [152],
      RESUME: [152],
      RETURN: [152],
      SELECT: [152],
      SET: [152],
      SINGLE: [152],
      STATIC: [152],
      STEP: [152],
      STOP: [152],
      STRING: [152],
      SUB: [152],
      THEN: [152],
      TO: [152],
      TRUE: [152],
      TYPEOF: [152],
      UNTIL: [152],
      VARIANT: [152],
      WEND: [152],
      WHILE: [152],
      WITH: [152],
      WITHEVENTS: [152],
      XOR: [152],
      IMP: [152],
      IDENTIFIER: [152],
    },
    iCS_S_MembersCall_group_59: {
      ALIAS: [153],
      AND: [153],
      ATTRIBUTE: [153],
      AS: [153],
      BEGIN: [153],
      BOOLEAN: [153],
      BYVAL: [153],
      BYREF: [153],
      BYTE: [153],
      CALL: [153],
      CASE: [153],
      CONST: [153],
      DECLARE: [153],
      DEFBOOL: [153],
      DEFBYTE: [153],
      DEFDATE: [153],
      DEFDBL: [153],
      DEFDEC: [153],
      DEFCUR: [153],
      DEFINT: [153],
      DEFLNG: [153],
      DEFOBJ: [153],
      DEFSNG: [153],
      DEFSTR: [153],
      DEFVAR: [153],
      DIM: [153],
      DO: [153],
      DOUBLE: [153],
      EACH: [153],
      ELSE: [153],
      ELSEIF: [153],
      END_ENUM: [153],
      END_FUNCTION: [153],
      END_IF: [153],
      END_PROPERTY: [153],
      END_SELECT: [153],
      END_SUB: [153],
      END_TYPE: [153],
      END_WITH: [153],
      END: [153],
      ENUM: [153],
      EQV: [153],
      ERASE: [153],
      EVENT: [153],
      EXIT_DO: [153],
      EXIT_FOR: [153],
      EXIT_FUNCTION: [153],
      EXIT_PROPERTY: [153],
      EXIT_SUB: [153],
      FALSE: [153],
      FRIEND: [153],
      FOR: [153],
      FUNCTION: [153],
      GET: [153],
      GLOBAL: [153],
      GOSUB: [153],
      GOTO: [153],
      IF: [153],
      IMPLEMENTS: [153],
      IN: [153],
      ISNOT: [153],
      IS: [153],
      INTEGER: [153],
      LONG: [153],
      LOOP: [153],
      LEN: [153],
      LET: [153],
      LIB: [153],
      LIKE: [153],
      LSET: [153],
      MACRO_CONST: [153],
      MACRO_IF: [153],
      MACRO_ELSEIF: [153],
      MACRO_ELSE: [153],
      MACRO_END_IF: [153],
      MOD: [153],
      NEXT: [153],
      NEW: [153],
      NOT: [153],
      NOTHING: [153],
      NULL: [153],
      ON_ERROR: [153],
      ON_LOCAL_ERROR: [153],
      ON: [153],
      OPTIONAL: [153],
      OPTION_BASE: [153],
      OPTION_EXPLICIT: [153],
      OPTION_COMPARE: [153],
      OPTION_PRIVATE_MODULE: [153],
      OR: [153],
      PARAMARRAY: [153],
      PRESERVE: [153],
      PRIVATE: [153],
      PROPERTY_GET: [153],
      PROPERTY_LET: [153],
      PROPERTY_SET: [153],
      PTRSAFE: [153],
      PUBLIC: [153],
      RAISEEVENT: [153],
      REDIM: [153],
      RESET: [153],
      RESUME: [153],
      RETURN: [153],
      SELECT: [153],
      SET: [153],
      SINGLE: [153],
      STATIC: [153],
      STEP: [153],
      STOP: [153],
      STRING: [153],
      SUB: [153],
      THEN: [153],
      TO: [153],
      TRUE: [153],
      TYPEOF: [153],
      UNTIL: [153],
      VARIANT: [153],
      WEND: [153],
      WHILE: [153],
      WITH: [153],
      WITHEVENTS: [153],
      XOR: [153],
      IMP: [153],
      IDENTIFIER: [153],
      SPACE_DOT: [155],
    },
    iCS_S_MembersCall_group_def_64: {
      SPACE_DOT: [154],
    },
    iCS_S_MembersCall: {
      ALIAS: [156],
      AND: [156],
      ATTRIBUTE: [156],
      AS: [156],
      BEGIN: [156],
      BOOLEAN: [156],
      BYVAL: [156],
      BYREF: [156],
      BYTE: [156],
      CALL: [156],
      CASE: [156],
      CONST: [156],
      DECLARE: [156],
      DEFBOOL: [156],
      DEFBYTE: [156],
      DEFDATE: [156],
      DEFDBL: [156],
      DEFDEC: [156],
      DEFCUR: [156],
      DEFINT: [156],
      DEFLNG: [156],
      DEFOBJ: [156],
      DEFSNG: [156],
      DEFSTR: [156],
      DEFVAR: [156],
      DIM: [156],
      DO: [156],
      DOUBLE: [156],
      EACH: [156],
      ELSE: [156],
      ELSEIF: [156],
      END_ENUM: [156],
      END_FUNCTION: [156],
      END_IF: [156],
      END_PROPERTY: [156],
      END_SELECT: [156],
      END_SUB: [156],
      END_TYPE: [156],
      END_WITH: [156],
      END: [156],
      ENUM: [156],
      EQV: [156],
      ERASE: [156],
      EVENT: [156],
      EXIT_DO: [156],
      EXIT_FOR: [156],
      EXIT_FUNCTION: [156],
      EXIT_PROPERTY: [156],
      EXIT_SUB: [156],
      FALSE: [156],
      FRIEND: [156],
      FOR: [156],
      FUNCTION: [156],
      GET: [156],
      GLOBAL: [156],
      GOSUB: [156],
      GOTO: [156],
      IF: [156],
      IMPLEMENTS: [156],
      IN: [156],
      ISNOT: [156],
      IS: [156],
      INTEGER: [156],
      LONG: [156],
      LOOP: [156],
      LEN: [156],
      LET: [156],
      LIB: [156],
      LIKE: [156],
      LSET: [156],
      MACRO_CONST: [156],
      MACRO_IF: [156],
      MACRO_ELSEIF: [156],
      MACRO_ELSE: [156],
      MACRO_END_IF: [156],
      MOD: [156],
      NEXT: [156],
      NEW: [156],
      NOT: [156],
      NOTHING: [156],
      NULL: [156],
      ON_ERROR: [156],
      ON_LOCAL_ERROR: [156],
      ON: [156],
      OPTIONAL: [156],
      OPTION_BASE: [156],
      OPTION_EXPLICIT: [156],
      OPTION_COMPARE: [156],
      OPTION_PRIVATE_MODULE: [156],
      OR: [156],
      PARAMARRAY: [156],
      PRESERVE: [156],
      PRIVATE: [156],
      PROPERTY_GET: [156],
      PROPERTY_LET: [156],
      PROPERTY_SET: [156],
      PTRSAFE: [156],
      PUBLIC: [156],
      RAISEEVENT: [156],
      REDIM: [156],
      RESET: [156],
      RESUME: [156],
      RETURN: [156],
      SELECT: [156],
      SET: [156],
      SINGLE: [156],
      STATIC: [156],
      STEP: [156],
      STOP: [156],
      STRING: [156],
      SUB: [156],
      THEN: [156],
      TO: [156],
      TRUE: [156],
      TYPEOF: [156],
      UNTIL: [156],
      VARIANT: [156],
      WEND: [156],
      WHILE: [156],
      WITH: [156],
      WITHEVENTS: [156],
      XOR: [156],
      IMP: [156],
      IDENTIFIER: [156],
      SPACE_DOT: [156],
    },
    iCS_S_MemberCall_group_66: {
      ALIAS: [157, 158],
      AND: [157, 158],
      ATTRIBUTE: [157, 158],
      AS: [157, 158],
      BEGIN: [157, 158],
      BOOLEAN: [157, 158],
      BYVAL: [157, 158],
      BYREF: [157, 158],
      BYTE: [157, 158],
      CALL: [157, 158],
      CASE: [157, 158],
      CONST: [157, 158],
      DECLARE: [157, 158],
      DEFBOOL: [157, 158],
      DEFBYTE: [157, 158],
      DEFDATE: [157, 158],
      DEFDBL: [157, 158],
      DEFDEC: [157, 158],
      DEFCUR: [157, 158],
      DEFINT: [157, 158],
      DEFLNG: [157, 158],
      DEFOBJ: [157, 158],
      DEFSNG: [157, 158],
      DEFSTR: [157, 158],
      DEFVAR: [157, 158],
      DIM: [157, 158],
      DO: [157, 158],
      DOUBLE: [157, 158],
      EACH: [157, 158],
      ELSE: [157, 158],
      ELSEIF: [157, 158],
      END_ENUM: [157, 158],
      END_FUNCTION: [157, 158],
      END_IF: [157, 158],
      END_PROPERTY: [157, 158],
      END_SELECT: [157, 158],
      END_SUB: [157, 158],
      END_TYPE: [157, 158],
      END_WITH: [157, 158],
      END: [157, 158],
      ENUM: [157, 158],
      EQV: [157, 158],
      ERASE: [157, 158],
      EVENT: [157, 158],
      EXIT_DO: [157, 158],
      EXIT_FOR: [157, 158],
      EXIT_FUNCTION: [157, 158],
      EXIT_PROPERTY: [157, 158],
      EXIT_SUB: [157, 158],
      FALSE: [157, 158],
      FRIEND: [157, 158],
      FOR: [157, 158],
      FUNCTION: [157, 158],
      GET: [157, 158],
      GLOBAL: [157, 158],
      GOSUB: [157, 158],
      GOTO: [157, 158],
      IF: [157, 158],
      IMPLEMENTS: [157, 158],
      IN: [157, 158],
      ISNOT: [157, 158],
      IS: [157, 158],
      INTEGER: [157, 158],
      LONG: [157, 158],
      LOOP: [157, 158],
      LEN: [157, 158],
      LET: [157, 158],
      LIB: [157, 158],
      LIKE: [157, 158],
      LSET: [157, 158],
      MACRO_CONST: [157, 158],
      MACRO_IF: [157, 158],
      MACRO_ELSEIF: [157, 158],
      MACRO_ELSE: [157, 158],
      MACRO_END_IF: [157, 158],
      MOD: [157, 158],
      NEXT: [157, 158],
      NEW: [157, 158],
      NOT: [157, 158],
      NOTHING: [157, 158],
      NULL: [157, 158],
      ON_ERROR: [157, 158],
      ON_LOCAL_ERROR: [157, 158],
      ON: [157, 158],
      OPTIONAL: [157, 158],
      OPTION_BASE: [157, 158],
      OPTION_EXPLICIT: [157, 158],
      OPTION_COMPARE: [157, 158],
      OPTION_PRIVATE_MODULE: [157, 158],
      OR: [157, 158],
      PARAMARRAY: [157, 158],
      PRESERVE: [157, 158],
      PRIVATE: [157, 158],
      PROPERTY_GET: [157, 158],
      PROPERTY_LET: [157, 158],
      PROPERTY_SET: [157, 158],
      PTRSAFE: [157, 158],
      PUBLIC: [157, 158],
      RAISEEVENT: [157, 158],
      REDIM: [157, 158],
      RESET: [157, 158],
      RESUME: [157, 158],
      RETURN: [157, 158],
      SELECT: [157, 158],
      SET: [157, 158],
      SINGLE: [157, 158],
      STATIC: [157, 158],
      STEP: [157, 158],
      STOP: [157, 158],
      STRING: [157, 158],
      SUB: [157, 158],
      THEN: [157, 158],
      TO: [157, 158],
      TRUE: [157, 158],
      TYPEOF: [157, 158],
      UNTIL: [157, 158],
      VARIANT: [157, 158],
      WEND: [157, 158],
      WHILE: [157, 158],
      WITH: [157, 158],
      WITHEVENTS: [157, 158],
      XOR: [157, 158],
      IMP: [157, 158],
      IDENTIFIER: [157, 158],
    },
    iCS_S_MemberCall: {
      '.': [159],
    },
    iCS_S_SpaceMemberCall_group_67: {
      ALIAS: [160, 161],
      AND: [160, 161],
      ATTRIBUTE: [160, 161],
      AS: [160, 161],
      BEGIN: [160, 161],
      BOOLEAN: [160, 161],
      BYVAL: [160, 161],
      BYREF: [160, 161],
      BYTE: [160, 161],
      CALL: [160, 161],
      CASE: [160, 161],
      CONST: [160, 161],
      DECLARE: [160, 161],
      DEFBOOL: [160, 161],
      DEFBYTE: [160, 161],
      DEFDATE: [160, 161],
      DEFDBL: [160, 161],
      DEFDEC: [160, 161],
      DEFCUR: [160, 161],
      DEFINT: [160, 161],
      DEFLNG: [160, 161],
      DEFOBJ: [160, 161],
      DEFSNG: [160, 161],
      DEFSTR: [160, 161],
      DEFVAR: [160, 161],
      DIM: [160, 161],
      DO: [160, 161],
      DOUBLE: [160, 161],
      EACH: [160, 161],
      ELSE: [160, 161],
      ELSEIF: [160, 161],
      END_ENUM: [160, 161],
      END_FUNCTION: [160, 161],
      END_IF: [160, 161],
      END_PROPERTY: [160, 161],
      END_SELECT: [160, 161],
      END_SUB: [160, 161],
      END_TYPE: [160, 161],
      END_WITH: [160, 161],
      END: [160, 161],
      ENUM: [160, 161],
      EQV: [160, 161],
      ERASE: [160, 161],
      EVENT: [160, 161],
      EXIT_DO: [160, 161],
      EXIT_FOR: [160, 161],
      EXIT_FUNCTION: [160, 161],
      EXIT_PROPERTY: [160, 161],
      EXIT_SUB: [160, 161],
      FALSE: [160, 161],
      FRIEND: [160, 161],
      FOR: [160, 161],
      FUNCTION: [160, 161],
      GET: [160, 161],
      GLOBAL: [160, 161],
      GOSUB: [160, 161],
      GOTO: [160, 161],
      IF: [160, 161],
      IMPLEMENTS: [160, 161],
      IN: [160, 161],
      ISNOT: [160, 161],
      IS: [160, 161],
      INTEGER: [160, 161],
      LONG: [160, 161],
      LOOP: [160, 161],
      LEN: [160, 161],
      LET: [160, 161],
      LIB: [160, 161],
      LIKE: [160, 161],
      LSET: [160, 161],
      MACRO_CONST: [160, 161],
      MACRO_IF: [160, 161],
      MACRO_ELSEIF: [160, 161],
      MACRO_ELSE: [160, 161],
      MACRO_END_IF: [160, 161],
      MOD: [160, 161],
      NEXT: [160, 161],
      NEW: [160, 161],
      NOT: [160, 161],
      NOTHING: [160, 161],
      NULL: [160, 161],
      ON_ERROR: [160, 161],
      ON_LOCAL_ERROR: [160, 161],
      ON: [160, 161],
      OPTIONAL: [160, 161],
      OPTION_BASE: [160, 161],
      OPTION_EXPLICIT: [160, 161],
      OPTION_COMPARE: [160, 161],
      OPTION_PRIVATE_MODULE: [160, 161],
      OR: [160, 161],
      PARAMARRAY: [160, 161],
      PRESERVE: [160, 161],
      PRIVATE: [160, 161],
      PROPERTY_GET: [160, 161],
      PROPERTY_LET: [160, 161],
      PROPERTY_SET: [160, 161],
      PTRSAFE: [160, 161],
      PUBLIC: [160, 161],
      RAISEEVENT: [160, 161],
      REDIM: [160, 161],
      RESET: [160, 161],
      RESUME: [160, 161],
      RETURN: [160, 161],
      SELECT: [160, 161],
      SET: [160, 161],
      SINGLE: [160, 161],
      STATIC: [160, 161],
      STEP: [160, 161],
      STOP: [160, 161],
      STRING: [160, 161],
      SUB: [160, 161],
      THEN: [160, 161],
      TO: [160, 161],
      TRUE: [160, 161],
      TYPEOF: [160, 161],
      UNTIL: [160, 161],
      VARIANT: [160, 161],
      WEND: [160, 161],
      WHILE: [160, 161],
      WITH: [160, 161],
      WITHEVENTS: [160, 161],
      XOR: [160, 161],
      IMP: [160, 161],
      IDENTIFIER: [160, 161],
    },
    iCS_S_SpaceMemberCall: {
      SPACE_DOT: [162],
    },
    iCS_S_ProcedureOrArrayCall: {
      ALIAS: [163],
      AND: [163],
      ATTRIBUTE: [163],
      AS: [163],
      BEGIN: [163],
      BOOLEAN: [163],
      BYVAL: [163],
      BYREF: [163],
      BYTE: [163],
      CALL: [163],
      CASE: [163],
      CONST: [163],
      DECLARE: [163],
      DEFBOOL: [163],
      DEFBYTE: [163],
      DEFDATE: [163],
      DEFDBL: [163],
      DEFDEC: [163],
      DEFCUR: [163],
      DEFINT: [163],
      DEFLNG: [163],
      DEFOBJ: [163],
      DEFSNG: [163],
      DEFSTR: [163],
      DEFVAR: [163],
      DIM: [163],
      DO: [163],
      DOUBLE: [163],
      EACH: [163],
      ELSE: [163],
      ELSEIF: [163],
      END_ENUM: [163],
      END_FUNCTION: [163],
      END_IF: [163],
      END_PROPERTY: [163],
      END_SELECT: [163],
      END_SUB: [163],
      END_TYPE: [163],
      END_WITH: [163],
      END: [163],
      ENUM: [163],
      EQV: [163],
      ERASE: [163],
      EVENT: [163],
      EXIT_DO: [163],
      EXIT_FOR: [163],
      EXIT_FUNCTION: [163],
      EXIT_PROPERTY: [163],
      EXIT_SUB: [163],
      FALSE: [163],
      FRIEND: [163],
      FOR: [163],
      FUNCTION: [163],
      GET: [163],
      GLOBAL: [163],
      GOSUB: [163],
      GOTO: [163],
      IF: [163],
      IMPLEMENTS: [163],
      IN: [163],
      ISNOT: [163],
      IS: [163],
      INTEGER: [163],
      LONG: [163],
      LOOP: [163],
      LEN: [163],
      LET: [163],
      LIB: [163],
      LIKE: [163],
      LSET: [163],
      MACRO_CONST: [163],
      MACRO_IF: [163],
      MACRO_ELSEIF: [163],
      MACRO_ELSE: [163],
      MACRO_END_IF: [163],
      MOD: [163],
      NEXT: [163],
      NEW: [163],
      NOT: [163],
      NOTHING: [163],
      NULL: [163],
      ON_ERROR: [163],
      ON_LOCAL_ERROR: [163],
      ON: [163],
      OPTIONAL: [163],
      OPTION_BASE: [163],
      OPTION_EXPLICIT: [163],
      OPTION_COMPARE: [163],
      OPTION_PRIVATE_MODULE: [163],
      OR: [163],
      PARAMARRAY: [163],
      PRESERVE: [163],
      PRIVATE: [163],
      PROPERTY_GET: [163],
      PROPERTY_LET: [163],
      PROPERTY_SET: [163],
      PTRSAFE: [163],
      PUBLIC: [163],
      RAISEEVENT: [163],
      REDIM: [163],
      RESET: [163],
      RESUME: [163],
      RETURN: [163],
      SELECT: [163],
      SET: [163],
      SINGLE: [163],
      STATIC: [163],
      STEP: [163],
      STOP: [163],
      STRING: [163],
      SUB: [163],
      THEN: [163],
      TO: [163],
      TRUE: [163],
      TYPEOF: [163],
      UNTIL: [163],
      VARIANT: [163],
      WEND: [163],
      WHILE: [163],
      WITH: [163],
      WITHEVENTS: [163],
      XOR: [163],
      IMP: [163],
      IDENTIFIER: [163],
    },
    iCS_S_VariableOrProcedureCall: {
      ALIAS: [164],
      AND: [164],
      ATTRIBUTE: [164],
      AS: [164],
      BEGIN: [164],
      BOOLEAN: [164],
      BYVAL: [164],
      BYREF: [164],
      BYTE: [164],
      CALL: [164],
      CASE: [164],
      CONST: [164],
      DECLARE: [164],
      DEFBOOL: [164],
      DEFBYTE: [164],
      DEFDATE: [164],
      DEFDBL: [164],
      DEFDEC: [164],
      DEFCUR: [164],
      DEFINT: [164],
      DEFLNG: [164],
      DEFOBJ: [164],
      DEFSNG: [164],
      DEFSTR: [164],
      DEFVAR: [164],
      DIM: [164],
      DO: [164],
      DOUBLE: [164],
      EACH: [164],
      ELSE: [164],
      ELSEIF: [164],
      END_ENUM: [164],
      END_FUNCTION: [164],
      END_IF: [164],
      END_PROPERTY: [164],
      END_SELECT: [164],
      END_SUB: [164],
      END_TYPE: [164],
      END_WITH: [164],
      END: [164],
      ENUM: [164],
      EQV: [164],
      ERASE: [164],
      EVENT: [164],
      EXIT_DO: [164],
      EXIT_FOR: [164],
      EXIT_FUNCTION: [164],
      EXIT_PROPERTY: [164],
      EXIT_SUB: [164],
      FALSE: [164],
      FRIEND: [164],
      FOR: [164],
      FUNCTION: [164],
      GET: [164],
      GLOBAL: [164],
      GOSUB: [164],
      GOTO: [164],
      IF: [164],
      IMPLEMENTS: [164],
      IN: [164],
      ISNOT: [164],
      IS: [164],
      INTEGER: [164],
      LONG: [164],
      LOOP: [164],
      LEN: [164],
      LET: [164],
      LIB: [164],
      LIKE: [164],
      LSET: [164],
      MACRO_CONST: [164],
      MACRO_IF: [164],
      MACRO_ELSEIF: [164],
      MACRO_ELSE: [164],
      MACRO_END_IF: [164],
      MOD: [164],
      NEXT: [164],
      NEW: [164],
      NOT: [164],
      NOTHING: [164],
      NULL: [164],
      ON_ERROR: [164],
      ON_LOCAL_ERROR: [164],
      ON: [164],
      OPTIONAL: [164],
      OPTION_BASE: [164],
      OPTION_EXPLICIT: [164],
      OPTION_COMPARE: [164],
      OPTION_PRIVATE_MODULE: [164],
      OR: [164],
      PARAMARRAY: [164],
      PRESERVE: [164],
      PRIVATE: [164],
      PROPERTY_GET: [164],
      PROPERTY_LET: [164],
      PROPERTY_SET: [164],
      PTRSAFE: [164],
      PUBLIC: [164],
      RAISEEVENT: [164],
      REDIM: [164],
      RESET: [164],
      RESUME: [164],
      RETURN: [164],
      SELECT: [164],
      SET: [164],
      SINGLE: [164],
      STATIC: [164],
      STEP: [164],
      STOP: [164],
      STRING: [164],
      SUB: [164],
      THEN: [164],
      TO: [164],
      TRUE: [164],
      TYPEOF: [164],
      UNTIL: [164],
      VARIANT: [164],
      WEND: [164],
      WHILE: [164],
      WITH: [164],
      WITHEVENTS: [164],
      XOR: [164],
      IMP: [164],
      IDENTIFIER: [164],
    },
    dictionaryCallStmt: {
      '!': [165],
    },
    literal: {
      DOUBLELITERAL: [166],
      INTEGERLITERAL: [167],
      STRINGLITERAL: [168],
      NOTHING: [169],
      NULL: [170],
      TRUE: [171],
      FALSE: [172],
    },
    typeHint: {
      '&': [173],
      '%': [174],
      '#': [175],
      '!': [176],
      '@': [177],
      $: [178],
    },
    arg_group_def_71: {
      BYVAL: [179],
    },
    arg_group_70: {
      BYVAL: [180],
      BYREF: [182],
    },
    arg_group_def_72: {
      BYREF: [181],
    },
    arg_group_def_74: {
      LPAREN: [183],
    },
    arg: {
      OPTIONAL: [184],
      BYVAL: [184],
      BYREF: [184],
      PARAMARRAY: [184],
      ALIAS: [184],
      AND: [184],
      ATTRIBUTE: [184],
      AS: [184],
      BEGIN: [184],
      BOOLEAN: [184],
      BYTE: [184],
      CALL: [184],
      CASE: [184],
      CONST: [184],
      DECLARE: [184],
      DEFBOOL: [184],
      DEFBYTE: [184],
      DEFDATE: [184],
      DEFDBL: [184],
      DEFDEC: [184],
      DEFCUR: [184],
      DEFINT: [184],
      DEFLNG: [184],
      DEFOBJ: [184],
      DEFSNG: [184],
      DEFSTR: [184],
      DEFVAR: [184],
      DIM: [184],
      DO: [184],
      DOUBLE: [184],
      EACH: [184],
      ELSE: [184],
      ELSEIF: [184],
      END_ENUM: [184],
      END_FUNCTION: [184],
      END_IF: [184],
      END_PROPERTY: [184],
      END_SELECT: [184],
      END_SUB: [184],
      END_TYPE: [184],
      END_WITH: [184],
      END: [184],
      ENUM: [184],
      EQV: [184],
      ERASE: [184],
      EVENT: [184],
      EXIT_DO: [184],
      EXIT_FOR: [184],
      EXIT_FUNCTION: [184],
      EXIT_PROPERTY: [184],
      EXIT_SUB: [184],
      FALSE: [184],
      FRIEND: [184],
      FOR: [184],
      FUNCTION: [184],
      GET: [184],
      GLOBAL: [184],
      GOSUB: [184],
      GOTO: [184],
      IF: [184],
      IMPLEMENTS: [184],
      IN: [184],
      ISNOT: [184],
      IS: [184],
      INTEGER: [184],
      LONG: [184],
      LOOP: [184],
      LEN: [184],
      LET: [184],
      LIB: [184],
      LIKE: [184],
      LSET: [184],
      MACRO_CONST: [184],
      MACRO_IF: [184],
      MACRO_ELSEIF: [184],
      MACRO_ELSE: [184],
      MACRO_END_IF: [184],
      MOD: [184],
      NEXT: [184],
      NEW: [184],
      NOT: [184],
      NOTHING: [184],
      NULL: [184],
      ON_ERROR: [184],
      ON_LOCAL_ERROR: [184],
      ON: [184],
      OPTION_BASE: [184],
      OPTION_EXPLICIT: [184],
      OPTION_COMPARE: [184],
      OPTION_PRIVATE_MODULE: [184],
      OR: [184],
      PRESERVE: [184],
      PRIVATE: [184],
      PROPERTY_GET: [184],
      PROPERTY_LET: [184],
      PROPERTY_SET: [184],
      PTRSAFE: [184],
      PUBLIC: [184],
      RAISEEVENT: [184],
      REDIM: [184],
      RESET: [184],
      RESUME: [184],
      RETURN: [184],
      SELECT: [184],
      SET: [184],
      SINGLE: [184],
      STATIC: [184],
      STEP: [184],
      STOP: [184],
      STRING: [184],
      SUB: [184],
      THEN: [184],
      TO: [184],
      TRUE: [184],
      TYPEOF: [184],
      UNTIL: [184],
      VARIANT: [184],
      WEND: [184],
      WHILE: [184],
      WITH: [184],
      WITHEVENTS: [184],
      XOR: [184],
      IMP: [184],
      IDENTIFIER: [184],
    },
    argDefaultValue: {
      EQ: [185],
    },
    asTypeClause: {
      AS: [186],
    },
    type__group_def_76: {
      BOOLEAN: [187],
      BYTE: [187],
      DOUBLE: [187],
      INTEGER: [187],
      LONG: [187],
      SINGLE: [187],
      VARIANT: [187],
      STRING: [187],
    },
    type__group_75: {
      BOOLEAN: [188, 190],
      BYTE: [188, 190],
      DOUBLE: [188, 190],
      INTEGER: [188, 190],
      LONG: [188, 190],
      SINGLE: [188, 190],
      VARIANT: [188, 190],
      STRING: [188, 190],
      ALIAS: [190],
      AND: [190],
      ATTRIBUTE: [190],
      AS: [190],
      BEGIN: [190],
      BYVAL: [190],
      BYREF: [190],
      CALL: [190],
      CASE: [190],
      CONST: [190],
      DECLARE: [190],
      DEFBOOL: [190],
      DEFBYTE: [190],
      DEFDATE: [190],
      DEFDBL: [190],
      DEFDEC: [190],
      DEFCUR: [190],
      DEFINT: [190],
      DEFLNG: [190],
      DEFOBJ: [190],
      DEFSNG: [190],
      DEFSTR: [190],
      DEFVAR: [190],
      DIM: [190],
      DO: [190],
      EACH: [190],
      ELSE: [190],
      ELSEIF: [190],
      END_ENUM: [190],
      END_FUNCTION: [190],
      END_IF: [190],
      END_PROPERTY: [190],
      END_SELECT: [190],
      END_SUB: [190],
      END_TYPE: [190],
      END_WITH: [190],
      END: [190],
      ENUM: [190],
      EQV: [190],
      ERASE: [190],
      EVENT: [190],
      EXIT_DO: [190],
      EXIT_FOR: [190],
      EXIT_FUNCTION: [190],
      EXIT_PROPERTY: [190],
      EXIT_SUB: [190],
      FALSE: [190],
      FRIEND: [190],
      FOR: [190],
      FUNCTION: [190],
      GET: [190],
      GLOBAL: [190],
      GOSUB: [190],
      GOTO: [190],
      IF: [190],
      IMPLEMENTS: [190],
      IN: [190],
      ISNOT: [190],
      IS: [190],
      LOOP: [190],
      LEN: [190],
      LET: [190],
      LIB: [190],
      LIKE: [190],
      LSET: [190],
      MACRO_CONST: [190],
      MACRO_IF: [190],
      MACRO_ELSEIF: [190],
      MACRO_ELSE: [190],
      MACRO_END_IF: [190],
      MOD: [190],
      NEXT: [190],
      NEW: [190],
      NOT: [190],
      NOTHING: [190],
      NULL: [190],
      ON_ERROR: [190],
      ON_LOCAL_ERROR: [190],
      ON: [190],
      OPTIONAL: [190],
      OPTION_BASE: [190],
      OPTION_EXPLICIT: [190],
      OPTION_COMPARE: [190],
      OPTION_PRIVATE_MODULE: [190],
      OR: [190],
      PARAMARRAY: [190],
      PRESERVE: [190],
      PRIVATE: [190],
      PROPERTY_GET: [190],
      PROPERTY_LET: [190],
      PROPERTY_SET: [190],
      PTRSAFE: [190],
      PUBLIC: [190],
      RAISEEVENT: [190],
      REDIM: [190],
      RESET: [190],
      RESUME: [190],
      RETURN: [190],
      SELECT: [190],
      SET: [190],
      STATIC: [190],
      STEP: [190],
      STOP: [190],
      SUB: [190],
      THEN: [190],
      TO: [190],
      TRUE: [190],
      TYPEOF: [190],
      UNTIL: [190],
      WEND: [190],
      WHILE: [190],
      WITH: [190],
      WITHEVENTS: [190],
      XOR: [190],
      IMP: [190],
      IDENTIFIER: [190],
    },
    type__group_def_77: {
      ALIAS: [189],
      AND: [189],
      ATTRIBUTE: [189],
      AS: [189],
      BEGIN: [189],
      BOOLEAN: [189],
      BYVAL: [189],
      BYREF: [189],
      BYTE: [189],
      CALL: [189],
      CASE: [189],
      CONST: [189],
      DECLARE: [189],
      DEFBOOL: [189],
      DEFBYTE: [189],
      DEFDATE: [189],
      DEFDBL: [189],
      DEFDEC: [189],
      DEFCUR: [189],
      DEFINT: [189],
      DEFLNG: [189],
      DEFOBJ: [189],
      DEFSNG: [189],
      DEFSTR: [189],
      DEFVAR: [189],
      DIM: [189],
      DO: [189],
      DOUBLE: [189],
      EACH: [189],
      ELSE: [189],
      ELSEIF: [189],
      END_ENUM: [189],
      END_FUNCTION: [189],
      END_IF: [189],
      END_PROPERTY: [189],
      END_SELECT: [189],
      END_SUB: [189],
      END_TYPE: [189],
      END_WITH: [189],
      END: [189],
      ENUM: [189],
      EQV: [189],
      ERASE: [189],
      EVENT: [189],
      EXIT_DO: [189],
      EXIT_FOR: [189],
      EXIT_FUNCTION: [189],
      EXIT_PROPERTY: [189],
      EXIT_SUB: [189],
      FALSE: [189],
      FRIEND: [189],
      FOR: [189],
      FUNCTION: [189],
      GET: [189],
      GLOBAL: [189],
      GOSUB: [189],
      GOTO: [189],
      IF: [189],
      IMPLEMENTS: [189],
      IN: [189],
      ISNOT: [189],
      IS: [189],
      INTEGER: [189],
      LONG: [189],
      LOOP: [189],
      LEN: [189],
      LET: [189],
      LIB: [189],
      LIKE: [189],
      LSET: [189],
      MACRO_CONST: [189],
      MACRO_IF: [189],
      MACRO_ELSEIF: [189],
      MACRO_ELSE: [189],
      MACRO_END_IF: [189],
      MOD: [189],
      NEXT: [189],
      NEW: [189],
      NOT: [189],
      NOTHING: [189],
      NULL: [189],
      ON_ERROR: [189],
      ON_LOCAL_ERROR: [189],
      ON: [189],
      OPTIONAL: [189],
      OPTION_BASE: [189],
      OPTION_EXPLICIT: [189],
      OPTION_COMPARE: [189],
      OPTION_PRIVATE_MODULE: [189],
      OR: [189],
      PARAMARRAY: [189],
      PRESERVE: [189],
      PRIVATE: [189],
      PROPERTY_GET: [189],
      PROPERTY_LET: [189],
      PROPERTY_SET: [189],
      PTRSAFE: [189],
      PUBLIC: [189],
      RAISEEVENT: [189],
      REDIM: [189],
      RESET: [189],
      RESUME: [189],
      RETURN: [189],
      SELECT: [189],
      SET: [189],
      SINGLE: [189],
      STATIC: [189],
      STEP: [189],
      STOP: [189],
      STRING: [189],
      SUB: [189],
      THEN: [189],
      TO: [189],
      TRUE: [189],
      TYPEOF: [189],
      UNTIL: [189],
      VARIANT: [189],
      WEND: [189],
      WHILE: [189],
      WITH: [189],
      WITHEVENTS: [189],
      XOR: [189],
      IMP: [189],
      IDENTIFIER: [189],
    },
    type_: {
      BOOLEAN: [191],
      BYTE: [191],
      DOUBLE: [191],
      INTEGER: [191],
      LONG: [191],
      SINGLE: [191],
      VARIANT: [191],
      STRING: [191],
      ALIAS: [191],
      AND: [191],
      ATTRIBUTE: [191],
      AS: [191],
      BEGIN: [191],
      BYVAL: [191],
      BYREF: [191],
      CALL: [191],
      CASE: [191],
      CONST: [191],
      DECLARE: [191],
      DEFBOOL: [191],
      DEFBYTE: [191],
      DEFDATE: [191],
      DEFDBL: [191],
      DEFDEC: [191],
      DEFCUR: [191],
      DEFINT: [191],
      DEFLNG: [191],
      DEFOBJ: [191],
      DEFSNG: [191],
      DEFSTR: [191],
      DEFVAR: [191],
      DIM: [191],
      DO: [191],
      EACH: [191],
      ELSE: [191],
      ELSEIF: [191],
      END_ENUM: [191],
      END_FUNCTION: [191],
      END_IF: [191],
      END_PROPERTY: [191],
      END_SELECT: [191],
      END_SUB: [191],
      END_TYPE: [191],
      END_WITH: [191],
      END: [191],
      ENUM: [191],
      EQV: [191],
      ERASE: [191],
      EVENT: [191],
      EXIT_DO: [191],
      EXIT_FOR: [191],
      EXIT_FUNCTION: [191],
      EXIT_PROPERTY: [191],
      EXIT_SUB: [191],
      FALSE: [191],
      FRIEND: [191],
      FOR: [191],
      FUNCTION: [191],
      GET: [191],
      GLOBAL: [191],
      GOSUB: [191],
      GOTO: [191],
      IF: [191],
      IMPLEMENTS: [191],
      IN: [191],
      ISNOT: [191],
      IS: [191],
      LOOP: [191],
      LEN: [191],
      LET: [191],
      LIB: [191],
      LIKE: [191],
      LSET: [191],
      MACRO_CONST: [191],
      MACRO_IF: [191],
      MACRO_ELSEIF: [191],
      MACRO_ELSE: [191],
      MACRO_END_IF: [191],
      MOD: [191],
      NEXT: [191],
      NEW: [191],
      NOT: [191],
      NOTHING: [191],
      NULL: [191],
      ON_ERROR: [191],
      ON_LOCAL_ERROR: [191],
      ON: [191],
      OPTIONAL: [191],
      OPTION_BASE: [191],
      OPTION_EXPLICIT: [191],
      OPTION_COMPARE: [191],
      OPTION_PRIVATE_MODULE: [191],
      OR: [191],
      PARAMARRAY: [191],
      PRESERVE: [191],
      PRIVATE: [191],
      PROPERTY_GET: [191],
      PROPERTY_LET: [191],
      PROPERTY_SET: [191],
      PTRSAFE: [191],
      PUBLIC: [191],
      RAISEEVENT: [191],
      REDIM: [191],
      RESET: [191],
      RESUME: [191],
      RETURN: [191],
      SELECT: [191],
      SET: [191],
      STATIC: [191],
      STEP: [191],
      STOP: [191],
      SUB: [191],
      THEN: [191],
      TO: [191],
      TRUE: [191],
      TYPEOF: [191],
      UNTIL: [191],
      WEND: [191],
      WHILE: [191],
      WITH: [191],
      WITHEVENTS: [191],
      XOR: [191],
      IMP: [191],
      IDENTIFIER: [191],
    },
    complexType_group_def_81: {
      '.': [192],
    },
    complexType_group_80: {
      '.': [193],
      '!': [195],
    },
    complexType_group_def_82: {
      '!': [194],
    },
    complexType_group_def_83: {
      '.': [196],
      '!': [196],
    },
    complexType: {
      ALIAS: [197],
      AND: [197],
      ATTRIBUTE: [197],
      AS: [197],
      BEGIN: [197],
      BOOLEAN: [197],
      BYVAL: [197],
      BYREF: [197],
      BYTE: [197],
      CALL: [197],
      CASE: [197],
      CONST: [197],
      DECLARE: [197],
      DEFBOOL: [197],
      DEFBYTE: [197],
      DEFDATE: [197],
      DEFDBL: [197],
      DEFDEC: [197],
      DEFCUR: [197],
      DEFINT: [197],
      DEFLNG: [197],
      DEFOBJ: [197],
      DEFSNG: [197],
      DEFSTR: [197],
      DEFVAR: [197],
      DIM: [197],
      DO: [197],
      DOUBLE: [197],
      EACH: [197],
      ELSE: [197],
      ELSEIF: [197],
      END_ENUM: [197],
      END_FUNCTION: [197],
      END_IF: [197],
      END_PROPERTY: [197],
      END_SELECT: [197],
      END_SUB: [197],
      END_TYPE: [197],
      END_WITH: [197],
      END: [197],
      ENUM: [197],
      EQV: [197],
      ERASE: [197],
      EVENT: [197],
      EXIT_DO: [197],
      EXIT_FOR: [197],
      EXIT_FUNCTION: [197],
      EXIT_PROPERTY: [197],
      EXIT_SUB: [197],
      FALSE: [197],
      FRIEND: [197],
      FOR: [197],
      FUNCTION: [197],
      GET: [197],
      GLOBAL: [197],
      GOSUB: [197],
      GOTO: [197],
      IF: [197],
      IMPLEMENTS: [197],
      IN: [197],
      ISNOT: [197],
      IS: [197],
      INTEGER: [197],
      LONG: [197],
      LOOP: [197],
      LEN: [197],
      LET: [197],
      LIB: [197],
      LIKE: [197],
      LSET: [197],
      MACRO_CONST: [197],
      MACRO_IF: [197],
      MACRO_ELSEIF: [197],
      MACRO_ELSE: [197],
      MACRO_END_IF: [197],
      MOD: [197],
      NEXT: [197],
      NEW: [197],
      NOT: [197],
      NOTHING: [197],
      NULL: [197],
      ON_ERROR: [197],
      ON_LOCAL_ERROR: [197],
      ON: [197],
      OPTIONAL: [197],
      OPTION_BASE: [197],
      OPTION_EXPLICIT: [197],
      OPTION_COMPARE: [197],
      OPTION_PRIVATE_MODULE: [197],
      OR: [197],
      PARAMARRAY: [197],
      PRESERVE: [197],
      PRIVATE: [197],
      PROPERTY_GET: [197],
      PROPERTY_LET: [197],
      PROPERTY_SET: [197],
      PTRSAFE: [197],
      PUBLIC: [197],
      RAISEEVENT: [197],
      REDIM: [197],
      RESET: [197],
      RESUME: [197],
      RETURN: [197],
      SELECT: [197],
      SET: [197],
      SINGLE: [197],
      STATIC: [197],
      STEP: [197],
      STOP: [197],
      STRING: [197],
      SUB: [197],
      THEN: [197],
      TO: [197],
      TRUE: [197],
      TYPEOF: [197],
      UNTIL: [197],
      VARIANT: [197],
      WEND: [197],
      WHILE: [197],
      WITH: [197],
      WITHEVENTS: [197],
      XOR: [197],
      IMP: [197],
      IDENTIFIER: [197],
    },
    baseType: {
      BOOLEAN: [198],
      BYTE: [199],
      DOUBLE: [200],
      INTEGER: [201],
      LONG: [202],
      SINGLE: [203],
      VARIANT: [204],
      STRING: [206],
    },
    baseType_group_def_85: {
      MULT: [205],
    },
    fieldLength: {
      MULT: [207, 208],
    },
    ambiguousIdentifier: {
      ALIAS: [209],
      AND: [210],
      ATTRIBUTE: [211],
      AS: [212],
      BEGIN: [213],
      BOOLEAN: [214],
      BYVAL: [215],
      BYREF: [216],
      BYTE: [217],
      CALL: [218],
      CASE: [219],
      CONST: [220],
      DECLARE: [221],
      DEFBOOL: [222],
      DEFBYTE: [223],
      DEFDATE: [224],
      DEFDBL: [225],
      DEFDEC: [226],
      DEFCUR: [227],
      DEFINT: [228],
      DEFLNG: [229],
      DEFOBJ: [230],
      DEFSNG: [231],
      DEFSTR: [232],
      DEFVAR: [233],
      DIM: [234],
      DO: [235],
      DOUBLE: [236],
      EACH: [237],
      ELSE: [238],
      ELSEIF: [239],
      END_ENUM: [240],
      END_FUNCTION: [241],
      END_IF: [242],
      END_PROPERTY: [243],
      END_SELECT: [244],
      END_SUB: [245],
      END_TYPE: [246],
      END_WITH: [247],
      END: [248],
      ENUM: [249],
      EQV: [250],
      ERASE: [251],
      EVENT: [252],
      EXIT_DO: [253],
      EXIT_FOR: [254],
      EXIT_FUNCTION: [255],
      EXIT_PROPERTY: [256],
      EXIT_SUB: [257],
      FALSE: [258],
      FRIEND: [259],
      FOR: [260],
      FUNCTION: [261],
      GET: [262],
      GLOBAL: [263],
      GOSUB: [264],
      GOTO: [265],
      IF: [266],
      IMPLEMENTS: [267],
      IN: [268],
      ISNOT: [269],
      IS: [270],
      INTEGER: [271],
      LONG: [272],
      LOOP: [273],
      LEN: [274],
      LET: [275],
      LIB: [276],
      LIKE: [277],
      LSET: [278],
      MACRO_CONST: [279],
      MACRO_IF: [280],
      MACRO_ELSEIF: [281],
      MACRO_ELSE: [282],
      MACRO_END_IF: [283],
      MOD: [284],
      NEXT: [285],
      NEW: [286],
      NOT: [287],
      NOTHING: [288],
      NULL: [289],
      ON_ERROR: [290],
      ON_LOCAL_ERROR: [291],
      ON: [292],
      OPTIONAL: [293],
      OPTION_BASE: [294],
      OPTION_EXPLICIT: [295],
      OPTION_COMPARE: [296],
      OPTION_PRIVATE_MODULE: [297],
      OR: [298],
      PARAMARRAY: [299],
      PRESERVE: [300],
      PRIVATE: [301],
      PROPERTY_GET: [302],
      PROPERTY_LET: [303],
      PROPERTY_SET: [304],
      PTRSAFE: [305],
      PUBLIC: [306],
      RAISEEVENT: [307],
      REDIM: [308],
      RESET: [309],
      RESUME: [310],
      RETURN: [311],
      SELECT: [312],
      SET: [313],
      SINGLE: [314],
      STATIC: [315],
      STEP: [316],
      STOP: [317],
      STRING: [318],
      SUB: [319],
      THEN: [320],
      TO: [321],
      TRUE: [322],
      TYPEOF: [323],
      UNTIL: [324],
      VARIANT: [325],
      WEND: [326],
      WHILE: [327],
      WITH: [328],
      WITHEVENTS: [329],
      XOR: [330],
      IMP: [331],
      IDENTIFIER: [333],
    },
    certainIdentifier: {
      IDENTIFIER: [332],
    },
    valueStmt: {
      DOUBLELITERAL: [334],
      INTEGERLITERAL: [334],
      STRINGLITERAL: [334],
      NOTHING: [334],
      NULL: [334],
      TRUE: [334],
      FALSE: [334],
      SPACE_DOT: [334],
      ALIAS: [334],
      AND: [334],
      ATTRIBUTE: [334],
      AS: [334],
      BEGIN: [334],
      BOOLEAN: [334],
      BYVAL: [334],
      BYREF: [334],
      BYTE: [334],
      CALL: [334],
      CASE: [334],
      CONST: [334],
      DECLARE: [334],
      DEFBOOL: [334],
      DEFBYTE: [334],
      DEFDATE: [334],
      DEFDBL: [334],
      DEFDEC: [334],
      DEFCUR: [334],
      DEFINT: [334],
      DEFLNG: [334],
      DEFOBJ: [334],
      DEFSNG: [334],
      DEFSTR: [334],
      DEFVAR: [334],
      DIM: [334],
      DO: [334],
      DOUBLE: [334],
      EACH: [334],
      ELSE: [334],
      ELSEIF: [334],
      END_ENUM: [334],
      END_FUNCTION: [334],
      END_IF: [334],
      END_PROPERTY: [334],
      END_SELECT: [334],
      END_SUB: [334],
      END_TYPE: [334],
      END_WITH: [334],
      END: [334],
      ENUM: [334],
      EQV: [334],
      ERASE: [334],
      EVENT: [334],
      EXIT_DO: [334],
      EXIT_FOR: [334],
      EXIT_FUNCTION: [334],
      EXIT_PROPERTY: [334],
      EXIT_SUB: [334],
      FRIEND: [334],
      FOR: [334],
      FUNCTION: [334],
      GET: [334],
      GLOBAL: [334],
      GOSUB: [334],
      GOTO: [334],
      IF: [334],
      IMPLEMENTS: [334],
      IN: [334],
      ISNOT: [334],
      IS: [334],
      INTEGER: [334],
      LONG: [334],
      LOOP: [334],
      LEN: [334],
      LET: [334],
      LIB: [334],
      LIKE: [334],
      LSET: [334],
      MACRO_CONST: [334],
      MACRO_IF: [334],
      MACRO_ELSEIF: [334],
      MACRO_ELSE: [334],
      MACRO_END_IF: [334],
      MOD: [334],
      NEXT: [334],
      NEW: [334],
      NOT: [334, 335],
      ON_ERROR: [334],
      ON_LOCAL_ERROR: [334],
      ON: [334],
      OPTIONAL: [334],
      OPTION_BASE: [334],
      OPTION_EXPLICIT: [334],
      OPTION_COMPARE: [334],
      OPTION_PRIVATE_MODULE: [334],
      OR: [334],
      PARAMARRAY: [334],
      PRESERVE: [334],
      PRIVATE: [334],
      PROPERTY_GET: [334],
      PROPERTY_LET: [334],
      PROPERTY_SET: [334],
      PTRSAFE: [334],
      PUBLIC: [334],
      RAISEEVENT: [334],
      REDIM: [334],
      RESET: [334],
      RESUME: [334],
      RETURN: [334],
      SELECT: [334],
      SET: [334],
      SINGLE: [334],
      STATIC: [334],
      STEP: [334],
      STOP: [334],
      STRING: [334],
      SUB: [334],
      THEN: [334],
      TO: [334],
      TYPEOF: [334],
      UNTIL: [334],
      VARIANT: [334],
      WEND: [334],
      WHILE: [334],
      WITH: [334],
      WITHEVENTS: [334],
      XOR: [334],
      IMP: [334],
      IDENTIFIER: [334],
      LPAREN: [334],
      MINUS: [334],
      PLUS: [334],
    },
    '(valueStmt_p_2)1_': {
      IS: [336, 363],
      ISNOT: [338, 363],
      GEQ: [339, 363],
      LEQ: [340, 363],
      GT: [341, 363],
      LT: [342, 363],
      NEQ: [343, 363],
      EQ: [344, 363],
      NEWLINE: [363],
      COMMENT: [363],
      REMCOMMENT: [363],
      COLON: [363],
      CASE: [363],
      END_SELECT: [363],
      THEN: [363],
      ',': [363],
      ALIAS: [363],
      AND: [363],
      ATTRIBUTE: [363],
      AS: [363],
      BEGIN: [363],
      BOOLEAN: [363],
      BYVAL: [363],
      BYREF: [363],
      BYTE: [363],
      CALL: [363],
      CONST: [363],
      DECLARE: [363],
      DEFBOOL: [363],
      DEFBYTE: [363],
      DEFDATE: [363],
      DEFDBL: [363],
      DEFDEC: [363],
      DEFCUR: [363],
      DEFINT: [363],
      DEFLNG: [363],
      DEFOBJ: [363],
      DEFSNG: [363],
      DEFSTR: [363],
      DEFVAR: [363],
      DIM: [363],
      DO: [363],
      DOUBLE: [363],
      EACH: [363],
      ELSE: [363],
      ELSEIF: [363],
      END_ENUM: [363],
      END_FUNCTION: [363],
      END_IF: [363],
      END_PROPERTY: [363],
      END_SUB: [363],
      END_TYPE: [363],
      END_WITH: [363],
      END: [363],
      ENUM: [363],
      EQV: [363],
      ERASE: [363],
      EVENT: [363],
      EXIT_DO: [363],
      EXIT_FOR: [363],
      EXIT_FUNCTION: [363],
      EXIT_PROPERTY: [363],
      EXIT_SUB: [363],
      FALSE: [363],
      FRIEND: [363],
      FOR: [363],
      FUNCTION: [363],
      GET: [363],
      GLOBAL: [363],
      GOSUB: [363],
      GOTO: [363],
      IF: [363],
      IMPLEMENTS: [363],
      IN: [363],
      INTEGER: [363],
      LONG: [363],
      LOOP: [363],
      LEN: [363],
      LET: [363],
      LIB: [363],
      LIKE: [363],
      LSET: [363],
      MACRO_CONST: [363],
      MACRO_IF: [363],
      MACRO_ELSEIF: [363],
      MACRO_ELSE: [363],
      MACRO_END_IF: [363],
      MOD: [363],
      NEXT: [363],
      NEW: [363],
      NOT: [363],
      NOTHING: [363],
      NULL: [363],
      ON_ERROR: [363],
      ON_LOCAL_ERROR: [363],
      ON: [363],
      OPTIONAL: [363],
      OPTION_BASE: [363],
      OPTION_EXPLICIT: [363],
      OPTION_COMPARE: [363],
      OPTION_PRIVATE_MODULE: [363],
      OR: [363],
      PARAMARRAY: [363],
      PRESERVE: [363],
      PRIVATE: [363],
      PROPERTY_GET: [363],
      PROPERTY_LET: [363],
      PROPERTY_SET: [363],
      PTRSAFE: [363],
      PUBLIC: [363],
      RAISEEVENT: [363],
      REDIM: [363],
      RESET: [363],
      RESUME: [363],
      RETURN: [363],
      SELECT: [363],
      SET: [363],
      SINGLE: [363],
      STATIC: [363],
      STEP: [363],
      STOP: [363],
      STRING: [363],
      SUB: [363],
      TO: [363],
      TRUE: [363],
      TYPEOF: [363],
      UNTIL: [363],
      VARIANT: [363],
      WEND: [363],
      WHILE: [363],
      WITH: [363],
      WITHEVENTS: [363],
      XOR: [363],
      IMP: [363],
      IDENTIFIER: [363],
      SPACE_DOT: [363],
      RPAREN: [363],
      '!': [363],
      LPAREN: [363],
      POW: [363],
      MULT: [363],
      DIV: [363],
      IDIV: [363],
      PLUS: [363],
      MINUS: [363],
      AMPERSAND: [363],
      $EOF: [363],
    },
    valueStmt_p_2: {
      DOUBLELITERAL: [337],
      INTEGERLITERAL: [337],
      STRINGLITERAL: [337],
      NOTHING: [337],
      NULL: [337],
      TRUE: [337],
      FALSE: [337],
      SPACE_DOT: [337],
      ALIAS: [337],
      AND: [337],
      ATTRIBUTE: [337],
      AS: [337],
      BEGIN: [337],
      BOOLEAN: [337],
      BYVAL: [337],
      BYREF: [337],
      BYTE: [337],
      CALL: [337],
      CASE: [337],
      CONST: [337],
      DECLARE: [337],
      DEFBOOL: [337],
      DEFBYTE: [337],
      DEFDATE: [337],
      DEFDBL: [337],
      DEFDEC: [337],
      DEFCUR: [337],
      DEFINT: [337],
      DEFLNG: [337],
      DEFOBJ: [337],
      DEFSNG: [337],
      DEFSTR: [337],
      DEFVAR: [337],
      DIM: [337],
      DO: [337],
      DOUBLE: [337],
      EACH: [337],
      ELSE: [337],
      ELSEIF: [337],
      END_ENUM: [337],
      END_FUNCTION: [337],
      END_IF: [337],
      END_PROPERTY: [337],
      END_SELECT: [337],
      END_SUB: [337],
      END_TYPE: [337],
      END_WITH: [337],
      END: [337],
      ENUM: [337],
      EQV: [337],
      ERASE: [337],
      EVENT: [337],
      EXIT_DO: [337],
      EXIT_FOR: [337],
      EXIT_FUNCTION: [337],
      EXIT_PROPERTY: [337],
      EXIT_SUB: [337],
      FRIEND: [337],
      FOR: [337],
      FUNCTION: [337],
      GET: [337],
      GLOBAL: [337],
      GOSUB: [337],
      GOTO: [337],
      IF: [337],
      IMPLEMENTS: [337],
      IN: [337],
      ISNOT: [337],
      IS: [337],
      INTEGER: [337],
      LONG: [337],
      LOOP: [337],
      LEN: [337],
      LET: [337],
      LIB: [337],
      LIKE: [337],
      LSET: [337],
      MACRO_CONST: [337],
      MACRO_IF: [337],
      MACRO_ELSEIF: [337],
      MACRO_ELSE: [337],
      MACRO_END_IF: [337],
      MOD: [337],
      NEXT: [337],
      NEW: [337],
      NOT: [337],
      ON_ERROR: [337],
      ON_LOCAL_ERROR: [337],
      ON: [337],
      OPTIONAL: [337],
      OPTION_BASE: [337],
      OPTION_EXPLICIT: [337],
      OPTION_COMPARE: [337],
      OPTION_PRIVATE_MODULE: [337],
      OR: [337],
      PARAMARRAY: [337],
      PRESERVE: [337],
      PRIVATE: [337],
      PROPERTY_GET: [337],
      PROPERTY_LET: [337],
      PROPERTY_SET: [337],
      PTRSAFE: [337],
      PUBLIC: [337],
      RAISEEVENT: [337],
      REDIM: [337],
      RESET: [337],
      RESUME: [337],
      RETURN: [337],
      SELECT: [337],
      SET: [337],
      SINGLE: [337],
      STATIC: [337],
      STEP: [337],
      STOP: [337],
      STRING: [337],
      SUB: [337],
      THEN: [337],
      TO: [337],
      TYPEOF: [337],
      UNTIL: [337],
      VARIANT: [337],
      WEND: [337],
      WHILE: [337],
      WITH: [337],
      WITHEVENTS: [337],
      XOR: [337],
      IMP: [337],
      IDENTIFIER: [337],
      LPAREN: [337],
      MINUS: [337],
      PLUS: [337],
    },
    '(valueStmt_p_3)1_': {
      XOR: [345, 364],
      OR: [347, 364],
      AND: [348, 364],
      IS: [364],
      ISNOT: [364],
      GEQ: [364],
      LEQ: [364],
      GT: [364],
      LT: [364],
      NEQ: [364],
      EQ: [364],
      NEWLINE: [364],
      COMMENT: [364],
      REMCOMMENT: [364],
      COLON: [364],
      CASE: [364],
      END_SELECT: [364],
      THEN: [364],
      ',': [364],
      ALIAS: [364],
      ATTRIBUTE: [364],
      AS: [364],
      BEGIN: [364],
      BOOLEAN: [364],
      BYVAL: [364],
      BYREF: [364],
      BYTE: [364],
      CALL: [364],
      CONST: [364],
      DECLARE: [364],
      DEFBOOL: [364],
      DEFBYTE: [364],
      DEFDATE: [364],
      DEFDBL: [364],
      DEFDEC: [364],
      DEFCUR: [364],
      DEFINT: [364],
      DEFLNG: [364],
      DEFOBJ: [364],
      DEFSNG: [364],
      DEFSTR: [364],
      DEFVAR: [364],
      DIM: [364],
      DO: [364],
      DOUBLE: [364],
      EACH: [364],
      ELSE: [364],
      ELSEIF: [364],
      END_ENUM: [364],
      END_FUNCTION: [364],
      END_IF: [364],
      END_PROPERTY: [364],
      END_SUB: [364],
      END_TYPE: [364],
      END_WITH: [364],
      END: [364],
      ENUM: [364],
      EQV: [364],
      ERASE: [364],
      EVENT: [364],
      EXIT_DO: [364],
      EXIT_FOR: [364],
      EXIT_FUNCTION: [364],
      EXIT_PROPERTY: [364],
      EXIT_SUB: [364],
      FALSE: [364],
      FRIEND: [364],
      FOR: [364],
      FUNCTION: [364],
      GET: [364],
      GLOBAL: [364],
      GOSUB: [364],
      GOTO: [364],
      IF: [364],
      IMPLEMENTS: [364],
      IN: [364],
      INTEGER: [364],
      LONG: [364],
      LOOP: [364],
      LEN: [364],
      LET: [364],
      LIB: [364],
      LIKE: [364],
      LSET: [364],
      MACRO_CONST: [364],
      MACRO_IF: [364],
      MACRO_ELSEIF: [364],
      MACRO_ELSE: [364],
      MACRO_END_IF: [364],
      MOD: [364],
      NEXT: [364],
      NEW: [364],
      NOT: [364],
      NOTHING: [364],
      NULL: [364],
      ON_ERROR: [364],
      ON_LOCAL_ERROR: [364],
      ON: [364],
      OPTIONAL: [364],
      OPTION_BASE: [364],
      OPTION_EXPLICIT: [364],
      OPTION_COMPARE: [364],
      OPTION_PRIVATE_MODULE: [364],
      PARAMARRAY: [364],
      PRESERVE: [364],
      PRIVATE: [364],
      PROPERTY_GET: [364],
      PROPERTY_LET: [364],
      PROPERTY_SET: [364],
      PTRSAFE: [364],
      PUBLIC: [364],
      RAISEEVENT: [364],
      REDIM: [364],
      RESET: [364],
      RESUME: [364],
      RETURN: [364],
      SELECT: [364],
      SET: [364],
      SINGLE: [364],
      STATIC: [364],
      STEP: [364],
      STOP: [364],
      STRING: [364],
      SUB: [364],
      TO: [364],
      TRUE: [364],
      TYPEOF: [364],
      UNTIL: [364],
      VARIANT: [364],
      WEND: [364],
      WHILE: [364],
      WITH: [364],
      WITHEVENTS: [364],
      IMP: [364],
      IDENTIFIER: [364],
      SPACE_DOT: [364],
      RPAREN: [364],
      '!': [364],
      LPAREN: [364],
      POW: [364],
      MULT: [364],
      DIV: [364],
      IDIV: [364],
      PLUS: [364],
      MINUS: [364],
      AMPERSAND: [364],
      $EOF: [364],
    },
    valueStmt_p_3: {
      DOUBLELITERAL: [346],
      INTEGERLITERAL: [346],
      STRINGLITERAL: [346],
      NOTHING: [346],
      NULL: [346],
      TRUE: [346],
      FALSE: [346],
      SPACE_DOT: [346],
      ALIAS: [346],
      AND: [346],
      ATTRIBUTE: [346],
      AS: [346],
      BEGIN: [346],
      BOOLEAN: [346],
      BYVAL: [346],
      BYREF: [346],
      BYTE: [346],
      CALL: [346],
      CASE: [346],
      CONST: [346],
      DECLARE: [346],
      DEFBOOL: [346],
      DEFBYTE: [346],
      DEFDATE: [346],
      DEFDBL: [346],
      DEFDEC: [346],
      DEFCUR: [346],
      DEFINT: [346],
      DEFLNG: [346],
      DEFOBJ: [346],
      DEFSNG: [346],
      DEFSTR: [346],
      DEFVAR: [346],
      DIM: [346],
      DO: [346],
      DOUBLE: [346],
      EACH: [346],
      ELSE: [346],
      ELSEIF: [346],
      END_ENUM: [346],
      END_FUNCTION: [346],
      END_IF: [346],
      END_PROPERTY: [346],
      END_SELECT: [346],
      END_SUB: [346],
      END_TYPE: [346],
      END_WITH: [346],
      END: [346],
      ENUM: [346],
      EQV: [346],
      ERASE: [346],
      EVENT: [346],
      EXIT_DO: [346],
      EXIT_FOR: [346],
      EXIT_FUNCTION: [346],
      EXIT_PROPERTY: [346],
      EXIT_SUB: [346],
      FRIEND: [346],
      FOR: [346],
      FUNCTION: [346],
      GET: [346],
      GLOBAL: [346],
      GOSUB: [346],
      GOTO: [346],
      IF: [346],
      IMPLEMENTS: [346],
      IN: [346],
      ISNOT: [346],
      IS: [346],
      INTEGER: [346],
      LONG: [346],
      LOOP: [346],
      LEN: [346],
      LET: [346],
      LIB: [346],
      LIKE: [346],
      LSET: [346],
      MACRO_CONST: [346],
      MACRO_IF: [346],
      MACRO_ELSEIF: [346],
      MACRO_ELSE: [346],
      MACRO_END_IF: [346],
      MOD: [346],
      NEXT: [346],
      NEW: [346],
      NOT: [346],
      ON_ERROR: [346],
      ON_LOCAL_ERROR: [346],
      ON: [346],
      OPTIONAL: [346],
      OPTION_BASE: [346],
      OPTION_EXPLICIT: [346],
      OPTION_COMPARE: [346],
      OPTION_PRIVATE_MODULE: [346],
      OR: [346],
      PARAMARRAY: [346],
      PRESERVE: [346],
      PRIVATE: [346],
      PROPERTY_GET: [346],
      PROPERTY_LET: [346],
      PROPERTY_SET: [346],
      PTRSAFE: [346],
      PUBLIC: [346],
      RAISEEVENT: [346],
      REDIM: [346],
      RESET: [346],
      RESUME: [346],
      RETURN: [346],
      SELECT: [346],
      SET: [346],
      SINGLE: [346],
      STATIC: [346],
      STEP: [346],
      STOP: [346],
      STRING: [346],
      SUB: [346],
      THEN: [346],
      TO: [346],
      TYPEOF: [346],
      UNTIL: [346],
      VARIANT: [346],
      WEND: [346],
      WHILE: [346],
      WITH: [346],
      WITHEVENTS: [346],
      XOR: [346],
      IMP: [346],
      IDENTIFIER: [346],
      LPAREN: [346],
      MINUS: [346],
      PLUS: [346],
    },
    '(valueStmt_p_4)1_': {
      PLUS: [349, 365],
      MINUS: [351, 365],
      AMPERSAND: [352, 365],
      XOR: [365],
      OR: [365],
      AND: [365],
      IS: [365],
      ISNOT: [365],
      GEQ: [365],
      LEQ: [365],
      GT: [365],
      LT: [365],
      NEQ: [365],
      EQ: [365],
      NEWLINE: [365],
      COMMENT: [365],
      REMCOMMENT: [365],
      COLON: [365],
      CASE: [365],
      END_SELECT: [365],
      THEN: [365],
      ',': [365],
      ALIAS: [365],
      ATTRIBUTE: [365],
      AS: [365],
      BEGIN: [365],
      BOOLEAN: [365],
      BYVAL: [365],
      BYREF: [365],
      BYTE: [365],
      CALL: [365],
      CONST: [365],
      DECLARE: [365],
      DEFBOOL: [365],
      DEFBYTE: [365],
      DEFDATE: [365],
      DEFDBL: [365],
      DEFDEC: [365],
      DEFCUR: [365],
      DEFINT: [365],
      DEFLNG: [365],
      DEFOBJ: [365],
      DEFSNG: [365],
      DEFSTR: [365],
      DEFVAR: [365],
      DIM: [365],
      DO: [365],
      DOUBLE: [365],
      EACH: [365],
      ELSE: [365],
      ELSEIF: [365],
      END_ENUM: [365],
      END_FUNCTION: [365],
      END_IF: [365],
      END_PROPERTY: [365],
      END_SUB: [365],
      END_TYPE: [365],
      END_WITH: [365],
      END: [365],
      ENUM: [365],
      EQV: [365],
      ERASE: [365],
      EVENT: [365],
      EXIT_DO: [365],
      EXIT_FOR: [365],
      EXIT_FUNCTION: [365],
      EXIT_PROPERTY: [365],
      EXIT_SUB: [365],
      FALSE: [365],
      FRIEND: [365],
      FOR: [365],
      FUNCTION: [365],
      GET: [365],
      GLOBAL: [365],
      GOSUB: [365],
      GOTO: [365],
      IF: [365],
      IMPLEMENTS: [365],
      IN: [365],
      INTEGER: [365],
      LONG: [365],
      LOOP: [365],
      LEN: [365],
      LET: [365],
      LIB: [365],
      LIKE: [365],
      LSET: [365],
      MACRO_CONST: [365],
      MACRO_IF: [365],
      MACRO_ELSEIF: [365],
      MACRO_ELSE: [365],
      MACRO_END_IF: [365],
      MOD: [365],
      NEXT: [365],
      NEW: [365],
      NOT: [365],
      NOTHING: [365],
      NULL: [365],
      ON_ERROR: [365],
      ON_LOCAL_ERROR: [365],
      ON: [365],
      OPTIONAL: [365],
      OPTION_BASE: [365],
      OPTION_EXPLICIT: [365],
      OPTION_COMPARE: [365],
      OPTION_PRIVATE_MODULE: [365],
      PARAMARRAY: [365],
      PRESERVE: [365],
      PRIVATE: [365],
      PROPERTY_GET: [365],
      PROPERTY_LET: [365],
      PROPERTY_SET: [365],
      PTRSAFE: [365],
      PUBLIC: [365],
      RAISEEVENT: [365],
      REDIM: [365],
      RESET: [365],
      RESUME: [365],
      RETURN: [365],
      SELECT: [365],
      SET: [365],
      SINGLE: [365],
      STATIC: [365],
      STEP: [365],
      STOP: [365],
      STRING: [365],
      SUB: [365],
      TO: [365],
      TRUE: [365],
      TYPEOF: [365],
      UNTIL: [365],
      VARIANT: [365],
      WEND: [365],
      WHILE: [365],
      WITH: [365],
      WITHEVENTS: [365],
      IMP: [365],
      IDENTIFIER: [365],
      SPACE_DOT: [365],
      RPAREN: [365],
      '!': [365],
      LPAREN: [365],
      POW: [365],
      MULT: [365],
      DIV: [365],
      IDIV: [365],
      $EOF: [365],
    },
    valueStmt_p_4: {
      DOUBLELITERAL: [350],
      INTEGERLITERAL: [350],
      STRINGLITERAL: [350],
      NOTHING: [350],
      NULL: [350],
      TRUE: [350],
      FALSE: [350],
      SPACE_DOT: [350],
      ALIAS: [350],
      AND: [350],
      ATTRIBUTE: [350],
      AS: [350],
      BEGIN: [350],
      BOOLEAN: [350],
      BYVAL: [350],
      BYREF: [350],
      BYTE: [350],
      CALL: [350],
      CASE: [350],
      CONST: [350],
      DECLARE: [350],
      DEFBOOL: [350],
      DEFBYTE: [350],
      DEFDATE: [350],
      DEFDBL: [350],
      DEFDEC: [350],
      DEFCUR: [350],
      DEFINT: [350],
      DEFLNG: [350],
      DEFOBJ: [350],
      DEFSNG: [350],
      DEFSTR: [350],
      DEFVAR: [350],
      DIM: [350],
      DO: [350],
      DOUBLE: [350],
      EACH: [350],
      ELSE: [350],
      ELSEIF: [350],
      END_ENUM: [350],
      END_FUNCTION: [350],
      END_IF: [350],
      END_PROPERTY: [350],
      END_SELECT: [350],
      END_SUB: [350],
      END_TYPE: [350],
      END_WITH: [350],
      END: [350],
      ENUM: [350],
      EQV: [350],
      ERASE: [350],
      EVENT: [350],
      EXIT_DO: [350],
      EXIT_FOR: [350],
      EXIT_FUNCTION: [350],
      EXIT_PROPERTY: [350],
      EXIT_SUB: [350],
      FRIEND: [350],
      FOR: [350],
      FUNCTION: [350],
      GET: [350],
      GLOBAL: [350],
      GOSUB: [350],
      GOTO: [350],
      IF: [350],
      IMPLEMENTS: [350],
      IN: [350],
      ISNOT: [350],
      IS: [350],
      INTEGER: [350],
      LONG: [350],
      LOOP: [350],
      LEN: [350],
      LET: [350],
      LIB: [350],
      LIKE: [350],
      LSET: [350],
      MACRO_CONST: [350],
      MACRO_IF: [350],
      MACRO_ELSEIF: [350],
      MACRO_ELSE: [350],
      MACRO_END_IF: [350],
      MOD: [350],
      NEXT: [350],
      NEW: [350],
      NOT: [350],
      ON_ERROR: [350],
      ON_LOCAL_ERROR: [350],
      ON: [350],
      OPTIONAL: [350],
      OPTION_BASE: [350],
      OPTION_EXPLICIT: [350],
      OPTION_COMPARE: [350],
      OPTION_PRIVATE_MODULE: [350],
      OR: [350],
      PARAMARRAY: [350],
      PRESERVE: [350],
      PRIVATE: [350],
      PROPERTY_GET: [350],
      PROPERTY_LET: [350],
      PROPERTY_SET: [350],
      PTRSAFE: [350],
      PUBLIC: [350],
      RAISEEVENT: [350],
      REDIM: [350],
      RESET: [350],
      RESUME: [350],
      RETURN: [350],
      SELECT: [350],
      SET: [350],
      SINGLE: [350],
      STATIC: [350],
      STEP: [350],
      STOP: [350],
      STRING: [350],
      SUB: [350],
      THEN: [350],
      TO: [350],
      TYPEOF: [350],
      UNTIL: [350],
      VARIANT: [350],
      WEND: [350],
      WHILE: [350],
      WITH: [350],
      WITHEVENTS: [350],
      XOR: [350],
      IMP: [350],
      IDENTIFIER: [350],
      LPAREN: [350],
      MINUS: [350],
      PLUS: [350],
    },
    '(valueStmt_p_5)1_': {
      MULT: [353, 366],
      DIV: [355, 366],
      IDIV: [356, 366],
      MOD: [357, 366],
      PLUS: [366],
      MINUS: [366],
      AMPERSAND: [366],
      XOR: [366],
      OR: [366],
      AND: [366],
      IS: [366],
      ISNOT: [366],
      GEQ: [366],
      LEQ: [366],
      GT: [366],
      LT: [366],
      NEQ: [366],
      EQ: [366],
      NEWLINE: [366],
      COMMENT: [366],
      REMCOMMENT: [366],
      COLON: [366],
      CASE: [366],
      END_SELECT: [366],
      THEN: [366],
      ',': [366],
      ALIAS: [366],
      ATTRIBUTE: [366],
      AS: [366],
      BEGIN: [366],
      BOOLEAN: [366],
      BYVAL: [366],
      BYREF: [366],
      BYTE: [366],
      CALL: [366],
      CONST: [366],
      DECLARE: [366],
      DEFBOOL: [366],
      DEFBYTE: [366],
      DEFDATE: [366],
      DEFDBL: [366],
      DEFDEC: [366],
      DEFCUR: [366],
      DEFINT: [366],
      DEFLNG: [366],
      DEFOBJ: [366],
      DEFSNG: [366],
      DEFSTR: [366],
      DEFVAR: [366],
      DIM: [366],
      DO: [366],
      DOUBLE: [366],
      EACH: [366],
      ELSE: [366],
      ELSEIF: [366],
      END_ENUM: [366],
      END_FUNCTION: [366],
      END_IF: [366],
      END_PROPERTY: [366],
      END_SUB: [366],
      END_TYPE: [366],
      END_WITH: [366],
      END: [366],
      ENUM: [366],
      EQV: [366],
      ERASE: [366],
      EVENT: [366],
      EXIT_DO: [366],
      EXIT_FOR: [366],
      EXIT_FUNCTION: [366],
      EXIT_PROPERTY: [366],
      EXIT_SUB: [366],
      FALSE: [366],
      FRIEND: [366],
      FOR: [366],
      FUNCTION: [366],
      GET: [366],
      GLOBAL: [366],
      GOSUB: [366],
      GOTO: [366],
      IF: [366],
      IMPLEMENTS: [366],
      IN: [366],
      INTEGER: [366],
      LONG: [366],
      LOOP: [366],
      LEN: [366],
      LET: [366],
      LIB: [366],
      LIKE: [366],
      LSET: [366],
      MACRO_CONST: [366],
      MACRO_IF: [366],
      MACRO_ELSEIF: [366],
      MACRO_ELSE: [366],
      MACRO_END_IF: [366],
      NEXT: [366],
      NEW: [366],
      NOT: [366],
      NOTHING: [366],
      NULL: [366],
      ON_ERROR: [366],
      ON_LOCAL_ERROR: [366],
      ON: [366],
      OPTIONAL: [366],
      OPTION_BASE: [366],
      OPTION_EXPLICIT: [366],
      OPTION_COMPARE: [366],
      OPTION_PRIVATE_MODULE: [366],
      PARAMARRAY: [366],
      PRESERVE: [366],
      PRIVATE: [366],
      PROPERTY_GET: [366],
      PROPERTY_LET: [366],
      PROPERTY_SET: [366],
      PTRSAFE: [366],
      PUBLIC: [366],
      RAISEEVENT: [366],
      REDIM: [366],
      RESET: [366],
      RESUME: [366],
      RETURN: [366],
      SELECT: [366],
      SET: [366],
      SINGLE: [366],
      STATIC: [366],
      STEP: [366],
      STOP: [366],
      STRING: [366],
      SUB: [366],
      TO: [366],
      TRUE: [366],
      TYPEOF: [366],
      UNTIL: [366],
      VARIANT: [366],
      WEND: [366],
      WHILE: [366],
      WITH: [366],
      WITHEVENTS: [366],
      IMP: [366],
      IDENTIFIER: [366],
      SPACE_DOT: [366],
      RPAREN: [366],
      '!': [366],
      LPAREN: [366],
      POW: [366],
      $EOF: [366],
    },
    valueStmt_p_5: {
      DOUBLELITERAL: [354],
      INTEGERLITERAL: [354],
      STRINGLITERAL: [354],
      NOTHING: [354],
      NULL: [354],
      TRUE: [354],
      FALSE: [354],
      SPACE_DOT: [354],
      ALIAS: [354],
      AND: [354],
      ATTRIBUTE: [354],
      AS: [354],
      BEGIN: [354],
      BOOLEAN: [354],
      BYVAL: [354],
      BYREF: [354],
      BYTE: [354],
      CALL: [354],
      CASE: [354],
      CONST: [354],
      DECLARE: [354],
      DEFBOOL: [354],
      DEFBYTE: [354],
      DEFDATE: [354],
      DEFDBL: [354],
      DEFDEC: [354],
      DEFCUR: [354],
      DEFINT: [354],
      DEFLNG: [354],
      DEFOBJ: [354],
      DEFSNG: [354],
      DEFSTR: [354],
      DEFVAR: [354],
      DIM: [354],
      DO: [354],
      DOUBLE: [354],
      EACH: [354],
      ELSE: [354],
      ELSEIF: [354],
      END_ENUM: [354],
      END_FUNCTION: [354],
      END_IF: [354],
      END_PROPERTY: [354],
      END_SELECT: [354],
      END_SUB: [354],
      END_TYPE: [354],
      END_WITH: [354],
      END: [354],
      ENUM: [354],
      EQV: [354],
      ERASE: [354],
      EVENT: [354],
      EXIT_DO: [354],
      EXIT_FOR: [354],
      EXIT_FUNCTION: [354],
      EXIT_PROPERTY: [354],
      EXIT_SUB: [354],
      FRIEND: [354],
      FOR: [354],
      FUNCTION: [354],
      GET: [354],
      GLOBAL: [354],
      GOSUB: [354],
      GOTO: [354],
      IF: [354],
      IMPLEMENTS: [354],
      IN: [354],
      ISNOT: [354],
      IS: [354],
      INTEGER: [354],
      LONG: [354],
      LOOP: [354],
      LEN: [354],
      LET: [354],
      LIB: [354],
      LIKE: [354],
      LSET: [354],
      MACRO_CONST: [354],
      MACRO_IF: [354],
      MACRO_ELSEIF: [354],
      MACRO_ELSE: [354],
      MACRO_END_IF: [354],
      MOD: [354],
      NEXT: [354],
      NEW: [354],
      NOT: [354],
      ON_ERROR: [354],
      ON_LOCAL_ERROR: [354],
      ON: [354],
      OPTIONAL: [354],
      OPTION_BASE: [354],
      OPTION_EXPLICIT: [354],
      OPTION_COMPARE: [354],
      OPTION_PRIVATE_MODULE: [354],
      OR: [354],
      PARAMARRAY: [354],
      PRESERVE: [354],
      PRIVATE: [354],
      PROPERTY_GET: [354],
      PROPERTY_LET: [354],
      PROPERTY_SET: [354],
      PTRSAFE: [354],
      PUBLIC: [354],
      RAISEEVENT: [354],
      REDIM: [354],
      RESET: [354],
      RESUME: [354],
      RETURN: [354],
      SELECT: [354],
      SET: [354],
      SINGLE: [354],
      STATIC: [354],
      STEP: [354],
      STOP: [354],
      STRING: [354],
      SUB: [354],
      THEN: [354],
      TO: [354],
      TYPEOF: [354],
      UNTIL: [354],
      VARIANT: [354],
      WEND: [354],
      WHILE: [354],
      WITH: [354],
      WITHEVENTS: [354],
      XOR: [354],
      IMP: [354],
      IDENTIFIER: [354],
      LPAREN: [354],
      MINUS: [354],
      PLUS: [354],
    },
    '(valueStmt_p_6)1_': {
      POW: [358, 367],
      MULT: [367],
      DIV: [367],
      IDIV: [367],
      MOD: [367],
      PLUS: [367],
      MINUS: [367],
      AMPERSAND: [367],
      XOR: [367],
      OR: [367],
      AND: [367],
      IS: [367],
      ISNOT: [367],
      GEQ: [367],
      LEQ: [367],
      GT: [367],
      LT: [367],
      NEQ: [367],
      EQ: [367],
      NEWLINE: [367],
      COMMENT: [367],
      REMCOMMENT: [367],
      COLON: [367],
      CASE: [367],
      END_SELECT: [367],
      THEN: [367],
      ',': [367],
      ALIAS: [367],
      ATTRIBUTE: [367],
      AS: [367],
      BEGIN: [367],
      BOOLEAN: [367],
      BYVAL: [367],
      BYREF: [367],
      BYTE: [367],
      CALL: [367],
      CONST: [367],
      DECLARE: [367],
      DEFBOOL: [367],
      DEFBYTE: [367],
      DEFDATE: [367],
      DEFDBL: [367],
      DEFDEC: [367],
      DEFCUR: [367],
      DEFINT: [367],
      DEFLNG: [367],
      DEFOBJ: [367],
      DEFSNG: [367],
      DEFSTR: [367],
      DEFVAR: [367],
      DIM: [367],
      DO: [367],
      DOUBLE: [367],
      EACH: [367],
      ELSE: [367],
      ELSEIF: [367],
      END_ENUM: [367],
      END_FUNCTION: [367],
      END_IF: [367],
      END_PROPERTY: [367],
      END_SUB: [367],
      END_TYPE: [367],
      END_WITH: [367],
      END: [367],
      ENUM: [367],
      EQV: [367],
      ERASE: [367],
      EVENT: [367],
      EXIT_DO: [367],
      EXIT_FOR: [367],
      EXIT_FUNCTION: [367],
      EXIT_PROPERTY: [367],
      EXIT_SUB: [367],
      FALSE: [367],
      FRIEND: [367],
      FOR: [367],
      FUNCTION: [367],
      GET: [367],
      GLOBAL: [367],
      GOSUB: [367],
      GOTO: [367],
      IF: [367],
      IMPLEMENTS: [367],
      IN: [367],
      INTEGER: [367],
      LONG: [367],
      LOOP: [367],
      LEN: [367],
      LET: [367],
      LIB: [367],
      LIKE: [367],
      LSET: [367],
      MACRO_CONST: [367],
      MACRO_IF: [367],
      MACRO_ELSEIF: [367],
      MACRO_ELSE: [367],
      MACRO_END_IF: [367],
      NEXT: [367],
      NEW: [367],
      NOT: [367],
      NOTHING: [367],
      NULL: [367],
      ON_ERROR: [367],
      ON_LOCAL_ERROR: [367],
      ON: [367],
      OPTIONAL: [367],
      OPTION_BASE: [367],
      OPTION_EXPLICIT: [367],
      OPTION_COMPARE: [367],
      OPTION_PRIVATE_MODULE: [367],
      PARAMARRAY: [367],
      PRESERVE: [367],
      PRIVATE: [367],
      PROPERTY_GET: [367],
      PROPERTY_LET: [367],
      PROPERTY_SET: [367],
      PTRSAFE: [367],
      PUBLIC: [367],
      RAISEEVENT: [367],
      REDIM: [367],
      RESET: [367],
      RESUME: [367],
      RETURN: [367],
      SELECT: [367],
      SET: [367],
      SINGLE: [367],
      STATIC: [367],
      STEP: [367],
      STOP: [367],
      STRING: [367],
      SUB: [367],
      TO: [367],
      TRUE: [367],
      TYPEOF: [367],
      UNTIL: [367],
      VARIANT: [367],
      WEND: [367],
      WHILE: [367],
      WITH: [367],
      WITHEVENTS: [367],
      IMP: [367],
      IDENTIFIER: [367],
      SPACE_DOT: [367],
      RPAREN: [367],
      '!': [367],
      LPAREN: [367],
      $EOF: [367],
    },
    valueStmt_p_6: {
      DOUBLELITERAL: [359],
      INTEGERLITERAL: [359],
      STRINGLITERAL: [359],
      NOTHING: [359],
      NULL: [359],
      TRUE: [359],
      FALSE: [359],
      SPACE_DOT: [359],
      ALIAS: [359],
      AND: [359],
      ATTRIBUTE: [359],
      AS: [359],
      BEGIN: [359],
      BOOLEAN: [359],
      BYVAL: [359],
      BYREF: [359],
      BYTE: [359],
      CALL: [359],
      CASE: [359],
      CONST: [359],
      DECLARE: [359],
      DEFBOOL: [359],
      DEFBYTE: [359],
      DEFDATE: [359],
      DEFDBL: [359],
      DEFDEC: [359],
      DEFCUR: [359],
      DEFINT: [359],
      DEFLNG: [359],
      DEFOBJ: [359],
      DEFSNG: [359],
      DEFSTR: [359],
      DEFVAR: [359],
      DIM: [359],
      DO: [359],
      DOUBLE: [359],
      EACH: [359],
      ELSE: [359],
      ELSEIF: [359],
      END_ENUM: [359],
      END_FUNCTION: [359],
      END_IF: [359],
      END_PROPERTY: [359],
      END_SELECT: [359],
      END_SUB: [359],
      END_TYPE: [359],
      END_WITH: [359],
      END: [359],
      ENUM: [359],
      EQV: [359],
      ERASE: [359],
      EVENT: [359],
      EXIT_DO: [359],
      EXIT_FOR: [359],
      EXIT_FUNCTION: [359],
      EXIT_PROPERTY: [359],
      EXIT_SUB: [359],
      FRIEND: [359],
      FOR: [359],
      FUNCTION: [359],
      GET: [359],
      GLOBAL: [359],
      GOSUB: [359],
      GOTO: [359],
      IF: [359],
      IMPLEMENTS: [359],
      IN: [359],
      ISNOT: [359],
      IS: [359],
      INTEGER: [359],
      LONG: [359],
      LOOP: [359],
      LEN: [359],
      LET: [359],
      LIB: [359],
      LIKE: [359],
      LSET: [359],
      MACRO_CONST: [359],
      MACRO_IF: [359],
      MACRO_ELSEIF: [359],
      MACRO_ELSE: [359],
      MACRO_END_IF: [359],
      MOD: [359],
      NEXT: [359],
      NEW: [359],
      NOT: [359],
      ON_ERROR: [359],
      ON_LOCAL_ERROR: [359],
      ON: [359],
      OPTIONAL: [359],
      OPTION_BASE: [359],
      OPTION_EXPLICIT: [359],
      OPTION_COMPARE: [359],
      OPTION_PRIVATE_MODULE: [359],
      OR: [359],
      PARAMARRAY: [359],
      PRESERVE: [359],
      PRIVATE: [359],
      PROPERTY_GET: [359],
      PROPERTY_LET: [359],
      PROPERTY_SET: [359],
      PTRSAFE: [359],
      PUBLIC: [359],
      RAISEEVENT: [359],
      REDIM: [359],
      RESET: [359],
      RESUME: [359],
      RETURN: [359],
      SELECT: [359],
      SET: [359],
      SINGLE: [359],
      STATIC: [359],
      STEP: [359],
      STOP: [359],
      STRING: [359],
      SUB: [359],
      THEN: [359],
      TO: [359],
      TYPEOF: [359],
      UNTIL: [359],
      VARIANT: [359],
      WEND: [359],
      WHILE: [359],
      WITH: [359],
      WITHEVENTS: [359],
      XOR: [359],
      IMP: [359],
      IDENTIFIER: [359],
      LPAREN: [359],
      MINUS: [359],
      PLUS: [359],
    },
    valueStmt_p_7: {
      DOUBLELITERAL: [360],
      INTEGERLITERAL: [360],
      STRINGLITERAL: [360],
      NOTHING: [360],
      NULL: [360],
      TRUE: [360],
      FALSE: [360],
      SPACE_DOT: [360],
      ALIAS: [360],
      AND: [360],
      ATTRIBUTE: [360],
      AS: [360],
      BEGIN: [360],
      BOOLEAN: [360],
      BYVAL: [360],
      BYREF: [360],
      BYTE: [360],
      CALL: [360],
      CASE: [360],
      CONST: [360],
      DECLARE: [360],
      DEFBOOL: [360],
      DEFBYTE: [360],
      DEFDATE: [360],
      DEFDBL: [360],
      DEFDEC: [360],
      DEFCUR: [360],
      DEFINT: [360],
      DEFLNG: [360],
      DEFOBJ: [360],
      DEFSNG: [360],
      DEFSTR: [360],
      DEFVAR: [360],
      DIM: [360],
      DO: [360],
      DOUBLE: [360],
      EACH: [360],
      ELSE: [360],
      ELSEIF: [360],
      END_ENUM: [360],
      END_FUNCTION: [360],
      END_IF: [360],
      END_PROPERTY: [360],
      END_SELECT: [360],
      END_SUB: [360],
      END_TYPE: [360],
      END_WITH: [360],
      END: [360],
      ENUM: [360],
      EQV: [360],
      ERASE: [360],
      EVENT: [360],
      EXIT_DO: [360],
      EXIT_FOR: [360],
      EXIT_FUNCTION: [360],
      EXIT_PROPERTY: [360],
      EXIT_SUB: [360],
      FRIEND: [360],
      FOR: [360],
      FUNCTION: [360],
      GET: [360],
      GLOBAL: [360],
      GOSUB: [360],
      GOTO: [360],
      IF: [360],
      IMPLEMENTS: [360],
      IN: [360],
      ISNOT: [360],
      IS: [360],
      INTEGER: [360],
      LONG: [360],
      LOOP: [360],
      LEN: [360],
      LET: [360],
      LIB: [360],
      LIKE: [360],
      LSET: [360],
      MACRO_CONST: [360],
      MACRO_IF: [360],
      MACRO_ELSEIF: [360],
      MACRO_ELSE: [360],
      MACRO_END_IF: [360],
      MOD: [360],
      NEXT: [360],
      NEW: [360],
      NOT: [360],
      ON_ERROR: [360],
      ON_LOCAL_ERROR: [360],
      ON: [360],
      OPTIONAL: [360],
      OPTION_BASE: [360],
      OPTION_EXPLICIT: [360],
      OPTION_COMPARE: [360],
      OPTION_PRIVATE_MODULE: [360],
      OR: [360],
      PARAMARRAY: [360],
      PRESERVE: [360],
      PRIVATE: [360],
      PROPERTY_GET: [360],
      PROPERTY_LET: [360],
      PROPERTY_SET: [360],
      PTRSAFE: [360],
      PUBLIC: [360],
      RAISEEVENT: [360],
      REDIM: [360],
      RESET: [360],
      RESUME: [360],
      RETURN: [360],
      SELECT: [360],
      SET: [360],
      SINGLE: [360],
      STATIC: [360],
      STEP: [360],
      STOP: [360],
      STRING: [360],
      SUB: [360],
      THEN: [360],
      TO: [360],
      TYPEOF: [360],
      UNTIL: [360],
      VARIANT: [360],
      WEND: [360],
      WHILE: [360],
      WITH: [360],
      WITHEVENTS: [360],
      XOR: [360],
      IMP: [360],
      IDENTIFIER: [360],
      LPAREN: [360],
      MINUS: [361],
      PLUS: [362],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }

        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (
        ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX ||
        ruleIndexes.length === 0
      ) {
        // skip this symbol first
        return returnNext();
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 5,
    15: 6,
    16: 6,
    17: 6,
    18: 6,
    19: 7,
    20: 7,
    21: 8,
    22: 8,
    23: 8,
    24: 8,
    25: 8,
    26: 9,
    27: 9,
    28: 9,
    29: 9,
    30: 10,
    31: 11,
    32: 12,
    33: 13,
    34: 14,
    35: 15,
    36: 15,
    37: 16,
    38: 16,
    39: 16,
    40: 16,
    41: 16,
    42: 16,
    43: 16,
    44: 16,
    45: 16,
    46: 16,
    47: 16,
    48: 16,
    49: 16,
    50: 16,
    51: 17,
    52: 18,
    53: 19,
    54: 20,
    55: 21,
    56: 22,
    57: 23,
    58: 23,
    59: 24,
    60: 24,
    61: 24,
    62: 24,
    63: 24,
    64: 24,
    65: 24,
    66: 25,
    67: 25,
    68: 26,
    69: 27,
    70: 28,
    71: 29,
    72: 30,
    73: 30,
    74: 30,
    75: 30,
    76: 30,
    77: 31,
    78: 32,
    79: 33,
    80: 33,
    81: 34,
    82: 34,
    83: 35,
    84: 36,
    85: 36,
    86: 36,
    87: 36,
    88: 36,
    89: 36,
    90: 37,
    91: 37,
    92: 37,
    93: 37,
    94: 37,
    95: 37,
    96: 37,
    97: 38,
    98: 39,
    99: 39,
    100: 40,
    101: 40,
    102: 40,
    103: 40,
    104: 40,
    105: 40,
    106: 40,
    107: 41,
    108: 42,
    109: 42,
    110: 43,
    111: 44,
    112: 45,
    113: 45,
    114: 46,
    115: 47,
    116: 47,
    117: 47,
    118: 47,
    119: 47,
    120: 47,
    121: 47,
    122: 48,
    123: 48,
    124: 48,
    125: 48,
    126: 48,
    127: 49,
    128: 49,
    129: 50,
    130: 50,
    131: 51,
    132: 52,
    133: 52,
    134: 53,
    135: 53,
    136: 54,
    137: 55,
    138: 55,
    139: 55,
    140: 56,
    141: 56,
    142: 56,
    143: 56,
    144: 57,
    145: 80,
    146: 80,
    147: 80,
    148: 81,
    149: 81,
    150: 81,
    151: 81,
    152: 81,
    153: 81,
    154: 81,
    155: 81,
    156: 81,
    157: 82,
    158: 82,
    159: 82,
    160: 83,
    161: 83,
    162: 83,
    163: 84,
    164: 85,
    165: 86,
    166: 87,
    167: 87,
    168: 87,
    169: 87,
    170: 87,
    171: 87,
    172: 87,
    173: 88,
    174: 88,
    175: 88,
    176: 88,
    177: 88,
    178: 88,
    179: 89,
    180: 89,
    181: 89,
    182: 89,
    183: 89,
    184: 89,
    185: 90,
    186: 91,
    187: 92,
    188: 92,
    189: 92,
    190: 92,
    191: 92,
    192: 93,
    193: 93,
    194: 93,
    195: 93,
    196: 93,
    197: 93,
    198: 94,
    199: 94,
    200: 94,
    201: 94,
    202: 94,
    203: 94,
    204: 94,
    205: 94,
    206: 94,
    207: 95,
    208: 95,
    209: 96,
    210: 97,
    211: 98,
    212: 99,
    213: 100,
    214: 101,
    215: 102,
    216: 103,
    217: 104,
    218: 105,
    219: 106,
    220: 107,
    221: 108,
    222: 109,
    223: 110,
    224: 111,
    225: 112,
    226: 113,
    227: 114,
    228: 115,
    229: 116,
    230: 117,
    231: 118,
    232: 119,
    233: 120,
    234: 121,
    235: 122,
    236: 123,
    237: 124,
    238: 125,
    239: 126,
    240: 127,
    241: 128,
    242: 129,
    243: 130,
    244: 131,
    245: 132,
    246: 133,
    247: 134,
    248: 135,
    249: 136,
    250: 137,
    251: 138,
    252: 139,
    253: 140,
    254: 141,
    255: 142,
    256: 143,
    257: 144,
    258: 145,
    259: 146,
    260: 147,
    261: 148,
    262: 149,
    263: 150,
    264: 151,
    265: 152,
    266: 153,
    267: 154,
    268: 155,
    269: 156,
    270: 157,
    271: 158,
    272: 159,
    273: 160,
    274: 161,
    275: 162,
    276: 163,
    277: 164,
    278: 165,
    279: 166,
    280: 167,
    281: 168,
    282: 169,
    283: 170,
    284: 171,
    285: 172,
    286: 173,
    287: 174,
    288: 175,
    289: 176,
    290: 177,
    291: 178,
    292: 179,
    293: 180,
    294: 181,
    295: 182,
    296: 183,
    297: 184,
    298: 185,
    299: 186,
    300: 187,
    301: 188,
    302: 189,
    303: 190,
    304: 191,
    305: 192,
    306: 193,
    307: 194,
    308: 195,
    309: 196,
    310: 197,
    311: 198,
    312: 199,
    313: 200,
    314: 201,
    315: 202,
    316: 203,
    317: 204,
    318: 205,
    319: 206,
    320: 207,
    321: 208,
    322: 209,
    323: 210,
    324: 211,
    325: 212,
    326: 213,
    327: 214,
    328: 215,
    329: 216,
    330: 217,
    331: 218,
    332: 219,
    333: 220,
    334: 79,
    335: 79,
    336: 58,
    337: 58,
    338: 59,
    339: 60,
    340: 61,
    341: 62,
    342: 63,
    343: 64,
    344: 65,
    345: 66,
    346: 66,
    347: 67,
    348: 68,
    349: 69,
    350: 69,
    351: 70,
    352: 71,
    353: 72,
    354: 72,
    355: 73,
    356: 74,
    357: 75,
    358: 76,
    359: 76,
    360: 77,
    361: 77,
    362: 78,
  };
  return parser;
})();

export default vbaParser;
