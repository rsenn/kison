/*
Generated By kison v0.5.33

Generate time: Tue Nov 30 2021 12:28:41 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token =
      recommendedAction.action === 'add'
        ? lexer.peekTokens()[0]
        : lexer.getCurrentToken();
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      [
        'ALIAS',
        /ALIAS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AND',
        /AND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ATTRIBUTE',
        /ATTRIBUTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AS',
        /AS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BEGIN',
        /BEGIN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BOOLEAN',
        /BOOLEAN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYVAL',
        /BYVAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYREF',
        /BYREF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYTE',
        /BYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CALL',
        /CALL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CASE',
        /CASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CONST',
        /CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DECLARE',
        /DECLARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBOOL',
        /DEFBOOL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBYTE',
        /DEFBYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDATE',
        /DEFDATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDBL',
        /DEFDBL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDEC',
        /DEFDEC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFCUR',
        /DEFCUR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFINT',
        /DEFINT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFLNG',
        /DEFLNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFOBJ',
        /DEFOBJ\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSNG',
        /DEFSNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSTR',
        /DEFSTR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFVAR',
        /DEFVAR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DIM',
        /DIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DO',
        /DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DOUBLE',
        /DOUBLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EACH',
        /EACH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSE',
        /ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSEIF',
        /ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_ENUM',
        /END ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_FUNCTION',
        /END FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_IF',
        /END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_PROPERTY',
        /END PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SELECT',
        /END SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SUB',
        /END SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_TYPE',
        /END TYPE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_WITH',
        /END WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END',
        /END\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ENUM',
        /ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EQV',
        /EQV\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ERASE',
        /ERASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EVENT',
        /EVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_DO',
        /EXIT DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FOR',
        /EXIT FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FUNCTION',
        /EXIT FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_PROPERTY',
        /EXIT PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_SUB',
        /EXIT SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FALSE',
        /FALSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FRIEND',
        /FRIEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FOR',
        /FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FUNCTION',
        /FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GET',
        /GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GLOBAL',
        /GLOBAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOSUB',
        /GOSUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOTO',
        /GOTO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IF',
        /IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMPLEMENTS',
        /IMPLEMENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IN',
        /IN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IS',
        /IS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'INTEGER',
        /INTEGER\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LONG',
        /LONG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LOOP',
        /LOOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LEN',
        /LEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LET',
        /LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIB',
        /LIB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIKE',
        /LIKE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LSET',
        /LSET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_CONST',
        /#CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_IF',
        /#IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSEIF',
        /#ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSE',
        /#ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_END_IF',
        /#END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MOD',
        /MOD\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEXT',
        /NEXT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEW',
        /NEW\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOT',
        /NOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOTHING',
        /NOTHING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NULL',
        /NULL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_ERROR',
        /ON ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_LOCAL_ERROR',
        /ON LOCAL ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON',
        /ON\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTIONAL',
        /OPTIONAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_BASE',
        /OPTION BASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_EXPLICIT',
        /OPTION EXPLICIT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_COMPARE',
        /OPTION COMPARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_PRIVATE_MODULE',
        /OPTION PRIVATE MODULE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OR',
        /OR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PARAMARRAY',
        /PARAMARRAY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRESERVE',
        /PRESERVE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRIVATE',
        /PRIVATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_GET',
        /PROPERTY GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_LET',
        /PROPERTY LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_SET',
        /PROPERTY SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PTRSAFE',
        /PTRSAFE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PUBLIC',
        /PUBLIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RAISEEVENT',
        /RAISEEVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'REDIM',
        /REDIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESET',
        /RESET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESUME',
        /RESUME\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RETURN',
        /RETURN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SELECT',
        /SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SET',
        /SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SINGLE',
        /SINGLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STATIC',
        /STATIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STEP',
        /STEP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STOP',
        /STOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STRING',
        /STRING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SUB',
        /SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'THEN',
        /THEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TO',
        /TO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TRUE',
        /TRUE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TYPEOF',
        /TYPEOF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'UNTIL',
        /UNTIL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'VARIANT',
        /VARIANT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WEND',
        /WEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WHILE',
        /WHILE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITH',
        /WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITHEVENTS',
        /WITHEVENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'XOR',
        /XOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ['ASSIGN', /:=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS_EQ', /\-=/g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS_EQ', /\+=/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"[^"\r\n]*"/g],
      ['INTEGERLITERAL', /[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ['.', /\./g],
      ['iCS_S_MemberCall+', /iCS_S_MemberCall\+/g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1*']],
      [
        'moduleDeclarations_group_def_5',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_5*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_7',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_7*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'RPAREN',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_9', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_9*', 'endOfStatement']],
      ['blockStmt', ['lineLabel']],
      ['blockStmt', ['goToStmt']],
      ['blockStmt', ['onErrorStmt']],
      ['blockStmt', ['withStmt']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['onErrorStmt_group_def_11', ['ambiguousIdentifier']],
      ['onErrorStmt_group_10', ['onErrorStmt_group_def_11']],
      ['onErrorStmt_group_def_12', ['MINUS', 'INTEGERLITERAL']],
      ['onErrorStmt_group_10', ['onErrorStmt_group_def_12']],
      ['onErrorStmt', ['ON_ERROR', 'GOTO', 'onErrorStmt_group_10']],
      ['lineLabel', ['ambiguousIdentifier', 'COLON']],
      ['goToStmt', ['GOTO', 'ambiguousIdentifier']],
      ['eraseStmt_group_def_14', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_14*']],
      ['redimStmt_group_def_16', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_16*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_def_18', ['EQ']],
      ['letStmt_group_17', ['letStmt_group_def_18']],
      ['letStmt_group_def_19', ['PLUS_EQ']],
      ['letStmt_group_17', ['letStmt_group_def_19']],
      ['letStmt_group_def_20', ['MINUS_EQ']],
      ['letStmt_group_17', ['letStmt_group_def_20']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_17', 'valueStmt'],
      ],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_22',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_24', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'implicitCallStmt_InStmt?',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_22?',
          'eCS_MemberProcedureCall_group_def_24*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_22?',
          'eCS_MemberProcedureCall_group_def_24*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall',
        [
          'implicitCallStmt_InStmt',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_24*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'ambiguousIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_24?',
        ],
      ],
      ['argsCall_group_def_30', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_30*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_32', ['DIM']],
      ['variableStmt_group_31', ['variableStmt_group_def_32']],
      ['variableStmt_group_def_33', ['STATIC']],
      ['variableStmt_group_31', ['variableStmt_group_def_33']],
      ['variableStmt_group_def_34', ['visibility']],
      ['variableStmt_group_31', ['variableStmt_group_def_34']],
      [
        'variableStmt',
        ['variableStmt_group_31', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['withStmt_group_def_36', ['implicitCallStmt_InStmt']],
      ['withStmt_group_35', ['withStmt_group_def_36']],
      ['withStmt_group_def_37', ['NEW', 'type_']],
      ['withStmt_group_35', ['withStmt_group_def_37']],
      [
        'withStmt',
        ['WITH', 'withStmt_group_35', 'endOfStatement', 'block?', 'END_WITH'],
      ],
      ['variableListStmt_group_def_39', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_39*'],
      ],
      ['variableSubStmt_group_def_41', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_41?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_14*']],
      ['subscript__group_def_44', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_44?', 'valueStmt']],
      ['subscripts_group_def_46', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_46*']],
      ['subscript_', ['subscript__group_def_44?', 'valueStmt']],
      ['argList_group_def_50', [',', 'arg']],
      ['argList_group_def_51', ['arg', 'argList_group_def_50*']],
      ['argList', ['LPAREN', 'argList_group_def_51?', 'RPAREN']],
      ['valueStmt', ['literal']],
      ['valueStmt', ['implicitCallStmt_InStmt']],
      ['valueStmt', ['NEW', 'valueStmt']],
      ['valueStmt', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_53', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_52', ['iCS_S_MembersCall_group_def_53']],
      ['iCS_S_MembersCall_group_def_54', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_52', ['iCS_S_MembersCall_group_def_54']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_52?',
          'iCS_S_MemberCall',
          'iCS_S_MemberCall*',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_24*',
        ],
      ],
      ['iCS_S_MemberCall_group_def_57', ['.']],
      ['iCS_S_MemberCall_group_56', ['iCS_S_MemberCall_group_def_57']],
      ['iCS_S_MemberCall_group_def_58', ['!']],
      ['iCS_S_MemberCall_group_56', ['iCS_S_MemberCall_group_def_58']],
      ['iCS_S_MemberCall_group_59', ['iCS_S_MembersCall_group_def_53']],
      ['iCS_S_MemberCall_group_59', ['iCS_S_MembersCall_group_def_54']],
      [
        'iCS_S_MemberCall',
        ['iCS_S_MemberCall_group_56', 'iCS_S_MemberCall_group_59'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_24*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_24*',
        ],
      ],
      ['dictionaryCallStmt', ['!', 'ambiguousIdentifier', 'typeHint?']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_63', ['BYVAL']],
      ['arg_group_62', ['arg_group_def_63']],
      ['arg_group_def_64', ['BYREF']],
      ['arg_group_62', ['arg_group_def_64']],
      ['arg_group_def_66', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_62?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_66?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type__group_def_68', ['baseType']],
      ['type__group_67', ['type__group_def_68']],
      ['type__group_def_69', ['complexType']],
      ['type__group_67', ['type__group_def_69']],
      ['type_', ['type__group_67', 'arg_group_def_66?']],
      ['complexType_group_72', ['iCS_S_MemberCall_group_def_57']],
      ['complexType_group_72', ['iCS_S_MemberCall_group_def_58']],
      [
        'complexType_group_def_73',
        ['complexType_group_72', 'ambiguousIdentifier'],
      ],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_73*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType_group_def_75', ['MULT', 'valueStmt']],
      ['baseType', ['STRING', 'baseType_group_def_75?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['fieldLength', ['MULT', 'ambiguousIdentifier']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {};
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 19, 35, 49, 50, 51, 52, 56, 58, 67, 68, 69, 70, 71, 72, 77,
    78, 85, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 105, 107, 110,
    111, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 147, 148, 149, 150,
    151, 155, 156, 157, 158, 160, 161, 162, 171,
  ]);
  const parserPredictTable = {
    $START: {
      COMMENT: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      NEWLINE: [0],
      REMCOMMENT: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      COMMENT: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      NEWLINE: [1],
      REMCOMMENT: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
      ALIAS: [9],
      AND: [9],
      ATTRIBUTE: [9],
      AS: [9],
      BEGIN: [9],
      BOOLEAN: [9],
      BYVAL: [9],
      BYREF: [9],
      BYTE: [9],
      CALL: [9],
      CASE: [9],
      CONST: [9],
      DECLARE: [9],
      DEFBOOL: [9],
      DEFBYTE: [9],
      DEFDATE: [9],
      DEFDBL: [9],
      DEFDEC: [9],
      DEFCUR: [9],
      DEFINT: [9],
      DEFLNG: [9],
      DEFOBJ: [9],
      DEFSNG: [9],
      DEFSTR: [9],
      DEFVAR: [9],
      DIM: [9],
      DO: [9],
      DOUBLE: [9],
      EACH: [9],
      ELSE: [9],
      ELSEIF: [9],
      END_ENUM: [9],
      END_FUNCTION: [9],
      END_IF: [9],
      END_PROPERTY: [9],
      END_SELECT: [9],
      END_SUB: [9],
      END_TYPE: [9],
      END_WITH: [9],
      END: [9],
      ENUM: [9],
      EQV: [9],
      ERASE: [9],
      EVENT: [9],
      EXIT_DO: [9],
      EXIT_FOR: [9],
      EXIT_FUNCTION: [9],
      EXIT_PROPERTY: [9],
      EXIT_SUB: [9],
      FALSE: [9],
      FRIEND: [9],
      FOR: [9],
      FUNCTION: [9],
      GET: [9],
      GLOBAL: [9],
      GOSUB: [9],
      GOTO: [9],
      IF: [9],
      IMPLEMENTS: [9],
      IN: [9],
      IS: [9],
      INTEGER: [9],
      LONG: [9],
      LOOP: [9],
      LEN: [9],
      LET: [9],
      LIB: [9],
      LIKE: [9],
      LSET: [9],
      MACRO_CONST: [9],
      MACRO_IF: [9],
      MACRO_ELSEIF: [9],
      MACRO_ELSE: [9],
      MACRO_END_IF: [9],
      MOD: [9],
      NEXT: [9],
      NEW: [9],
      NOT: [9],
      NOTHING: [9],
      NULL: [9],
      ON_ERROR: [9],
      ON_LOCAL_ERROR: [9],
      ON: [9],
      OPTIONAL: [9],
      OPTION_BASE: [9],
      OPTION_EXPLICIT: [9],
      OPTION_COMPARE: [9],
      OPTION_PRIVATE_MODULE: [9],
      OR: [9],
      PARAMARRAY: [9],
      PRESERVE: [9],
      PRIVATE: [9],
      PROPERTY_GET: [9],
      PROPERTY_LET: [9],
      PROPERTY_SET: [9],
      PTRSAFE: [9],
      PUBLIC: [9],
      RAISEEVENT: [9],
      REDIM: [9],
      RESET: [9],
      RESUME: [9],
      RETURN: [9],
      SELECT: [9],
      SET: [9],
      SINGLE: [9],
      STATIC: [9],
      STEP: [9],
      STOP: [9],
      STRING: [9],
      SUB: [9],
      THEN: [9],
      TO: [9],
      TRUE: [9],
      TYPEOF: [9],
      UNTIL: [9],
      VARIANT: [9],
      WEND: [9],
      WHILE: [9],
      WITH: [9],
      WITHEVENTS: [9],
      XOR: [9],
      IDENTIFIER: [9],
      '.': [9],
      '!': [9],
    },
    moduleDeclarations_group_def_5: {
      NEWLINE: [10],
      COMMENT: [10],
      REMCOMMENT: [10],
    },
    moduleDeclarations: {
      COMMENT: [11],
      DIM: [11],
      STATIC: [11],
      PRIVATE: [11],
      PUBLIC: [11],
      FRIEND: [11],
      GLOBAL: [11],
      OPTION_BASE: [11],
      OPTION_COMPARE: [11],
      OPTION_EXPLICIT: [11],
      OPTION_PRIVATE_MODULE: [11],
    },
    moduleDeclarationsElement: {
      COMMENT: [12],
      DIM: [13],
      STATIC: [13],
      PRIVATE: [13],
      PUBLIC: [13],
      FRIEND: [13],
      GLOBAL: [13],
      OPTION_BASE: [14],
      OPTION_COMPARE: [14],
      OPTION_EXPLICIT: [14],
      OPTION_PRIVATE_MODULE: [14],
    },
    moduleOption: {
      OPTION_BASE: [15],
      OPTION_COMPARE: [16],
      OPTION_EXPLICIT: [17],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleBody_group_def_7: {
      NEWLINE: [19],
      COMMENT: [19],
      REMCOMMENT: [19],
    },
    moduleBody: {
      PRIVATE: [20],
      PUBLIC: [20],
      FRIEND: [20],
      GLOBAL: [20],
      STATIC: [20],
      FUNCTION: [20],
      PROPERTY_GET: [20],
      PROPERTY_SET: [20],
      PROPERTY_LET: [20],
      SUB: [20],
    },
    moduleBodyElement: {
      PRIVATE: [21, 22, 23, 24, 25],
      PUBLIC: [21, 22, 23, 24, 25],
      FRIEND: [21, 22, 23, 24, 25],
      GLOBAL: [21, 22, 23, 24, 25],
      STATIC: [21, 22, 23, 24, 25],
      FUNCTION: [21],
      PROPERTY_GET: [22],
      PROPERTY_SET: [23],
      PROPERTY_LET: [24],
      SUB: [25],
    },
    visibility: {
      PRIVATE: [26],
      PUBLIC: [27],
      FRIEND: [28],
      GLOBAL: [29],
    },
    subStmt: {
      PRIVATE: [30],
      PUBLIC: [30],
      FRIEND: [30],
      GLOBAL: [30],
      STATIC: [30],
      SUB: [30],
    },
    propertyGetStmt: {
      PRIVATE: [31],
      PUBLIC: [31],
      FRIEND: [31],
      GLOBAL: [31],
      STATIC: [31],
      PROPERTY_GET: [31],
    },
    propertySetStmt: {
      PRIVATE: [32],
      PUBLIC: [32],
      FRIEND: [32],
      GLOBAL: [32],
      STATIC: [32],
      PROPERTY_SET: [32],
    },
    propertyLetStmt: {
      PRIVATE: [33],
      PUBLIC: [33],
      FRIEND: [33],
      GLOBAL: [33],
      STATIC: [33],
      PROPERTY_LET: [33],
    },
    functionStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      FUNCTION: [34],
    },
    block_group_def_9: {
      NEWLINE: [35],
      COMMENT: [35],
      REMCOMMENT: [35],
      COLON: [35],
      ALIAS: [35],
      AND: [35],
      ATTRIBUTE: [35],
      AS: [35],
      BEGIN: [35],
      BOOLEAN: [35],
      BYVAL: [35],
      BYREF: [35],
      BYTE: [35],
      CALL: [35],
      CASE: [35],
      CONST: [35],
      DECLARE: [35],
      DEFBOOL: [35],
      DEFBYTE: [35],
      DEFDATE: [35],
      DEFDBL: [35],
      DEFDEC: [35],
      DEFCUR: [35],
      DEFINT: [35],
      DEFLNG: [35],
      DEFOBJ: [35],
      DEFSNG: [35],
      DEFSTR: [35],
      DEFVAR: [35],
      DIM: [35],
      DO: [35],
      DOUBLE: [35],
      EACH: [35],
      ELSE: [35],
      ELSEIF: [35],
      END_ENUM: [35],
      END_FUNCTION: [35],
      END_IF: [35],
      END_PROPERTY: [35],
      END_SELECT: [35],
      END_SUB: [35],
      END_TYPE: [35],
      END_WITH: [35],
      END: [35],
      ENUM: [35],
      EQV: [35],
      ERASE: [35],
      EVENT: [35],
      EXIT_DO: [35],
      EXIT_FOR: [35],
      EXIT_FUNCTION: [35],
      EXIT_PROPERTY: [35],
      EXIT_SUB: [35],
      FALSE: [35],
      FRIEND: [35],
      FOR: [35],
      FUNCTION: [35],
      GET: [35],
      GLOBAL: [35],
      GOSUB: [35],
      GOTO: [35],
      IF: [35],
      IMPLEMENTS: [35],
      IN: [35],
      IS: [35],
      INTEGER: [35],
      LONG: [35],
      LOOP: [35],
      LEN: [35],
      LET: [35],
      LIB: [35],
      LIKE: [35],
      LSET: [35],
      MACRO_CONST: [35],
      MACRO_IF: [35],
      MACRO_ELSEIF: [35],
      MACRO_ELSE: [35],
      MACRO_END_IF: [35],
      MOD: [35],
      NEXT: [35],
      NEW: [35],
      NOT: [35],
      NOTHING: [35],
      NULL: [35],
      ON_ERROR: [35],
      ON_LOCAL_ERROR: [35],
      ON: [35],
      OPTIONAL: [35],
      OPTION_BASE: [35],
      OPTION_EXPLICIT: [35],
      OPTION_COMPARE: [35],
      OPTION_PRIVATE_MODULE: [35],
      OR: [35],
      PARAMARRAY: [35],
      PRESERVE: [35],
      PRIVATE: [35],
      PROPERTY_GET: [35],
      PROPERTY_LET: [35],
      PROPERTY_SET: [35],
      PTRSAFE: [35],
      PUBLIC: [35],
      RAISEEVENT: [35],
      REDIM: [35],
      RESET: [35],
      RESUME: [35],
      RETURN: [35],
      SELECT: [35],
      SET: [35],
      SINGLE: [35],
      STATIC: [35],
      STEP: [35],
      STOP: [35],
      STRING: [35],
      SUB: [35],
      THEN: [35],
      TO: [35],
      TRUE: [35],
      TYPEOF: [35],
      UNTIL: [35],
      VARIANT: [35],
      WEND: [35],
      WHILE: [35],
      WITH: [35],
      WITHEVENTS: [35],
      XOR: [35],
      IDENTIFIER: [35],
      '.': [35],
      '!': [35],
    },
    block: {
      ALIAS: [36],
      AND: [36],
      ATTRIBUTE: [36],
      AS: [36],
      BEGIN: [36],
      BOOLEAN: [36],
      BYVAL: [36],
      BYREF: [36],
      BYTE: [36],
      CALL: [36],
      CASE: [36],
      CONST: [36],
      DECLARE: [36],
      DEFBOOL: [36],
      DEFBYTE: [36],
      DEFDATE: [36],
      DEFDBL: [36],
      DEFDEC: [36],
      DEFCUR: [36],
      DEFINT: [36],
      DEFLNG: [36],
      DEFOBJ: [36],
      DEFSNG: [36],
      DEFSTR: [36],
      DEFVAR: [36],
      DIM: [36],
      DO: [36],
      DOUBLE: [36],
      EACH: [36],
      ELSE: [36],
      ELSEIF: [36],
      END_ENUM: [36],
      END_FUNCTION: [36],
      END_IF: [36],
      END_PROPERTY: [36],
      END_SELECT: [36],
      END_SUB: [36],
      END_TYPE: [36],
      END_WITH: [36],
      END: [36],
      ENUM: [36],
      EQV: [36],
      ERASE: [36],
      EVENT: [36],
      EXIT_DO: [36],
      EXIT_FOR: [36],
      EXIT_FUNCTION: [36],
      EXIT_PROPERTY: [36],
      EXIT_SUB: [36],
      FALSE: [36],
      FRIEND: [36],
      FOR: [36],
      FUNCTION: [36],
      GET: [36],
      GLOBAL: [36],
      GOSUB: [36],
      GOTO: [36],
      IF: [36],
      IMPLEMENTS: [36],
      IN: [36],
      IS: [36],
      INTEGER: [36],
      LONG: [36],
      LOOP: [36],
      LEN: [36],
      LET: [36],
      LIB: [36],
      LIKE: [36],
      LSET: [36],
      MACRO_CONST: [36],
      MACRO_IF: [36],
      MACRO_ELSEIF: [36],
      MACRO_ELSE: [36],
      MACRO_END_IF: [36],
      MOD: [36],
      NEXT: [36],
      NEW: [36],
      NOT: [36],
      NOTHING: [36],
      NULL: [36],
      ON_ERROR: [36],
      ON_LOCAL_ERROR: [36],
      ON: [36],
      OPTIONAL: [36],
      OPTION_BASE: [36],
      OPTION_EXPLICIT: [36],
      OPTION_COMPARE: [36],
      OPTION_PRIVATE_MODULE: [36],
      OR: [36],
      PARAMARRAY: [36],
      PRESERVE: [36],
      PRIVATE: [36],
      PROPERTY_GET: [36],
      PROPERTY_LET: [36],
      PROPERTY_SET: [36],
      PTRSAFE: [36],
      PUBLIC: [36],
      RAISEEVENT: [36],
      REDIM: [36],
      RESET: [36],
      RESUME: [36],
      RETURN: [36],
      SELECT: [36],
      SET: [36],
      SINGLE: [36],
      STATIC: [36],
      STEP: [36],
      STOP: [36],
      STRING: [36],
      SUB: [36],
      THEN: [36],
      TO: [36],
      TRUE: [36],
      TYPEOF: [36],
      UNTIL: [36],
      VARIANT: [36],
      WEND: [36],
      WHILE: [36],
      WITH: [36],
      WITHEVENTS: [36],
      XOR: [36],
      IDENTIFIER: [36],
      '.': [36],
      '!': [36],
    },
    blockStmt: {
      ALIAS: [37, 46, 48],
      AND: [37, 46, 48],
      ATTRIBUTE: [37, 46, 48],
      AS: [37, 46, 48],
      BEGIN: [37, 46, 48],
      BOOLEAN: [37, 46, 48],
      BYVAL: [37, 46, 48],
      BYREF: [37, 46, 48],
      BYTE: [37, 46, 48],
      CALL: [37, 43, 46, 48],
      CASE: [37, 46, 48],
      CONST: [37, 46, 48],
      DECLARE: [37, 46, 48],
      DEFBOOL: [37, 46, 48],
      DEFBYTE: [37, 46, 48],
      DEFDATE: [37, 46, 48],
      DEFDBL: [37, 46, 48],
      DEFDEC: [37, 46, 48],
      DEFCUR: [37, 46, 48],
      DEFINT: [37, 46, 48],
      DEFLNG: [37, 46, 48],
      DEFOBJ: [37, 46, 48],
      DEFSNG: [37, 46, 48],
      DEFSTR: [37, 46, 48],
      DEFVAR: [37, 46, 48],
      DIM: [37, 46, 47, 48],
      DO: [37, 46, 48],
      DOUBLE: [37, 46, 48],
      EACH: [37, 46, 48],
      ELSE: [37, 46, 48],
      ELSEIF: [37, 46, 48],
      END_ENUM: [37, 46, 48],
      END_FUNCTION: [37, 46, 48],
      END_IF: [37, 46, 48],
      END_PROPERTY: [37, 46, 48],
      END_SELECT: [37, 46, 48],
      END_SUB: [37, 46, 48],
      END_TYPE: [37, 46, 48],
      END_WITH: [37, 46, 48],
      END: [37, 42, 46, 48],
      ENUM: [37, 46, 48],
      EQV: [37, 46, 48],
      ERASE: [37, 41, 46, 48],
      EVENT: [37, 46, 48],
      EXIT_DO: [37, 42, 46, 48],
      EXIT_FOR: [37, 42, 46, 48],
      EXIT_FUNCTION: [37, 42, 46, 48],
      EXIT_PROPERTY: [37, 42, 46, 48],
      EXIT_SUB: [37, 42, 46, 48],
      FALSE: [37, 46, 48],
      FRIEND: [37, 46, 47, 48],
      FOR: [37, 46, 48],
      FUNCTION: [37, 46, 48],
      GET: [37, 46, 48],
      GLOBAL: [37, 46, 47, 48],
      GOSUB: [37, 46, 48],
      GOTO: [37, 38, 46, 48],
      IF: [37, 46, 48],
      IMPLEMENTS: [37, 46, 48],
      IN: [37, 46, 48],
      IS: [37, 46, 48],
      INTEGER: [37, 46, 48],
      LONG: [37, 46, 48],
      LOOP: [37, 46, 48],
      LEN: [37, 46, 48],
      LET: [37, 46, 48],
      LIB: [37, 46, 48],
      LIKE: [37, 46, 48],
      LSET: [37, 46, 48],
      MACRO_CONST: [37, 46, 48],
      MACRO_IF: [37, 46, 48],
      MACRO_ELSEIF: [37, 46, 48],
      MACRO_ELSE: [37, 46, 48],
      MACRO_END_IF: [37, 46, 48],
      MOD: [37, 46, 48],
      NEXT: [37, 46, 48],
      NEW: [37, 46, 48],
      NOT: [37, 46, 48],
      NOTHING: [37, 46, 48],
      NULL: [37, 46, 48],
      ON_ERROR: [37, 39, 46, 48],
      ON_LOCAL_ERROR: [37, 46, 48],
      ON: [37, 46, 48],
      OPTIONAL: [37, 46, 48],
      OPTION_BASE: [37, 46, 48],
      OPTION_EXPLICIT: [37, 46, 48],
      OPTION_COMPARE: [37, 46, 48],
      OPTION_PRIVATE_MODULE: [37, 46, 48],
      OR: [37, 46, 48],
      PARAMARRAY: [37, 46, 48],
      PRESERVE: [37, 46, 48],
      PRIVATE: [37, 46, 47, 48],
      PROPERTY_GET: [37, 46, 48],
      PROPERTY_LET: [37, 46, 48],
      PROPERTY_SET: [37, 46, 48],
      PTRSAFE: [37, 46, 48],
      PUBLIC: [37, 46, 47, 48],
      RAISEEVENT: [37, 46, 48],
      REDIM: [37, 45, 46, 48],
      RESET: [37, 46, 48],
      RESUME: [37, 46, 48],
      RETURN: [37, 46, 48],
      SELECT: [37, 46, 48],
      SET: [37, 44, 46, 48],
      SINGLE: [37, 46, 48],
      STATIC: [37, 46, 47, 48],
      STEP: [37, 46, 48],
      STOP: [37, 46, 48],
      STRING: [37, 46, 48],
      SUB: [37, 46, 48],
      THEN: [37, 46, 48],
      TO: [37, 46, 48],
      TRUE: [37, 46, 48],
      TYPEOF: [37, 46, 48],
      UNTIL: [37, 46, 48],
      VARIANT: [37, 46, 48],
      WEND: [37, 46, 48],
      WHILE: [37, 46, 48],
      WITH: [37, 40, 46, 48],
      WITHEVENTS: [37, 46, 48],
      XOR: [37, 46, 48],
      IDENTIFIER: [37, 46, 48],
      '.': [46, 48],
      '!': [46, 48],
    },
    onErrorStmt_group_def_11: {
      ALIAS: [49],
      AND: [49],
      ATTRIBUTE: [49],
      AS: [49],
      BEGIN: [49],
      BOOLEAN: [49],
      BYVAL: [49],
      BYREF: [49],
      BYTE: [49],
      CALL: [49],
      CASE: [49],
      CONST: [49],
      DECLARE: [49],
      DEFBOOL: [49],
      DEFBYTE: [49],
      DEFDATE: [49],
      DEFDBL: [49],
      DEFDEC: [49],
      DEFCUR: [49],
      DEFINT: [49],
      DEFLNG: [49],
      DEFOBJ: [49],
      DEFSNG: [49],
      DEFSTR: [49],
      DEFVAR: [49],
      DIM: [49],
      DO: [49],
      DOUBLE: [49],
      EACH: [49],
      ELSE: [49],
      ELSEIF: [49],
      END_ENUM: [49],
      END_FUNCTION: [49],
      END_IF: [49],
      END_PROPERTY: [49],
      END_SELECT: [49],
      END_SUB: [49],
      END_TYPE: [49],
      END_WITH: [49],
      END: [49],
      ENUM: [49],
      EQV: [49],
      ERASE: [49],
      EVENT: [49],
      EXIT_DO: [49],
      EXIT_FOR: [49],
      EXIT_FUNCTION: [49],
      EXIT_PROPERTY: [49],
      EXIT_SUB: [49],
      FALSE: [49],
      FRIEND: [49],
      FOR: [49],
      FUNCTION: [49],
      GET: [49],
      GLOBAL: [49],
      GOSUB: [49],
      GOTO: [49],
      IF: [49],
      IMPLEMENTS: [49],
      IN: [49],
      IS: [49],
      INTEGER: [49],
      LONG: [49],
      LOOP: [49],
      LEN: [49],
      LET: [49],
      LIB: [49],
      LIKE: [49],
      LSET: [49],
      MACRO_CONST: [49],
      MACRO_IF: [49],
      MACRO_ELSEIF: [49],
      MACRO_ELSE: [49],
      MACRO_END_IF: [49],
      MOD: [49],
      NEXT: [49],
      NEW: [49],
      NOT: [49],
      NOTHING: [49],
      NULL: [49],
      ON_ERROR: [49],
      ON_LOCAL_ERROR: [49],
      ON: [49],
      OPTIONAL: [49],
      OPTION_BASE: [49],
      OPTION_EXPLICIT: [49],
      OPTION_COMPARE: [49],
      OPTION_PRIVATE_MODULE: [49],
      OR: [49],
      PARAMARRAY: [49],
      PRESERVE: [49],
      PRIVATE: [49],
      PROPERTY_GET: [49],
      PROPERTY_LET: [49],
      PROPERTY_SET: [49],
      PTRSAFE: [49],
      PUBLIC: [49],
      RAISEEVENT: [49],
      REDIM: [49],
      RESET: [49],
      RESUME: [49],
      RETURN: [49],
      SELECT: [49],
      SET: [49],
      SINGLE: [49],
      STATIC: [49],
      STEP: [49],
      STOP: [49],
      STRING: [49],
      SUB: [49],
      THEN: [49],
      TO: [49],
      TRUE: [49],
      TYPEOF: [49],
      UNTIL: [49],
      VARIANT: [49],
      WEND: [49],
      WHILE: [49],
      WITH: [49],
      WITHEVENTS: [49],
      XOR: [49],
      IDENTIFIER: [49],
    },
    onErrorStmt_group_10: {
      ALIAS: [50],
      AND: [50],
      ATTRIBUTE: [50],
      AS: [50],
      BEGIN: [50],
      BOOLEAN: [50],
      BYVAL: [50],
      BYREF: [50],
      BYTE: [50],
      CALL: [50],
      CASE: [50],
      CONST: [50],
      DECLARE: [50],
      DEFBOOL: [50],
      DEFBYTE: [50],
      DEFDATE: [50],
      DEFDBL: [50],
      DEFDEC: [50],
      DEFCUR: [50],
      DEFINT: [50],
      DEFLNG: [50],
      DEFOBJ: [50],
      DEFSNG: [50],
      DEFSTR: [50],
      DEFVAR: [50],
      DIM: [50],
      DO: [50],
      DOUBLE: [50],
      EACH: [50],
      ELSE: [50],
      ELSEIF: [50],
      END_ENUM: [50],
      END_FUNCTION: [50],
      END_IF: [50],
      END_PROPERTY: [50],
      END_SELECT: [50],
      END_SUB: [50],
      END_TYPE: [50],
      END_WITH: [50],
      END: [50],
      ENUM: [50],
      EQV: [50],
      ERASE: [50],
      EVENT: [50],
      EXIT_DO: [50],
      EXIT_FOR: [50],
      EXIT_FUNCTION: [50],
      EXIT_PROPERTY: [50],
      EXIT_SUB: [50],
      FALSE: [50],
      FRIEND: [50],
      FOR: [50],
      FUNCTION: [50],
      GET: [50],
      GLOBAL: [50],
      GOSUB: [50],
      GOTO: [50],
      IF: [50],
      IMPLEMENTS: [50],
      IN: [50],
      IS: [50],
      INTEGER: [50],
      LONG: [50],
      LOOP: [50],
      LEN: [50],
      LET: [50],
      LIB: [50],
      LIKE: [50],
      LSET: [50],
      MACRO_CONST: [50],
      MACRO_IF: [50],
      MACRO_ELSEIF: [50],
      MACRO_ELSE: [50],
      MACRO_END_IF: [50],
      MOD: [50],
      NEXT: [50],
      NEW: [50],
      NOT: [50],
      NOTHING: [50],
      NULL: [50],
      ON_ERROR: [50],
      ON_LOCAL_ERROR: [50],
      ON: [50],
      OPTIONAL: [50],
      OPTION_BASE: [50],
      OPTION_EXPLICIT: [50],
      OPTION_COMPARE: [50],
      OPTION_PRIVATE_MODULE: [50],
      OR: [50],
      PARAMARRAY: [50],
      PRESERVE: [50],
      PRIVATE: [50],
      PROPERTY_GET: [50],
      PROPERTY_LET: [50],
      PROPERTY_SET: [50],
      PTRSAFE: [50],
      PUBLIC: [50],
      RAISEEVENT: [50],
      REDIM: [50],
      RESET: [50],
      RESUME: [50],
      RETURN: [50],
      SELECT: [50],
      SET: [50],
      SINGLE: [50],
      STATIC: [50],
      STEP: [50],
      STOP: [50],
      STRING: [50],
      SUB: [50],
      THEN: [50],
      TO: [50],
      TRUE: [50],
      TYPEOF: [50],
      UNTIL: [50],
      VARIANT: [50],
      WEND: [50],
      WHILE: [50],
      WITH: [50],
      WITHEVENTS: [50],
      XOR: [50],
      IDENTIFIER: [50],
      MINUS: [52],
    },
    onErrorStmt_group_def_12: {
      MINUS: [51],
    },
    onErrorStmt: {
      ON_ERROR: [53],
    },
    lineLabel: {
      ALIAS: [54],
      AND: [54],
      ATTRIBUTE: [54],
      AS: [54],
      BEGIN: [54],
      BOOLEAN: [54],
      BYVAL: [54],
      BYREF: [54],
      BYTE: [54],
      CALL: [54],
      CASE: [54],
      CONST: [54],
      DECLARE: [54],
      DEFBOOL: [54],
      DEFBYTE: [54],
      DEFDATE: [54],
      DEFDBL: [54],
      DEFDEC: [54],
      DEFCUR: [54],
      DEFINT: [54],
      DEFLNG: [54],
      DEFOBJ: [54],
      DEFSNG: [54],
      DEFSTR: [54],
      DEFVAR: [54],
      DIM: [54],
      DO: [54],
      DOUBLE: [54],
      EACH: [54],
      ELSE: [54],
      ELSEIF: [54],
      END_ENUM: [54],
      END_FUNCTION: [54],
      END_IF: [54],
      END_PROPERTY: [54],
      END_SELECT: [54],
      END_SUB: [54],
      END_TYPE: [54],
      END_WITH: [54],
      END: [54],
      ENUM: [54],
      EQV: [54],
      ERASE: [54],
      EVENT: [54],
      EXIT_DO: [54],
      EXIT_FOR: [54],
      EXIT_FUNCTION: [54],
      EXIT_PROPERTY: [54],
      EXIT_SUB: [54],
      FALSE: [54],
      FRIEND: [54],
      FOR: [54],
      FUNCTION: [54],
      GET: [54],
      GLOBAL: [54],
      GOSUB: [54],
      GOTO: [54],
      IF: [54],
      IMPLEMENTS: [54],
      IN: [54],
      IS: [54],
      INTEGER: [54],
      LONG: [54],
      LOOP: [54],
      LEN: [54],
      LET: [54],
      LIB: [54],
      LIKE: [54],
      LSET: [54],
      MACRO_CONST: [54],
      MACRO_IF: [54],
      MACRO_ELSEIF: [54],
      MACRO_ELSE: [54],
      MACRO_END_IF: [54],
      MOD: [54],
      NEXT: [54],
      NEW: [54],
      NOT: [54],
      NOTHING: [54],
      NULL: [54],
      ON_ERROR: [54],
      ON_LOCAL_ERROR: [54],
      ON: [54],
      OPTIONAL: [54],
      OPTION_BASE: [54],
      OPTION_EXPLICIT: [54],
      OPTION_COMPARE: [54],
      OPTION_PRIVATE_MODULE: [54],
      OR: [54],
      PARAMARRAY: [54],
      PRESERVE: [54],
      PRIVATE: [54],
      PROPERTY_GET: [54],
      PROPERTY_LET: [54],
      PROPERTY_SET: [54],
      PTRSAFE: [54],
      PUBLIC: [54],
      RAISEEVENT: [54],
      REDIM: [54],
      RESET: [54],
      RESUME: [54],
      RETURN: [54],
      SELECT: [54],
      SET: [54],
      SINGLE: [54],
      STATIC: [54],
      STEP: [54],
      STOP: [54],
      STRING: [54],
      SUB: [54],
      THEN: [54],
      TO: [54],
      TRUE: [54],
      TYPEOF: [54],
      UNTIL: [54],
      VARIANT: [54],
      WEND: [54],
      WHILE: [54],
      WITH: [54],
      WITHEVENTS: [54],
      XOR: [54],
      IDENTIFIER: [54],
    },
    goToStmt: {
      GOTO: [55],
    },
    eraseStmt_group_def_14: {
      ',': [56],
    },
    eraseStmt: {
      ERASE: [57],
    },
    redimStmt_group_def_16: {
      ',': [58],
    },
    redimStmt: {
      REDIM: [59],
    },
    redimSubStmt: {
      '.': [60],
      '!': [60],
      ALIAS: [60],
      AND: [60],
      ATTRIBUTE: [60],
      AS: [60],
      BEGIN: [60],
      BOOLEAN: [60],
      BYVAL: [60],
      BYREF: [60],
      BYTE: [60],
      CALL: [60],
      CASE: [60],
      CONST: [60],
      DECLARE: [60],
      DEFBOOL: [60],
      DEFBYTE: [60],
      DEFDATE: [60],
      DEFDBL: [60],
      DEFDEC: [60],
      DEFCUR: [60],
      DEFINT: [60],
      DEFLNG: [60],
      DEFOBJ: [60],
      DEFSNG: [60],
      DEFSTR: [60],
      DEFVAR: [60],
      DIM: [60],
      DO: [60],
      DOUBLE: [60],
      EACH: [60],
      ELSE: [60],
      ELSEIF: [60],
      END_ENUM: [60],
      END_FUNCTION: [60],
      END_IF: [60],
      END_PROPERTY: [60],
      END_SELECT: [60],
      END_SUB: [60],
      END_TYPE: [60],
      END_WITH: [60],
      END: [60],
      ENUM: [60],
      EQV: [60],
      ERASE: [60],
      EVENT: [60],
      EXIT_DO: [60],
      EXIT_FOR: [60],
      EXIT_FUNCTION: [60],
      EXIT_PROPERTY: [60],
      EXIT_SUB: [60],
      FALSE: [60],
      FRIEND: [60],
      FOR: [60],
      FUNCTION: [60],
      GET: [60],
      GLOBAL: [60],
      GOSUB: [60],
      GOTO: [60],
      IF: [60],
      IMPLEMENTS: [60],
      IN: [60],
      IS: [60],
      INTEGER: [60],
      LONG: [60],
      LOOP: [60],
      LEN: [60],
      LET: [60],
      LIB: [60],
      LIKE: [60],
      LSET: [60],
      MACRO_CONST: [60],
      MACRO_IF: [60],
      MACRO_ELSEIF: [60],
      MACRO_ELSE: [60],
      MACRO_END_IF: [60],
      MOD: [60],
      NEXT: [60],
      NEW: [60],
      NOT: [60],
      NOTHING: [60],
      NULL: [60],
      ON_ERROR: [60],
      ON_LOCAL_ERROR: [60],
      ON: [60],
      OPTIONAL: [60],
      OPTION_BASE: [60],
      OPTION_EXPLICIT: [60],
      OPTION_COMPARE: [60],
      OPTION_PRIVATE_MODULE: [60],
      OR: [60],
      PARAMARRAY: [60],
      PRESERVE: [60],
      PRIVATE: [60],
      PROPERTY_GET: [60],
      PROPERTY_LET: [60],
      PROPERTY_SET: [60],
      PTRSAFE: [60],
      PUBLIC: [60],
      RAISEEVENT: [60],
      REDIM: [60],
      RESET: [60],
      RESUME: [60],
      RETURN: [60],
      SELECT: [60],
      SET: [60],
      SINGLE: [60],
      STATIC: [60],
      STEP: [60],
      STOP: [60],
      STRING: [60],
      SUB: [60],
      THEN: [60],
      TO: [60],
      TRUE: [60],
      TYPEOF: [60],
      UNTIL: [60],
      VARIANT: [60],
      WEND: [60],
      WHILE: [60],
      WITH: [60],
      WITHEVENTS: [60],
      XOR: [60],
      IDENTIFIER: [60],
    },
    exitStmt: {
      EXIT_DO: [61],
      EXIT_FOR: [62],
      EXIT_FUNCTION: [63],
      EXIT_PROPERTY: [64],
      EXIT_SUB: [65],
      END: [66],
    },
    letStmt_group_def_18: {
      EQ: [67],
    },
    letStmt_group_17: {
      EQ: [68],
      PLUS_EQ: [70],
      MINUS_EQ: [72],
    },
    letStmt_group_def_19: {
      PLUS_EQ: [69],
    },
    letStmt_group_def_20: {
      MINUS_EQ: [71],
    },
    letStmt: {
      LET: [73],
      '.': [73],
      '!': [73],
      ALIAS: [73],
      AND: [73],
      ATTRIBUTE: [73],
      AS: [73],
      BEGIN: [73],
      BOOLEAN: [73],
      BYVAL: [73],
      BYREF: [73],
      BYTE: [73],
      CALL: [73],
      CASE: [73],
      CONST: [73],
      DECLARE: [73],
      DEFBOOL: [73],
      DEFBYTE: [73],
      DEFDATE: [73],
      DEFDBL: [73],
      DEFDEC: [73],
      DEFCUR: [73],
      DEFINT: [73],
      DEFLNG: [73],
      DEFOBJ: [73],
      DEFSNG: [73],
      DEFSTR: [73],
      DEFVAR: [73],
      DIM: [73],
      DO: [73],
      DOUBLE: [73],
      EACH: [73],
      ELSE: [73],
      ELSEIF: [73],
      END_ENUM: [73],
      END_FUNCTION: [73],
      END_IF: [73],
      END_PROPERTY: [73],
      END_SELECT: [73],
      END_SUB: [73],
      END_TYPE: [73],
      END_WITH: [73],
      END: [73],
      ENUM: [73],
      EQV: [73],
      ERASE: [73],
      EVENT: [73],
      EXIT_DO: [73],
      EXIT_FOR: [73],
      EXIT_FUNCTION: [73],
      EXIT_PROPERTY: [73],
      EXIT_SUB: [73],
      FALSE: [73],
      FRIEND: [73],
      FOR: [73],
      FUNCTION: [73],
      GET: [73],
      GLOBAL: [73],
      GOSUB: [73],
      GOTO: [73],
      IF: [73],
      IMPLEMENTS: [73],
      IN: [73],
      IS: [73],
      INTEGER: [73],
      LONG: [73],
      LOOP: [73],
      LEN: [73],
      LIB: [73],
      LIKE: [73],
      LSET: [73],
      MACRO_CONST: [73],
      MACRO_IF: [73],
      MACRO_ELSEIF: [73],
      MACRO_ELSE: [73],
      MACRO_END_IF: [73],
      MOD: [73],
      NEXT: [73],
      NEW: [73],
      NOT: [73],
      NOTHING: [73],
      NULL: [73],
      ON_ERROR: [73],
      ON_LOCAL_ERROR: [73],
      ON: [73],
      OPTIONAL: [73],
      OPTION_BASE: [73],
      OPTION_EXPLICIT: [73],
      OPTION_COMPARE: [73],
      OPTION_PRIVATE_MODULE: [73],
      OR: [73],
      PARAMARRAY: [73],
      PRESERVE: [73],
      PRIVATE: [73],
      PROPERTY_GET: [73],
      PROPERTY_LET: [73],
      PROPERTY_SET: [73],
      PTRSAFE: [73],
      PUBLIC: [73],
      RAISEEVENT: [73],
      REDIM: [73],
      RESET: [73],
      RESUME: [73],
      RETURN: [73],
      SELECT: [73],
      SET: [73],
      SINGLE: [73],
      STATIC: [73],
      STEP: [73],
      STOP: [73],
      STRING: [73],
      SUB: [73],
      THEN: [73],
      TO: [73],
      TRUE: [73],
      TYPEOF: [73],
      UNTIL: [73],
      VARIANT: [73],
      WEND: [73],
      WHILE: [73],
      WITH: [73],
      WITHEVENTS: [73],
      XOR: [73],
      IDENTIFIER: [73],
    },
    setStmt: {
      SET: [74],
    },
    explicitCallStmt: {
      CALL: [75, 76],
    },
    eCS_MemberProcedureCall_group_def_22: {
      LPAREN: [77],
    },
    eCS_MemberProcedureCall_group_def_24: {
      LPAREN: [78],
    },
    eCS_MemberProcedureCall: {
      CALL: [79],
    },
    eCS_ProcedureCall: {
      CALL: [80],
    },
    implicitCallStmt_InBlock: {
      '.': [81],
      '!': [81],
      ALIAS: [81, 82],
      AND: [81, 82],
      ATTRIBUTE: [81, 82],
      AS: [81, 82],
      BEGIN: [81, 82],
      BOOLEAN: [81, 82],
      BYVAL: [81, 82],
      BYREF: [81, 82],
      BYTE: [81, 82],
      CALL: [81, 82],
      CASE: [81, 82],
      CONST: [81, 82],
      DECLARE: [81, 82],
      DEFBOOL: [81, 82],
      DEFBYTE: [81, 82],
      DEFDATE: [81, 82],
      DEFDBL: [81, 82],
      DEFDEC: [81, 82],
      DEFCUR: [81, 82],
      DEFINT: [81, 82],
      DEFLNG: [81, 82],
      DEFOBJ: [81, 82],
      DEFSNG: [81, 82],
      DEFSTR: [81, 82],
      DEFVAR: [81, 82],
      DIM: [81, 82],
      DO: [81, 82],
      DOUBLE: [81, 82],
      EACH: [81, 82],
      ELSE: [81, 82],
      ELSEIF: [81, 82],
      END_ENUM: [81, 82],
      END_FUNCTION: [81, 82],
      END_IF: [81, 82],
      END_PROPERTY: [81, 82],
      END_SELECT: [81, 82],
      END_SUB: [81, 82],
      END_TYPE: [81, 82],
      END_WITH: [81, 82],
      END: [81, 82],
      ENUM: [81, 82],
      EQV: [81, 82],
      ERASE: [81, 82],
      EVENT: [81, 82],
      EXIT_DO: [81, 82],
      EXIT_FOR: [81, 82],
      EXIT_FUNCTION: [81, 82],
      EXIT_PROPERTY: [81, 82],
      EXIT_SUB: [81, 82],
      FALSE: [81, 82],
      FRIEND: [81, 82],
      FOR: [81, 82],
      FUNCTION: [81, 82],
      GET: [81, 82],
      GLOBAL: [81, 82],
      GOSUB: [81, 82],
      GOTO: [81, 82],
      IF: [81, 82],
      IMPLEMENTS: [81, 82],
      IN: [81, 82],
      IS: [81, 82],
      INTEGER: [81, 82],
      LONG: [81, 82],
      LOOP: [81, 82],
      LEN: [81, 82],
      LET: [81, 82],
      LIB: [81, 82],
      LIKE: [81, 82],
      LSET: [81, 82],
      MACRO_CONST: [81, 82],
      MACRO_IF: [81, 82],
      MACRO_ELSEIF: [81, 82],
      MACRO_ELSE: [81, 82],
      MACRO_END_IF: [81, 82],
      MOD: [81, 82],
      NEXT: [81, 82],
      NEW: [81, 82],
      NOT: [81, 82],
      NOTHING: [81, 82],
      NULL: [81, 82],
      ON_ERROR: [81, 82],
      ON_LOCAL_ERROR: [81, 82],
      ON: [81, 82],
      OPTIONAL: [81, 82],
      OPTION_BASE: [81, 82],
      OPTION_EXPLICIT: [81, 82],
      OPTION_COMPARE: [81, 82],
      OPTION_PRIVATE_MODULE: [81, 82],
      OR: [81, 82],
      PARAMARRAY: [81, 82],
      PRESERVE: [81, 82],
      PRIVATE: [81, 82],
      PROPERTY_GET: [81, 82],
      PROPERTY_LET: [81, 82],
      PROPERTY_SET: [81, 82],
      PTRSAFE: [81, 82],
      PUBLIC: [81, 82],
      RAISEEVENT: [81, 82],
      REDIM: [81, 82],
      RESET: [81, 82],
      RESUME: [81, 82],
      RETURN: [81, 82],
      SELECT: [81, 82],
      SET: [81, 82],
      SINGLE: [81, 82],
      STATIC: [81, 82],
      STEP: [81, 82],
      STOP: [81, 82],
      STRING: [81, 82],
      SUB: [81, 82],
      THEN: [81, 82],
      TO: [81, 82],
      TRUE: [81, 82],
      TYPEOF: [81, 82],
      UNTIL: [81, 82],
      VARIANT: [81, 82],
      WEND: [81, 82],
      WHILE: [81, 82],
      WITH: [81, 82],
      WITHEVENTS: [81, 82],
      XOR: [81, 82],
      IDENTIFIER: [81, 82],
    },
    iCS_B_MemberProcedureCall: {
      '.': [83],
      '!': [83],
      ALIAS: [83],
      AND: [83],
      ATTRIBUTE: [83],
      AS: [83],
      BEGIN: [83],
      BOOLEAN: [83],
      BYVAL: [83],
      BYREF: [83],
      BYTE: [83],
      CALL: [83],
      CASE: [83],
      CONST: [83],
      DECLARE: [83],
      DEFBOOL: [83],
      DEFBYTE: [83],
      DEFDATE: [83],
      DEFDBL: [83],
      DEFDEC: [83],
      DEFCUR: [83],
      DEFINT: [83],
      DEFLNG: [83],
      DEFOBJ: [83],
      DEFSNG: [83],
      DEFSTR: [83],
      DEFVAR: [83],
      DIM: [83],
      DO: [83],
      DOUBLE: [83],
      EACH: [83],
      ELSE: [83],
      ELSEIF: [83],
      END_ENUM: [83],
      END_FUNCTION: [83],
      END_IF: [83],
      END_PROPERTY: [83],
      END_SELECT: [83],
      END_SUB: [83],
      END_TYPE: [83],
      END_WITH: [83],
      END: [83],
      ENUM: [83],
      EQV: [83],
      ERASE: [83],
      EVENT: [83],
      EXIT_DO: [83],
      EXIT_FOR: [83],
      EXIT_FUNCTION: [83],
      EXIT_PROPERTY: [83],
      EXIT_SUB: [83],
      FALSE: [83],
      FRIEND: [83],
      FOR: [83],
      FUNCTION: [83],
      GET: [83],
      GLOBAL: [83],
      GOSUB: [83],
      GOTO: [83],
      IF: [83],
      IMPLEMENTS: [83],
      IN: [83],
      IS: [83],
      INTEGER: [83],
      LONG: [83],
      LOOP: [83],
      LEN: [83],
      LET: [83],
      LIB: [83],
      LIKE: [83],
      LSET: [83],
      MACRO_CONST: [83],
      MACRO_IF: [83],
      MACRO_ELSEIF: [83],
      MACRO_ELSE: [83],
      MACRO_END_IF: [83],
      MOD: [83],
      NEXT: [83],
      NEW: [83],
      NOT: [83],
      NOTHING: [83],
      NULL: [83],
      ON_ERROR: [83],
      ON_LOCAL_ERROR: [83],
      ON: [83],
      OPTIONAL: [83],
      OPTION_BASE: [83],
      OPTION_EXPLICIT: [83],
      OPTION_COMPARE: [83],
      OPTION_PRIVATE_MODULE: [83],
      OR: [83],
      PARAMARRAY: [83],
      PRESERVE: [83],
      PRIVATE: [83],
      PROPERTY_GET: [83],
      PROPERTY_LET: [83],
      PROPERTY_SET: [83],
      PTRSAFE: [83],
      PUBLIC: [83],
      RAISEEVENT: [83],
      REDIM: [83],
      RESET: [83],
      RESUME: [83],
      RETURN: [83],
      SELECT: [83],
      SET: [83],
      SINGLE: [83],
      STATIC: [83],
      STEP: [83],
      STOP: [83],
      STRING: [83],
      SUB: [83],
      THEN: [83],
      TO: [83],
      TRUE: [83],
      TYPEOF: [83],
      UNTIL: [83],
      VARIANT: [83],
      WEND: [83],
      WHILE: [83],
      WITH: [83],
      WITHEVENTS: [83],
      XOR: [83],
      IDENTIFIER: [83],
    },
    iCS_B_ProcedureCall: {
      ALIAS: [84],
      AND: [84],
      ATTRIBUTE: [84],
      AS: [84],
      BEGIN: [84],
      BOOLEAN: [84],
      BYVAL: [84],
      BYREF: [84],
      BYTE: [84],
      CALL: [84],
      CASE: [84],
      CONST: [84],
      DECLARE: [84],
      DEFBOOL: [84],
      DEFBYTE: [84],
      DEFDATE: [84],
      DEFDBL: [84],
      DEFDEC: [84],
      DEFCUR: [84],
      DEFINT: [84],
      DEFLNG: [84],
      DEFOBJ: [84],
      DEFSNG: [84],
      DEFSTR: [84],
      DEFVAR: [84],
      DIM: [84],
      DO: [84],
      DOUBLE: [84],
      EACH: [84],
      ELSE: [84],
      ELSEIF: [84],
      END_ENUM: [84],
      END_FUNCTION: [84],
      END_IF: [84],
      END_PROPERTY: [84],
      END_SELECT: [84],
      END_SUB: [84],
      END_TYPE: [84],
      END_WITH: [84],
      END: [84],
      ENUM: [84],
      EQV: [84],
      ERASE: [84],
      EVENT: [84],
      EXIT_DO: [84],
      EXIT_FOR: [84],
      EXIT_FUNCTION: [84],
      EXIT_PROPERTY: [84],
      EXIT_SUB: [84],
      FALSE: [84],
      FRIEND: [84],
      FOR: [84],
      FUNCTION: [84],
      GET: [84],
      GLOBAL: [84],
      GOSUB: [84],
      GOTO: [84],
      IF: [84],
      IMPLEMENTS: [84],
      IN: [84],
      IS: [84],
      INTEGER: [84],
      LONG: [84],
      LOOP: [84],
      LEN: [84],
      LET: [84],
      LIB: [84],
      LIKE: [84],
      LSET: [84],
      MACRO_CONST: [84],
      MACRO_IF: [84],
      MACRO_ELSEIF: [84],
      MACRO_ELSE: [84],
      MACRO_END_IF: [84],
      MOD: [84],
      NEXT: [84],
      NEW: [84],
      NOT: [84],
      NOTHING: [84],
      NULL: [84],
      ON_ERROR: [84],
      ON_LOCAL_ERROR: [84],
      ON: [84],
      OPTIONAL: [84],
      OPTION_BASE: [84],
      OPTION_EXPLICIT: [84],
      OPTION_COMPARE: [84],
      OPTION_PRIVATE_MODULE: [84],
      OR: [84],
      PARAMARRAY: [84],
      PRESERVE: [84],
      PRIVATE: [84],
      PROPERTY_GET: [84],
      PROPERTY_LET: [84],
      PROPERTY_SET: [84],
      PTRSAFE: [84],
      PUBLIC: [84],
      RAISEEVENT: [84],
      REDIM: [84],
      RESET: [84],
      RESUME: [84],
      RETURN: [84],
      SELECT: [84],
      SET: [84],
      SINGLE: [84],
      STATIC: [84],
      STEP: [84],
      STOP: [84],
      STRING: [84],
      SUB: [84],
      THEN: [84],
      TO: [84],
      TRUE: [84],
      TYPEOF: [84],
      UNTIL: [84],
      VARIANT: [84],
      WEND: [84],
      WHILE: [84],
      WITH: [84],
      WITHEVENTS: [84],
      XOR: [84],
      IDENTIFIER: [84],
    },
    argsCall_group_def_30: {
      ',': [85],
    },
    argsCall: {
      ',': [86],
      INTEGERLITERAL: [86],
      STRINGLITERAL: [86],
      NOTHING: [86],
      NULL: [86],
      TRUE: [86],
      FALSE: [86],
      '.': [86],
      '!': [86],
      ALIAS: [86],
      AND: [86],
      ATTRIBUTE: [86],
      AS: [86],
      BEGIN: [86],
      BOOLEAN: [86],
      BYVAL: [86],
      BYREF: [86],
      BYTE: [86],
      CALL: [86],
      CASE: [86],
      CONST: [86],
      DECLARE: [86],
      DEFBOOL: [86],
      DEFBYTE: [86],
      DEFDATE: [86],
      DEFDBL: [86],
      DEFDEC: [86],
      DEFCUR: [86],
      DEFINT: [86],
      DEFLNG: [86],
      DEFOBJ: [86],
      DEFSNG: [86],
      DEFSTR: [86],
      DEFVAR: [86],
      DIM: [86],
      DO: [86],
      DOUBLE: [86],
      EACH: [86],
      ELSE: [86],
      ELSEIF: [86],
      END_ENUM: [86],
      END_FUNCTION: [86],
      END_IF: [86],
      END_PROPERTY: [86],
      END_SELECT: [86],
      END_SUB: [86],
      END_TYPE: [86],
      END_WITH: [86],
      END: [86],
      ENUM: [86],
      EQV: [86],
      ERASE: [86],
      EVENT: [86],
      EXIT_DO: [86],
      EXIT_FOR: [86],
      EXIT_FUNCTION: [86],
      EXIT_PROPERTY: [86],
      EXIT_SUB: [86],
      FRIEND: [86],
      FOR: [86],
      FUNCTION: [86],
      GET: [86],
      GLOBAL: [86],
      GOSUB: [86],
      GOTO: [86],
      IF: [86],
      IMPLEMENTS: [86],
      IN: [86],
      IS: [86],
      INTEGER: [86],
      LONG: [86],
      LOOP: [86],
      LEN: [86],
      LET: [86],
      LIB: [86],
      LIKE: [86],
      LSET: [86],
      MACRO_CONST: [86],
      MACRO_IF: [86],
      MACRO_ELSEIF: [86],
      MACRO_ELSE: [86],
      MACRO_END_IF: [86],
      MOD: [86],
      NEXT: [86],
      NEW: [86],
      NOT: [86],
      ON_ERROR: [86],
      ON_LOCAL_ERROR: [86],
      ON: [86],
      OPTIONAL: [86],
      OPTION_BASE: [86],
      OPTION_EXPLICIT: [86],
      OPTION_COMPARE: [86],
      OPTION_PRIVATE_MODULE: [86],
      OR: [86],
      PARAMARRAY: [86],
      PRESERVE: [86],
      PRIVATE: [86],
      PROPERTY_GET: [86],
      PROPERTY_LET: [86],
      PROPERTY_SET: [86],
      PTRSAFE: [86],
      PUBLIC: [86],
      RAISEEVENT: [86],
      REDIM: [86],
      RESET: [86],
      RESUME: [86],
      RETURN: [86],
      SELECT: [86],
      SET: [86],
      SINGLE: [86],
      STATIC: [86],
      STEP: [86],
      STOP: [86],
      STRING: [86],
      SUB: [86],
      THEN: [86],
      TO: [86],
      TYPEOF: [86],
      UNTIL: [86],
      VARIANT: [86],
      WEND: [86],
      WHILE: [86],
      WITH: [86],
      WITHEVENTS: [86],
      XOR: [86],
      IDENTIFIER: [86],
    },
    argCall: {
      INTEGERLITERAL: [87],
      STRINGLITERAL: [87],
      NOTHING: [87],
      NULL: [87],
      TRUE: [87],
      FALSE: [87],
      '.': [87],
      '!': [87],
      ALIAS: [87],
      AND: [87],
      ATTRIBUTE: [87],
      AS: [87],
      BEGIN: [87],
      BOOLEAN: [87],
      BYVAL: [87],
      BYREF: [87],
      BYTE: [87],
      CALL: [87],
      CASE: [87],
      CONST: [87],
      DECLARE: [87],
      DEFBOOL: [87],
      DEFBYTE: [87],
      DEFDATE: [87],
      DEFDBL: [87],
      DEFDEC: [87],
      DEFCUR: [87],
      DEFINT: [87],
      DEFLNG: [87],
      DEFOBJ: [87],
      DEFSNG: [87],
      DEFSTR: [87],
      DEFVAR: [87],
      DIM: [87],
      DO: [87],
      DOUBLE: [87],
      EACH: [87],
      ELSE: [87],
      ELSEIF: [87],
      END_ENUM: [87],
      END_FUNCTION: [87],
      END_IF: [87],
      END_PROPERTY: [87],
      END_SELECT: [87],
      END_SUB: [87],
      END_TYPE: [87],
      END_WITH: [87],
      END: [87],
      ENUM: [87],
      EQV: [87],
      ERASE: [87],
      EVENT: [87],
      EXIT_DO: [87],
      EXIT_FOR: [87],
      EXIT_FUNCTION: [87],
      EXIT_PROPERTY: [87],
      EXIT_SUB: [87],
      FRIEND: [87],
      FOR: [87],
      FUNCTION: [87],
      GET: [87],
      GLOBAL: [87],
      GOSUB: [87],
      GOTO: [87],
      IF: [87],
      IMPLEMENTS: [87],
      IN: [87],
      IS: [87],
      INTEGER: [87],
      LONG: [87],
      LOOP: [87],
      LEN: [87],
      LET: [87],
      LIB: [87],
      LIKE: [87],
      LSET: [87],
      MACRO_CONST: [87],
      MACRO_IF: [87],
      MACRO_ELSEIF: [87],
      MACRO_ELSE: [87],
      MACRO_END_IF: [87],
      MOD: [87],
      NEXT: [87],
      NEW: [87],
      NOT: [87],
      ON_ERROR: [87],
      ON_LOCAL_ERROR: [87],
      ON: [87],
      OPTIONAL: [87],
      OPTION_BASE: [87],
      OPTION_EXPLICIT: [87],
      OPTION_COMPARE: [87],
      OPTION_PRIVATE_MODULE: [87],
      OR: [87],
      PARAMARRAY: [87],
      PRESERVE: [87],
      PRIVATE: [87],
      PROPERTY_GET: [87],
      PROPERTY_LET: [87],
      PROPERTY_SET: [87],
      PTRSAFE: [87],
      PUBLIC: [87],
      RAISEEVENT: [87],
      REDIM: [87],
      RESET: [87],
      RESUME: [87],
      RETURN: [87],
      SELECT: [87],
      SET: [87],
      SINGLE: [87],
      STATIC: [87],
      STEP: [87],
      STOP: [87],
      STRING: [87],
      SUB: [87],
      THEN: [87],
      TO: [87],
      TYPEOF: [87],
      UNTIL: [87],
      VARIANT: [87],
      WEND: [87],
      WHILE: [87],
      WITH: [87],
      WITHEVENTS: [87],
      XOR: [87],
      IDENTIFIER: [87],
    },
    variableStmt_group_def_32: {
      DIM: [88],
    },
    variableStmt_group_31: {
      DIM: [89],
      STATIC: [91],
      PRIVATE: [93],
      PUBLIC: [93],
      FRIEND: [93],
      GLOBAL: [93],
    },
    variableStmt_group_def_33: {
      STATIC: [90],
    },
    variableStmt_group_def_34: {
      PRIVATE: [92],
      PUBLIC: [92],
      FRIEND: [92],
      GLOBAL: [92],
    },
    variableStmt: {
      DIM: [94],
      STATIC: [94],
      PRIVATE: [94],
      PUBLIC: [94],
      FRIEND: [94],
      GLOBAL: [94],
    },
    withStmt_group_def_36: {
      '.': [95],
      '!': [95],
      ALIAS: [95],
      AND: [95],
      ATTRIBUTE: [95],
      AS: [95],
      BEGIN: [95],
      BOOLEAN: [95],
      BYVAL: [95],
      BYREF: [95],
      BYTE: [95],
      CALL: [95],
      CASE: [95],
      CONST: [95],
      DECLARE: [95],
      DEFBOOL: [95],
      DEFBYTE: [95],
      DEFDATE: [95],
      DEFDBL: [95],
      DEFDEC: [95],
      DEFCUR: [95],
      DEFINT: [95],
      DEFLNG: [95],
      DEFOBJ: [95],
      DEFSNG: [95],
      DEFSTR: [95],
      DEFVAR: [95],
      DIM: [95],
      DO: [95],
      DOUBLE: [95],
      EACH: [95],
      ELSE: [95],
      ELSEIF: [95],
      END_ENUM: [95],
      END_FUNCTION: [95],
      END_IF: [95],
      END_PROPERTY: [95],
      END_SELECT: [95],
      END_SUB: [95],
      END_TYPE: [95],
      END_WITH: [95],
      END: [95],
      ENUM: [95],
      EQV: [95],
      ERASE: [95],
      EVENT: [95],
      EXIT_DO: [95],
      EXIT_FOR: [95],
      EXIT_FUNCTION: [95],
      EXIT_PROPERTY: [95],
      EXIT_SUB: [95],
      FALSE: [95],
      FRIEND: [95],
      FOR: [95],
      FUNCTION: [95],
      GET: [95],
      GLOBAL: [95],
      GOSUB: [95],
      GOTO: [95],
      IF: [95],
      IMPLEMENTS: [95],
      IN: [95],
      IS: [95],
      INTEGER: [95],
      LONG: [95],
      LOOP: [95],
      LEN: [95],
      LET: [95],
      LIB: [95],
      LIKE: [95],
      LSET: [95],
      MACRO_CONST: [95],
      MACRO_IF: [95],
      MACRO_ELSEIF: [95],
      MACRO_ELSE: [95],
      MACRO_END_IF: [95],
      MOD: [95],
      NEXT: [95],
      NEW: [95],
      NOT: [95],
      NOTHING: [95],
      NULL: [95],
      ON_ERROR: [95],
      ON_LOCAL_ERROR: [95],
      ON: [95],
      OPTIONAL: [95],
      OPTION_BASE: [95],
      OPTION_EXPLICIT: [95],
      OPTION_COMPARE: [95],
      OPTION_PRIVATE_MODULE: [95],
      OR: [95],
      PARAMARRAY: [95],
      PRESERVE: [95],
      PRIVATE: [95],
      PROPERTY_GET: [95],
      PROPERTY_LET: [95],
      PROPERTY_SET: [95],
      PTRSAFE: [95],
      PUBLIC: [95],
      RAISEEVENT: [95],
      REDIM: [95],
      RESET: [95],
      RESUME: [95],
      RETURN: [95],
      SELECT: [95],
      SET: [95],
      SINGLE: [95],
      STATIC: [95],
      STEP: [95],
      STOP: [95],
      STRING: [95],
      SUB: [95],
      THEN: [95],
      TO: [95],
      TRUE: [95],
      TYPEOF: [95],
      UNTIL: [95],
      VARIANT: [95],
      WEND: [95],
      WHILE: [95],
      WITH: [95],
      WITHEVENTS: [95],
      XOR: [95],
      IDENTIFIER: [95],
    },
    withStmt_group_35: {
      '.': [96],
      '!': [96],
      ALIAS: [96],
      AND: [96],
      ATTRIBUTE: [96],
      AS: [96],
      BEGIN: [96],
      BOOLEAN: [96],
      BYVAL: [96],
      BYREF: [96],
      BYTE: [96],
      CALL: [96],
      CASE: [96],
      CONST: [96],
      DECLARE: [96],
      DEFBOOL: [96],
      DEFBYTE: [96],
      DEFDATE: [96],
      DEFDBL: [96],
      DEFDEC: [96],
      DEFCUR: [96],
      DEFINT: [96],
      DEFLNG: [96],
      DEFOBJ: [96],
      DEFSNG: [96],
      DEFSTR: [96],
      DEFVAR: [96],
      DIM: [96],
      DO: [96],
      DOUBLE: [96],
      EACH: [96],
      ELSE: [96],
      ELSEIF: [96],
      END_ENUM: [96],
      END_FUNCTION: [96],
      END_IF: [96],
      END_PROPERTY: [96],
      END_SELECT: [96],
      END_SUB: [96],
      END_TYPE: [96],
      END_WITH: [96],
      END: [96],
      ENUM: [96],
      EQV: [96],
      ERASE: [96],
      EVENT: [96],
      EXIT_DO: [96],
      EXIT_FOR: [96],
      EXIT_FUNCTION: [96],
      EXIT_PROPERTY: [96],
      EXIT_SUB: [96],
      FALSE: [96],
      FRIEND: [96],
      FOR: [96],
      FUNCTION: [96],
      GET: [96],
      GLOBAL: [96],
      GOSUB: [96],
      GOTO: [96],
      IF: [96],
      IMPLEMENTS: [96],
      IN: [96],
      IS: [96],
      INTEGER: [96],
      LONG: [96],
      LOOP: [96],
      LEN: [96],
      LET: [96],
      LIB: [96],
      LIKE: [96],
      LSET: [96],
      MACRO_CONST: [96],
      MACRO_IF: [96],
      MACRO_ELSEIF: [96],
      MACRO_ELSE: [96],
      MACRO_END_IF: [96],
      MOD: [96],
      NEXT: [96],
      NEW: [96, 98],
      NOT: [96],
      NOTHING: [96],
      NULL: [96],
      ON_ERROR: [96],
      ON_LOCAL_ERROR: [96],
      ON: [96],
      OPTIONAL: [96],
      OPTION_BASE: [96],
      OPTION_EXPLICIT: [96],
      OPTION_COMPARE: [96],
      OPTION_PRIVATE_MODULE: [96],
      OR: [96],
      PARAMARRAY: [96],
      PRESERVE: [96],
      PRIVATE: [96],
      PROPERTY_GET: [96],
      PROPERTY_LET: [96],
      PROPERTY_SET: [96],
      PTRSAFE: [96],
      PUBLIC: [96],
      RAISEEVENT: [96],
      REDIM: [96],
      RESET: [96],
      RESUME: [96],
      RETURN: [96],
      SELECT: [96],
      SET: [96],
      SINGLE: [96],
      STATIC: [96],
      STEP: [96],
      STOP: [96],
      STRING: [96],
      SUB: [96],
      THEN: [96],
      TO: [96],
      TRUE: [96],
      TYPEOF: [96],
      UNTIL: [96],
      VARIANT: [96],
      WEND: [96],
      WHILE: [96],
      WITH: [96],
      WITHEVENTS: [96],
      XOR: [96],
      IDENTIFIER: [96],
    },
    withStmt_group_def_37: {
      NEW: [97],
    },
    withStmt: {
      WITH: [99],
    },
    variableListStmt_group_def_39: {
      ',': [100],
    },
    variableListStmt: {
      ALIAS: [101],
      AND: [101],
      ATTRIBUTE: [101],
      AS: [101],
      BEGIN: [101],
      BOOLEAN: [101],
      BYVAL: [101],
      BYREF: [101],
      BYTE: [101],
      CALL: [101],
      CASE: [101],
      CONST: [101],
      DECLARE: [101],
      DEFBOOL: [101],
      DEFBYTE: [101],
      DEFDATE: [101],
      DEFDBL: [101],
      DEFDEC: [101],
      DEFCUR: [101],
      DEFINT: [101],
      DEFLNG: [101],
      DEFOBJ: [101],
      DEFSNG: [101],
      DEFSTR: [101],
      DEFVAR: [101],
      DIM: [101],
      DO: [101],
      DOUBLE: [101],
      EACH: [101],
      ELSE: [101],
      ELSEIF: [101],
      END_ENUM: [101],
      END_FUNCTION: [101],
      END_IF: [101],
      END_PROPERTY: [101],
      END_SELECT: [101],
      END_SUB: [101],
      END_TYPE: [101],
      END_WITH: [101],
      END: [101],
      ENUM: [101],
      EQV: [101],
      ERASE: [101],
      EVENT: [101],
      EXIT_DO: [101],
      EXIT_FOR: [101],
      EXIT_FUNCTION: [101],
      EXIT_PROPERTY: [101],
      EXIT_SUB: [101],
      FALSE: [101],
      FRIEND: [101],
      FOR: [101],
      FUNCTION: [101],
      GET: [101],
      GLOBAL: [101],
      GOSUB: [101],
      GOTO: [101],
      IF: [101],
      IMPLEMENTS: [101],
      IN: [101],
      IS: [101],
      INTEGER: [101],
      LONG: [101],
      LOOP: [101],
      LEN: [101],
      LET: [101],
      LIB: [101],
      LIKE: [101],
      LSET: [101],
      MACRO_CONST: [101],
      MACRO_IF: [101],
      MACRO_ELSEIF: [101],
      MACRO_ELSE: [101],
      MACRO_END_IF: [101],
      MOD: [101],
      NEXT: [101],
      NEW: [101],
      NOT: [101],
      NOTHING: [101],
      NULL: [101],
      ON_ERROR: [101],
      ON_LOCAL_ERROR: [101],
      ON: [101],
      OPTIONAL: [101],
      OPTION_BASE: [101],
      OPTION_EXPLICIT: [101],
      OPTION_COMPARE: [101],
      OPTION_PRIVATE_MODULE: [101],
      OR: [101],
      PARAMARRAY: [101],
      PRESERVE: [101],
      PRIVATE: [101],
      PROPERTY_GET: [101],
      PROPERTY_LET: [101],
      PROPERTY_SET: [101],
      PTRSAFE: [101],
      PUBLIC: [101],
      RAISEEVENT: [101],
      REDIM: [101],
      RESET: [101],
      RESUME: [101],
      RETURN: [101],
      SELECT: [101],
      SET: [101],
      SINGLE: [101],
      STATIC: [101],
      STEP: [101],
      STOP: [101],
      STRING: [101],
      SUB: [101],
      THEN: [101],
      TO: [101],
      TRUE: [101],
      TYPEOF: [101],
      UNTIL: [101],
      VARIANT: [101],
      WEND: [101],
      WHILE: [101],
      WITH: [101],
      WITHEVENTS: [101],
      XOR: [101],
      IDENTIFIER: [101],
    },
    variableSubStmt_group_def_41: {
      LPAREN: [102],
    },
    variableSubStmt: {
      ALIAS: [103],
      AND: [103],
      ATTRIBUTE: [103],
      AS: [103],
      BEGIN: [103],
      BOOLEAN: [103],
      BYVAL: [103],
      BYREF: [103],
      BYTE: [103],
      CALL: [103],
      CASE: [103],
      CONST: [103],
      DECLARE: [103],
      DEFBOOL: [103],
      DEFBYTE: [103],
      DEFDATE: [103],
      DEFDBL: [103],
      DEFDEC: [103],
      DEFCUR: [103],
      DEFINT: [103],
      DEFLNG: [103],
      DEFOBJ: [103],
      DEFSNG: [103],
      DEFSTR: [103],
      DEFVAR: [103],
      DIM: [103],
      DO: [103],
      DOUBLE: [103],
      EACH: [103],
      ELSE: [103],
      ELSEIF: [103],
      END_ENUM: [103],
      END_FUNCTION: [103],
      END_IF: [103],
      END_PROPERTY: [103],
      END_SELECT: [103],
      END_SUB: [103],
      END_TYPE: [103],
      END_WITH: [103],
      END: [103],
      ENUM: [103],
      EQV: [103],
      ERASE: [103],
      EVENT: [103],
      EXIT_DO: [103],
      EXIT_FOR: [103],
      EXIT_FUNCTION: [103],
      EXIT_PROPERTY: [103],
      EXIT_SUB: [103],
      FALSE: [103],
      FRIEND: [103],
      FOR: [103],
      FUNCTION: [103],
      GET: [103],
      GLOBAL: [103],
      GOSUB: [103],
      GOTO: [103],
      IF: [103],
      IMPLEMENTS: [103],
      IN: [103],
      IS: [103],
      INTEGER: [103],
      LONG: [103],
      LOOP: [103],
      LEN: [103],
      LET: [103],
      LIB: [103],
      LIKE: [103],
      LSET: [103],
      MACRO_CONST: [103],
      MACRO_IF: [103],
      MACRO_ELSEIF: [103],
      MACRO_ELSE: [103],
      MACRO_END_IF: [103],
      MOD: [103],
      NEXT: [103],
      NEW: [103],
      NOT: [103],
      NOTHING: [103],
      NULL: [103],
      ON_ERROR: [103],
      ON_LOCAL_ERROR: [103],
      ON: [103],
      OPTIONAL: [103],
      OPTION_BASE: [103],
      OPTION_EXPLICIT: [103],
      OPTION_COMPARE: [103],
      OPTION_PRIVATE_MODULE: [103],
      OR: [103],
      PARAMARRAY: [103],
      PRESERVE: [103],
      PRIVATE: [103],
      PROPERTY_GET: [103],
      PROPERTY_LET: [103],
      PROPERTY_SET: [103],
      PTRSAFE: [103],
      PUBLIC: [103],
      RAISEEVENT: [103],
      REDIM: [103],
      RESET: [103],
      RESUME: [103],
      RETURN: [103],
      SELECT: [103],
      SET: [103],
      SINGLE: [103],
      STATIC: [103],
      STEP: [103],
      STOP: [103],
      STRING: [103],
      SUB: [103],
      THEN: [103],
      TO: [103],
      TRUE: [103],
      TYPEOF: [103],
      UNTIL: [103],
      VARIANT: [103],
      WEND: [103],
      WHILE: [103],
      WITH: [103],
      WITHEVENTS: [103],
      XOR: [103],
      IDENTIFIER: [103],
    },
    indexes: {
      INTEGERLITERAL: [104],
      STRINGLITERAL: [104],
      NOTHING: [104],
      NULL: [104],
      TRUE: [104],
      FALSE: [104],
      '.': [104],
      '!': [104],
      ALIAS: [104],
      AND: [104],
      ATTRIBUTE: [104],
      AS: [104],
      BEGIN: [104],
      BOOLEAN: [104],
      BYVAL: [104],
      BYREF: [104],
      BYTE: [104],
      CALL: [104],
      CASE: [104],
      CONST: [104],
      DECLARE: [104],
      DEFBOOL: [104],
      DEFBYTE: [104],
      DEFDATE: [104],
      DEFDBL: [104],
      DEFDEC: [104],
      DEFCUR: [104],
      DEFINT: [104],
      DEFLNG: [104],
      DEFOBJ: [104],
      DEFSNG: [104],
      DEFSTR: [104],
      DEFVAR: [104],
      DIM: [104],
      DO: [104],
      DOUBLE: [104],
      EACH: [104],
      ELSE: [104],
      ELSEIF: [104],
      END_ENUM: [104],
      END_FUNCTION: [104],
      END_IF: [104],
      END_PROPERTY: [104],
      END_SELECT: [104],
      END_SUB: [104],
      END_TYPE: [104],
      END_WITH: [104],
      END: [104],
      ENUM: [104],
      EQV: [104],
      ERASE: [104],
      EVENT: [104],
      EXIT_DO: [104],
      EXIT_FOR: [104],
      EXIT_FUNCTION: [104],
      EXIT_PROPERTY: [104],
      EXIT_SUB: [104],
      FRIEND: [104],
      FOR: [104],
      FUNCTION: [104],
      GET: [104],
      GLOBAL: [104],
      GOSUB: [104],
      GOTO: [104],
      IF: [104],
      IMPLEMENTS: [104],
      IN: [104],
      IS: [104],
      INTEGER: [104],
      LONG: [104],
      LOOP: [104],
      LEN: [104],
      LET: [104],
      LIB: [104],
      LIKE: [104],
      LSET: [104],
      MACRO_CONST: [104],
      MACRO_IF: [104],
      MACRO_ELSEIF: [104],
      MACRO_ELSE: [104],
      MACRO_END_IF: [104],
      MOD: [104],
      NEXT: [104],
      NEW: [104],
      NOT: [104],
      ON_ERROR: [104],
      ON_LOCAL_ERROR: [104],
      ON: [104],
      OPTIONAL: [104],
      OPTION_BASE: [104],
      OPTION_EXPLICIT: [104],
      OPTION_COMPARE: [104],
      OPTION_PRIVATE_MODULE: [104],
      OR: [104],
      PARAMARRAY: [104],
      PRESERVE: [104],
      PRIVATE: [104],
      PROPERTY_GET: [104],
      PROPERTY_LET: [104],
      PROPERTY_SET: [104],
      PTRSAFE: [104],
      PUBLIC: [104],
      RAISEEVENT: [104],
      REDIM: [104],
      RESET: [104],
      RESUME: [104],
      RETURN: [104],
      SELECT: [104],
      SET: [104],
      SINGLE: [104],
      STATIC: [104],
      STEP: [104],
      STOP: [104],
      STRING: [104],
      SUB: [104],
      THEN: [104],
      TO: [104],
      TYPEOF: [104],
      UNTIL: [104],
      VARIANT: [104],
      WEND: [104],
      WHILE: [104],
      WITH: [104],
      WITHEVENTS: [104],
      XOR: [104],
      IDENTIFIER: [104],
    },
    subscript__group_def_44: {
      INTEGERLITERAL: [105],
      STRINGLITERAL: [105],
      NOTHING: [105],
      NULL: [105],
      TRUE: [105],
      FALSE: [105],
      '.': [105],
      '!': [105],
      ALIAS: [105],
      AND: [105],
      ATTRIBUTE: [105],
      AS: [105],
      BEGIN: [105],
      BOOLEAN: [105],
      BYVAL: [105],
      BYREF: [105],
      BYTE: [105],
      CALL: [105],
      CASE: [105],
      CONST: [105],
      DECLARE: [105],
      DEFBOOL: [105],
      DEFBYTE: [105],
      DEFDATE: [105],
      DEFDBL: [105],
      DEFDEC: [105],
      DEFCUR: [105],
      DEFINT: [105],
      DEFLNG: [105],
      DEFOBJ: [105],
      DEFSNG: [105],
      DEFSTR: [105],
      DEFVAR: [105],
      DIM: [105],
      DO: [105],
      DOUBLE: [105],
      EACH: [105],
      ELSE: [105],
      ELSEIF: [105],
      END_ENUM: [105],
      END_FUNCTION: [105],
      END_IF: [105],
      END_PROPERTY: [105],
      END_SELECT: [105],
      END_SUB: [105],
      END_TYPE: [105],
      END_WITH: [105],
      END: [105],
      ENUM: [105],
      EQV: [105],
      ERASE: [105],
      EVENT: [105],
      EXIT_DO: [105],
      EXIT_FOR: [105],
      EXIT_FUNCTION: [105],
      EXIT_PROPERTY: [105],
      EXIT_SUB: [105],
      FRIEND: [105],
      FOR: [105],
      FUNCTION: [105],
      GET: [105],
      GLOBAL: [105],
      GOSUB: [105],
      GOTO: [105],
      IF: [105],
      IMPLEMENTS: [105],
      IN: [105],
      IS: [105],
      INTEGER: [105],
      LONG: [105],
      LOOP: [105],
      LEN: [105],
      LET: [105],
      LIB: [105],
      LIKE: [105],
      LSET: [105],
      MACRO_CONST: [105],
      MACRO_IF: [105],
      MACRO_ELSEIF: [105],
      MACRO_ELSE: [105],
      MACRO_END_IF: [105],
      MOD: [105],
      NEXT: [105],
      NEW: [105],
      NOT: [105],
      ON_ERROR: [105],
      ON_LOCAL_ERROR: [105],
      ON: [105],
      OPTIONAL: [105],
      OPTION_BASE: [105],
      OPTION_EXPLICIT: [105],
      OPTION_COMPARE: [105],
      OPTION_PRIVATE_MODULE: [105],
      OR: [105],
      PARAMARRAY: [105],
      PRESERVE: [105],
      PRIVATE: [105],
      PROPERTY_GET: [105],
      PROPERTY_LET: [105],
      PROPERTY_SET: [105],
      PTRSAFE: [105],
      PUBLIC: [105],
      RAISEEVENT: [105],
      REDIM: [105],
      RESET: [105],
      RESUME: [105],
      RETURN: [105],
      SELECT: [105],
      SET: [105],
      SINGLE: [105],
      STATIC: [105],
      STEP: [105],
      STOP: [105],
      STRING: [105],
      SUB: [105],
      THEN: [105],
      TO: [105],
      TYPEOF: [105],
      UNTIL: [105],
      VARIANT: [105],
      WEND: [105],
      WHILE: [105],
      WITH: [105],
      WITHEVENTS: [105],
      XOR: [105],
      IDENTIFIER: [105],
    },
    subscript_: {
      INTEGERLITERAL: [106, 109],
      STRINGLITERAL: [106, 109],
      NOTHING: [106, 109],
      NULL: [106, 109],
      TRUE: [106, 109],
      FALSE: [106, 109],
      '.': [106, 109],
      '!': [106, 109],
      ALIAS: [106, 109],
      AND: [106, 109],
      ATTRIBUTE: [106, 109],
      AS: [106, 109],
      BEGIN: [106, 109],
      BOOLEAN: [106, 109],
      BYVAL: [106, 109],
      BYREF: [106, 109],
      BYTE: [106, 109],
      CALL: [106, 109],
      CASE: [106, 109],
      CONST: [106, 109],
      DECLARE: [106, 109],
      DEFBOOL: [106, 109],
      DEFBYTE: [106, 109],
      DEFDATE: [106, 109],
      DEFDBL: [106, 109],
      DEFDEC: [106, 109],
      DEFCUR: [106, 109],
      DEFINT: [106, 109],
      DEFLNG: [106, 109],
      DEFOBJ: [106, 109],
      DEFSNG: [106, 109],
      DEFSTR: [106, 109],
      DEFVAR: [106, 109],
      DIM: [106, 109],
      DO: [106, 109],
      DOUBLE: [106, 109],
      EACH: [106, 109],
      ELSE: [106, 109],
      ELSEIF: [106, 109],
      END_ENUM: [106, 109],
      END_FUNCTION: [106, 109],
      END_IF: [106, 109],
      END_PROPERTY: [106, 109],
      END_SELECT: [106, 109],
      END_SUB: [106, 109],
      END_TYPE: [106, 109],
      END_WITH: [106, 109],
      END: [106, 109],
      ENUM: [106, 109],
      EQV: [106, 109],
      ERASE: [106, 109],
      EVENT: [106, 109],
      EXIT_DO: [106, 109],
      EXIT_FOR: [106, 109],
      EXIT_FUNCTION: [106, 109],
      EXIT_PROPERTY: [106, 109],
      EXIT_SUB: [106, 109],
      FRIEND: [106, 109],
      FOR: [106, 109],
      FUNCTION: [106, 109],
      GET: [106, 109],
      GLOBAL: [106, 109],
      GOSUB: [106, 109],
      GOTO: [106, 109],
      IF: [106, 109],
      IMPLEMENTS: [106, 109],
      IN: [106, 109],
      IS: [106, 109],
      INTEGER: [106, 109],
      LONG: [106, 109],
      LOOP: [106, 109],
      LEN: [106, 109],
      LET: [106, 109],
      LIB: [106, 109],
      LIKE: [106, 109],
      LSET: [106, 109],
      MACRO_CONST: [106, 109],
      MACRO_IF: [106, 109],
      MACRO_ELSEIF: [106, 109],
      MACRO_ELSE: [106, 109],
      MACRO_END_IF: [106, 109],
      MOD: [106, 109],
      NEXT: [106, 109],
      NEW: [106, 109],
      NOT: [106, 109],
      ON_ERROR: [106, 109],
      ON_LOCAL_ERROR: [106, 109],
      ON: [106, 109],
      OPTIONAL: [106, 109],
      OPTION_BASE: [106, 109],
      OPTION_EXPLICIT: [106, 109],
      OPTION_COMPARE: [106, 109],
      OPTION_PRIVATE_MODULE: [106, 109],
      OR: [106, 109],
      PARAMARRAY: [106, 109],
      PRESERVE: [106, 109],
      PRIVATE: [106, 109],
      PROPERTY_GET: [106, 109],
      PROPERTY_LET: [106, 109],
      PROPERTY_SET: [106, 109],
      PTRSAFE: [106, 109],
      PUBLIC: [106, 109],
      RAISEEVENT: [106, 109],
      REDIM: [106, 109],
      RESET: [106, 109],
      RESUME: [106, 109],
      RETURN: [106, 109],
      SELECT: [106, 109],
      SET: [106, 109],
      SINGLE: [106, 109],
      STATIC: [106, 109],
      STEP: [106, 109],
      STOP: [106, 109],
      STRING: [106, 109],
      SUB: [106, 109],
      THEN: [106, 109],
      TO: [106, 109],
      TYPEOF: [106, 109],
      UNTIL: [106, 109],
      VARIANT: [106, 109],
      WEND: [106, 109],
      WHILE: [106, 109],
      WITH: [106, 109],
      WITHEVENTS: [106, 109],
      XOR: [106, 109],
      IDENTIFIER: [106, 109],
    },
    subscripts_group_def_46: {
      ',': [107],
    },
    subscripts: {
      INTEGERLITERAL: [108],
      STRINGLITERAL: [108],
      NOTHING: [108],
      NULL: [108],
      TRUE: [108],
      FALSE: [108],
      NEW: [108],
      ALIAS: [108],
      AND: [108],
      ATTRIBUTE: [108],
      AS: [108],
      BEGIN: [108],
      BOOLEAN: [108],
      BYVAL: [108],
      BYREF: [108],
      BYTE: [108],
      CALL: [108],
      CASE: [108],
      CONST: [108],
      DECLARE: [108],
      DEFBOOL: [108],
      DEFBYTE: [108],
      DEFDATE: [108],
      DEFDBL: [108],
      DEFDEC: [108],
      DEFCUR: [108],
      DEFINT: [108],
      DEFLNG: [108],
      DEFOBJ: [108],
      DEFSNG: [108],
      DEFSTR: [108],
      DEFVAR: [108],
      DIM: [108],
      DO: [108],
      DOUBLE: [108],
      EACH: [108],
      ELSE: [108],
      ELSEIF: [108],
      END_ENUM: [108],
      END_FUNCTION: [108],
      END_IF: [108],
      END_PROPERTY: [108],
      END_SELECT: [108],
      END_SUB: [108],
      END_TYPE: [108],
      END_WITH: [108],
      END: [108],
      ENUM: [108],
      EQV: [108],
      ERASE: [108],
      EVENT: [108],
      EXIT_DO: [108],
      EXIT_FOR: [108],
      EXIT_FUNCTION: [108],
      EXIT_PROPERTY: [108],
      EXIT_SUB: [108],
      FRIEND: [108],
      FOR: [108],
      FUNCTION: [108],
      GET: [108],
      GLOBAL: [108],
      GOSUB: [108],
      GOTO: [108],
      IF: [108],
      IMPLEMENTS: [108],
      IN: [108],
      IS: [108],
      INTEGER: [108],
      LONG: [108],
      LOOP: [108],
      LEN: [108],
      LET: [108],
      LIB: [108],
      LIKE: [108],
      LSET: [108],
      MACRO_CONST: [108],
      MACRO_IF: [108],
      MACRO_ELSEIF: [108],
      MACRO_ELSE: [108],
      MACRO_END_IF: [108],
      MOD: [108],
      NEXT: [108],
      NOT: [108],
      ON_ERROR: [108],
      ON_LOCAL_ERROR: [108],
      ON: [108],
      OPTIONAL: [108],
      OPTION_BASE: [108],
      OPTION_EXPLICIT: [108],
      OPTION_COMPARE: [108],
      OPTION_PRIVATE_MODULE: [108],
      OR: [108],
      PARAMARRAY: [108],
      PRESERVE: [108],
      PRIVATE: [108],
      PROPERTY_GET: [108],
      PROPERTY_LET: [108],
      PROPERTY_SET: [108],
      PTRSAFE: [108],
      PUBLIC: [108],
      RAISEEVENT: [108],
      REDIM: [108],
      RESET: [108],
      RESUME: [108],
      RETURN: [108],
      SELECT: [108],
      SET: [108],
      SINGLE: [108],
      STATIC: [108],
      STEP: [108],
      STOP: [108],
      STRING: [108],
      SUB: [108],
      THEN: [108],
      TO: [108],
      TYPEOF: [108],
      UNTIL: [108],
      VARIANT: [108],
      WEND: [108],
      WHILE: [108],
      WITH: [108],
      WITHEVENTS: [108],
      XOR: [108],
      IDENTIFIER: [108],
      '.': [108],
      '!': [108],
    },
    argList_group_def_50: {
      ',': [110],
    },
    argList_group_def_51: {
      OPTIONAL: [111],
      PARAMARRAY: [111],
      ALIAS: [111],
      AND: [111],
      ATTRIBUTE: [111],
      AS: [111],
      BEGIN: [111],
      BOOLEAN: [111],
      BYVAL: [111],
      BYREF: [111],
      BYTE: [111],
      CALL: [111],
      CASE: [111],
      CONST: [111],
      DECLARE: [111],
      DEFBOOL: [111],
      DEFBYTE: [111],
      DEFDATE: [111],
      DEFDBL: [111],
      DEFDEC: [111],
      DEFCUR: [111],
      DEFINT: [111],
      DEFLNG: [111],
      DEFOBJ: [111],
      DEFSNG: [111],
      DEFSTR: [111],
      DEFVAR: [111],
      DIM: [111],
      DO: [111],
      DOUBLE: [111],
      EACH: [111],
      ELSE: [111],
      ELSEIF: [111],
      END_ENUM: [111],
      END_FUNCTION: [111],
      END_IF: [111],
      END_PROPERTY: [111],
      END_SELECT: [111],
      END_SUB: [111],
      END_TYPE: [111],
      END_WITH: [111],
      END: [111],
      ENUM: [111],
      EQV: [111],
      ERASE: [111],
      EVENT: [111],
      EXIT_DO: [111],
      EXIT_FOR: [111],
      EXIT_FUNCTION: [111],
      EXIT_PROPERTY: [111],
      EXIT_SUB: [111],
      FALSE: [111],
      FRIEND: [111],
      FOR: [111],
      FUNCTION: [111],
      GET: [111],
      GLOBAL: [111],
      GOSUB: [111],
      GOTO: [111],
      IF: [111],
      IMPLEMENTS: [111],
      IN: [111],
      IS: [111],
      INTEGER: [111],
      LONG: [111],
      LOOP: [111],
      LEN: [111],
      LET: [111],
      LIB: [111],
      LIKE: [111],
      LSET: [111],
      MACRO_CONST: [111],
      MACRO_IF: [111],
      MACRO_ELSEIF: [111],
      MACRO_ELSE: [111],
      MACRO_END_IF: [111],
      MOD: [111],
      NEXT: [111],
      NEW: [111],
      NOT: [111],
      NOTHING: [111],
      NULL: [111],
      ON_ERROR: [111],
      ON_LOCAL_ERROR: [111],
      ON: [111],
      OPTION_BASE: [111],
      OPTION_EXPLICIT: [111],
      OPTION_COMPARE: [111],
      OPTION_PRIVATE_MODULE: [111],
      OR: [111],
      PRESERVE: [111],
      PRIVATE: [111],
      PROPERTY_GET: [111],
      PROPERTY_LET: [111],
      PROPERTY_SET: [111],
      PTRSAFE: [111],
      PUBLIC: [111],
      RAISEEVENT: [111],
      REDIM: [111],
      RESET: [111],
      RESUME: [111],
      RETURN: [111],
      SELECT: [111],
      SET: [111],
      SINGLE: [111],
      STATIC: [111],
      STEP: [111],
      STOP: [111],
      STRING: [111],
      SUB: [111],
      THEN: [111],
      TO: [111],
      TRUE: [111],
      TYPEOF: [111],
      UNTIL: [111],
      VARIANT: [111],
      WEND: [111],
      WHILE: [111],
      WITH: [111],
      WITHEVENTS: [111],
      XOR: [111],
      IDENTIFIER: [111],
    },
    argList: {
      LPAREN: [112],
    },
    valueStmt: {
      INTEGERLITERAL: [113],
      STRINGLITERAL: [113],
      NOTHING: [113, 114, 116],
      NULL: [113, 114, 116],
      TRUE: [113, 114, 116],
      FALSE: [113, 114, 116],
      '.': [114],
      '!': [114],
      ALIAS: [114, 116],
      AND: [114, 116],
      ATTRIBUTE: [114, 116],
      AS: [114, 116],
      BEGIN: [114, 116],
      BOOLEAN: [114, 116],
      BYVAL: [114, 116],
      BYREF: [114, 116],
      BYTE: [114, 116],
      CALL: [114, 116],
      CASE: [114, 116],
      CONST: [114, 116],
      DECLARE: [114, 116],
      DEFBOOL: [114, 116],
      DEFBYTE: [114, 116],
      DEFDATE: [114, 116],
      DEFDBL: [114, 116],
      DEFDEC: [114, 116],
      DEFCUR: [114, 116],
      DEFINT: [114, 116],
      DEFLNG: [114, 116],
      DEFOBJ: [114, 116],
      DEFSNG: [114, 116],
      DEFSTR: [114, 116],
      DEFVAR: [114, 116],
      DIM: [114, 116],
      DO: [114, 116],
      DOUBLE: [114, 116],
      EACH: [114, 116],
      ELSE: [114, 116],
      ELSEIF: [114, 116],
      END_ENUM: [114, 116],
      END_FUNCTION: [114, 116],
      END_IF: [114, 116],
      END_PROPERTY: [114, 116],
      END_SELECT: [114, 116],
      END_SUB: [114, 116],
      END_TYPE: [114, 116],
      END_WITH: [114, 116],
      END: [114, 116],
      ENUM: [114, 116],
      EQV: [114, 116],
      ERASE: [114, 116],
      EVENT: [114, 116],
      EXIT_DO: [114, 116],
      EXIT_FOR: [114, 116],
      EXIT_FUNCTION: [114, 116],
      EXIT_PROPERTY: [114, 116],
      EXIT_SUB: [114, 116],
      FRIEND: [114, 116],
      FOR: [114, 116],
      FUNCTION: [114, 116],
      GET: [114, 116],
      GLOBAL: [114, 116],
      GOSUB: [114, 116],
      GOTO: [114, 116],
      IF: [114, 116],
      IMPLEMENTS: [114, 116],
      IN: [114, 116],
      IS: [114, 116],
      INTEGER: [114, 116],
      LONG: [114, 116],
      LOOP: [114, 116],
      LEN: [114, 116],
      LET: [114, 116],
      LIB: [114, 116],
      LIKE: [114, 116],
      LSET: [114, 116],
      MACRO_CONST: [114, 116],
      MACRO_IF: [114, 116],
      MACRO_ELSEIF: [114, 116],
      MACRO_ELSE: [114, 116],
      MACRO_END_IF: [114, 116],
      MOD: [114, 116],
      NEXT: [114, 116],
      NEW: [114, 115, 116],
      NOT: [114, 116],
      ON_ERROR: [114, 116],
      ON_LOCAL_ERROR: [114, 116],
      ON: [114, 116],
      OPTIONAL: [114, 116],
      OPTION_BASE: [114, 116],
      OPTION_EXPLICIT: [114, 116],
      OPTION_COMPARE: [114, 116],
      OPTION_PRIVATE_MODULE: [114, 116],
      OR: [114, 116],
      PARAMARRAY: [114, 116],
      PRESERVE: [114, 116],
      PRIVATE: [114, 116],
      PROPERTY_GET: [114, 116],
      PROPERTY_LET: [114, 116],
      PROPERTY_SET: [114, 116],
      PTRSAFE: [114, 116],
      PUBLIC: [114, 116],
      RAISEEVENT: [114, 116],
      REDIM: [114, 116],
      RESET: [114, 116],
      RESUME: [114, 116],
      RETURN: [114, 116],
      SELECT: [114, 116],
      SET: [114, 116],
      SINGLE: [114, 116],
      STATIC: [114, 116],
      STEP: [114, 116],
      STOP: [114, 116],
      STRING: [114, 116],
      SUB: [114, 116],
      THEN: [114, 116],
      TO: [114, 116],
      TYPEOF: [114, 116],
      UNTIL: [114, 116],
      VARIANT: [114, 116],
      WEND: [114, 116],
      WHILE: [114, 116],
      WITH: [114, 116],
      WITHEVENTS: [114, 116],
      XOR: [114, 116],
      IDENTIFIER: [114, 116],
    },
    implicitCallStmt_InStmt: {
      ALIAS: [117, 118, 119],
      AND: [117, 118, 119],
      ATTRIBUTE: [117, 118, 119],
      AS: [117, 118, 119],
      BEGIN: [117, 118, 119],
      BOOLEAN: [117, 118, 119],
      BYVAL: [117, 118, 119],
      BYREF: [117, 118, 119],
      BYTE: [117, 118, 119],
      CALL: [117, 118, 119],
      CASE: [117, 118, 119],
      CONST: [117, 118, 119],
      DECLARE: [117, 118, 119],
      DEFBOOL: [117, 118, 119],
      DEFBYTE: [117, 118, 119],
      DEFDATE: [117, 118, 119],
      DEFDBL: [117, 118, 119],
      DEFDEC: [117, 118, 119],
      DEFCUR: [117, 118, 119],
      DEFINT: [117, 118, 119],
      DEFLNG: [117, 118, 119],
      DEFOBJ: [117, 118, 119],
      DEFSNG: [117, 118, 119],
      DEFSTR: [117, 118, 119],
      DEFVAR: [117, 118, 119],
      DIM: [117, 118, 119],
      DO: [117, 118, 119],
      DOUBLE: [117, 118, 119],
      EACH: [117, 118, 119],
      ELSE: [117, 118, 119],
      ELSEIF: [117, 118, 119],
      END_ENUM: [117, 118, 119],
      END_FUNCTION: [117, 118, 119],
      END_IF: [117, 118, 119],
      END_PROPERTY: [117, 118, 119],
      END_SELECT: [117, 118, 119],
      END_SUB: [117, 118, 119],
      END_TYPE: [117, 118, 119],
      END_WITH: [117, 118, 119],
      END: [117, 118, 119],
      ENUM: [117, 118, 119],
      EQV: [117, 118, 119],
      ERASE: [117, 118, 119],
      EVENT: [117, 118, 119],
      EXIT_DO: [117, 118, 119],
      EXIT_FOR: [117, 118, 119],
      EXIT_FUNCTION: [117, 118, 119],
      EXIT_PROPERTY: [117, 118, 119],
      EXIT_SUB: [117, 118, 119],
      FALSE: [117, 118, 119],
      FRIEND: [117, 118, 119],
      FOR: [117, 118, 119],
      FUNCTION: [117, 118, 119],
      GET: [117, 118, 119],
      GLOBAL: [117, 118, 119],
      GOSUB: [117, 118, 119],
      GOTO: [117, 118, 119],
      IF: [117, 118, 119],
      IMPLEMENTS: [117, 118, 119],
      IN: [117, 118, 119],
      IS: [117, 118, 119],
      INTEGER: [117, 118, 119],
      LONG: [117, 118, 119],
      LOOP: [117, 118, 119],
      LEN: [117, 118, 119],
      LET: [117, 118, 119],
      LIB: [117, 118, 119],
      LIKE: [117, 118, 119],
      LSET: [117, 118, 119],
      MACRO_CONST: [117, 118, 119],
      MACRO_IF: [117, 118, 119],
      MACRO_ELSEIF: [117, 118, 119],
      MACRO_ELSE: [117, 118, 119],
      MACRO_END_IF: [117, 118, 119],
      MOD: [117, 118, 119],
      NEXT: [117, 118, 119],
      NEW: [117, 118, 119],
      NOT: [117, 118, 119],
      NOTHING: [117, 118, 119],
      NULL: [117, 118, 119],
      ON_ERROR: [117, 118, 119],
      ON_LOCAL_ERROR: [117, 118, 119],
      ON: [117, 118, 119],
      OPTIONAL: [117, 118, 119],
      OPTION_BASE: [117, 118, 119],
      OPTION_EXPLICIT: [117, 118, 119],
      OPTION_COMPARE: [117, 118, 119],
      OPTION_PRIVATE_MODULE: [117, 118, 119],
      OR: [117, 118, 119],
      PARAMARRAY: [117, 118, 119],
      PRESERVE: [117, 118, 119],
      PRIVATE: [117, 118, 119],
      PROPERTY_GET: [117, 118, 119],
      PROPERTY_LET: [117, 118, 119],
      PROPERTY_SET: [117, 118, 119],
      PTRSAFE: [117, 118, 119],
      PUBLIC: [117, 118, 119],
      RAISEEVENT: [117, 118, 119],
      REDIM: [117, 118, 119],
      RESET: [117, 118, 119],
      RESUME: [117, 118, 119],
      RETURN: [117, 118, 119],
      SELECT: [117, 118, 119],
      SET: [117, 118, 119],
      SINGLE: [117, 118, 119],
      STATIC: [117, 118, 119],
      STEP: [117, 118, 119],
      STOP: [117, 118, 119],
      STRING: [117, 118, 119],
      SUB: [117, 118, 119],
      THEN: [117, 118, 119],
      TO: [117, 118, 119],
      TRUE: [117, 118, 119],
      TYPEOF: [117, 118, 119],
      UNTIL: [117, 118, 119],
      VARIANT: [117, 118, 119],
      WEND: [117, 118, 119],
      WHILE: [117, 118, 119],
      WITH: [117, 118, 119],
      WITHEVENTS: [117, 118, 119],
      XOR: [117, 118, 119],
      IDENTIFIER: [117, 118, 119],
      '.': [117],
      '!': [117],
    },
    iCS_S_MembersCall_group_def_53: {
      ALIAS: [120],
      AND: [120],
      ATTRIBUTE: [120],
      AS: [120],
      BEGIN: [120],
      BOOLEAN: [120],
      BYVAL: [120],
      BYREF: [120],
      BYTE: [120],
      CALL: [120],
      CASE: [120],
      CONST: [120],
      DECLARE: [120],
      DEFBOOL: [120],
      DEFBYTE: [120],
      DEFDATE: [120],
      DEFDBL: [120],
      DEFDEC: [120],
      DEFCUR: [120],
      DEFINT: [120],
      DEFLNG: [120],
      DEFOBJ: [120],
      DEFSNG: [120],
      DEFSTR: [120],
      DEFVAR: [120],
      DIM: [120],
      DO: [120],
      DOUBLE: [120],
      EACH: [120],
      ELSE: [120],
      ELSEIF: [120],
      END_ENUM: [120],
      END_FUNCTION: [120],
      END_IF: [120],
      END_PROPERTY: [120],
      END_SELECT: [120],
      END_SUB: [120],
      END_TYPE: [120],
      END_WITH: [120],
      END: [120],
      ENUM: [120],
      EQV: [120],
      ERASE: [120],
      EVENT: [120],
      EXIT_DO: [120],
      EXIT_FOR: [120],
      EXIT_FUNCTION: [120],
      EXIT_PROPERTY: [120],
      EXIT_SUB: [120],
      FALSE: [120],
      FRIEND: [120],
      FOR: [120],
      FUNCTION: [120],
      GET: [120],
      GLOBAL: [120],
      GOSUB: [120],
      GOTO: [120],
      IF: [120],
      IMPLEMENTS: [120],
      IN: [120],
      IS: [120],
      INTEGER: [120],
      LONG: [120],
      LOOP: [120],
      LEN: [120],
      LET: [120],
      LIB: [120],
      LIKE: [120],
      LSET: [120],
      MACRO_CONST: [120],
      MACRO_IF: [120],
      MACRO_ELSEIF: [120],
      MACRO_ELSE: [120],
      MACRO_END_IF: [120],
      MOD: [120],
      NEXT: [120],
      NEW: [120],
      NOT: [120],
      NOTHING: [120],
      NULL: [120],
      ON_ERROR: [120],
      ON_LOCAL_ERROR: [120],
      ON: [120],
      OPTIONAL: [120],
      OPTION_BASE: [120],
      OPTION_EXPLICIT: [120],
      OPTION_COMPARE: [120],
      OPTION_PRIVATE_MODULE: [120],
      OR: [120],
      PARAMARRAY: [120],
      PRESERVE: [120],
      PRIVATE: [120],
      PROPERTY_GET: [120],
      PROPERTY_LET: [120],
      PROPERTY_SET: [120],
      PTRSAFE: [120],
      PUBLIC: [120],
      RAISEEVENT: [120],
      REDIM: [120],
      RESET: [120],
      RESUME: [120],
      RETURN: [120],
      SELECT: [120],
      SET: [120],
      SINGLE: [120],
      STATIC: [120],
      STEP: [120],
      STOP: [120],
      STRING: [120],
      SUB: [120],
      THEN: [120],
      TO: [120],
      TRUE: [120],
      TYPEOF: [120],
      UNTIL: [120],
      VARIANT: [120],
      WEND: [120],
      WHILE: [120],
      WITH: [120],
      WITHEVENTS: [120],
      XOR: [120],
      IDENTIFIER: [120],
    },
    iCS_S_MembersCall_group_52: {
      ALIAS: [121, 123],
      AND: [121, 123],
      ATTRIBUTE: [121, 123],
      AS: [121, 123],
      BEGIN: [121, 123],
      BOOLEAN: [121, 123],
      BYVAL: [121, 123],
      BYREF: [121, 123],
      BYTE: [121, 123],
      CALL: [121, 123],
      CASE: [121, 123],
      CONST: [121, 123],
      DECLARE: [121, 123],
      DEFBOOL: [121, 123],
      DEFBYTE: [121, 123],
      DEFDATE: [121, 123],
      DEFDBL: [121, 123],
      DEFDEC: [121, 123],
      DEFCUR: [121, 123],
      DEFINT: [121, 123],
      DEFLNG: [121, 123],
      DEFOBJ: [121, 123],
      DEFSNG: [121, 123],
      DEFSTR: [121, 123],
      DEFVAR: [121, 123],
      DIM: [121, 123],
      DO: [121, 123],
      DOUBLE: [121, 123],
      EACH: [121, 123],
      ELSE: [121, 123],
      ELSEIF: [121, 123],
      END_ENUM: [121, 123],
      END_FUNCTION: [121, 123],
      END_IF: [121, 123],
      END_PROPERTY: [121, 123],
      END_SELECT: [121, 123],
      END_SUB: [121, 123],
      END_TYPE: [121, 123],
      END_WITH: [121, 123],
      END: [121, 123],
      ENUM: [121, 123],
      EQV: [121, 123],
      ERASE: [121, 123],
      EVENT: [121, 123],
      EXIT_DO: [121, 123],
      EXIT_FOR: [121, 123],
      EXIT_FUNCTION: [121, 123],
      EXIT_PROPERTY: [121, 123],
      EXIT_SUB: [121, 123],
      FALSE: [121, 123],
      FRIEND: [121, 123],
      FOR: [121, 123],
      FUNCTION: [121, 123],
      GET: [121, 123],
      GLOBAL: [121, 123],
      GOSUB: [121, 123],
      GOTO: [121, 123],
      IF: [121, 123],
      IMPLEMENTS: [121, 123],
      IN: [121, 123],
      IS: [121, 123],
      INTEGER: [121, 123],
      LONG: [121, 123],
      LOOP: [121, 123],
      LEN: [121, 123],
      LET: [121, 123],
      LIB: [121, 123],
      LIKE: [121, 123],
      LSET: [121, 123],
      MACRO_CONST: [121, 123],
      MACRO_IF: [121, 123],
      MACRO_ELSEIF: [121, 123],
      MACRO_ELSE: [121, 123],
      MACRO_END_IF: [121, 123],
      MOD: [121, 123],
      NEXT: [121, 123],
      NEW: [121, 123],
      NOT: [121, 123],
      NOTHING: [121, 123],
      NULL: [121, 123],
      ON_ERROR: [121, 123],
      ON_LOCAL_ERROR: [121, 123],
      ON: [121, 123],
      OPTIONAL: [121, 123],
      OPTION_BASE: [121, 123],
      OPTION_EXPLICIT: [121, 123],
      OPTION_COMPARE: [121, 123],
      OPTION_PRIVATE_MODULE: [121, 123],
      OR: [121, 123],
      PARAMARRAY: [121, 123],
      PRESERVE: [121, 123],
      PRIVATE: [121, 123],
      PROPERTY_GET: [121, 123],
      PROPERTY_LET: [121, 123],
      PROPERTY_SET: [121, 123],
      PTRSAFE: [121, 123],
      PUBLIC: [121, 123],
      RAISEEVENT: [121, 123],
      REDIM: [121, 123],
      RESET: [121, 123],
      RESUME: [121, 123],
      RETURN: [121, 123],
      SELECT: [121, 123],
      SET: [121, 123],
      SINGLE: [121, 123],
      STATIC: [121, 123],
      STEP: [121, 123],
      STOP: [121, 123],
      STRING: [121, 123],
      SUB: [121, 123],
      THEN: [121, 123],
      TO: [121, 123],
      TRUE: [121, 123],
      TYPEOF: [121, 123],
      UNTIL: [121, 123],
      VARIANT: [121, 123],
      WEND: [121, 123],
      WHILE: [121, 123],
      WITH: [121, 123],
      WITHEVENTS: [121, 123],
      XOR: [121, 123],
      IDENTIFIER: [121, 123],
    },
    iCS_S_MembersCall_group_def_54: {
      ALIAS: [122],
      AND: [122],
      ATTRIBUTE: [122],
      AS: [122],
      BEGIN: [122],
      BOOLEAN: [122],
      BYVAL: [122],
      BYREF: [122],
      BYTE: [122],
      CALL: [122],
      CASE: [122],
      CONST: [122],
      DECLARE: [122],
      DEFBOOL: [122],
      DEFBYTE: [122],
      DEFDATE: [122],
      DEFDBL: [122],
      DEFDEC: [122],
      DEFCUR: [122],
      DEFINT: [122],
      DEFLNG: [122],
      DEFOBJ: [122],
      DEFSNG: [122],
      DEFSTR: [122],
      DEFVAR: [122],
      DIM: [122],
      DO: [122],
      DOUBLE: [122],
      EACH: [122],
      ELSE: [122],
      ELSEIF: [122],
      END_ENUM: [122],
      END_FUNCTION: [122],
      END_IF: [122],
      END_PROPERTY: [122],
      END_SELECT: [122],
      END_SUB: [122],
      END_TYPE: [122],
      END_WITH: [122],
      END: [122],
      ENUM: [122],
      EQV: [122],
      ERASE: [122],
      EVENT: [122],
      EXIT_DO: [122],
      EXIT_FOR: [122],
      EXIT_FUNCTION: [122],
      EXIT_PROPERTY: [122],
      EXIT_SUB: [122],
      FALSE: [122],
      FRIEND: [122],
      FOR: [122],
      FUNCTION: [122],
      GET: [122],
      GLOBAL: [122],
      GOSUB: [122],
      GOTO: [122],
      IF: [122],
      IMPLEMENTS: [122],
      IN: [122],
      IS: [122],
      INTEGER: [122],
      LONG: [122],
      LOOP: [122],
      LEN: [122],
      LET: [122],
      LIB: [122],
      LIKE: [122],
      LSET: [122],
      MACRO_CONST: [122],
      MACRO_IF: [122],
      MACRO_ELSEIF: [122],
      MACRO_ELSE: [122],
      MACRO_END_IF: [122],
      MOD: [122],
      NEXT: [122],
      NEW: [122],
      NOT: [122],
      NOTHING: [122],
      NULL: [122],
      ON_ERROR: [122],
      ON_LOCAL_ERROR: [122],
      ON: [122],
      OPTIONAL: [122],
      OPTION_BASE: [122],
      OPTION_EXPLICIT: [122],
      OPTION_COMPARE: [122],
      OPTION_PRIVATE_MODULE: [122],
      OR: [122],
      PARAMARRAY: [122],
      PRESERVE: [122],
      PRIVATE: [122],
      PROPERTY_GET: [122],
      PROPERTY_LET: [122],
      PROPERTY_SET: [122],
      PTRSAFE: [122],
      PUBLIC: [122],
      RAISEEVENT: [122],
      REDIM: [122],
      RESET: [122],
      RESUME: [122],
      RETURN: [122],
      SELECT: [122],
      SET: [122],
      SINGLE: [122],
      STATIC: [122],
      STEP: [122],
      STOP: [122],
      STRING: [122],
      SUB: [122],
      THEN: [122],
      TO: [122],
      TRUE: [122],
      TYPEOF: [122],
      UNTIL: [122],
      VARIANT: [122],
      WEND: [122],
      WHILE: [122],
      WITH: [122],
      WITHEVENTS: [122],
      XOR: [122],
      IDENTIFIER: [122],
    },
    iCS_S_MembersCall: {
      ALIAS: [124],
      AND: [124],
      ATTRIBUTE: [124],
      AS: [124],
      BEGIN: [124],
      BOOLEAN: [124],
      BYVAL: [124],
      BYREF: [124],
      BYTE: [124],
      CALL: [124],
      CASE: [124],
      CONST: [124],
      DECLARE: [124],
      DEFBOOL: [124],
      DEFBYTE: [124],
      DEFDATE: [124],
      DEFDBL: [124],
      DEFDEC: [124],
      DEFCUR: [124],
      DEFINT: [124],
      DEFLNG: [124],
      DEFOBJ: [124],
      DEFSNG: [124],
      DEFSTR: [124],
      DEFVAR: [124],
      DIM: [124],
      DO: [124],
      DOUBLE: [124],
      EACH: [124],
      ELSE: [124],
      ELSEIF: [124],
      END_ENUM: [124],
      END_FUNCTION: [124],
      END_IF: [124],
      END_PROPERTY: [124],
      END_SELECT: [124],
      END_SUB: [124],
      END_TYPE: [124],
      END_WITH: [124],
      END: [124],
      ENUM: [124],
      EQV: [124],
      ERASE: [124],
      EVENT: [124],
      EXIT_DO: [124],
      EXIT_FOR: [124],
      EXIT_FUNCTION: [124],
      EXIT_PROPERTY: [124],
      EXIT_SUB: [124],
      FALSE: [124],
      FRIEND: [124],
      FOR: [124],
      FUNCTION: [124],
      GET: [124],
      GLOBAL: [124],
      GOSUB: [124],
      GOTO: [124],
      IF: [124],
      IMPLEMENTS: [124],
      IN: [124],
      IS: [124],
      INTEGER: [124],
      LONG: [124],
      LOOP: [124],
      LEN: [124],
      LET: [124],
      LIB: [124],
      LIKE: [124],
      LSET: [124],
      MACRO_CONST: [124],
      MACRO_IF: [124],
      MACRO_ELSEIF: [124],
      MACRO_ELSE: [124],
      MACRO_END_IF: [124],
      MOD: [124],
      NEXT: [124],
      NEW: [124],
      NOT: [124],
      NOTHING: [124],
      NULL: [124],
      ON_ERROR: [124],
      ON_LOCAL_ERROR: [124],
      ON: [124],
      OPTIONAL: [124],
      OPTION_BASE: [124],
      OPTION_EXPLICIT: [124],
      OPTION_COMPARE: [124],
      OPTION_PRIVATE_MODULE: [124],
      OR: [124],
      PARAMARRAY: [124],
      PRESERVE: [124],
      PRIVATE: [124],
      PROPERTY_GET: [124],
      PROPERTY_LET: [124],
      PROPERTY_SET: [124],
      PTRSAFE: [124],
      PUBLIC: [124],
      RAISEEVENT: [124],
      REDIM: [124],
      RESET: [124],
      RESUME: [124],
      RETURN: [124],
      SELECT: [124],
      SET: [124],
      SINGLE: [124],
      STATIC: [124],
      STEP: [124],
      STOP: [124],
      STRING: [124],
      SUB: [124],
      THEN: [124],
      TO: [124],
      TRUE: [124],
      TYPEOF: [124],
      UNTIL: [124],
      VARIANT: [124],
      WEND: [124],
      WHILE: [124],
      WITH: [124],
      WITHEVENTS: [124],
      XOR: [124],
      IDENTIFIER: [124],
      '.': [124],
      '!': [124],
    },
    iCS_S_MemberCall_group_def_57: {
      '.': [125],
    },
    iCS_S_MemberCall_group_56: {
      '.': [126],
      '!': [128],
    },
    iCS_S_MemberCall_group_def_58: {
      '!': [127],
    },
    iCS_S_MemberCall_group_59: {
      ALIAS: [129, 130],
      AND: [129, 130],
      ATTRIBUTE: [129, 130],
      AS: [129, 130],
      BEGIN: [129, 130],
      BOOLEAN: [129, 130],
      BYVAL: [129, 130],
      BYREF: [129, 130],
      BYTE: [129, 130],
      CALL: [129, 130],
      CASE: [129, 130],
      CONST: [129, 130],
      DECLARE: [129, 130],
      DEFBOOL: [129, 130],
      DEFBYTE: [129, 130],
      DEFDATE: [129, 130],
      DEFDBL: [129, 130],
      DEFDEC: [129, 130],
      DEFCUR: [129, 130],
      DEFINT: [129, 130],
      DEFLNG: [129, 130],
      DEFOBJ: [129, 130],
      DEFSNG: [129, 130],
      DEFSTR: [129, 130],
      DEFVAR: [129, 130],
      DIM: [129, 130],
      DO: [129, 130],
      DOUBLE: [129, 130],
      EACH: [129, 130],
      ELSE: [129, 130],
      ELSEIF: [129, 130],
      END_ENUM: [129, 130],
      END_FUNCTION: [129, 130],
      END_IF: [129, 130],
      END_PROPERTY: [129, 130],
      END_SELECT: [129, 130],
      END_SUB: [129, 130],
      END_TYPE: [129, 130],
      END_WITH: [129, 130],
      END: [129, 130],
      ENUM: [129, 130],
      EQV: [129, 130],
      ERASE: [129, 130],
      EVENT: [129, 130],
      EXIT_DO: [129, 130],
      EXIT_FOR: [129, 130],
      EXIT_FUNCTION: [129, 130],
      EXIT_PROPERTY: [129, 130],
      EXIT_SUB: [129, 130],
      FALSE: [129, 130],
      FRIEND: [129, 130],
      FOR: [129, 130],
      FUNCTION: [129, 130],
      GET: [129, 130],
      GLOBAL: [129, 130],
      GOSUB: [129, 130],
      GOTO: [129, 130],
      IF: [129, 130],
      IMPLEMENTS: [129, 130],
      IN: [129, 130],
      IS: [129, 130],
      INTEGER: [129, 130],
      LONG: [129, 130],
      LOOP: [129, 130],
      LEN: [129, 130],
      LET: [129, 130],
      LIB: [129, 130],
      LIKE: [129, 130],
      LSET: [129, 130],
      MACRO_CONST: [129, 130],
      MACRO_IF: [129, 130],
      MACRO_ELSEIF: [129, 130],
      MACRO_ELSE: [129, 130],
      MACRO_END_IF: [129, 130],
      MOD: [129, 130],
      NEXT: [129, 130],
      NEW: [129, 130],
      NOT: [129, 130],
      NOTHING: [129, 130],
      NULL: [129, 130],
      ON_ERROR: [129, 130],
      ON_LOCAL_ERROR: [129, 130],
      ON: [129, 130],
      OPTIONAL: [129, 130],
      OPTION_BASE: [129, 130],
      OPTION_EXPLICIT: [129, 130],
      OPTION_COMPARE: [129, 130],
      OPTION_PRIVATE_MODULE: [129, 130],
      OR: [129, 130],
      PARAMARRAY: [129, 130],
      PRESERVE: [129, 130],
      PRIVATE: [129, 130],
      PROPERTY_GET: [129, 130],
      PROPERTY_LET: [129, 130],
      PROPERTY_SET: [129, 130],
      PTRSAFE: [129, 130],
      PUBLIC: [129, 130],
      RAISEEVENT: [129, 130],
      REDIM: [129, 130],
      RESET: [129, 130],
      RESUME: [129, 130],
      RETURN: [129, 130],
      SELECT: [129, 130],
      SET: [129, 130],
      SINGLE: [129, 130],
      STATIC: [129, 130],
      STEP: [129, 130],
      STOP: [129, 130],
      STRING: [129, 130],
      SUB: [129, 130],
      THEN: [129, 130],
      TO: [129, 130],
      TRUE: [129, 130],
      TYPEOF: [129, 130],
      UNTIL: [129, 130],
      VARIANT: [129, 130],
      WEND: [129, 130],
      WHILE: [129, 130],
      WITH: [129, 130],
      WITHEVENTS: [129, 130],
      XOR: [129, 130],
      IDENTIFIER: [129, 130],
    },
    iCS_S_MemberCall: {
      '.': [131],
      '!': [131],
    },
    iCS_S_ProcedureOrArrayCall: {
      ALIAS: [132],
      AND: [132],
      ATTRIBUTE: [132],
      AS: [132],
      BEGIN: [132],
      BOOLEAN: [132],
      BYVAL: [132],
      BYREF: [132],
      BYTE: [132],
      CALL: [132],
      CASE: [132],
      CONST: [132],
      DECLARE: [132],
      DEFBOOL: [132],
      DEFBYTE: [132],
      DEFDATE: [132],
      DEFDBL: [132],
      DEFDEC: [132],
      DEFCUR: [132],
      DEFINT: [132],
      DEFLNG: [132],
      DEFOBJ: [132],
      DEFSNG: [132],
      DEFSTR: [132],
      DEFVAR: [132],
      DIM: [132],
      DO: [132],
      DOUBLE: [132],
      EACH: [132],
      ELSE: [132],
      ELSEIF: [132],
      END_ENUM: [132],
      END_FUNCTION: [132],
      END_IF: [132],
      END_PROPERTY: [132],
      END_SELECT: [132],
      END_SUB: [132],
      END_TYPE: [132],
      END_WITH: [132],
      END: [132],
      ENUM: [132],
      EQV: [132],
      ERASE: [132],
      EVENT: [132],
      EXIT_DO: [132],
      EXIT_FOR: [132],
      EXIT_FUNCTION: [132],
      EXIT_PROPERTY: [132],
      EXIT_SUB: [132],
      FALSE: [132],
      FRIEND: [132],
      FOR: [132],
      FUNCTION: [132],
      GET: [132],
      GLOBAL: [132],
      GOSUB: [132],
      GOTO: [132],
      IF: [132],
      IMPLEMENTS: [132],
      IN: [132],
      IS: [132],
      INTEGER: [132],
      LONG: [132],
      LOOP: [132],
      LEN: [132],
      LET: [132],
      LIB: [132],
      LIKE: [132],
      LSET: [132],
      MACRO_CONST: [132],
      MACRO_IF: [132],
      MACRO_ELSEIF: [132],
      MACRO_ELSE: [132],
      MACRO_END_IF: [132],
      MOD: [132],
      NEXT: [132],
      NEW: [132],
      NOT: [132],
      NOTHING: [132],
      NULL: [132],
      ON_ERROR: [132],
      ON_LOCAL_ERROR: [132],
      ON: [132],
      OPTIONAL: [132],
      OPTION_BASE: [132],
      OPTION_EXPLICIT: [132],
      OPTION_COMPARE: [132],
      OPTION_PRIVATE_MODULE: [132],
      OR: [132],
      PARAMARRAY: [132],
      PRESERVE: [132],
      PRIVATE: [132],
      PROPERTY_GET: [132],
      PROPERTY_LET: [132],
      PROPERTY_SET: [132],
      PTRSAFE: [132],
      PUBLIC: [132],
      RAISEEVENT: [132],
      REDIM: [132],
      RESET: [132],
      RESUME: [132],
      RETURN: [132],
      SELECT: [132],
      SET: [132],
      SINGLE: [132],
      STATIC: [132],
      STEP: [132],
      STOP: [132],
      STRING: [132],
      SUB: [132],
      THEN: [132],
      TO: [132],
      TRUE: [132],
      TYPEOF: [132],
      UNTIL: [132],
      VARIANT: [132],
      WEND: [132],
      WHILE: [132],
      WITH: [132],
      WITHEVENTS: [132],
      XOR: [132],
      IDENTIFIER: [132],
    },
    iCS_S_VariableOrProcedureCall: {
      ALIAS: [133],
      AND: [133],
      ATTRIBUTE: [133],
      AS: [133],
      BEGIN: [133],
      BOOLEAN: [133],
      BYVAL: [133],
      BYREF: [133],
      BYTE: [133],
      CALL: [133],
      CASE: [133],
      CONST: [133],
      DECLARE: [133],
      DEFBOOL: [133],
      DEFBYTE: [133],
      DEFDATE: [133],
      DEFDBL: [133],
      DEFDEC: [133],
      DEFCUR: [133],
      DEFINT: [133],
      DEFLNG: [133],
      DEFOBJ: [133],
      DEFSNG: [133],
      DEFSTR: [133],
      DEFVAR: [133],
      DIM: [133],
      DO: [133],
      DOUBLE: [133],
      EACH: [133],
      ELSE: [133],
      ELSEIF: [133],
      END_ENUM: [133],
      END_FUNCTION: [133],
      END_IF: [133],
      END_PROPERTY: [133],
      END_SELECT: [133],
      END_SUB: [133],
      END_TYPE: [133],
      END_WITH: [133],
      END: [133],
      ENUM: [133],
      EQV: [133],
      ERASE: [133],
      EVENT: [133],
      EXIT_DO: [133],
      EXIT_FOR: [133],
      EXIT_FUNCTION: [133],
      EXIT_PROPERTY: [133],
      EXIT_SUB: [133],
      FALSE: [133],
      FRIEND: [133],
      FOR: [133],
      FUNCTION: [133],
      GET: [133],
      GLOBAL: [133],
      GOSUB: [133],
      GOTO: [133],
      IF: [133],
      IMPLEMENTS: [133],
      IN: [133],
      IS: [133],
      INTEGER: [133],
      LONG: [133],
      LOOP: [133],
      LEN: [133],
      LET: [133],
      LIB: [133],
      LIKE: [133],
      LSET: [133],
      MACRO_CONST: [133],
      MACRO_IF: [133],
      MACRO_ELSEIF: [133],
      MACRO_ELSE: [133],
      MACRO_END_IF: [133],
      MOD: [133],
      NEXT: [133],
      NEW: [133],
      NOT: [133],
      NOTHING: [133],
      NULL: [133],
      ON_ERROR: [133],
      ON_LOCAL_ERROR: [133],
      ON: [133],
      OPTIONAL: [133],
      OPTION_BASE: [133],
      OPTION_EXPLICIT: [133],
      OPTION_COMPARE: [133],
      OPTION_PRIVATE_MODULE: [133],
      OR: [133],
      PARAMARRAY: [133],
      PRESERVE: [133],
      PRIVATE: [133],
      PROPERTY_GET: [133],
      PROPERTY_LET: [133],
      PROPERTY_SET: [133],
      PTRSAFE: [133],
      PUBLIC: [133],
      RAISEEVENT: [133],
      REDIM: [133],
      RESET: [133],
      RESUME: [133],
      RETURN: [133],
      SELECT: [133],
      SET: [133],
      SINGLE: [133],
      STATIC: [133],
      STEP: [133],
      STOP: [133],
      STRING: [133],
      SUB: [133],
      THEN: [133],
      TO: [133],
      TRUE: [133],
      TYPEOF: [133],
      UNTIL: [133],
      VARIANT: [133],
      WEND: [133],
      WHILE: [133],
      WITH: [133],
      WITHEVENTS: [133],
      XOR: [133],
      IDENTIFIER: [133],
    },
    dictionaryCallStmt: {
      '!': [134],
    },
    literal: {
      INTEGERLITERAL: [135],
      STRINGLITERAL: [136],
      NOTHING: [137],
      NULL: [138],
      TRUE: [139],
      FALSE: [140],
    },
    typeHint: {
      '&': [141],
      '%': [142],
      '#': [143],
      '!': [144],
      '@': [145],
      $: [146],
    },
    arg_group_def_63: {
      BYVAL: [147],
    },
    arg_group_62: {
      BYVAL: [148],
      BYREF: [150],
    },
    arg_group_def_64: {
      BYREF: [149],
    },
    arg_group_def_66: {
      LPAREN: [151],
    },
    arg: {
      OPTIONAL: [152],
      BYVAL: [152],
      BYREF: [152],
      PARAMARRAY: [152],
      ALIAS: [152],
      AND: [152],
      ATTRIBUTE: [152],
      AS: [152],
      BEGIN: [152],
      BOOLEAN: [152],
      BYTE: [152],
      CALL: [152],
      CASE: [152],
      CONST: [152],
      DECLARE: [152],
      DEFBOOL: [152],
      DEFBYTE: [152],
      DEFDATE: [152],
      DEFDBL: [152],
      DEFDEC: [152],
      DEFCUR: [152],
      DEFINT: [152],
      DEFLNG: [152],
      DEFOBJ: [152],
      DEFSNG: [152],
      DEFSTR: [152],
      DEFVAR: [152],
      DIM: [152],
      DO: [152],
      DOUBLE: [152],
      EACH: [152],
      ELSE: [152],
      ELSEIF: [152],
      END_ENUM: [152],
      END_FUNCTION: [152],
      END_IF: [152],
      END_PROPERTY: [152],
      END_SELECT: [152],
      END_SUB: [152],
      END_TYPE: [152],
      END_WITH: [152],
      END: [152],
      ENUM: [152],
      EQV: [152],
      ERASE: [152],
      EVENT: [152],
      EXIT_DO: [152],
      EXIT_FOR: [152],
      EXIT_FUNCTION: [152],
      EXIT_PROPERTY: [152],
      EXIT_SUB: [152],
      FALSE: [152],
      FRIEND: [152],
      FOR: [152],
      FUNCTION: [152],
      GET: [152],
      GLOBAL: [152],
      GOSUB: [152],
      GOTO: [152],
      IF: [152],
      IMPLEMENTS: [152],
      IN: [152],
      IS: [152],
      INTEGER: [152],
      LONG: [152],
      LOOP: [152],
      LEN: [152],
      LET: [152],
      LIB: [152],
      LIKE: [152],
      LSET: [152],
      MACRO_CONST: [152],
      MACRO_IF: [152],
      MACRO_ELSEIF: [152],
      MACRO_ELSE: [152],
      MACRO_END_IF: [152],
      MOD: [152],
      NEXT: [152],
      NEW: [152],
      NOT: [152],
      NOTHING: [152],
      NULL: [152],
      ON_ERROR: [152],
      ON_LOCAL_ERROR: [152],
      ON: [152],
      OPTION_BASE: [152],
      OPTION_EXPLICIT: [152],
      OPTION_COMPARE: [152],
      OPTION_PRIVATE_MODULE: [152],
      OR: [152],
      PRESERVE: [152],
      PRIVATE: [152],
      PROPERTY_GET: [152],
      PROPERTY_LET: [152],
      PROPERTY_SET: [152],
      PTRSAFE: [152],
      PUBLIC: [152],
      RAISEEVENT: [152],
      REDIM: [152],
      RESET: [152],
      RESUME: [152],
      RETURN: [152],
      SELECT: [152],
      SET: [152],
      SINGLE: [152],
      STATIC: [152],
      STEP: [152],
      STOP: [152],
      STRING: [152],
      SUB: [152],
      THEN: [152],
      TO: [152],
      TRUE: [152],
      TYPEOF: [152],
      UNTIL: [152],
      VARIANT: [152],
      WEND: [152],
      WHILE: [152],
      WITH: [152],
      WITHEVENTS: [152],
      XOR: [152],
      IDENTIFIER: [152],
    },
    argDefaultValue: {
      EQ: [153],
    },
    asTypeClause: {
      AS: [154],
    },
    type__group_def_68: {
      BOOLEAN: [155],
      BYTE: [155],
      DOUBLE: [155],
      INTEGER: [155],
      LONG: [155],
      SINGLE: [155],
      VARIANT: [155],
      STRING: [155],
    },
    type__group_67: {
      BOOLEAN: [156, 158],
      BYTE: [156, 158],
      DOUBLE: [156, 158],
      INTEGER: [156, 158],
      LONG: [156, 158],
      SINGLE: [156, 158],
      VARIANT: [156, 158],
      STRING: [156, 158],
      ALIAS: [158],
      AND: [158],
      ATTRIBUTE: [158],
      AS: [158],
      BEGIN: [158],
      BYVAL: [158],
      BYREF: [158],
      CALL: [158],
      CASE: [158],
      CONST: [158],
      DECLARE: [158],
      DEFBOOL: [158],
      DEFBYTE: [158],
      DEFDATE: [158],
      DEFDBL: [158],
      DEFDEC: [158],
      DEFCUR: [158],
      DEFINT: [158],
      DEFLNG: [158],
      DEFOBJ: [158],
      DEFSNG: [158],
      DEFSTR: [158],
      DEFVAR: [158],
      DIM: [158],
      DO: [158],
      EACH: [158],
      ELSE: [158],
      ELSEIF: [158],
      END_ENUM: [158],
      END_FUNCTION: [158],
      END_IF: [158],
      END_PROPERTY: [158],
      END_SELECT: [158],
      END_SUB: [158],
      END_TYPE: [158],
      END_WITH: [158],
      END: [158],
      ENUM: [158],
      EQV: [158],
      ERASE: [158],
      EVENT: [158],
      EXIT_DO: [158],
      EXIT_FOR: [158],
      EXIT_FUNCTION: [158],
      EXIT_PROPERTY: [158],
      EXIT_SUB: [158],
      FALSE: [158],
      FRIEND: [158],
      FOR: [158],
      FUNCTION: [158],
      GET: [158],
      GLOBAL: [158],
      GOSUB: [158],
      GOTO: [158],
      IF: [158],
      IMPLEMENTS: [158],
      IN: [158],
      IS: [158],
      LOOP: [158],
      LEN: [158],
      LET: [158],
      LIB: [158],
      LIKE: [158],
      LSET: [158],
      MACRO_CONST: [158],
      MACRO_IF: [158],
      MACRO_ELSEIF: [158],
      MACRO_ELSE: [158],
      MACRO_END_IF: [158],
      MOD: [158],
      NEXT: [158],
      NEW: [158],
      NOT: [158],
      NOTHING: [158],
      NULL: [158],
      ON_ERROR: [158],
      ON_LOCAL_ERROR: [158],
      ON: [158],
      OPTIONAL: [158],
      OPTION_BASE: [158],
      OPTION_EXPLICIT: [158],
      OPTION_COMPARE: [158],
      OPTION_PRIVATE_MODULE: [158],
      OR: [158],
      PARAMARRAY: [158],
      PRESERVE: [158],
      PRIVATE: [158],
      PROPERTY_GET: [158],
      PROPERTY_LET: [158],
      PROPERTY_SET: [158],
      PTRSAFE: [158],
      PUBLIC: [158],
      RAISEEVENT: [158],
      REDIM: [158],
      RESET: [158],
      RESUME: [158],
      RETURN: [158],
      SELECT: [158],
      SET: [158],
      STATIC: [158],
      STEP: [158],
      STOP: [158],
      SUB: [158],
      THEN: [158],
      TO: [158],
      TRUE: [158],
      TYPEOF: [158],
      UNTIL: [158],
      WEND: [158],
      WHILE: [158],
      WITH: [158],
      WITHEVENTS: [158],
      XOR: [158],
      IDENTIFIER: [158],
    },
    type__group_def_69: {
      ALIAS: [157],
      AND: [157],
      ATTRIBUTE: [157],
      AS: [157],
      BEGIN: [157],
      BOOLEAN: [157],
      BYVAL: [157],
      BYREF: [157],
      BYTE: [157],
      CALL: [157],
      CASE: [157],
      CONST: [157],
      DECLARE: [157],
      DEFBOOL: [157],
      DEFBYTE: [157],
      DEFDATE: [157],
      DEFDBL: [157],
      DEFDEC: [157],
      DEFCUR: [157],
      DEFINT: [157],
      DEFLNG: [157],
      DEFOBJ: [157],
      DEFSNG: [157],
      DEFSTR: [157],
      DEFVAR: [157],
      DIM: [157],
      DO: [157],
      DOUBLE: [157],
      EACH: [157],
      ELSE: [157],
      ELSEIF: [157],
      END_ENUM: [157],
      END_FUNCTION: [157],
      END_IF: [157],
      END_PROPERTY: [157],
      END_SELECT: [157],
      END_SUB: [157],
      END_TYPE: [157],
      END_WITH: [157],
      END: [157],
      ENUM: [157],
      EQV: [157],
      ERASE: [157],
      EVENT: [157],
      EXIT_DO: [157],
      EXIT_FOR: [157],
      EXIT_FUNCTION: [157],
      EXIT_PROPERTY: [157],
      EXIT_SUB: [157],
      FALSE: [157],
      FRIEND: [157],
      FOR: [157],
      FUNCTION: [157],
      GET: [157],
      GLOBAL: [157],
      GOSUB: [157],
      GOTO: [157],
      IF: [157],
      IMPLEMENTS: [157],
      IN: [157],
      IS: [157],
      INTEGER: [157],
      LONG: [157],
      LOOP: [157],
      LEN: [157],
      LET: [157],
      LIB: [157],
      LIKE: [157],
      LSET: [157],
      MACRO_CONST: [157],
      MACRO_IF: [157],
      MACRO_ELSEIF: [157],
      MACRO_ELSE: [157],
      MACRO_END_IF: [157],
      MOD: [157],
      NEXT: [157],
      NEW: [157],
      NOT: [157],
      NOTHING: [157],
      NULL: [157],
      ON_ERROR: [157],
      ON_LOCAL_ERROR: [157],
      ON: [157],
      OPTIONAL: [157],
      OPTION_BASE: [157],
      OPTION_EXPLICIT: [157],
      OPTION_COMPARE: [157],
      OPTION_PRIVATE_MODULE: [157],
      OR: [157],
      PARAMARRAY: [157],
      PRESERVE: [157],
      PRIVATE: [157],
      PROPERTY_GET: [157],
      PROPERTY_LET: [157],
      PROPERTY_SET: [157],
      PTRSAFE: [157],
      PUBLIC: [157],
      RAISEEVENT: [157],
      REDIM: [157],
      RESET: [157],
      RESUME: [157],
      RETURN: [157],
      SELECT: [157],
      SET: [157],
      SINGLE: [157],
      STATIC: [157],
      STEP: [157],
      STOP: [157],
      STRING: [157],
      SUB: [157],
      THEN: [157],
      TO: [157],
      TRUE: [157],
      TYPEOF: [157],
      UNTIL: [157],
      VARIANT: [157],
      WEND: [157],
      WHILE: [157],
      WITH: [157],
      WITHEVENTS: [157],
      XOR: [157],
      IDENTIFIER: [157],
    },
    type_: {
      BOOLEAN: [159],
      BYTE: [159],
      DOUBLE: [159],
      INTEGER: [159],
      LONG: [159],
      SINGLE: [159],
      VARIANT: [159],
      STRING: [159],
      ALIAS: [159],
      AND: [159],
      ATTRIBUTE: [159],
      AS: [159],
      BEGIN: [159],
      BYVAL: [159],
      BYREF: [159],
      CALL: [159],
      CASE: [159],
      CONST: [159],
      DECLARE: [159],
      DEFBOOL: [159],
      DEFBYTE: [159],
      DEFDATE: [159],
      DEFDBL: [159],
      DEFDEC: [159],
      DEFCUR: [159],
      DEFINT: [159],
      DEFLNG: [159],
      DEFOBJ: [159],
      DEFSNG: [159],
      DEFSTR: [159],
      DEFVAR: [159],
      DIM: [159],
      DO: [159],
      EACH: [159],
      ELSE: [159],
      ELSEIF: [159],
      END_ENUM: [159],
      END_FUNCTION: [159],
      END_IF: [159],
      END_PROPERTY: [159],
      END_SELECT: [159],
      END_SUB: [159],
      END_TYPE: [159],
      END_WITH: [159],
      END: [159],
      ENUM: [159],
      EQV: [159],
      ERASE: [159],
      EVENT: [159],
      EXIT_DO: [159],
      EXIT_FOR: [159],
      EXIT_FUNCTION: [159],
      EXIT_PROPERTY: [159],
      EXIT_SUB: [159],
      FALSE: [159],
      FRIEND: [159],
      FOR: [159],
      FUNCTION: [159],
      GET: [159],
      GLOBAL: [159],
      GOSUB: [159],
      GOTO: [159],
      IF: [159],
      IMPLEMENTS: [159],
      IN: [159],
      IS: [159],
      LOOP: [159],
      LEN: [159],
      LET: [159],
      LIB: [159],
      LIKE: [159],
      LSET: [159],
      MACRO_CONST: [159],
      MACRO_IF: [159],
      MACRO_ELSEIF: [159],
      MACRO_ELSE: [159],
      MACRO_END_IF: [159],
      MOD: [159],
      NEXT: [159],
      NEW: [159],
      NOT: [159],
      NOTHING: [159],
      NULL: [159],
      ON_ERROR: [159],
      ON_LOCAL_ERROR: [159],
      ON: [159],
      OPTIONAL: [159],
      OPTION_BASE: [159],
      OPTION_EXPLICIT: [159],
      OPTION_COMPARE: [159],
      OPTION_PRIVATE_MODULE: [159],
      OR: [159],
      PARAMARRAY: [159],
      PRESERVE: [159],
      PRIVATE: [159],
      PROPERTY_GET: [159],
      PROPERTY_LET: [159],
      PROPERTY_SET: [159],
      PTRSAFE: [159],
      PUBLIC: [159],
      RAISEEVENT: [159],
      REDIM: [159],
      RESET: [159],
      RESUME: [159],
      RETURN: [159],
      SELECT: [159],
      SET: [159],
      STATIC: [159],
      STEP: [159],
      STOP: [159],
      SUB: [159],
      THEN: [159],
      TO: [159],
      TRUE: [159],
      TYPEOF: [159],
      UNTIL: [159],
      WEND: [159],
      WHILE: [159],
      WITH: [159],
      WITHEVENTS: [159],
      XOR: [159],
      IDENTIFIER: [159],
    },
    complexType_group_72: {
      '.': [160],
      '!': [161],
    },
    complexType_group_def_73: {
      '.': [162],
      '!': [162],
    },
    complexType: {
      ALIAS: [163],
      AND: [163],
      ATTRIBUTE: [163],
      AS: [163],
      BEGIN: [163],
      BOOLEAN: [163],
      BYVAL: [163],
      BYREF: [163],
      BYTE: [163],
      CALL: [163],
      CASE: [163],
      CONST: [163],
      DECLARE: [163],
      DEFBOOL: [163],
      DEFBYTE: [163],
      DEFDATE: [163],
      DEFDBL: [163],
      DEFDEC: [163],
      DEFCUR: [163],
      DEFINT: [163],
      DEFLNG: [163],
      DEFOBJ: [163],
      DEFSNG: [163],
      DEFSTR: [163],
      DEFVAR: [163],
      DIM: [163],
      DO: [163],
      DOUBLE: [163],
      EACH: [163],
      ELSE: [163],
      ELSEIF: [163],
      END_ENUM: [163],
      END_FUNCTION: [163],
      END_IF: [163],
      END_PROPERTY: [163],
      END_SELECT: [163],
      END_SUB: [163],
      END_TYPE: [163],
      END_WITH: [163],
      END: [163],
      ENUM: [163],
      EQV: [163],
      ERASE: [163],
      EVENT: [163],
      EXIT_DO: [163],
      EXIT_FOR: [163],
      EXIT_FUNCTION: [163],
      EXIT_PROPERTY: [163],
      EXIT_SUB: [163],
      FALSE: [163],
      FRIEND: [163],
      FOR: [163],
      FUNCTION: [163],
      GET: [163],
      GLOBAL: [163],
      GOSUB: [163],
      GOTO: [163],
      IF: [163],
      IMPLEMENTS: [163],
      IN: [163],
      IS: [163],
      INTEGER: [163],
      LONG: [163],
      LOOP: [163],
      LEN: [163],
      LET: [163],
      LIB: [163],
      LIKE: [163],
      LSET: [163],
      MACRO_CONST: [163],
      MACRO_IF: [163],
      MACRO_ELSEIF: [163],
      MACRO_ELSE: [163],
      MACRO_END_IF: [163],
      MOD: [163],
      NEXT: [163],
      NEW: [163],
      NOT: [163],
      NOTHING: [163],
      NULL: [163],
      ON_ERROR: [163],
      ON_LOCAL_ERROR: [163],
      ON: [163],
      OPTIONAL: [163],
      OPTION_BASE: [163],
      OPTION_EXPLICIT: [163],
      OPTION_COMPARE: [163],
      OPTION_PRIVATE_MODULE: [163],
      OR: [163],
      PARAMARRAY: [163],
      PRESERVE: [163],
      PRIVATE: [163],
      PROPERTY_GET: [163],
      PROPERTY_LET: [163],
      PROPERTY_SET: [163],
      PTRSAFE: [163],
      PUBLIC: [163],
      RAISEEVENT: [163],
      REDIM: [163],
      RESET: [163],
      RESUME: [163],
      RETURN: [163],
      SELECT: [163],
      SET: [163],
      SINGLE: [163],
      STATIC: [163],
      STEP: [163],
      STOP: [163],
      STRING: [163],
      SUB: [163],
      THEN: [163],
      TO: [163],
      TRUE: [163],
      TYPEOF: [163],
      UNTIL: [163],
      VARIANT: [163],
      WEND: [163],
      WHILE: [163],
      WITH: [163],
      WITHEVENTS: [163],
      XOR: [163],
      IDENTIFIER: [163],
    },
    baseType: {
      BOOLEAN: [164],
      BYTE: [165],
      DOUBLE: [166],
      INTEGER: [167],
      LONG: [168],
      SINGLE: [169],
      VARIANT: [170],
      STRING: [172],
    },
    baseType_group_def_75: {
      MULT: [171],
    },
    fieldLength: {
      MULT: [173, 174],
    },
    ambiguousIdentifier: {
      ALIAS: [175],
      AND: [176],
      ATTRIBUTE: [177],
      AS: [178],
      BEGIN: [179],
      BOOLEAN: [180],
      BYVAL: [181],
      BYREF: [182],
      BYTE: [183],
      CALL: [184],
      CASE: [185],
      CONST: [186],
      DECLARE: [187],
      DEFBOOL: [188],
      DEFBYTE: [189],
      DEFDATE: [190],
      DEFDBL: [191],
      DEFDEC: [192],
      DEFCUR: [193],
      DEFINT: [194],
      DEFLNG: [195],
      DEFOBJ: [196],
      DEFSNG: [197],
      DEFSTR: [198],
      DEFVAR: [199],
      DIM: [200],
      DO: [201],
      DOUBLE: [202],
      EACH: [203],
      ELSE: [204],
      ELSEIF: [205],
      END_ENUM: [206],
      END_FUNCTION: [207],
      END_IF: [208],
      END_PROPERTY: [209],
      END_SELECT: [210],
      END_SUB: [211],
      END_TYPE: [212],
      END_WITH: [213],
      END: [214],
      ENUM: [215],
      EQV: [216],
      ERASE: [217],
      EVENT: [218],
      EXIT_DO: [219],
      EXIT_FOR: [220],
      EXIT_FUNCTION: [221],
      EXIT_PROPERTY: [222],
      EXIT_SUB: [223],
      FALSE: [224],
      FRIEND: [225],
      FOR: [226],
      FUNCTION: [227],
      GET: [228],
      GLOBAL: [229],
      GOSUB: [230],
      GOTO: [231],
      IF: [232],
      IMPLEMENTS: [233],
      IN: [234],
      IS: [235],
      INTEGER: [236],
      LONG: [237],
      LOOP: [238],
      LEN: [239],
      LET: [240],
      LIB: [241],
      LIKE: [242],
      LSET: [243],
      MACRO_CONST: [244],
      MACRO_IF: [245],
      MACRO_ELSEIF: [246],
      MACRO_ELSE: [247],
      MACRO_END_IF: [248],
      MOD: [249],
      NEXT: [250],
      NEW: [251],
      NOT: [252],
      NOTHING: [253],
      NULL: [254],
      ON_ERROR: [255],
      ON_LOCAL_ERROR: [256],
      ON: [257],
      OPTIONAL: [258],
      OPTION_BASE: [259],
      OPTION_EXPLICIT: [260],
      OPTION_COMPARE: [261],
      OPTION_PRIVATE_MODULE: [262],
      OR: [263],
      PARAMARRAY: [264],
      PRESERVE: [265],
      PRIVATE: [266],
      PROPERTY_GET: [267],
      PROPERTY_LET: [268],
      PROPERTY_SET: [269],
      PTRSAFE: [270],
      PUBLIC: [271],
      RAISEEVENT: [272],
      REDIM: [273],
      RESET: [274],
      RESUME: [275],
      RETURN: [276],
      SELECT: [277],
      SET: [278],
      SINGLE: [279],
      STATIC: [280],
      STEP: [281],
      STOP: [282],
      STRING: [283],
      SUB: [284],
      THEN: [285],
      TO: [286],
      TRUE: [287],
      TYPEOF: [288],
      UNTIL: [289],
      VARIANT: [290],
      WEND: [291],
      WHILE: [292],
      WITH: [293],
      WITHEVENTS: [294],
      XOR: [295],
      IDENTIFIER: [296],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }

        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (
        ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX ||
        ruleIndexes.length === 0
      ) {
        // skip this symbol first
        return returnNext();
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 5,
    15: 6,
    16: 6,
    17: 6,
    18: 6,
    19: 7,
    20: 7,
    21: 8,
    22: 8,
    23: 8,
    24: 8,
    25: 8,
    26: 9,
    27: 9,
    28: 9,
    29: 9,
    30: 10,
    31: 11,
    32: 12,
    33: 13,
    34: 14,
    35: 15,
    36: 15,
    37: 16,
    38: 16,
    39: 16,
    40: 16,
    41: 16,
    42: 16,
    43: 16,
    44: 16,
    45: 16,
    46: 16,
    47: 16,
    48: 16,
    49: 17,
    50: 17,
    51: 17,
    52: 17,
    53: 17,
    54: 18,
    55: 19,
    56: 20,
    57: 20,
    58: 21,
    59: 21,
    60: 22,
    61: 23,
    62: 23,
    63: 23,
    64: 23,
    65: 23,
    66: 23,
    67: 24,
    68: 24,
    69: 24,
    70: 24,
    71: 24,
    72: 24,
    73: 24,
    74: 25,
    75: 26,
    76: 26,
    77: 27,
    78: 27,
    79: 27,
    80: 28,
    81: 29,
    82: 29,
    83: 30,
    84: 31,
    85: 32,
    86: 32,
    87: 33,
    88: 34,
    89: 34,
    90: 34,
    91: 34,
    92: 34,
    93: 34,
    94: 34,
    95: 35,
    96: 35,
    97: 35,
    98: 35,
    99: 35,
    100: 36,
    101: 36,
    102: 37,
    103: 37,
    104: 38,
    105: 39,
    106: 39,
    107: 40,
    108: 40,
    109: 41,
    110: 42,
    111: 42,
    112: 42,
    113: 43,
    114: 43,
    115: 43,
    116: 43,
    117: 44,
    118: 44,
    119: 44,
    120: 45,
    121: 45,
    122: 45,
    123: 45,
    124: 45,
    125: 46,
    126: 46,
    127: 46,
    128: 46,
    129: 46,
    130: 46,
    131: 46,
    132: 47,
    133: 48,
    134: 49,
    135: 50,
    136: 50,
    137: 50,
    138: 50,
    139: 50,
    140: 50,
    141: 51,
    142: 51,
    143: 51,
    144: 51,
    145: 51,
    146: 51,
    147: 52,
    148: 52,
    149: 52,
    150: 52,
    151: 52,
    152: 52,
    153: 53,
    154: 54,
    155: 55,
    156: 55,
    157: 55,
    158: 55,
    159: 55,
    160: 56,
    161: 56,
    162: 56,
    163: 56,
    164: 57,
    165: 57,
    166: 57,
    167: 57,
    168: 57,
    169: 57,
    170: 57,
    171: 57,
    172: 57,
    173: 58,
    174: 58,
    175: 59,
    176: 60,
    177: 61,
    178: 62,
    179: 63,
    180: 64,
    181: 65,
    182: 66,
    183: 67,
    184: 68,
    185: 69,
    186: 70,
    187: 71,
    188: 72,
    189: 73,
    190: 74,
    191: 75,
    192: 76,
    193: 77,
    194: 78,
    195: 79,
    196: 80,
    197: 81,
    198: 82,
    199: 83,
    200: 84,
    201: 85,
    202: 86,
    203: 87,
    204: 88,
    205: 89,
    206: 90,
    207: 91,
    208: 92,
    209: 93,
    210: 94,
    211: 95,
    212: 96,
    213: 97,
    214: 98,
    215: 99,
    216: 100,
    217: 101,
    218: 102,
    219: 103,
    220: 104,
    221: 105,
    222: 106,
    223: 107,
    224: 108,
    225: 109,
    226: 110,
    227: 111,
    228: 112,
    229: 113,
    230: 114,
    231: 115,
    232: 116,
    233: 117,
    234: 118,
    235: 119,
    236: 120,
    237: 121,
    238: 122,
    239: 123,
    240: 124,
    241: 125,
    242: 126,
    243: 127,
    244: 128,
    245: 129,
    246: 130,
    247: 131,
    248: 132,
    249: 133,
    250: 134,
    251: 135,
    252: 136,
    253: 137,
    254: 138,
    255: 139,
    256: 140,
    257: 141,
    258: 142,
    259: 143,
    260: 144,
    261: 145,
    262: 146,
    263: 147,
    264: 148,
    265: 149,
    266: 150,
    267: 151,
    268: 152,
    269: 153,
    270: 154,
    271: 155,
    272: 156,
    273: 157,
    274: 158,
    275: 159,
    276: 160,
    277: 161,
    278: 162,
    279: 163,
    280: 164,
    281: 165,
    282: 166,
    283: 167,
    284: 168,
    285: 169,
    286: 170,
    287: 171,
    288: 172,
    289: 173,
    290: 174,
    291: 175,
    292: 176,
    293: 177,
    294: 178,
    295: 179,
    296: 180,
  };
  return parser;
})();

export default vbaParser;
