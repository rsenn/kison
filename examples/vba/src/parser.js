/*
Generated By kison v0.5.31

Generate time: Thu Nov 25 2021 19:56:58 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      ret.error = {
        ...getParseError(getExpected),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        lexer: lexer.toJSON(),
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    ret.error = {
      recovery: false,
      ...getParseError(() => expected, recommendedAction.action === 'add'),
      expected,
      symbol: peekStack(astStack).symbol,
      lexer: lexer.toJSON(),
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.lexer,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.lexer,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (getExpected, peek = false) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    const nextToken = peek ? lexer.peekTokens()[0] : lexer.getCurrentToken();
    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? '...' : '') +
          matched
            .slice(0 - DEBUG_CONTEXT_LIMIT)
            .split('\n')
            .join(' '),
        next = input.slice(nextToken.start); //#JSCOVERAGE_ENDIF

      next =
        next.slice(0, DEBUG_CONTEXT_LIMIT).split('\n').join(' ') +
        (next.length > DEBUG_CONTEXT_LIMIT ? '...' : '');
      return past + next + '\n' + new Array(past.length + 1).join('-') + '^';
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      ['ALIAS', /ALIAS\b/gi],
      ['AND', /AND\b/gi],
      ['ATTRIBUTE', /ATTRIBUTE\b/gi],
      ['AS', /AS\b/gi],
      ['BEGIN', /BEGIN\b/gi],
      ['BOOLEAN', /BOOLEAN\b/gi],
      ['BYVAL', /BYVAL\b/gi],
      ['BYREF', /BYREF\b/gi],
      ['BYTE', /BYTE\b/gi],
      ['CALL', /CALL\b/gi],
      ['CASE', /CASE\b/gi],
      ['CONST', /CONST\b/gi],
      ['DECLARE', /DECLARE\b/gi],
      ['DEFBOOL', /DEFBOOL\b/gi],
      ['DEFBYTE', /DEFBYTE\b/gi],
      ['DEFDATE', /DEFDATE\b/gi],
      ['DEFDBL', /DEFDBL\b/gi],
      ['DEFDEC', /DEFDEC\b/gi],
      ['DEFCUR', /DEFCUR\b/gi],
      ['DEFINT', /DEFINT\b/gi],
      ['DEFLNG', /DEFLNG\b/gi],
      ['DEFOBJ', /DEFOBJ\b/gi],
      ['DEFSNG', /DEFSNG\b/gi],
      ['DEFSTR', /DEFSTR\b/gi],
      ['DEFVAR', /DEFVAR\b/gi],
      ['DIM', /DIM\b/gi],
      ['DO', /DO\b/gi],
      ['DOUBLE', /DOUBLE\b/gi],
      ['EACH', /EACH\b/gi],
      ['ELSE', /ELSE\b/gi],
      ['ELSEIF', /ELSEIF\b/gi],
      ['END_ENUM', /END ENUM\b/gi],
      ['END_FUNCTION', /END FUNCTION\b/gi],
      ['END_IF', /END IF\b/gi],
      ['END_PROPERTY', /END PROPERTY\b/gi],
      ['END_SELECT', /END SELECT\b/gi],
      ['END_SUB', /END SUB\b/gi],
      ['END_TYPE', /END TYPE\b/gi],
      ['END_WITH', /END WITH\b/gi],
      ['END', /END\b/gi],
      ['ENUM', /ENUM\b/gi],
      ['EQV', /EQV\b/gi],
      ['ERASE', /ERASE\b/gi],
      ['ERROR', /ERROR\b/gi],
      ['EVENT', /EVENT\b/gi],
      ['EXIT_DO', /EXIT DO\b/gi],
      ['EXIT_FOR', /EXIT FOR\b/gi],
      ['EXIT_FUNCTION', /EXIT FUNCTION\b/gi],
      ['EXIT_PROPERTY', /EXIT PROPERTY\b/gi],
      ['EXIT_SUB', /EXIT SUB\b/gi],
      ['FALSE', /FALSE\b/gi],
      ['FRIEND', /FRIEND\b/gi],
      ['FOR', /FOR\b/gi],
      ['FUNCTION', /FUNCTION\b/gi],
      ['GET', /GET\b/gi],
      ['GLOBAL', /GLOBAL\b/gi],
      ['GOSUB', /GOSUB\b/gi],
      ['GOTO', /GOTO\b/gi],
      ['IF', /IF\b/gi],
      ['IMPLEMENTS', /IMPLEMENTS\b/gi],
      ['IN', /IN\b/gi],
      ['IS', /IS\b/gi],
      ['INTEGER', /INTEGER\b/gi],
      ['LONG', /LONG\b/gi],
      ['LOOP', /LOOP\b/gi],
      ['LEN', /LEN\b/gi],
      ['LET', /LET\b/gi],
      ['LIB', /LIB\b/gi],
      ['LIKE', /LIKE\b/gi],
      ['LSET', /LSET\b/gi],
      ['MACRO_CONST', /#CONST\b/gi],
      ['MACRO_IF', /#IF\b/gi],
      ['MACRO_ELSEIF', /#ELSEIF\b/gi],
      ['MACRO_ELSE', /#ELSE\b/gi],
      ['MACRO_END_IF', /#END IF\b/gi],
      ['MOD', /MOD\b/gi],
      ['NEXT', /NEXT\b/gi],
      ['NEW', /NEW\b/gi],
      ['NOT', /NOT\b/gi],
      ['NOTHING', /NOTHING\b/gi],
      ['NULL', /NULL\b/gi],
      ['ON', /ON\b/gi],
      ['ON_ERROR', /ON ERROR\b/gi],
      ['ON_LOCAL_ERROR', /ON LOCAL ERROR\b/gi],
      ['OPTIONAL', /OPTIONAL\b/gi],
      ['OPTION_BASE', /OPTION BASE\b/gi],
      ['OPTION_EXPLICIT', /OPTION EXPLICIT\b/gi],
      ['OPTION_COMPARE', /OPTION COMPARE\b/gi],
      ['OPTION_PRIVATE_MODULE', /OPTION PRIVATE MODULE\b/gi],
      ['OR', /OR\b/gi],
      ['PARAMARRAY', /PARAMARRAY\b/gi],
      ['PRESERVE', /PRESERVE\b/gi],
      ['PRIVATE', /PRIVATE\b/gi],
      ['PROPERTY_GET', /PROPERTY GET\b/gi],
      ['PROPERTY_LET', /PROPERTY LET\b/gi],
      ['PROPERTY_SET', /PROPERTY SET\b/gi],
      ['PTRSAFE', /PTRSAFE\b/gi],
      ['PUBLIC', /PUBLIC\b/gi],
      ['RAISEEVENT', /RAISEEVENT\b/gi],
      ['REDIM', /REDIM\b/gi],
      ['RESET', /RESET\b/gi],
      ['RESUME', /RESUME\b/gi],
      ['RETURN', /RETURN\b/gi],
      ['SELECT', /SELECT\b/gi],
      ['SET', /SET\b/gi],
      ['SINGLE', /SINGLE\b/gi],
      ['STATIC', /STATIC\b/gi],
      ['STEP', /STEP\b/gi],
      ['STOP', /STOP\b/gi],
      ['STRING', /STRING\b/gi],
      ['SUB', /SUB\b/gi],
      ['THEN', /THEN\b/gi],
      ['TO', /TO\b/gi],
      ['TRUE', /TRUE\b/gi],
      ['TYPEOF', /TYPEOF\b/gi],
      ['UNTIL', /UNTIL\b/gi],
      ['VARIANT', /VARIANT\b/gi],
      ['WEND', /WEND\b/gi],
      ['WHILE', /WHILE\b/gi],
      ['WITH', /WITH\b/gi],
      ['WITHEVENTS', /WITHEVENTS\b/gi],
      ['XOR', /XOR\b/gi],
      ['ASSIGN', /:=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS_EQ', /\-=/g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS_EQ', /\+=/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"[^"\r\n]*"/g],
      ['INTEGERLITERAL', /(\+|-)?[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ['.', /\./g],
      ['iCS_S_MemberCall+', /iCS_S_MemberCall\+/g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1*']],
      [
        'moduleDeclarations_group_def_5',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_5*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_7',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_7*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'RPAREN',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_9', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_9*', 'endOfStatement']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['eraseStmt_group_def_11', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_11*']],
      ['redimStmt_group_def_13', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_13*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_def_15', ['EQ']],
      ['letStmt_group_14', ['letStmt_group_def_15']],
      ['letStmt_group_def_16', ['PLUS_EQ']],
      ['letStmt_group_14', ['letStmt_group_def_16']],
      ['letStmt_group_def_17', ['MINUS_EQ']],
      ['letStmt_group_14', ['letStmt_group_def_17']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_14', 'valueStmt'],
      ],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_19',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_21', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'implicitCallStmt_InStmt?',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_19?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_19?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall',
        [
          'implicitCallStmt_InStmt',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'ambiguousIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_21?',
        ],
      ],
      ['argsCall_group_def_27', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_27*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_29', ['DIM']],
      ['variableStmt_group_28', ['variableStmt_group_def_29']],
      ['variableStmt_group_def_30', ['STATIC']],
      ['variableStmt_group_28', ['variableStmt_group_def_30']],
      ['variableStmt_group_def_31', ['visibility']],
      ['variableStmt_group_28', ['variableStmt_group_def_31']],
      [
        'variableStmt',
        ['variableStmt_group_28', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['variableListStmt_group_def_33', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_33*'],
      ],
      ['variableSubStmt_group_def_35', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_35?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_11*']],
      ['subscript__group_def_38', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_38?', 'valueStmt']],
      ['subscripts_group_def_40', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_40*']],
      ['subscript_', ['subscript__group_def_38?', 'valueStmt']],
      ['argList_group_def_44', [',', 'arg']],
      ['argList_group_def_45', ['arg', 'argList_group_def_44*']],
      ['argList', ['LPAREN', 'argList_group_def_45?', 'RPAREN']],
      ['valueStmt', ['literal']],
      ['valueStmt', ['implicitCallStmt_InStmt']],
      ['valueStmt', ['NEW', 'valueStmt']],
      ['valueStmt', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_47', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_46', ['iCS_S_MembersCall_group_def_47']],
      ['iCS_S_MembersCall_group_def_48', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_46', ['iCS_S_MembersCall_group_def_48']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_46?',
          'iCS_S_MemberCall',
          'iCS_S_MemberCall*',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      ['iCS_S_MemberCall_group_def_51', ['.']],
      ['iCS_S_MemberCall_group_50', ['iCS_S_MemberCall_group_def_51']],
      ['iCS_S_MemberCall_group_def_52', ['!']],
      ['iCS_S_MemberCall_group_50', ['iCS_S_MemberCall_group_def_52']],
      ['iCS_S_MemberCall_group_53', ['iCS_S_MembersCall_group_def_47']],
      ['iCS_S_MemberCall_group_53', ['iCS_S_MembersCall_group_def_48']],
      [
        'iCS_S_MemberCall',
        ['iCS_S_MemberCall_group_50', 'iCS_S_MemberCall_group_53'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_21*',
        ],
      ],
      ['dictionaryCallStmt', ['!', 'ambiguousIdentifier', 'typeHint?']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_57', ['BYVAL']],
      ['arg_group_56', ['arg_group_def_57']],
      ['arg_group_def_58', ['BYREF']],
      ['arg_group_56', ['arg_group_def_58']],
      ['arg_group_def_60', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_56?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_60?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type__group_def_62', ['baseType']],
      ['type__group_61', ['type__group_def_62']],
      ['type__group_def_63', ['complexType']],
      ['type__group_61', ['type__group_def_63']],
      ['type_', ['type__group_61', 'arg_group_def_60?']],
      ['complexType_group_66', ['iCS_S_MemberCall_group_def_51']],
      ['complexType_group_66', ['iCS_S_MemberCall_group_def_52']],
      [
        'complexType_group_def_67',
        ['complexType_group_66', 'ambiguousIdentifier'],
      ],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_67*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType_group_def_69', ['MULT', 'valueStmt']],
      ['baseType', ['STRING', 'baseType_group_def_69?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['fieldLength', ['MULT', 'ambiguousIdentifier']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['ERROR']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {};
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 19, 35, 45, 47, 56, 57, 58, 59, 60, 61, 66, 67, 74, 77, 78,
    79, 80, 81, 82, 84, 86, 89, 91, 94, 95, 104, 105, 106, 107, 109, 110, 111,
    112, 113, 114, 131, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 146,
    155,
  ]);
  const parserPredictTable = {
    $START: {
      COMMENT: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      NEWLINE: [0],
      REMCOMMENT: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      COMMENT: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      NEWLINE: [1],
      REMCOMMENT: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
      ERASE: [9],
      EXIT_DO: [9],
      EXIT_FOR: [9],
      EXIT_FUNCTION: [9],
      EXIT_PROPERTY: [9],
      EXIT_SUB: [9],
      END: [9],
      CALL: [9],
      SET: [9],
      REDIM: [9],
      LET: [9],
      '.': [9],
      '!': [9],
      ALIAS: [9],
      AND: [9],
      ATTRIBUTE: [9],
      AS: [9],
      BEGIN: [9],
      BOOLEAN: [9],
      BYVAL: [9],
      BYREF: [9],
      BYTE: [9],
      CASE: [9],
      CONST: [9],
      DECLARE: [9],
      DEFBOOL: [9],
      DEFBYTE: [9],
      DEFDATE: [9],
      DEFDBL: [9],
      DEFDEC: [9],
      DEFCUR: [9],
      DEFINT: [9],
      DEFLNG: [9],
      DEFOBJ: [9],
      DEFSNG: [9],
      DEFSTR: [9],
      DEFVAR: [9],
      DIM: [9],
      DO: [9],
      DOUBLE: [9],
      EACH: [9],
      ELSE: [9],
      ELSEIF: [9],
      END_ENUM: [9],
      END_FUNCTION: [9],
      END_IF: [9],
      END_PROPERTY: [9],
      END_SELECT: [9],
      END_SUB: [9],
      END_TYPE: [9],
      END_WITH: [9],
      ENUM: [9],
      EQV: [9],
      ERROR: [9],
      EVENT: [9],
      FALSE: [9],
      FRIEND: [9],
      FOR: [9],
      FUNCTION: [9],
      GET: [9],
      GLOBAL: [9],
      GOSUB: [9],
      GOTO: [9],
      IF: [9],
      IMPLEMENTS: [9],
      IN: [9],
      IS: [9],
      INTEGER: [9],
      LONG: [9],
      LOOP: [9],
      LEN: [9],
      LIB: [9],
      LIKE: [9],
      LSET: [9],
      MACRO_CONST: [9],
      MACRO_IF: [9],
      MACRO_ELSEIF: [9],
      MACRO_ELSE: [9],
      MACRO_END_IF: [9],
      MOD: [9],
      NEXT: [9],
      NEW: [9],
      NOT: [9],
      NOTHING: [9],
      NULL: [9],
      ON: [9],
      ON_ERROR: [9],
      ON_LOCAL_ERROR: [9],
      OPTIONAL: [9],
      OPTION_BASE: [9],
      OPTION_EXPLICIT: [9],
      OPTION_COMPARE: [9],
      OPTION_PRIVATE_MODULE: [9],
      OR: [9],
      PARAMARRAY: [9],
      PRESERVE: [9],
      PRIVATE: [9],
      PROPERTY_GET: [9],
      PROPERTY_LET: [9],
      PROPERTY_SET: [9],
      PTRSAFE: [9],
      PUBLIC: [9],
      RAISEEVENT: [9],
      RESET: [9],
      RESUME: [9],
      RETURN: [9],
      SELECT: [9],
      SINGLE: [9],
      STATIC: [9],
      STEP: [9],
      STOP: [9],
      STRING: [9],
      SUB: [9],
      THEN: [9],
      TO: [9],
      TRUE: [9],
      TYPEOF: [9],
      UNTIL: [9],
      VARIANT: [9],
      WEND: [9],
      WHILE: [9],
      WITH: [9],
      WITHEVENTS: [9],
      XOR: [9],
      IDENTIFIER: [9],
    },
    moduleDeclarations_group_def_5: {
      NEWLINE: [10],
      COMMENT: [10],
      REMCOMMENT: [10],
    },
    moduleDeclarations: {
      COMMENT: [11],
      DIM: [11],
      STATIC: [11],
      PRIVATE: [11],
      PUBLIC: [11],
      FRIEND: [11],
      GLOBAL: [11],
      OPTION_BASE: [11],
      OPTION_COMPARE: [11],
      OPTION_EXPLICIT: [11],
      OPTION_PRIVATE_MODULE: [11],
    },
    moduleDeclarationsElement: {
      COMMENT: [12],
      DIM: [13],
      STATIC: [13],
      PRIVATE: [13],
      PUBLIC: [13],
      FRIEND: [13],
      GLOBAL: [13],
      OPTION_BASE: [14],
      OPTION_COMPARE: [14],
      OPTION_EXPLICIT: [14],
      OPTION_PRIVATE_MODULE: [14],
    },
    moduleOption: {
      OPTION_BASE: [15],
      OPTION_COMPARE: [16],
      OPTION_EXPLICIT: [17],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleBody_group_def_7: {
      NEWLINE: [19],
      COMMENT: [19],
      REMCOMMENT: [19],
    },
    moduleBody: {
      PRIVATE: [20],
      PUBLIC: [20],
      FRIEND: [20],
      GLOBAL: [20],
      STATIC: [20],
      FUNCTION: [20],
      PROPERTY_GET: [20],
      PROPERTY_SET: [20],
      PROPERTY_LET: [20],
      SUB: [20],
    },
    moduleBodyElement: {
      PRIVATE: [21, 22, 23, 24, 25],
      PUBLIC: [21, 22, 23, 24, 25],
      FRIEND: [21, 22, 23, 24, 25],
      GLOBAL: [21, 22, 23, 24, 25],
      STATIC: [21, 22, 23, 24, 25],
      FUNCTION: [21],
      PROPERTY_GET: [22],
      PROPERTY_SET: [23],
      PROPERTY_LET: [24],
      SUB: [25],
    },
    visibility: {
      PRIVATE: [26],
      PUBLIC: [27],
      FRIEND: [28],
      GLOBAL: [29],
    },
    subStmt: {
      PRIVATE: [30],
      PUBLIC: [30],
      FRIEND: [30],
      GLOBAL: [30],
      STATIC: [30],
      SUB: [30],
    },
    propertyGetStmt: {
      PRIVATE: [31],
      PUBLIC: [31],
      FRIEND: [31],
      GLOBAL: [31],
      STATIC: [31],
      PROPERTY_GET: [31],
    },
    propertySetStmt: {
      PRIVATE: [32],
      PUBLIC: [32],
      FRIEND: [32],
      GLOBAL: [32],
      STATIC: [32],
      PROPERTY_SET: [32],
    },
    propertyLetStmt: {
      PRIVATE: [33],
      PUBLIC: [33],
      FRIEND: [33],
      GLOBAL: [33],
      STATIC: [33],
      PROPERTY_LET: [33],
    },
    functionStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      FUNCTION: [34],
    },
    block_group_def_9: {
      NEWLINE: [35],
      COMMENT: [35],
      REMCOMMENT: [35],
      COLON: [35],
      ERASE: [35],
      EXIT_DO: [35],
      EXIT_FOR: [35],
      EXIT_FUNCTION: [35],
      EXIT_PROPERTY: [35],
      EXIT_SUB: [35],
      END: [35],
      CALL: [35],
      SET: [35],
      REDIM: [35],
      LET: [35],
      '.': [35],
      '!': [35],
      ALIAS: [35],
      AND: [35],
      ATTRIBUTE: [35],
      AS: [35],
      BEGIN: [35],
      BOOLEAN: [35],
      BYVAL: [35],
      BYREF: [35],
      BYTE: [35],
      CASE: [35],
      CONST: [35],
      DECLARE: [35],
      DEFBOOL: [35],
      DEFBYTE: [35],
      DEFDATE: [35],
      DEFDBL: [35],
      DEFDEC: [35],
      DEFCUR: [35],
      DEFINT: [35],
      DEFLNG: [35],
      DEFOBJ: [35],
      DEFSNG: [35],
      DEFSTR: [35],
      DEFVAR: [35],
      DIM: [35],
      DO: [35],
      DOUBLE: [35],
      EACH: [35],
      ELSE: [35],
      ELSEIF: [35],
      END_ENUM: [35],
      END_FUNCTION: [35],
      END_IF: [35],
      END_PROPERTY: [35],
      END_SELECT: [35],
      END_SUB: [35],
      END_TYPE: [35],
      END_WITH: [35],
      ENUM: [35],
      EQV: [35],
      ERROR: [35],
      EVENT: [35],
      FALSE: [35],
      FRIEND: [35],
      FOR: [35],
      FUNCTION: [35],
      GET: [35],
      GLOBAL: [35],
      GOSUB: [35],
      GOTO: [35],
      IF: [35],
      IMPLEMENTS: [35],
      IN: [35],
      IS: [35],
      INTEGER: [35],
      LONG: [35],
      LOOP: [35],
      LEN: [35],
      LIB: [35],
      LIKE: [35],
      LSET: [35],
      MACRO_CONST: [35],
      MACRO_IF: [35],
      MACRO_ELSEIF: [35],
      MACRO_ELSE: [35],
      MACRO_END_IF: [35],
      MOD: [35],
      NEXT: [35],
      NEW: [35],
      NOT: [35],
      NOTHING: [35],
      NULL: [35],
      ON: [35],
      ON_ERROR: [35],
      ON_LOCAL_ERROR: [35],
      OPTIONAL: [35],
      OPTION_BASE: [35],
      OPTION_EXPLICIT: [35],
      OPTION_COMPARE: [35],
      OPTION_PRIVATE_MODULE: [35],
      OR: [35],
      PARAMARRAY: [35],
      PRESERVE: [35],
      PRIVATE: [35],
      PROPERTY_GET: [35],
      PROPERTY_LET: [35],
      PROPERTY_SET: [35],
      PTRSAFE: [35],
      PUBLIC: [35],
      RAISEEVENT: [35],
      RESET: [35],
      RESUME: [35],
      RETURN: [35],
      SELECT: [35],
      SINGLE: [35],
      STATIC: [35],
      STEP: [35],
      STOP: [35],
      STRING: [35],
      SUB: [35],
      THEN: [35],
      TO: [35],
      TRUE: [35],
      TYPEOF: [35],
      UNTIL: [35],
      VARIANT: [35],
      WEND: [35],
      WHILE: [35],
      WITH: [35],
      WITHEVENTS: [35],
      XOR: [35],
      IDENTIFIER: [35],
    },
    block: {
      ERASE: [36],
      EXIT_DO: [36],
      EXIT_FOR: [36],
      EXIT_FUNCTION: [36],
      EXIT_PROPERTY: [36],
      EXIT_SUB: [36],
      END: [36],
      CALL: [36],
      SET: [36],
      REDIM: [36],
      LET: [36],
      '.': [36],
      '!': [36],
      ALIAS: [36],
      AND: [36],
      ATTRIBUTE: [36],
      AS: [36],
      BEGIN: [36],
      BOOLEAN: [36],
      BYVAL: [36],
      BYREF: [36],
      BYTE: [36],
      CASE: [36],
      CONST: [36],
      DECLARE: [36],
      DEFBOOL: [36],
      DEFBYTE: [36],
      DEFDATE: [36],
      DEFDBL: [36],
      DEFDEC: [36],
      DEFCUR: [36],
      DEFINT: [36],
      DEFLNG: [36],
      DEFOBJ: [36],
      DEFSNG: [36],
      DEFSTR: [36],
      DEFVAR: [36],
      DIM: [36],
      DO: [36],
      DOUBLE: [36],
      EACH: [36],
      ELSE: [36],
      ELSEIF: [36],
      END_ENUM: [36],
      END_FUNCTION: [36],
      END_IF: [36],
      END_PROPERTY: [36],
      END_SELECT: [36],
      END_SUB: [36],
      END_TYPE: [36],
      END_WITH: [36],
      ENUM: [36],
      EQV: [36],
      ERROR: [36],
      EVENT: [36],
      FALSE: [36],
      FRIEND: [36],
      FOR: [36],
      FUNCTION: [36],
      GET: [36],
      GLOBAL: [36],
      GOSUB: [36],
      GOTO: [36],
      IF: [36],
      IMPLEMENTS: [36],
      IN: [36],
      IS: [36],
      INTEGER: [36],
      LONG: [36],
      LOOP: [36],
      LEN: [36],
      LIB: [36],
      LIKE: [36],
      LSET: [36],
      MACRO_CONST: [36],
      MACRO_IF: [36],
      MACRO_ELSEIF: [36],
      MACRO_ELSE: [36],
      MACRO_END_IF: [36],
      MOD: [36],
      NEXT: [36],
      NEW: [36],
      NOT: [36],
      NOTHING: [36],
      NULL: [36],
      ON: [36],
      ON_ERROR: [36],
      ON_LOCAL_ERROR: [36],
      OPTIONAL: [36],
      OPTION_BASE: [36],
      OPTION_EXPLICIT: [36],
      OPTION_COMPARE: [36],
      OPTION_PRIVATE_MODULE: [36],
      OR: [36],
      PARAMARRAY: [36],
      PRESERVE: [36],
      PRIVATE: [36],
      PROPERTY_GET: [36],
      PROPERTY_LET: [36],
      PROPERTY_SET: [36],
      PTRSAFE: [36],
      PUBLIC: [36],
      RAISEEVENT: [36],
      RESET: [36],
      RESUME: [36],
      RETURN: [36],
      SELECT: [36],
      SINGLE: [36],
      STATIC: [36],
      STEP: [36],
      STOP: [36],
      STRING: [36],
      SUB: [36],
      THEN: [36],
      TO: [36],
      TRUE: [36],
      TYPEOF: [36],
      UNTIL: [36],
      VARIANT: [36],
      WEND: [36],
      WHILE: [36],
      WITH: [36],
      WITHEVENTS: [36],
      XOR: [36],
      IDENTIFIER: [36],
    },
    blockStmt: {
      ERASE: [37, 42, 44],
      EXIT_DO: [38, 42, 44],
      EXIT_FOR: [38, 42, 44],
      EXIT_FUNCTION: [38, 42, 44],
      EXIT_PROPERTY: [38, 42, 44],
      EXIT_SUB: [38, 42, 44],
      END: [38, 42, 44],
      CALL: [39, 42, 44],
      SET: [40, 42, 44],
      REDIM: [41, 42, 44],
      LET: [42, 44],
      '.': [42, 44],
      '!': [42, 44],
      ALIAS: [42, 44],
      AND: [42, 44],
      ATTRIBUTE: [42, 44],
      AS: [42, 44],
      BEGIN: [42, 44],
      BOOLEAN: [42, 44],
      BYVAL: [42, 44],
      BYREF: [42, 44],
      BYTE: [42, 44],
      CASE: [42, 44],
      CONST: [42, 44],
      DECLARE: [42, 44],
      DEFBOOL: [42, 44],
      DEFBYTE: [42, 44],
      DEFDATE: [42, 44],
      DEFDBL: [42, 44],
      DEFDEC: [42, 44],
      DEFCUR: [42, 44],
      DEFINT: [42, 44],
      DEFLNG: [42, 44],
      DEFOBJ: [42, 44],
      DEFSNG: [42, 44],
      DEFSTR: [42, 44],
      DEFVAR: [42, 44],
      DIM: [42, 43, 44],
      DO: [42, 44],
      DOUBLE: [42, 44],
      EACH: [42, 44],
      ELSE: [42, 44],
      ELSEIF: [42, 44],
      END_ENUM: [42, 44],
      END_FUNCTION: [42, 44],
      END_IF: [42, 44],
      END_PROPERTY: [42, 44],
      END_SELECT: [42, 44],
      END_SUB: [42, 44],
      END_TYPE: [42, 44],
      END_WITH: [42, 44],
      ENUM: [42, 44],
      EQV: [42, 44],
      ERROR: [42, 44],
      EVENT: [42, 44],
      FALSE: [42, 44],
      FRIEND: [42, 43, 44],
      FOR: [42, 44],
      FUNCTION: [42, 44],
      GET: [42, 44],
      GLOBAL: [42, 43, 44],
      GOSUB: [42, 44],
      GOTO: [42, 44],
      IF: [42, 44],
      IMPLEMENTS: [42, 44],
      IN: [42, 44],
      IS: [42, 44],
      INTEGER: [42, 44],
      LONG: [42, 44],
      LOOP: [42, 44],
      LEN: [42, 44],
      LIB: [42, 44],
      LIKE: [42, 44],
      LSET: [42, 44],
      MACRO_CONST: [42, 44],
      MACRO_IF: [42, 44],
      MACRO_ELSEIF: [42, 44],
      MACRO_ELSE: [42, 44],
      MACRO_END_IF: [42, 44],
      MOD: [42, 44],
      NEXT: [42, 44],
      NEW: [42, 44],
      NOT: [42, 44],
      NOTHING: [42, 44],
      NULL: [42, 44],
      ON: [42, 44],
      ON_ERROR: [42, 44],
      ON_LOCAL_ERROR: [42, 44],
      OPTIONAL: [42, 44],
      OPTION_BASE: [42, 44],
      OPTION_EXPLICIT: [42, 44],
      OPTION_COMPARE: [42, 44],
      OPTION_PRIVATE_MODULE: [42, 44],
      OR: [42, 44],
      PARAMARRAY: [42, 44],
      PRESERVE: [42, 44],
      PRIVATE: [42, 43, 44],
      PROPERTY_GET: [42, 44],
      PROPERTY_LET: [42, 44],
      PROPERTY_SET: [42, 44],
      PTRSAFE: [42, 44],
      PUBLIC: [42, 43, 44],
      RAISEEVENT: [42, 44],
      RESET: [42, 44],
      RESUME: [42, 44],
      RETURN: [42, 44],
      SELECT: [42, 44],
      SINGLE: [42, 44],
      STATIC: [42, 43, 44],
      STEP: [42, 44],
      STOP: [42, 44],
      STRING: [42, 44],
      SUB: [42, 44],
      THEN: [42, 44],
      TO: [42, 44],
      TRUE: [42, 44],
      TYPEOF: [42, 44],
      UNTIL: [42, 44],
      VARIANT: [42, 44],
      WEND: [42, 44],
      WHILE: [42, 44],
      WITH: [42, 44],
      WITHEVENTS: [42, 44],
      XOR: [42, 44],
      IDENTIFIER: [42, 44],
    },
    eraseStmt_group_def_11: {
      ',': [45],
    },
    eraseStmt: {
      ERASE: [46],
    },
    redimStmt_group_def_13: {
      ',': [47],
    },
    redimStmt: {
      REDIM: [48],
    },
    redimSubStmt: {
      '.': [49],
      '!': [49],
      ALIAS: [49],
      AND: [49],
      ATTRIBUTE: [49],
      AS: [49],
      BEGIN: [49],
      BOOLEAN: [49],
      BYVAL: [49],
      BYREF: [49],
      BYTE: [49],
      CALL: [49],
      CASE: [49],
      CONST: [49],
      DECLARE: [49],
      DEFBOOL: [49],
      DEFBYTE: [49],
      DEFDATE: [49],
      DEFDBL: [49],
      DEFDEC: [49],
      DEFCUR: [49],
      DEFINT: [49],
      DEFLNG: [49],
      DEFOBJ: [49],
      DEFSNG: [49],
      DEFSTR: [49],
      DEFVAR: [49],
      DIM: [49],
      DO: [49],
      DOUBLE: [49],
      EACH: [49],
      ELSE: [49],
      ELSEIF: [49],
      END_ENUM: [49],
      END_FUNCTION: [49],
      END_IF: [49],
      END_PROPERTY: [49],
      END_SELECT: [49],
      END_SUB: [49],
      END_TYPE: [49],
      END_WITH: [49],
      END: [49],
      ENUM: [49],
      EQV: [49],
      ERASE: [49],
      ERROR: [49],
      EVENT: [49],
      EXIT_DO: [49],
      EXIT_FOR: [49],
      EXIT_FUNCTION: [49],
      EXIT_PROPERTY: [49],
      EXIT_SUB: [49],
      FALSE: [49],
      FRIEND: [49],
      FOR: [49],
      FUNCTION: [49],
      GET: [49],
      GLOBAL: [49],
      GOSUB: [49],
      GOTO: [49],
      IF: [49],
      IMPLEMENTS: [49],
      IN: [49],
      IS: [49],
      INTEGER: [49],
      LONG: [49],
      LOOP: [49],
      LEN: [49],
      LET: [49],
      LIB: [49],
      LIKE: [49],
      LSET: [49],
      MACRO_CONST: [49],
      MACRO_IF: [49],
      MACRO_ELSEIF: [49],
      MACRO_ELSE: [49],
      MACRO_END_IF: [49],
      MOD: [49],
      NEXT: [49],
      NEW: [49],
      NOT: [49],
      NOTHING: [49],
      NULL: [49],
      ON: [49],
      ON_ERROR: [49],
      ON_LOCAL_ERROR: [49],
      OPTIONAL: [49],
      OPTION_BASE: [49],
      OPTION_EXPLICIT: [49],
      OPTION_COMPARE: [49],
      OPTION_PRIVATE_MODULE: [49],
      OR: [49],
      PARAMARRAY: [49],
      PRESERVE: [49],
      PRIVATE: [49],
      PROPERTY_GET: [49],
      PROPERTY_LET: [49],
      PROPERTY_SET: [49],
      PTRSAFE: [49],
      PUBLIC: [49],
      RAISEEVENT: [49],
      REDIM: [49],
      RESET: [49],
      RESUME: [49],
      RETURN: [49],
      SELECT: [49],
      SET: [49],
      SINGLE: [49],
      STATIC: [49],
      STEP: [49],
      STOP: [49],
      STRING: [49],
      SUB: [49],
      THEN: [49],
      TO: [49],
      TRUE: [49],
      TYPEOF: [49],
      UNTIL: [49],
      VARIANT: [49],
      WEND: [49],
      WHILE: [49],
      WITH: [49],
      WITHEVENTS: [49],
      XOR: [49],
      IDENTIFIER: [49],
    },
    exitStmt: {
      EXIT_DO: [50],
      EXIT_FOR: [51],
      EXIT_FUNCTION: [52],
      EXIT_PROPERTY: [53],
      EXIT_SUB: [54],
      END: [55],
    },
    letStmt_group_def_15: {
      EQ: [56],
    },
    letStmt_group_14: {
      EQ: [57],
      PLUS_EQ: [59],
      MINUS_EQ: [61],
    },
    letStmt_group_def_16: {
      PLUS_EQ: [58],
    },
    letStmt_group_def_17: {
      MINUS_EQ: [60],
    },
    letStmt: {
      LET: [62],
      '.': [62],
      '!': [62],
      ALIAS: [62],
      AND: [62],
      ATTRIBUTE: [62],
      AS: [62],
      BEGIN: [62],
      BOOLEAN: [62],
      BYVAL: [62],
      BYREF: [62],
      BYTE: [62],
      CALL: [62],
      CASE: [62],
      CONST: [62],
      DECLARE: [62],
      DEFBOOL: [62],
      DEFBYTE: [62],
      DEFDATE: [62],
      DEFDBL: [62],
      DEFDEC: [62],
      DEFCUR: [62],
      DEFINT: [62],
      DEFLNG: [62],
      DEFOBJ: [62],
      DEFSNG: [62],
      DEFSTR: [62],
      DEFVAR: [62],
      DIM: [62],
      DO: [62],
      DOUBLE: [62],
      EACH: [62],
      ELSE: [62],
      ELSEIF: [62],
      END_ENUM: [62],
      END_FUNCTION: [62],
      END_IF: [62],
      END_PROPERTY: [62],
      END_SELECT: [62],
      END_SUB: [62],
      END_TYPE: [62],
      END_WITH: [62],
      END: [62],
      ENUM: [62],
      EQV: [62],
      ERASE: [62],
      ERROR: [62],
      EVENT: [62],
      EXIT_DO: [62],
      EXIT_FOR: [62],
      EXIT_FUNCTION: [62],
      EXIT_PROPERTY: [62],
      EXIT_SUB: [62],
      FALSE: [62],
      FRIEND: [62],
      FOR: [62],
      FUNCTION: [62],
      GET: [62],
      GLOBAL: [62],
      GOSUB: [62],
      GOTO: [62],
      IF: [62],
      IMPLEMENTS: [62],
      IN: [62],
      IS: [62],
      INTEGER: [62],
      LONG: [62],
      LOOP: [62],
      LEN: [62],
      LIB: [62],
      LIKE: [62],
      LSET: [62],
      MACRO_CONST: [62],
      MACRO_IF: [62],
      MACRO_ELSEIF: [62],
      MACRO_ELSE: [62],
      MACRO_END_IF: [62],
      MOD: [62],
      NEXT: [62],
      NEW: [62],
      NOT: [62],
      NOTHING: [62],
      NULL: [62],
      ON: [62],
      ON_ERROR: [62],
      ON_LOCAL_ERROR: [62],
      OPTIONAL: [62],
      OPTION_BASE: [62],
      OPTION_EXPLICIT: [62],
      OPTION_COMPARE: [62],
      OPTION_PRIVATE_MODULE: [62],
      OR: [62],
      PARAMARRAY: [62],
      PRESERVE: [62],
      PRIVATE: [62],
      PROPERTY_GET: [62],
      PROPERTY_LET: [62],
      PROPERTY_SET: [62],
      PTRSAFE: [62],
      PUBLIC: [62],
      RAISEEVENT: [62],
      REDIM: [62],
      RESET: [62],
      RESUME: [62],
      RETURN: [62],
      SELECT: [62],
      SET: [62],
      SINGLE: [62],
      STATIC: [62],
      STEP: [62],
      STOP: [62],
      STRING: [62],
      SUB: [62],
      THEN: [62],
      TO: [62],
      TRUE: [62],
      TYPEOF: [62],
      UNTIL: [62],
      VARIANT: [62],
      WEND: [62],
      WHILE: [62],
      WITH: [62],
      WITHEVENTS: [62],
      XOR: [62],
      IDENTIFIER: [62],
    },
    setStmt: {
      SET: [63],
    },
    explicitCallStmt: {
      CALL: [64, 65],
    },
    eCS_MemberProcedureCall_group_def_19: {
      LPAREN: [66],
    },
    eCS_MemberProcedureCall_group_def_21: {
      LPAREN: [67],
    },
    eCS_MemberProcedureCall: {
      CALL: [68],
    },
    eCS_ProcedureCall: {
      CALL: [69],
    },
    implicitCallStmt_InBlock: {
      '.': [70],
      '!': [70],
      ALIAS: [70, 71],
      AND: [70, 71],
      ATTRIBUTE: [70, 71],
      AS: [70, 71],
      BEGIN: [70, 71],
      BOOLEAN: [70, 71],
      BYVAL: [70, 71],
      BYREF: [70, 71],
      BYTE: [70, 71],
      CALL: [70, 71],
      CASE: [70, 71],
      CONST: [70, 71],
      DECLARE: [70, 71],
      DEFBOOL: [70, 71],
      DEFBYTE: [70, 71],
      DEFDATE: [70, 71],
      DEFDBL: [70, 71],
      DEFDEC: [70, 71],
      DEFCUR: [70, 71],
      DEFINT: [70, 71],
      DEFLNG: [70, 71],
      DEFOBJ: [70, 71],
      DEFSNG: [70, 71],
      DEFSTR: [70, 71],
      DEFVAR: [70, 71],
      DIM: [70, 71],
      DO: [70, 71],
      DOUBLE: [70, 71],
      EACH: [70, 71],
      ELSE: [70, 71],
      ELSEIF: [70, 71],
      END_ENUM: [70, 71],
      END_FUNCTION: [70, 71],
      END_IF: [70, 71],
      END_PROPERTY: [70, 71],
      END_SELECT: [70, 71],
      END_SUB: [70, 71],
      END_TYPE: [70, 71],
      END_WITH: [70, 71],
      END: [70, 71],
      ENUM: [70, 71],
      EQV: [70, 71],
      ERASE: [70, 71],
      ERROR: [70, 71],
      EVENT: [70, 71],
      EXIT_DO: [70, 71],
      EXIT_FOR: [70, 71],
      EXIT_FUNCTION: [70, 71],
      EXIT_PROPERTY: [70, 71],
      EXIT_SUB: [70, 71],
      FALSE: [70, 71],
      FRIEND: [70, 71],
      FOR: [70, 71],
      FUNCTION: [70, 71],
      GET: [70, 71],
      GLOBAL: [70, 71],
      GOSUB: [70, 71],
      GOTO: [70, 71],
      IF: [70, 71],
      IMPLEMENTS: [70, 71],
      IN: [70, 71],
      IS: [70, 71],
      INTEGER: [70, 71],
      LONG: [70, 71],
      LOOP: [70, 71],
      LEN: [70, 71],
      LET: [70, 71],
      LIB: [70, 71],
      LIKE: [70, 71],
      LSET: [70, 71],
      MACRO_CONST: [70, 71],
      MACRO_IF: [70, 71],
      MACRO_ELSEIF: [70, 71],
      MACRO_ELSE: [70, 71],
      MACRO_END_IF: [70, 71],
      MOD: [70, 71],
      NEXT: [70, 71],
      NEW: [70, 71],
      NOT: [70, 71],
      NOTHING: [70, 71],
      NULL: [70, 71],
      ON: [70, 71],
      ON_ERROR: [70, 71],
      ON_LOCAL_ERROR: [70, 71],
      OPTIONAL: [70, 71],
      OPTION_BASE: [70, 71],
      OPTION_EXPLICIT: [70, 71],
      OPTION_COMPARE: [70, 71],
      OPTION_PRIVATE_MODULE: [70, 71],
      OR: [70, 71],
      PARAMARRAY: [70, 71],
      PRESERVE: [70, 71],
      PRIVATE: [70, 71],
      PROPERTY_GET: [70, 71],
      PROPERTY_LET: [70, 71],
      PROPERTY_SET: [70, 71],
      PTRSAFE: [70, 71],
      PUBLIC: [70, 71],
      RAISEEVENT: [70, 71],
      REDIM: [70, 71],
      RESET: [70, 71],
      RESUME: [70, 71],
      RETURN: [70, 71],
      SELECT: [70, 71],
      SET: [70, 71],
      SINGLE: [70, 71],
      STATIC: [70, 71],
      STEP: [70, 71],
      STOP: [70, 71],
      STRING: [70, 71],
      SUB: [70, 71],
      THEN: [70, 71],
      TO: [70, 71],
      TRUE: [70, 71],
      TYPEOF: [70, 71],
      UNTIL: [70, 71],
      VARIANT: [70, 71],
      WEND: [70, 71],
      WHILE: [70, 71],
      WITH: [70, 71],
      WITHEVENTS: [70, 71],
      XOR: [70, 71],
      IDENTIFIER: [70, 71],
    },
    iCS_B_MemberProcedureCall: {
      '.': [72],
      '!': [72],
      ALIAS: [72],
      AND: [72],
      ATTRIBUTE: [72],
      AS: [72],
      BEGIN: [72],
      BOOLEAN: [72],
      BYVAL: [72],
      BYREF: [72],
      BYTE: [72],
      CALL: [72],
      CASE: [72],
      CONST: [72],
      DECLARE: [72],
      DEFBOOL: [72],
      DEFBYTE: [72],
      DEFDATE: [72],
      DEFDBL: [72],
      DEFDEC: [72],
      DEFCUR: [72],
      DEFINT: [72],
      DEFLNG: [72],
      DEFOBJ: [72],
      DEFSNG: [72],
      DEFSTR: [72],
      DEFVAR: [72],
      DIM: [72],
      DO: [72],
      DOUBLE: [72],
      EACH: [72],
      ELSE: [72],
      ELSEIF: [72],
      END_ENUM: [72],
      END_FUNCTION: [72],
      END_IF: [72],
      END_PROPERTY: [72],
      END_SELECT: [72],
      END_SUB: [72],
      END_TYPE: [72],
      END_WITH: [72],
      END: [72],
      ENUM: [72],
      EQV: [72],
      ERASE: [72],
      ERROR: [72],
      EVENT: [72],
      EXIT_DO: [72],
      EXIT_FOR: [72],
      EXIT_FUNCTION: [72],
      EXIT_PROPERTY: [72],
      EXIT_SUB: [72],
      FALSE: [72],
      FRIEND: [72],
      FOR: [72],
      FUNCTION: [72],
      GET: [72],
      GLOBAL: [72],
      GOSUB: [72],
      GOTO: [72],
      IF: [72],
      IMPLEMENTS: [72],
      IN: [72],
      IS: [72],
      INTEGER: [72],
      LONG: [72],
      LOOP: [72],
      LEN: [72],
      LET: [72],
      LIB: [72],
      LIKE: [72],
      LSET: [72],
      MACRO_CONST: [72],
      MACRO_IF: [72],
      MACRO_ELSEIF: [72],
      MACRO_ELSE: [72],
      MACRO_END_IF: [72],
      MOD: [72],
      NEXT: [72],
      NEW: [72],
      NOT: [72],
      NOTHING: [72],
      NULL: [72],
      ON: [72],
      ON_ERROR: [72],
      ON_LOCAL_ERROR: [72],
      OPTIONAL: [72],
      OPTION_BASE: [72],
      OPTION_EXPLICIT: [72],
      OPTION_COMPARE: [72],
      OPTION_PRIVATE_MODULE: [72],
      OR: [72],
      PARAMARRAY: [72],
      PRESERVE: [72],
      PRIVATE: [72],
      PROPERTY_GET: [72],
      PROPERTY_LET: [72],
      PROPERTY_SET: [72],
      PTRSAFE: [72],
      PUBLIC: [72],
      RAISEEVENT: [72],
      REDIM: [72],
      RESET: [72],
      RESUME: [72],
      RETURN: [72],
      SELECT: [72],
      SET: [72],
      SINGLE: [72],
      STATIC: [72],
      STEP: [72],
      STOP: [72],
      STRING: [72],
      SUB: [72],
      THEN: [72],
      TO: [72],
      TRUE: [72],
      TYPEOF: [72],
      UNTIL: [72],
      VARIANT: [72],
      WEND: [72],
      WHILE: [72],
      WITH: [72],
      WITHEVENTS: [72],
      XOR: [72],
      IDENTIFIER: [72],
    },
    iCS_B_ProcedureCall: {
      ALIAS: [73],
      AND: [73],
      ATTRIBUTE: [73],
      AS: [73],
      BEGIN: [73],
      BOOLEAN: [73],
      BYVAL: [73],
      BYREF: [73],
      BYTE: [73],
      CALL: [73],
      CASE: [73],
      CONST: [73],
      DECLARE: [73],
      DEFBOOL: [73],
      DEFBYTE: [73],
      DEFDATE: [73],
      DEFDBL: [73],
      DEFDEC: [73],
      DEFCUR: [73],
      DEFINT: [73],
      DEFLNG: [73],
      DEFOBJ: [73],
      DEFSNG: [73],
      DEFSTR: [73],
      DEFVAR: [73],
      DIM: [73],
      DO: [73],
      DOUBLE: [73],
      EACH: [73],
      ELSE: [73],
      ELSEIF: [73],
      END_ENUM: [73],
      END_FUNCTION: [73],
      END_IF: [73],
      END_PROPERTY: [73],
      END_SELECT: [73],
      END_SUB: [73],
      END_TYPE: [73],
      END_WITH: [73],
      END: [73],
      ENUM: [73],
      EQV: [73],
      ERASE: [73],
      ERROR: [73],
      EVENT: [73],
      EXIT_DO: [73],
      EXIT_FOR: [73],
      EXIT_FUNCTION: [73],
      EXIT_PROPERTY: [73],
      EXIT_SUB: [73],
      FALSE: [73],
      FRIEND: [73],
      FOR: [73],
      FUNCTION: [73],
      GET: [73],
      GLOBAL: [73],
      GOSUB: [73],
      GOTO: [73],
      IF: [73],
      IMPLEMENTS: [73],
      IN: [73],
      IS: [73],
      INTEGER: [73],
      LONG: [73],
      LOOP: [73],
      LEN: [73],
      LET: [73],
      LIB: [73],
      LIKE: [73],
      LSET: [73],
      MACRO_CONST: [73],
      MACRO_IF: [73],
      MACRO_ELSEIF: [73],
      MACRO_ELSE: [73],
      MACRO_END_IF: [73],
      MOD: [73],
      NEXT: [73],
      NEW: [73],
      NOT: [73],
      NOTHING: [73],
      NULL: [73],
      ON: [73],
      ON_ERROR: [73],
      ON_LOCAL_ERROR: [73],
      OPTIONAL: [73],
      OPTION_BASE: [73],
      OPTION_EXPLICIT: [73],
      OPTION_COMPARE: [73],
      OPTION_PRIVATE_MODULE: [73],
      OR: [73],
      PARAMARRAY: [73],
      PRESERVE: [73],
      PRIVATE: [73],
      PROPERTY_GET: [73],
      PROPERTY_LET: [73],
      PROPERTY_SET: [73],
      PTRSAFE: [73],
      PUBLIC: [73],
      RAISEEVENT: [73],
      REDIM: [73],
      RESET: [73],
      RESUME: [73],
      RETURN: [73],
      SELECT: [73],
      SET: [73],
      SINGLE: [73],
      STATIC: [73],
      STEP: [73],
      STOP: [73],
      STRING: [73],
      SUB: [73],
      THEN: [73],
      TO: [73],
      TRUE: [73],
      TYPEOF: [73],
      UNTIL: [73],
      VARIANT: [73],
      WEND: [73],
      WHILE: [73],
      WITH: [73],
      WITHEVENTS: [73],
      XOR: [73],
      IDENTIFIER: [73],
    },
    argsCall_group_def_27: {
      ',': [74],
    },
    argsCall: {
      ',': [75],
      INTEGERLITERAL: [75],
      STRINGLITERAL: [75],
      NOTHING: [75],
      NULL: [75],
      TRUE: [75],
      FALSE: [75],
      '.': [75],
      '!': [75],
      ALIAS: [75],
      AND: [75],
      ATTRIBUTE: [75],
      AS: [75],
      BEGIN: [75],
      BOOLEAN: [75],
      BYVAL: [75],
      BYREF: [75],
      BYTE: [75],
      CALL: [75],
      CASE: [75],
      CONST: [75],
      DECLARE: [75],
      DEFBOOL: [75],
      DEFBYTE: [75],
      DEFDATE: [75],
      DEFDBL: [75],
      DEFDEC: [75],
      DEFCUR: [75],
      DEFINT: [75],
      DEFLNG: [75],
      DEFOBJ: [75],
      DEFSNG: [75],
      DEFSTR: [75],
      DEFVAR: [75],
      DIM: [75],
      DO: [75],
      DOUBLE: [75],
      EACH: [75],
      ELSE: [75],
      ELSEIF: [75],
      END_ENUM: [75],
      END_FUNCTION: [75],
      END_IF: [75],
      END_PROPERTY: [75],
      END_SELECT: [75],
      END_SUB: [75],
      END_TYPE: [75],
      END_WITH: [75],
      END: [75],
      ENUM: [75],
      EQV: [75],
      ERASE: [75],
      ERROR: [75],
      EVENT: [75],
      EXIT_DO: [75],
      EXIT_FOR: [75],
      EXIT_FUNCTION: [75],
      EXIT_PROPERTY: [75],
      EXIT_SUB: [75],
      FRIEND: [75],
      FOR: [75],
      FUNCTION: [75],
      GET: [75],
      GLOBAL: [75],
      GOSUB: [75],
      GOTO: [75],
      IF: [75],
      IMPLEMENTS: [75],
      IN: [75],
      IS: [75],
      INTEGER: [75],
      LONG: [75],
      LOOP: [75],
      LEN: [75],
      LET: [75],
      LIB: [75],
      LIKE: [75],
      LSET: [75],
      MACRO_CONST: [75],
      MACRO_IF: [75],
      MACRO_ELSEIF: [75],
      MACRO_ELSE: [75],
      MACRO_END_IF: [75],
      MOD: [75],
      NEXT: [75],
      NEW: [75],
      NOT: [75],
      ON: [75],
      ON_ERROR: [75],
      ON_LOCAL_ERROR: [75],
      OPTIONAL: [75],
      OPTION_BASE: [75],
      OPTION_EXPLICIT: [75],
      OPTION_COMPARE: [75],
      OPTION_PRIVATE_MODULE: [75],
      OR: [75],
      PARAMARRAY: [75],
      PRESERVE: [75],
      PRIVATE: [75],
      PROPERTY_GET: [75],
      PROPERTY_LET: [75],
      PROPERTY_SET: [75],
      PTRSAFE: [75],
      PUBLIC: [75],
      RAISEEVENT: [75],
      REDIM: [75],
      RESET: [75],
      RESUME: [75],
      RETURN: [75],
      SELECT: [75],
      SET: [75],
      SINGLE: [75],
      STATIC: [75],
      STEP: [75],
      STOP: [75],
      STRING: [75],
      SUB: [75],
      THEN: [75],
      TO: [75],
      TYPEOF: [75],
      UNTIL: [75],
      VARIANT: [75],
      WEND: [75],
      WHILE: [75],
      WITH: [75],
      WITHEVENTS: [75],
      XOR: [75],
      IDENTIFIER: [75],
    },
    argCall: {
      INTEGERLITERAL: [76],
      STRINGLITERAL: [76],
      NOTHING: [76],
      NULL: [76],
      TRUE: [76],
      FALSE: [76],
      '.': [76],
      '!': [76],
      ALIAS: [76],
      AND: [76],
      ATTRIBUTE: [76],
      AS: [76],
      BEGIN: [76],
      BOOLEAN: [76],
      BYVAL: [76],
      BYREF: [76],
      BYTE: [76],
      CALL: [76],
      CASE: [76],
      CONST: [76],
      DECLARE: [76],
      DEFBOOL: [76],
      DEFBYTE: [76],
      DEFDATE: [76],
      DEFDBL: [76],
      DEFDEC: [76],
      DEFCUR: [76],
      DEFINT: [76],
      DEFLNG: [76],
      DEFOBJ: [76],
      DEFSNG: [76],
      DEFSTR: [76],
      DEFVAR: [76],
      DIM: [76],
      DO: [76],
      DOUBLE: [76],
      EACH: [76],
      ELSE: [76],
      ELSEIF: [76],
      END_ENUM: [76],
      END_FUNCTION: [76],
      END_IF: [76],
      END_PROPERTY: [76],
      END_SELECT: [76],
      END_SUB: [76],
      END_TYPE: [76],
      END_WITH: [76],
      END: [76],
      ENUM: [76],
      EQV: [76],
      ERASE: [76],
      ERROR: [76],
      EVENT: [76],
      EXIT_DO: [76],
      EXIT_FOR: [76],
      EXIT_FUNCTION: [76],
      EXIT_PROPERTY: [76],
      EXIT_SUB: [76],
      FRIEND: [76],
      FOR: [76],
      FUNCTION: [76],
      GET: [76],
      GLOBAL: [76],
      GOSUB: [76],
      GOTO: [76],
      IF: [76],
      IMPLEMENTS: [76],
      IN: [76],
      IS: [76],
      INTEGER: [76],
      LONG: [76],
      LOOP: [76],
      LEN: [76],
      LET: [76],
      LIB: [76],
      LIKE: [76],
      LSET: [76],
      MACRO_CONST: [76],
      MACRO_IF: [76],
      MACRO_ELSEIF: [76],
      MACRO_ELSE: [76],
      MACRO_END_IF: [76],
      MOD: [76],
      NEXT: [76],
      NEW: [76],
      NOT: [76],
      ON: [76],
      ON_ERROR: [76],
      ON_LOCAL_ERROR: [76],
      OPTIONAL: [76],
      OPTION_BASE: [76],
      OPTION_EXPLICIT: [76],
      OPTION_COMPARE: [76],
      OPTION_PRIVATE_MODULE: [76],
      OR: [76],
      PARAMARRAY: [76],
      PRESERVE: [76],
      PRIVATE: [76],
      PROPERTY_GET: [76],
      PROPERTY_LET: [76],
      PROPERTY_SET: [76],
      PTRSAFE: [76],
      PUBLIC: [76],
      RAISEEVENT: [76],
      REDIM: [76],
      RESET: [76],
      RESUME: [76],
      RETURN: [76],
      SELECT: [76],
      SET: [76],
      SINGLE: [76],
      STATIC: [76],
      STEP: [76],
      STOP: [76],
      STRING: [76],
      SUB: [76],
      THEN: [76],
      TO: [76],
      TYPEOF: [76],
      UNTIL: [76],
      VARIANT: [76],
      WEND: [76],
      WHILE: [76],
      WITH: [76],
      WITHEVENTS: [76],
      XOR: [76],
      IDENTIFIER: [76],
    },
    variableStmt_group_def_29: {
      DIM: [77],
    },
    variableStmt_group_28: {
      DIM: [78],
      STATIC: [80],
      PRIVATE: [82],
      PUBLIC: [82],
      FRIEND: [82],
      GLOBAL: [82],
    },
    variableStmt_group_def_30: {
      STATIC: [79],
    },
    variableStmt_group_def_31: {
      PRIVATE: [81],
      PUBLIC: [81],
      FRIEND: [81],
      GLOBAL: [81],
    },
    variableStmt: {
      DIM: [83],
      STATIC: [83],
      PRIVATE: [83],
      PUBLIC: [83],
      FRIEND: [83],
      GLOBAL: [83],
    },
    variableListStmt_group_def_33: {
      ',': [84],
    },
    variableListStmt: {
      ALIAS: [85],
      AND: [85],
      ATTRIBUTE: [85],
      AS: [85],
      BEGIN: [85],
      BOOLEAN: [85],
      BYVAL: [85],
      BYREF: [85],
      BYTE: [85],
      CALL: [85],
      CASE: [85],
      CONST: [85],
      DECLARE: [85],
      DEFBOOL: [85],
      DEFBYTE: [85],
      DEFDATE: [85],
      DEFDBL: [85],
      DEFDEC: [85],
      DEFCUR: [85],
      DEFINT: [85],
      DEFLNG: [85],
      DEFOBJ: [85],
      DEFSNG: [85],
      DEFSTR: [85],
      DEFVAR: [85],
      DIM: [85],
      DO: [85],
      DOUBLE: [85],
      EACH: [85],
      ELSE: [85],
      ELSEIF: [85],
      END_ENUM: [85],
      END_FUNCTION: [85],
      END_IF: [85],
      END_PROPERTY: [85],
      END_SELECT: [85],
      END_SUB: [85],
      END_TYPE: [85],
      END_WITH: [85],
      END: [85],
      ENUM: [85],
      EQV: [85],
      ERASE: [85],
      ERROR: [85],
      EVENT: [85],
      EXIT_DO: [85],
      EXIT_FOR: [85],
      EXIT_FUNCTION: [85],
      EXIT_PROPERTY: [85],
      EXIT_SUB: [85],
      FALSE: [85],
      FRIEND: [85],
      FOR: [85],
      FUNCTION: [85],
      GET: [85],
      GLOBAL: [85],
      GOSUB: [85],
      GOTO: [85],
      IF: [85],
      IMPLEMENTS: [85],
      IN: [85],
      IS: [85],
      INTEGER: [85],
      LONG: [85],
      LOOP: [85],
      LEN: [85],
      LET: [85],
      LIB: [85],
      LIKE: [85],
      LSET: [85],
      MACRO_CONST: [85],
      MACRO_IF: [85],
      MACRO_ELSEIF: [85],
      MACRO_ELSE: [85],
      MACRO_END_IF: [85],
      MOD: [85],
      NEXT: [85],
      NEW: [85],
      NOT: [85],
      NOTHING: [85],
      NULL: [85],
      ON: [85],
      ON_ERROR: [85],
      ON_LOCAL_ERROR: [85],
      OPTIONAL: [85],
      OPTION_BASE: [85],
      OPTION_EXPLICIT: [85],
      OPTION_COMPARE: [85],
      OPTION_PRIVATE_MODULE: [85],
      OR: [85],
      PARAMARRAY: [85],
      PRESERVE: [85],
      PRIVATE: [85],
      PROPERTY_GET: [85],
      PROPERTY_LET: [85],
      PROPERTY_SET: [85],
      PTRSAFE: [85],
      PUBLIC: [85],
      RAISEEVENT: [85],
      REDIM: [85],
      RESET: [85],
      RESUME: [85],
      RETURN: [85],
      SELECT: [85],
      SET: [85],
      SINGLE: [85],
      STATIC: [85],
      STEP: [85],
      STOP: [85],
      STRING: [85],
      SUB: [85],
      THEN: [85],
      TO: [85],
      TRUE: [85],
      TYPEOF: [85],
      UNTIL: [85],
      VARIANT: [85],
      WEND: [85],
      WHILE: [85],
      WITH: [85],
      WITHEVENTS: [85],
      XOR: [85],
      IDENTIFIER: [85],
    },
    variableSubStmt_group_def_35: {
      LPAREN: [86],
    },
    variableSubStmt: {
      ALIAS: [87],
      AND: [87],
      ATTRIBUTE: [87],
      AS: [87],
      BEGIN: [87],
      BOOLEAN: [87],
      BYVAL: [87],
      BYREF: [87],
      BYTE: [87],
      CALL: [87],
      CASE: [87],
      CONST: [87],
      DECLARE: [87],
      DEFBOOL: [87],
      DEFBYTE: [87],
      DEFDATE: [87],
      DEFDBL: [87],
      DEFDEC: [87],
      DEFCUR: [87],
      DEFINT: [87],
      DEFLNG: [87],
      DEFOBJ: [87],
      DEFSNG: [87],
      DEFSTR: [87],
      DEFVAR: [87],
      DIM: [87],
      DO: [87],
      DOUBLE: [87],
      EACH: [87],
      ELSE: [87],
      ELSEIF: [87],
      END_ENUM: [87],
      END_FUNCTION: [87],
      END_IF: [87],
      END_PROPERTY: [87],
      END_SELECT: [87],
      END_SUB: [87],
      END_TYPE: [87],
      END_WITH: [87],
      END: [87],
      ENUM: [87],
      EQV: [87],
      ERASE: [87],
      ERROR: [87],
      EVENT: [87],
      EXIT_DO: [87],
      EXIT_FOR: [87],
      EXIT_FUNCTION: [87],
      EXIT_PROPERTY: [87],
      EXIT_SUB: [87],
      FALSE: [87],
      FRIEND: [87],
      FOR: [87],
      FUNCTION: [87],
      GET: [87],
      GLOBAL: [87],
      GOSUB: [87],
      GOTO: [87],
      IF: [87],
      IMPLEMENTS: [87],
      IN: [87],
      IS: [87],
      INTEGER: [87],
      LONG: [87],
      LOOP: [87],
      LEN: [87],
      LET: [87],
      LIB: [87],
      LIKE: [87],
      LSET: [87],
      MACRO_CONST: [87],
      MACRO_IF: [87],
      MACRO_ELSEIF: [87],
      MACRO_ELSE: [87],
      MACRO_END_IF: [87],
      MOD: [87],
      NEXT: [87],
      NEW: [87],
      NOT: [87],
      NOTHING: [87],
      NULL: [87],
      ON: [87],
      ON_ERROR: [87],
      ON_LOCAL_ERROR: [87],
      OPTIONAL: [87],
      OPTION_BASE: [87],
      OPTION_EXPLICIT: [87],
      OPTION_COMPARE: [87],
      OPTION_PRIVATE_MODULE: [87],
      OR: [87],
      PARAMARRAY: [87],
      PRESERVE: [87],
      PRIVATE: [87],
      PROPERTY_GET: [87],
      PROPERTY_LET: [87],
      PROPERTY_SET: [87],
      PTRSAFE: [87],
      PUBLIC: [87],
      RAISEEVENT: [87],
      REDIM: [87],
      RESET: [87],
      RESUME: [87],
      RETURN: [87],
      SELECT: [87],
      SET: [87],
      SINGLE: [87],
      STATIC: [87],
      STEP: [87],
      STOP: [87],
      STRING: [87],
      SUB: [87],
      THEN: [87],
      TO: [87],
      TRUE: [87],
      TYPEOF: [87],
      UNTIL: [87],
      VARIANT: [87],
      WEND: [87],
      WHILE: [87],
      WITH: [87],
      WITHEVENTS: [87],
      XOR: [87],
      IDENTIFIER: [87],
    },
    indexes: {
      INTEGERLITERAL: [88],
      STRINGLITERAL: [88],
      NOTHING: [88],
      NULL: [88],
      TRUE: [88],
      FALSE: [88],
      '.': [88],
      '!': [88],
      ALIAS: [88],
      AND: [88],
      ATTRIBUTE: [88],
      AS: [88],
      BEGIN: [88],
      BOOLEAN: [88],
      BYVAL: [88],
      BYREF: [88],
      BYTE: [88],
      CALL: [88],
      CASE: [88],
      CONST: [88],
      DECLARE: [88],
      DEFBOOL: [88],
      DEFBYTE: [88],
      DEFDATE: [88],
      DEFDBL: [88],
      DEFDEC: [88],
      DEFCUR: [88],
      DEFINT: [88],
      DEFLNG: [88],
      DEFOBJ: [88],
      DEFSNG: [88],
      DEFSTR: [88],
      DEFVAR: [88],
      DIM: [88],
      DO: [88],
      DOUBLE: [88],
      EACH: [88],
      ELSE: [88],
      ELSEIF: [88],
      END_ENUM: [88],
      END_FUNCTION: [88],
      END_IF: [88],
      END_PROPERTY: [88],
      END_SELECT: [88],
      END_SUB: [88],
      END_TYPE: [88],
      END_WITH: [88],
      END: [88],
      ENUM: [88],
      EQV: [88],
      ERASE: [88],
      ERROR: [88],
      EVENT: [88],
      EXIT_DO: [88],
      EXIT_FOR: [88],
      EXIT_FUNCTION: [88],
      EXIT_PROPERTY: [88],
      EXIT_SUB: [88],
      FRIEND: [88],
      FOR: [88],
      FUNCTION: [88],
      GET: [88],
      GLOBAL: [88],
      GOSUB: [88],
      GOTO: [88],
      IF: [88],
      IMPLEMENTS: [88],
      IN: [88],
      IS: [88],
      INTEGER: [88],
      LONG: [88],
      LOOP: [88],
      LEN: [88],
      LET: [88],
      LIB: [88],
      LIKE: [88],
      LSET: [88],
      MACRO_CONST: [88],
      MACRO_IF: [88],
      MACRO_ELSEIF: [88],
      MACRO_ELSE: [88],
      MACRO_END_IF: [88],
      MOD: [88],
      NEXT: [88],
      NEW: [88],
      NOT: [88],
      ON: [88],
      ON_ERROR: [88],
      ON_LOCAL_ERROR: [88],
      OPTIONAL: [88],
      OPTION_BASE: [88],
      OPTION_EXPLICIT: [88],
      OPTION_COMPARE: [88],
      OPTION_PRIVATE_MODULE: [88],
      OR: [88],
      PARAMARRAY: [88],
      PRESERVE: [88],
      PRIVATE: [88],
      PROPERTY_GET: [88],
      PROPERTY_LET: [88],
      PROPERTY_SET: [88],
      PTRSAFE: [88],
      PUBLIC: [88],
      RAISEEVENT: [88],
      REDIM: [88],
      RESET: [88],
      RESUME: [88],
      RETURN: [88],
      SELECT: [88],
      SET: [88],
      SINGLE: [88],
      STATIC: [88],
      STEP: [88],
      STOP: [88],
      STRING: [88],
      SUB: [88],
      THEN: [88],
      TO: [88],
      TYPEOF: [88],
      UNTIL: [88],
      VARIANT: [88],
      WEND: [88],
      WHILE: [88],
      WITH: [88],
      WITHEVENTS: [88],
      XOR: [88],
      IDENTIFIER: [88],
    },
    subscript__group_def_38: {
      INTEGERLITERAL: [89],
      STRINGLITERAL: [89],
      NOTHING: [89],
      NULL: [89],
      TRUE: [89],
      FALSE: [89],
      '.': [89],
      '!': [89],
      ALIAS: [89],
      AND: [89],
      ATTRIBUTE: [89],
      AS: [89],
      BEGIN: [89],
      BOOLEAN: [89],
      BYVAL: [89],
      BYREF: [89],
      BYTE: [89],
      CALL: [89],
      CASE: [89],
      CONST: [89],
      DECLARE: [89],
      DEFBOOL: [89],
      DEFBYTE: [89],
      DEFDATE: [89],
      DEFDBL: [89],
      DEFDEC: [89],
      DEFCUR: [89],
      DEFINT: [89],
      DEFLNG: [89],
      DEFOBJ: [89],
      DEFSNG: [89],
      DEFSTR: [89],
      DEFVAR: [89],
      DIM: [89],
      DO: [89],
      DOUBLE: [89],
      EACH: [89],
      ELSE: [89],
      ELSEIF: [89],
      END_ENUM: [89],
      END_FUNCTION: [89],
      END_IF: [89],
      END_PROPERTY: [89],
      END_SELECT: [89],
      END_SUB: [89],
      END_TYPE: [89],
      END_WITH: [89],
      END: [89],
      ENUM: [89],
      EQV: [89],
      ERASE: [89],
      ERROR: [89],
      EVENT: [89],
      EXIT_DO: [89],
      EXIT_FOR: [89],
      EXIT_FUNCTION: [89],
      EXIT_PROPERTY: [89],
      EXIT_SUB: [89],
      FRIEND: [89],
      FOR: [89],
      FUNCTION: [89],
      GET: [89],
      GLOBAL: [89],
      GOSUB: [89],
      GOTO: [89],
      IF: [89],
      IMPLEMENTS: [89],
      IN: [89],
      IS: [89],
      INTEGER: [89],
      LONG: [89],
      LOOP: [89],
      LEN: [89],
      LET: [89],
      LIB: [89],
      LIKE: [89],
      LSET: [89],
      MACRO_CONST: [89],
      MACRO_IF: [89],
      MACRO_ELSEIF: [89],
      MACRO_ELSE: [89],
      MACRO_END_IF: [89],
      MOD: [89],
      NEXT: [89],
      NEW: [89],
      NOT: [89],
      ON: [89],
      ON_ERROR: [89],
      ON_LOCAL_ERROR: [89],
      OPTIONAL: [89],
      OPTION_BASE: [89],
      OPTION_EXPLICIT: [89],
      OPTION_COMPARE: [89],
      OPTION_PRIVATE_MODULE: [89],
      OR: [89],
      PARAMARRAY: [89],
      PRESERVE: [89],
      PRIVATE: [89],
      PROPERTY_GET: [89],
      PROPERTY_LET: [89],
      PROPERTY_SET: [89],
      PTRSAFE: [89],
      PUBLIC: [89],
      RAISEEVENT: [89],
      REDIM: [89],
      RESET: [89],
      RESUME: [89],
      RETURN: [89],
      SELECT: [89],
      SET: [89],
      SINGLE: [89],
      STATIC: [89],
      STEP: [89],
      STOP: [89],
      STRING: [89],
      SUB: [89],
      THEN: [89],
      TO: [89],
      TYPEOF: [89],
      UNTIL: [89],
      VARIANT: [89],
      WEND: [89],
      WHILE: [89],
      WITH: [89],
      WITHEVENTS: [89],
      XOR: [89],
      IDENTIFIER: [89],
    },
    subscript_: {
      INTEGERLITERAL: [90, 93],
      STRINGLITERAL: [90, 93],
      NOTHING: [90, 93],
      NULL: [90, 93],
      TRUE: [90, 93],
      FALSE: [90, 93],
      '.': [90, 93],
      '!': [90, 93],
      ALIAS: [90, 93],
      AND: [90, 93],
      ATTRIBUTE: [90, 93],
      AS: [90, 93],
      BEGIN: [90, 93],
      BOOLEAN: [90, 93],
      BYVAL: [90, 93],
      BYREF: [90, 93],
      BYTE: [90, 93],
      CALL: [90, 93],
      CASE: [90, 93],
      CONST: [90, 93],
      DECLARE: [90, 93],
      DEFBOOL: [90, 93],
      DEFBYTE: [90, 93],
      DEFDATE: [90, 93],
      DEFDBL: [90, 93],
      DEFDEC: [90, 93],
      DEFCUR: [90, 93],
      DEFINT: [90, 93],
      DEFLNG: [90, 93],
      DEFOBJ: [90, 93],
      DEFSNG: [90, 93],
      DEFSTR: [90, 93],
      DEFVAR: [90, 93],
      DIM: [90, 93],
      DO: [90, 93],
      DOUBLE: [90, 93],
      EACH: [90, 93],
      ELSE: [90, 93],
      ELSEIF: [90, 93],
      END_ENUM: [90, 93],
      END_FUNCTION: [90, 93],
      END_IF: [90, 93],
      END_PROPERTY: [90, 93],
      END_SELECT: [90, 93],
      END_SUB: [90, 93],
      END_TYPE: [90, 93],
      END_WITH: [90, 93],
      END: [90, 93],
      ENUM: [90, 93],
      EQV: [90, 93],
      ERASE: [90, 93],
      ERROR: [90, 93],
      EVENT: [90, 93],
      EXIT_DO: [90, 93],
      EXIT_FOR: [90, 93],
      EXIT_FUNCTION: [90, 93],
      EXIT_PROPERTY: [90, 93],
      EXIT_SUB: [90, 93],
      FRIEND: [90, 93],
      FOR: [90, 93],
      FUNCTION: [90, 93],
      GET: [90, 93],
      GLOBAL: [90, 93],
      GOSUB: [90, 93],
      GOTO: [90, 93],
      IF: [90, 93],
      IMPLEMENTS: [90, 93],
      IN: [90, 93],
      IS: [90, 93],
      INTEGER: [90, 93],
      LONG: [90, 93],
      LOOP: [90, 93],
      LEN: [90, 93],
      LET: [90, 93],
      LIB: [90, 93],
      LIKE: [90, 93],
      LSET: [90, 93],
      MACRO_CONST: [90, 93],
      MACRO_IF: [90, 93],
      MACRO_ELSEIF: [90, 93],
      MACRO_ELSE: [90, 93],
      MACRO_END_IF: [90, 93],
      MOD: [90, 93],
      NEXT: [90, 93],
      NEW: [90, 93],
      NOT: [90, 93],
      ON: [90, 93],
      ON_ERROR: [90, 93],
      ON_LOCAL_ERROR: [90, 93],
      OPTIONAL: [90, 93],
      OPTION_BASE: [90, 93],
      OPTION_EXPLICIT: [90, 93],
      OPTION_COMPARE: [90, 93],
      OPTION_PRIVATE_MODULE: [90, 93],
      OR: [90, 93],
      PARAMARRAY: [90, 93],
      PRESERVE: [90, 93],
      PRIVATE: [90, 93],
      PROPERTY_GET: [90, 93],
      PROPERTY_LET: [90, 93],
      PROPERTY_SET: [90, 93],
      PTRSAFE: [90, 93],
      PUBLIC: [90, 93],
      RAISEEVENT: [90, 93],
      REDIM: [90, 93],
      RESET: [90, 93],
      RESUME: [90, 93],
      RETURN: [90, 93],
      SELECT: [90, 93],
      SET: [90, 93],
      SINGLE: [90, 93],
      STATIC: [90, 93],
      STEP: [90, 93],
      STOP: [90, 93],
      STRING: [90, 93],
      SUB: [90, 93],
      THEN: [90, 93],
      TO: [90, 93],
      TYPEOF: [90, 93],
      UNTIL: [90, 93],
      VARIANT: [90, 93],
      WEND: [90, 93],
      WHILE: [90, 93],
      WITH: [90, 93],
      WITHEVENTS: [90, 93],
      XOR: [90, 93],
      IDENTIFIER: [90, 93],
    },
    subscripts_group_def_40: {
      ',': [91],
    },
    subscripts: {
      INTEGERLITERAL: [92],
      STRINGLITERAL: [92],
      NOTHING: [92],
      NULL: [92],
      TRUE: [92],
      FALSE: [92],
      NEW: [92],
      ALIAS: [92],
      AND: [92],
      ATTRIBUTE: [92],
      AS: [92],
      BEGIN: [92],
      BOOLEAN: [92],
      BYVAL: [92],
      BYREF: [92],
      BYTE: [92],
      CALL: [92],
      CASE: [92],
      CONST: [92],
      DECLARE: [92],
      DEFBOOL: [92],
      DEFBYTE: [92],
      DEFDATE: [92],
      DEFDBL: [92],
      DEFDEC: [92],
      DEFCUR: [92],
      DEFINT: [92],
      DEFLNG: [92],
      DEFOBJ: [92],
      DEFSNG: [92],
      DEFSTR: [92],
      DEFVAR: [92],
      DIM: [92],
      DO: [92],
      DOUBLE: [92],
      EACH: [92],
      ELSE: [92],
      ELSEIF: [92],
      END_ENUM: [92],
      END_FUNCTION: [92],
      END_IF: [92],
      END_PROPERTY: [92],
      END_SELECT: [92],
      END_SUB: [92],
      END_TYPE: [92],
      END_WITH: [92],
      END: [92],
      ENUM: [92],
      EQV: [92],
      ERASE: [92],
      ERROR: [92],
      EVENT: [92],
      EXIT_DO: [92],
      EXIT_FOR: [92],
      EXIT_FUNCTION: [92],
      EXIT_PROPERTY: [92],
      EXIT_SUB: [92],
      FRIEND: [92],
      FOR: [92],
      FUNCTION: [92],
      GET: [92],
      GLOBAL: [92],
      GOSUB: [92],
      GOTO: [92],
      IF: [92],
      IMPLEMENTS: [92],
      IN: [92],
      IS: [92],
      INTEGER: [92],
      LONG: [92],
      LOOP: [92],
      LEN: [92],
      LET: [92],
      LIB: [92],
      LIKE: [92],
      LSET: [92],
      MACRO_CONST: [92],
      MACRO_IF: [92],
      MACRO_ELSEIF: [92],
      MACRO_ELSE: [92],
      MACRO_END_IF: [92],
      MOD: [92],
      NEXT: [92],
      NOT: [92],
      ON: [92],
      ON_ERROR: [92],
      ON_LOCAL_ERROR: [92],
      OPTIONAL: [92],
      OPTION_BASE: [92],
      OPTION_EXPLICIT: [92],
      OPTION_COMPARE: [92],
      OPTION_PRIVATE_MODULE: [92],
      OR: [92],
      PARAMARRAY: [92],
      PRESERVE: [92],
      PRIVATE: [92],
      PROPERTY_GET: [92],
      PROPERTY_LET: [92],
      PROPERTY_SET: [92],
      PTRSAFE: [92],
      PUBLIC: [92],
      RAISEEVENT: [92],
      REDIM: [92],
      RESET: [92],
      RESUME: [92],
      RETURN: [92],
      SELECT: [92],
      SET: [92],
      SINGLE: [92],
      STATIC: [92],
      STEP: [92],
      STOP: [92],
      STRING: [92],
      SUB: [92],
      THEN: [92],
      TO: [92],
      TYPEOF: [92],
      UNTIL: [92],
      VARIANT: [92],
      WEND: [92],
      WHILE: [92],
      WITH: [92],
      WITHEVENTS: [92],
      XOR: [92],
      IDENTIFIER: [92],
      '.': [92],
      '!': [92],
    },
    argList_group_def_44: {
      ',': [94],
    },
    argList_group_def_45: {
      OPTIONAL: [95],
      PARAMARRAY: [95],
      ALIAS: [95],
      AND: [95],
      ATTRIBUTE: [95],
      AS: [95],
      BEGIN: [95],
      BOOLEAN: [95],
      BYVAL: [95],
      BYREF: [95],
      BYTE: [95],
      CALL: [95],
      CASE: [95],
      CONST: [95],
      DECLARE: [95],
      DEFBOOL: [95],
      DEFBYTE: [95],
      DEFDATE: [95],
      DEFDBL: [95],
      DEFDEC: [95],
      DEFCUR: [95],
      DEFINT: [95],
      DEFLNG: [95],
      DEFOBJ: [95],
      DEFSNG: [95],
      DEFSTR: [95],
      DEFVAR: [95],
      DIM: [95],
      DO: [95],
      DOUBLE: [95],
      EACH: [95],
      ELSE: [95],
      ELSEIF: [95],
      END_ENUM: [95],
      END_FUNCTION: [95],
      END_IF: [95],
      END_PROPERTY: [95],
      END_SELECT: [95],
      END_SUB: [95],
      END_TYPE: [95],
      END_WITH: [95],
      END: [95],
      ENUM: [95],
      EQV: [95],
      ERASE: [95],
      ERROR: [95],
      EVENT: [95],
      EXIT_DO: [95],
      EXIT_FOR: [95],
      EXIT_FUNCTION: [95],
      EXIT_PROPERTY: [95],
      EXIT_SUB: [95],
      FALSE: [95],
      FRIEND: [95],
      FOR: [95],
      FUNCTION: [95],
      GET: [95],
      GLOBAL: [95],
      GOSUB: [95],
      GOTO: [95],
      IF: [95],
      IMPLEMENTS: [95],
      IN: [95],
      IS: [95],
      INTEGER: [95],
      LONG: [95],
      LOOP: [95],
      LEN: [95],
      LET: [95],
      LIB: [95],
      LIKE: [95],
      LSET: [95],
      MACRO_CONST: [95],
      MACRO_IF: [95],
      MACRO_ELSEIF: [95],
      MACRO_ELSE: [95],
      MACRO_END_IF: [95],
      MOD: [95],
      NEXT: [95],
      NEW: [95],
      NOT: [95],
      NOTHING: [95],
      NULL: [95],
      ON: [95],
      ON_ERROR: [95],
      ON_LOCAL_ERROR: [95],
      OPTION_BASE: [95],
      OPTION_EXPLICIT: [95],
      OPTION_COMPARE: [95],
      OPTION_PRIVATE_MODULE: [95],
      OR: [95],
      PRESERVE: [95],
      PRIVATE: [95],
      PROPERTY_GET: [95],
      PROPERTY_LET: [95],
      PROPERTY_SET: [95],
      PTRSAFE: [95],
      PUBLIC: [95],
      RAISEEVENT: [95],
      REDIM: [95],
      RESET: [95],
      RESUME: [95],
      RETURN: [95],
      SELECT: [95],
      SET: [95],
      SINGLE: [95],
      STATIC: [95],
      STEP: [95],
      STOP: [95],
      STRING: [95],
      SUB: [95],
      THEN: [95],
      TO: [95],
      TRUE: [95],
      TYPEOF: [95],
      UNTIL: [95],
      VARIANT: [95],
      WEND: [95],
      WHILE: [95],
      WITH: [95],
      WITHEVENTS: [95],
      XOR: [95],
      IDENTIFIER: [95],
    },
    argList: {
      LPAREN: [96],
    },
    valueStmt: {
      INTEGERLITERAL: [97],
      STRINGLITERAL: [97],
      NOTHING: [97, 98, 100],
      NULL: [97, 98, 100],
      TRUE: [97, 98, 100],
      FALSE: [97, 98, 100],
      '.': [98],
      '!': [98],
      ALIAS: [98, 100],
      AND: [98, 100],
      ATTRIBUTE: [98, 100],
      AS: [98, 100],
      BEGIN: [98, 100],
      BOOLEAN: [98, 100],
      BYVAL: [98, 100],
      BYREF: [98, 100],
      BYTE: [98, 100],
      CALL: [98, 100],
      CASE: [98, 100],
      CONST: [98, 100],
      DECLARE: [98, 100],
      DEFBOOL: [98, 100],
      DEFBYTE: [98, 100],
      DEFDATE: [98, 100],
      DEFDBL: [98, 100],
      DEFDEC: [98, 100],
      DEFCUR: [98, 100],
      DEFINT: [98, 100],
      DEFLNG: [98, 100],
      DEFOBJ: [98, 100],
      DEFSNG: [98, 100],
      DEFSTR: [98, 100],
      DEFVAR: [98, 100],
      DIM: [98, 100],
      DO: [98, 100],
      DOUBLE: [98, 100],
      EACH: [98, 100],
      ELSE: [98, 100],
      ELSEIF: [98, 100],
      END_ENUM: [98, 100],
      END_FUNCTION: [98, 100],
      END_IF: [98, 100],
      END_PROPERTY: [98, 100],
      END_SELECT: [98, 100],
      END_SUB: [98, 100],
      END_TYPE: [98, 100],
      END_WITH: [98, 100],
      END: [98, 100],
      ENUM: [98, 100],
      EQV: [98, 100],
      ERASE: [98, 100],
      ERROR: [98, 100],
      EVENT: [98, 100],
      EXIT_DO: [98, 100],
      EXIT_FOR: [98, 100],
      EXIT_FUNCTION: [98, 100],
      EXIT_PROPERTY: [98, 100],
      EXIT_SUB: [98, 100],
      FRIEND: [98, 100],
      FOR: [98, 100],
      FUNCTION: [98, 100],
      GET: [98, 100],
      GLOBAL: [98, 100],
      GOSUB: [98, 100],
      GOTO: [98, 100],
      IF: [98, 100],
      IMPLEMENTS: [98, 100],
      IN: [98, 100],
      IS: [98, 100],
      INTEGER: [98, 100],
      LONG: [98, 100],
      LOOP: [98, 100],
      LEN: [98, 100],
      LET: [98, 100],
      LIB: [98, 100],
      LIKE: [98, 100],
      LSET: [98, 100],
      MACRO_CONST: [98, 100],
      MACRO_IF: [98, 100],
      MACRO_ELSEIF: [98, 100],
      MACRO_ELSE: [98, 100],
      MACRO_END_IF: [98, 100],
      MOD: [98, 100],
      NEXT: [98, 100],
      NEW: [98, 99, 100],
      NOT: [98, 100],
      ON: [98, 100],
      ON_ERROR: [98, 100],
      ON_LOCAL_ERROR: [98, 100],
      OPTIONAL: [98, 100],
      OPTION_BASE: [98, 100],
      OPTION_EXPLICIT: [98, 100],
      OPTION_COMPARE: [98, 100],
      OPTION_PRIVATE_MODULE: [98, 100],
      OR: [98, 100],
      PARAMARRAY: [98, 100],
      PRESERVE: [98, 100],
      PRIVATE: [98, 100],
      PROPERTY_GET: [98, 100],
      PROPERTY_LET: [98, 100],
      PROPERTY_SET: [98, 100],
      PTRSAFE: [98, 100],
      PUBLIC: [98, 100],
      RAISEEVENT: [98, 100],
      REDIM: [98, 100],
      RESET: [98, 100],
      RESUME: [98, 100],
      RETURN: [98, 100],
      SELECT: [98, 100],
      SET: [98, 100],
      SINGLE: [98, 100],
      STATIC: [98, 100],
      STEP: [98, 100],
      STOP: [98, 100],
      STRING: [98, 100],
      SUB: [98, 100],
      THEN: [98, 100],
      TO: [98, 100],
      TYPEOF: [98, 100],
      UNTIL: [98, 100],
      VARIANT: [98, 100],
      WEND: [98, 100],
      WHILE: [98, 100],
      WITH: [98, 100],
      WITHEVENTS: [98, 100],
      XOR: [98, 100],
      IDENTIFIER: [98, 100],
    },
    implicitCallStmt_InStmt: {
      ALIAS: [101, 102, 103],
      AND: [101, 102, 103],
      ATTRIBUTE: [101, 102, 103],
      AS: [101, 102, 103],
      BEGIN: [101, 102, 103],
      BOOLEAN: [101, 102, 103],
      BYVAL: [101, 102, 103],
      BYREF: [101, 102, 103],
      BYTE: [101, 102, 103],
      CALL: [101, 102, 103],
      CASE: [101, 102, 103],
      CONST: [101, 102, 103],
      DECLARE: [101, 102, 103],
      DEFBOOL: [101, 102, 103],
      DEFBYTE: [101, 102, 103],
      DEFDATE: [101, 102, 103],
      DEFDBL: [101, 102, 103],
      DEFDEC: [101, 102, 103],
      DEFCUR: [101, 102, 103],
      DEFINT: [101, 102, 103],
      DEFLNG: [101, 102, 103],
      DEFOBJ: [101, 102, 103],
      DEFSNG: [101, 102, 103],
      DEFSTR: [101, 102, 103],
      DEFVAR: [101, 102, 103],
      DIM: [101, 102, 103],
      DO: [101, 102, 103],
      DOUBLE: [101, 102, 103],
      EACH: [101, 102, 103],
      ELSE: [101, 102, 103],
      ELSEIF: [101, 102, 103],
      END_ENUM: [101, 102, 103],
      END_FUNCTION: [101, 102, 103],
      END_IF: [101, 102, 103],
      END_PROPERTY: [101, 102, 103],
      END_SELECT: [101, 102, 103],
      END_SUB: [101, 102, 103],
      END_TYPE: [101, 102, 103],
      END_WITH: [101, 102, 103],
      END: [101, 102, 103],
      ENUM: [101, 102, 103],
      EQV: [101, 102, 103],
      ERASE: [101, 102, 103],
      ERROR: [101, 102, 103],
      EVENT: [101, 102, 103],
      EXIT_DO: [101, 102, 103],
      EXIT_FOR: [101, 102, 103],
      EXIT_FUNCTION: [101, 102, 103],
      EXIT_PROPERTY: [101, 102, 103],
      EXIT_SUB: [101, 102, 103],
      FALSE: [101, 102, 103],
      FRIEND: [101, 102, 103],
      FOR: [101, 102, 103],
      FUNCTION: [101, 102, 103],
      GET: [101, 102, 103],
      GLOBAL: [101, 102, 103],
      GOSUB: [101, 102, 103],
      GOTO: [101, 102, 103],
      IF: [101, 102, 103],
      IMPLEMENTS: [101, 102, 103],
      IN: [101, 102, 103],
      IS: [101, 102, 103],
      INTEGER: [101, 102, 103],
      LONG: [101, 102, 103],
      LOOP: [101, 102, 103],
      LEN: [101, 102, 103],
      LET: [101, 102, 103],
      LIB: [101, 102, 103],
      LIKE: [101, 102, 103],
      LSET: [101, 102, 103],
      MACRO_CONST: [101, 102, 103],
      MACRO_IF: [101, 102, 103],
      MACRO_ELSEIF: [101, 102, 103],
      MACRO_ELSE: [101, 102, 103],
      MACRO_END_IF: [101, 102, 103],
      MOD: [101, 102, 103],
      NEXT: [101, 102, 103],
      NEW: [101, 102, 103],
      NOT: [101, 102, 103],
      NOTHING: [101, 102, 103],
      NULL: [101, 102, 103],
      ON: [101, 102, 103],
      ON_ERROR: [101, 102, 103],
      ON_LOCAL_ERROR: [101, 102, 103],
      OPTIONAL: [101, 102, 103],
      OPTION_BASE: [101, 102, 103],
      OPTION_EXPLICIT: [101, 102, 103],
      OPTION_COMPARE: [101, 102, 103],
      OPTION_PRIVATE_MODULE: [101, 102, 103],
      OR: [101, 102, 103],
      PARAMARRAY: [101, 102, 103],
      PRESERVE: [101, 102, 103],
      PRIVATE: [101, 102, 103],
      PROPERTY_GET: [101, 102, 103],
      PROPERTY_LET: [101, 102, 103],
      PROPERTY_SET: [101, 102, 103],
      PTRSAFE: [101, 102, 103],
      PUBLIC: [101, 102, 103],
      RAISEEVENT: [101, 102, 103],
      REDIM: [101, 102, 103],
      RESET: [101, 102, 103],
      RESUME: [101, 102, 103],
      RETURN: [101, 102, 103],
      SELECT: [101, 102, 103],
      SET: [101, 102, 103],
      SINGLE: [101, 102, 103],
      STATIC: [101, 102, 103],
      STEP: [101, 102, 103],
      STOP: [101, 102, 103],
      STRING: [101, 102, 103],
      SUB: [101, 102, 103],
      THEN: [101, 102, 103],
      TO: [101, 102, 103],
      TRUE: [101, 102, 103],
      TYPEOF: [101, 102, 103],
      UNTIL: [101, 102, 103],
      VARIANT: [101, 102, 103],
      WEND: [101, 102, 103],
      WHILE: [101, 102, 103],
      WITH: [101, 102, 103],
      WITHEVENTS: [101, 102, 103],
      XOR: [101, 102, 103],
      IDENTIFIER: [101, 102, 103],
      '.': [101],
      '!': [101],
    },
    iCS_S_MembersCall_group_def_47: {
      ALIAS: [104],
      AND: [104],
      ATTRIBUTE: [104],
      AS: [104],
      BEGIN: [104],
      BOOLEAN: [104],
      BYVAL: [104],
      BYREF: [104],
      BYTE: [104],
      CALL: [104],
      CASE: [104],
      CONST: [104],
      DECLARE: [104],
      DEFBOOL: [104],
      DEFBYTE: [104],
      DEFDATE: [104],
      DEFDBL: [104],
      DEFDEC: [104],
      DEFCUR: [104],
      DEFINT: [104],
      DEFLNG: [104],
      DEFOBJ: [104],
      DEFSNG: [104],
      DEFSTR: [104],
      DEFVAR: [104],
      DIM: [104],
      DO: [104],
      DOUBLE: [104],
      EACH: [104],
      ELSE: [104],
      ELSEIF: [104],
      END_ENUM: [104],
      END_FUNCTION: [104],
      END_IF: [104],
      END_PROPERTY: [104],
      END_SELECT: [104],
      END_SUB: [104],
      END_TYPE: [104],
      END_WITH: [104],
      END: [104],
      ENUM: [104],
      EQV: [104],
      ERASE: [104],
      ERROR: [104],
      EVENT: [104],
      EXIT_DO: [104],
      EXIT_FOR: [104],
      EXIT_FUNCTION: [104],
      EXIT_PROPERTY: [104],
      EXIT_SUB: [104],
      FALSE: [104],
      FRIEND: [104],
      FOR: [104],
      FUNCTION: [104],
      GET: [104],
      GLOBAL: [104],
      GOSUB: [104],
      GOTO: [104],
      IF: [104],
      IMPLEMENTS: [104],
      IN: [104],
      IS: [104],
      INTEGER: [104],
      LONG: [104],
      LOOP: [104],
      LEN: [104],
      LET: [104],
      LIB: [104],
      LIKE: [104],
      LSET: [104],
      MACRO_CONST: [104],
      MACRO_IF: [104],
      MACRO_ELSEIF: [104],
      MACRO_ELSE: [104],
      MACRO_END_IF: [104],
      MOD: [104],
      NEXT: [104],
      NEW: [104],
      NOT: [104],
      NOTHING: [104],
      NULL: [104],
      ON: [104],
      ON_ERROR: [104],
      ON_LOCAL_ERROR: [104],
      OPTIONAL: [104],
      OPTION_BASE: [104],
      OPTION_EXPLICIT: [104],
      OPTION_COMPARE: [104],
      OPTION_PRIVATE_MODULE: [104],
      OR: [104],
      PARAMARRAY: [104],
      PRESERVE: [104],
      PRIVATE: [104],
      PROPERTY_GET: [104],
      PROPERTY_LET: [104],
      PROPERTY_SET: [104],
      PTRSAFE: [104],
      PUBLIC: [104],
      RAISEEVENT: [104],
      REDIM: [104],
      RESET: [104],
      RESUME: [104],
      RETURN: [104],
      SELECT: [104],
      SET: [104],
      SINGLE: [104],
      STATIC: [104],
      STEP: [104],
      STOP: [104],
      STRING: [104],
      SUB: [104],
      THEN: [104],
      TO: [104],
      TRUE: [104],
      TYPEOF: [104],
      UNTIL: [104],
      VARIANT: [104],
      WEND: [104],
      WHILE: [104],
      WITH: [104],
      WITHEVENTS: [104],
      XOR: [104],
      IDENTIFIER: [104],
    },
    iCS_S_MembersCall_group_46: {
      ALIAS: [105, 107],
      AND: [105, 107],
      ATTRIBUTE: [105, 107],
      AS: [105, 107],
      BEGIN: [105, 107],
      BOOLEAN: [105, 107],
      BYVAL: [105, 107],
      BYREF: [105, 107],
      BYTE: [105, 107],
      CALL: [105, 107],
      CASE: [105, 107],
      CONST: [105, 107],
      DECLARE: [105, 107],
      DEFBOOL: [105, 107],
      DEFBYTE: [105, 107],
      DEFDATE: [105, 107],
      DEFDBL: [105, 107],
      DEFDEC: [105, 107],
      DEFCUR: [105, 107],
      DEFINT: [105, 107],
      DEFLNG: [105, 107],
      DEFOBJ: [105, 107],
      DEFSNG: [105, 107],
      DEFSTR: [105, 107],
      DEFVAR: [105, 107],
      DIM: [105, 107],
      DO: [105, 107],
      DOUBLE: [105, 107],
      EACH: [105, 107],
      ELSE: [105, 107],
      ELSEIF: [105, 107],
      END_ENUM: [105, 107],
      END_FUNCTION: [105, 107],
      END_IF: [105, 107],
      END_PROPERTY: [105, 107],
      END_SELECT: [105, 107],
      END_SUB: [105, 107],
      END_TYPE: [105, 107],
      END_WITH: [105, 107],
      END: [105, 107],
      ENUM: [105, 107],
      EQV: [105, 107],
      ERASE: [105, 107],
      ERROR: [105, 107],
      EVENT: [105, 107],
      EXIT_DO: [105, 107],
      EXIT_FOR: [105, 107],
      EXIT_FUNCTION: [105, 107],
      EXIT_PROPERTY: [105, 107],
      EXIT_SUB: [105, 107],
      FALSE: [105, 107],
      FRIEND: [105, 107],
      FOR: [105, 107],
      FUNCTION: [105, 107],
      GET: [105, 107],
      GLOBAL: [105, 107],
      GOSUB: [105, 107],
      GOTO: [105, 107],
      IF: [105, 107],
      IMPLEMENTS: [105, 107],
      IN: [105, 107],
      IS: [105, 107],
      INTEGER: [105, 107],
      LONG: [105, 107],
      LOOP: [105, 107],
      LEN: [105, 107],
      LET: [105, 107],
      LIB: [105, 107],
      LIKE: [105, 107],
      LSET: [105, 107],
      MACRO_CONST: [105, 107],
      MACRO_IF: [105, 107],
      MACRO_ELSEIF: [105, 107],
      MACRO_ELSE: [105, 107],
      MACRO_END_IF: [105, 107],
      MOD: [105, 107],
      NEXT: [105, 107],
      NEW: [105, 107],
      NOT: [105, 107],
      NOTHING: [105, 107],
      NULL: [105, 107],
      ON: [105, 107],
      ON_ERROR: [105, 107],
      ON_LOCAL_ERROR: [105, 107],
      OPTIONAL: [105, 107],
      OPTION_BASE: [105, 107],
      OPTION_EXPLICIT: [105, 107],
      OPTION_COMPARE: [105, 107],
      OPTION_PRIVATE_MODULE: [105, 107],
      OR: [105, 107],
      PARAMARRAY: [105, 107],
      PRESERVE: [105, 107],
      PRIVATE: [105, 107],
      PROPERTY_GET: [105, 107],
      PROPERTY_LET: [105, 107],
      PROPERTY_SET: [105, 107],
      PTRSAFE: [105, 107],
      PUBLIC: [105, 107],
      RAISEEVENT: [105, 107],
      REDIM: [105, 107],
      RESET: [105, 107],
      RESUME: [105, 107],
      RETURN: [105, 107],
      SELECT: [105, 107],
      SET: [105, 107],
      SINGLE: [105, 107],
      STATIC: [105, 107],
      STEP: [105, 107],
      STOP: [105, 107],
      STRING: [105, 107],
      SUB: [105, 107],
      THEN: [105, 107],
      TO: [105, 107],
      TRUE: [105, 107],
      TYPEOF: [105, 107],
      UNTIL: [105, 107],
      VARIANT: [105, 107],
      WEND: [105, 107],
      WHILE: [105, 107],
      WITH: [105, 107],
      WITHEVENTS: [105, 107],
      XOR: [105, 107],
      IDENTIFIER: [105, 107],
    },
    iCS_S_MembersCall_group_def_48: {
      ALIAS: [106],
      AND: [106],
      ATTRIBUTE: [106],
      AS: [106],
      BEGIN: [106],
      BOOLEAN: [106],
      BYVAL: [106],
      BYREF: [106],
      BYTE: [106],
      CALL: [106],
      CASE: [106],
      CONST: [106],
      DECLARE: [106],
      DEFBOOL: [106],
      DEFBYTE: [106],
      DEFDATE: [106],
      DEFDBL: [106],
      DEFDEC: [106],
      DEFCUR: [106],
      DEFINT: [106],
      DEFLNG: [106],
      DEFOBJ: [106],
      DEFSNG: [106],
      DEFSTR: [106],
      DEFVAR: [106],
      DIM: [106],
      DO: [106],
      DOUBLE: [106],
      EACH: [106],
      ELSE: [106],
      ELSEIF: [106],
      END_ENUM: [106],
      END_FUNCTION: [106],
      END_IF: [106],
      END_PROPERTY: [106],
      END_SELECT: [106],
      END_SUB: [106],
      END_TYPE: [106],
      END_WITH: [106],
      END: [106],
      ENUM: [106],
      EQV: [106],
      ERASE: [106],
      ERROR: [106],
      EVENT: [106],
      EXIT_DO: [106],
      EXIT_FOR: [106],
      EXIT_FUNCTION: [106],
      EXIT_PROPERTY: [106],
      EXIT_SUB: [106],
      FALSE: [106],
      FRIEND: [106],
      FOR: [106],
      FUNCTION: [106],
      GET: [106],
      GLOBAL: [106],
      GOSUB: [106],
      GOTO: [106],
      IF: [106],
      IMPLEMENTS: [106],
      IN: [106],
      IS: [106],
      INTEGER: [106],
      LONG: [106],
      LOOP: [106],
      LEN: [106],
      LET: [106],
      LIB: [106],
      LIKE: [106],
      LSET: [106],
      MACRO_CONST: [106],
      MACRO_IF: [106],
      MACRO_ELSEIF: [106],
      MACRO_ELSE: [106],
      MACRO_END_IF: [106],
      MOD: [106],
      NEXT: [106],
      NEW: [106],
      NOT: [106],
      NOTHING: [106],
      NULL: [106],
      ON: [106],
      ON_ERROR: [106],
      ON_LOCAL_ERROR: [106],
      OPTIONAL: [106],
      OPTION_BASE: [106],
      OPTION_EXPLICIT: [106],
      OPTION_COMPARE: [106],
      OPTION_PRIVATE_MODULE: [106],
      OR: [106],
      PARAMARRAY: [106],
      PRESERVE: [106],
      PRIVATE: [106],
      PROPERTY_GET: [106],
      PROPERTY_LET: [106],
      PROPERTY_SET: [106],
      PTRSAFE: [106],
      PUBLIC: [106],
      RAISEEVENT: [106],
      REDIM: [106],
      RESET: [106],
      RESUME: [106],
      RETURN: [106],
      SELECT: [106],
      SET: [106],
      SINGLE: [106],
      STATIC: [106],
      STEP: [106],
      STOP: [106],
      STRING: [106],
      SUB: [106],
      THEN: [106],
      TO: [106],
      TRUE: [106],
      TYPEOF: [106],
      UNTIL: [106],
      VARIANT: [106],
      WEND: [106],
      WHILE: [106],
      WITH: [106],
      WITHEVENTS: [106],
      XOR: [106],
      IDENTIFIER: [106],
    },
    iCS_S_MembersCall: {
      ALIAS: [108],
      AND: [108],
      ATTRIBUTE: [108],
      AS: [108],
      BEGIN: [108],
      BOOLEAN: [108],
      BYVAL: [108],
      BYREF: [108],
      BYTE: [108],
      CALL: [108],
      CASE: [108],
      CONST: [108],
      DECLARE: [108],
      DEFBOOL: [108],
      DEFBYTE: [108],
      DEFDATE: [108],
      DEFDBL: [108],
      DEFDEC: [108],
      DEFCUR: [108],
      DEFINT: [108],
      DEFLNG: [108],
      DEFOBJ: [108],
      DEFSNG: [108],
      DEFSTR: [108],
      DEFVAR: [108],
      DIM: [108],
      DO: [108],
      DOUBLE: [108],
      EACH: [108],
      ELSE: [108],
      ELSEIF: [108],
      END_ENUM: [108],
      END_FUNCTION: [108],
      END_IF: [108],
      END_PROPERTY: [108],
      END_SELECT: [108],
      END_SUB: [108],
      END_TYPE: [108],
      END_WITH: [108],
      END: [108],
      ENUM: [108],
      EQV: [108],
      ERASE: [108],
      ERROR: [108],
      EVENT: [108],
      EXIT_DO: [108],
      EXIT_FOR: [108],
      EXIT_FUNCTION: [108],
      EXIT_PROPERTY: [108],
      EXIT_SUB: [108],
      FALSE: [108],
      FRIEND: [108],
      FOR: [108],
      FUNCTION: [108],
      GET: [108],
      GLOBAL: [108],
      GOSUB: [108],
      GOTO: [108],
      IF: [108],
      IMPLEMENTS: [108],
      IN: [108],
      IS: [108],
      INTEGER: [108],
      LONG: [108],
      LOOP: [108],
      LEN: [108],
      LET: [108],
      LIB: [108],
      LIKE: [108],
      LSET: [108],
      MACRO_CONST: [108],
      MACRO_IF: [108],
      MACRO_ELSEIF: [108],
      MACRO_ELSE: [108],
      MACRO_END_IF: [108],
      MOD: [108],
      NEXT: [108],
      NEW: [108],
      NOT: [108],
      NOTHING: [108],
      NULL: [108],
      ON: [108],
      ON_ERROR: [108],
      ON_LOCAL_ERROR: [108],
      OPTIONAL: [108],
      OPTION_BASE: [108],
      OPTION_EXPLICIT: [108],
      OPTION_COMPARE: [108],
      OPTION_PRIVATE_MODULE: [108],
      OR: [108],
      PARAMARRAY: [108],
      PRESERVE: [108],
      PRIVATE: [108],
      PROPERTY_GET: [108],
      PROPERTY_LET: [108],
      PROPERTY_SET: [108],
      PTRSAFE: [108],
      PUBLIC: [108],
      RAISEEVENT: [108],
      REDIM: [108],
      RESET: [108],
      RESUME: [108],
      RETURN: [108],
      SELECT: [108],
      SET: [108],
      SINGLE: [108],
      STATIC: [108],
      STEP: [108],
      STOP: [108],
      STRING: [108],
      SUB: [108],
      THEN: [108],
      TO: [108],
      TRUE: [108],
      TYPEOF: [108],
      UNTIL: [108],
      VARIANT: [108],
      WEND: [108],
      WHILE: [108],
      WITH: [108],
      WITHEVENTS: [108],
      XOR: [108],
      IDENTIFIER: [108],
      '.': [108],
      '!': [108],
    },
    iCS_S_MemberCall_group_def_51: {
      '.': [109],
    },
    iCS_S_MemberCall_group_50: {
      '.': [110],
      '!': [112],
    },
    iCS_S_MemberCall_group_def_52: {
      '!': [111],
    },
    iCS_S_MemberCall_group_53: {
      ALIAS: [113, 114],
      AND: [113, 114],
      ATTRIBUTE: [113, 114],
      AS: [113, 114],
      BEGIN: [113, 114],
      BOOLEAN: [113, 114],
      BYVAL: [113, 114],
      BYREF: [113, 114],
      BYTE: [113, 114],
      CALL: [113, 114],
      CASE: [113, 114],
      CONST: [113, 114],
      DECLARE: [113, 114],
      DEFBOOL: [113, 114],
      DEFBYTE: [113, 114],
      DEFDATE: [113, 114],
      DEFDBL: [113, 114],
      DEFDEC: [113, 114],
      DEFCUR: [113, 114],
      DEFINT: [113, 114],
      DEFLNG: [113, 114],
      DEFOBJ: [113, 114],
      DEFSNG: [113, 114],
      DEFSTR: [113, 114],
      DEFVAR: [113, 114],
      DIM: [113, 114],
      DO: [113, 114],
      DOUBLE: [113, 114],
      EACH: [113, 114],
      ELSE: [113, 114],
      ELSEIF: [113, 114],
      END_ENUM: [113, 114],
      END_FUNCTION: [113, 114],
      END_IF: [113, 114],
      END_PROPERTY: [113, 114],
      END_SELECT: [113, 114],
      END_SUB: [113, 114],
      END_TYPE: [113, 114],
      END_WITH: [113, 114],
      END: [113, 114],
      ENUM: [113, 114],
      EQV: [113, 114],
      ERASE: [113, 114],
      ERROR: [113, 114],
      EVENT: [113, 114],
      EXIT_DO: [113, 114],
      EXIT_FOR: [113, 114],
      EXIT_FUNCTION: [113, 114],
      EXIT_PROPERTY: [113, 114],
      EXIT_SUB: [113, 114],
      FALSE: [113, 114],
      FRIEND: [113, 114],
      FOR: [113, 114],
      FUNCTION: [113, 114],
      GET: [113, 114],
      GLOBAL: [113, 114],
      GOSUB: [113, 114],
      GOTO: [113, 114],
      IF: [113, 114],
      IMPLEMENTS: [113, 114],
      IN: [113, 114],
      IS: [113, 114],
      INTEGER: [113, 114],
      LONG: [113, 114],
      LOOP: [113, 114],
      LEN: [113, 114],
      LET: [113, 114],
      LIB: [113, 114],
      LIKE: [113, 114],
      LSET: [113, 114],
      MACRO_CONST: [113, 114],
      MACRO_IF: [113, 114],
      MACRO_ELSEIF: [113, 114],
      MACRO_ELSE: [113, 114],
      MACRO_END_IF: [113, 114],
      MOD: [113, 114],
      NEXT: [113, 114],
      NEW: [113, 114],
      NOT: [113, 114],
      NOTHING: [113, 114],
      NULL: [113, 114],
      ON: [113, 114],
      ON_ERROR: [113, 114],
      ON_LOCAL_ERROR: [113, 114],
      OPTIONAL: [113, 114],
      OPTION_BASE: [113, 114],
      OPTION_EXPLICIT: [113, 114],
      OPTION_COMPARE: [113, 114],
      OPTION_PRIVATE_MODULE: [113, 114],
      OR: [113, 114],
      PARAMARRAY: [113, 114],
      PRESERVE: [113, 114],
      PRIVATE: [113, 114],
      PROPERTY_GET: [113, 114],
      PROPERTY_LET: [113, 114],
      PROPERTY_SET: [113, 114],
      PTRSAFE: [113, 114],
      PUBLIC: [113, 114],
      RAISEEVENT: [113, 114],
      REDIM: [113, 114],
      RESET: [113, 114],
      RESUME: [113, 114],
      RETURN: [113, 114],
      SELECT: [113, 114],
      SET: [113, 114],
      SINGLE: [113, 114],
      STATIC: [113, 114],
      STEP: [113, 114],
      STOP: [113, 114],
      STRING: [113, 114],
      SUB: [113, 114],
      THEN: [113, 114],
      TO: [113, 114],
      TRUE: [113, 114],
      TYPEOF: [113, 114],
      UNTIL: [113, 114],
      VARIANT: [113, 114],
      WEND: [113, 114],
      WHILE: [113, 114],
      WITH: [113, 114],
      WITHEVENTS: [113, 114],
      XOR: [113, 114],
      IDENTIFIER: [113, 114],
    },
    iCS_S_MemberCall: {
      '.': [115],
      '!': [115],
    },
    iCS_S_ProcedureOrArrayCall: {
      ALIAS: [116],
      AND: [116],
      ATTRIBUTE: [116],
      AS: [116],
      BEGIN: [116],
      BOOLEAN: [116],
      BYVAL: [116],
      BYREF: [116],
      BYTE: [116],
      CALL: [116],
      CASE: [116],
      CONST: [116],
      DECLARE: [116],
      DEFBOOL: [116],
      DEFBYTE: [116],
      DEFDATE: [116],
      DEFDBL: [116],
      DEFDEC: [116],
      DEFCUR: [116],
      DEFINT: [116],
      DEFLNG: [116],
      DEFOBJ: [116],
      DEFSNG: [116],
      DEFSTR: [116],
      DEFVAR: [116],
      DIM: [116],
      DO: [116],
      DOUBLE: [116],
      EACH: [116],
      ELSE: [116],
      ELSEIF: [116],
      END_ENUM: [116],
      END_FUNCTION: [116],
      END_IF: [116],
      END_PROPERTY: [116],
      END_SELECT: [116],
      END_SUB: [116],
      END_TYPE: [116],
      END_WITH: [116],
      END: [116],
      ENUM: [116],
      EQV: [116],
      ERASE: [116],
      ERROR: [116],
      EVENT: [116],
      EXIT_DO: [116],
      EXIT_FOR: [116],
      EXIT_FUNCTION: [116],
      EXIT_PROPERTY: [116],
      EXIT_SUB: [116],
      FALSE: [116],
      FRIEND: [116],
      FOR: [116],
      FUNCTION: [116],
      GET: [116],
      GLOBAL: [116],
      GOSUB: [116],
      GOTO: [116],
      IF: [116],
      IMPLEMENTS: [116],
      IN: [116],
      IS: [116],
      INTEGER: [116],
      LONG: [116],
      LOOP: [116],
      LEN: [116],
      LET: [116],
      LIB: [116],
      LIKE: [116],
      LSET: [116],
      MACRO_CONST: [116],
      MACRO_IF: [116],
      MACRO_ELSEIF: [116],
      MACRO_ELSE: [116],
      MACRO_END_IF: [116],
      MOD: [116],
      NEXT: [116],
      NEW: [116],
      NOT: [116],
      NOTHING: [116],
      NULL: [116],
      ON: [116],
      ON_ERROR: [116],
      ON_LOCAL_ERROR: [116],
      OPTIONAL: [116],
      OPTION_BASE: [116],
      OPTION_EXPLICIT: [116],
      OPTION_COMPARE: [116],
      OPTION_PRIVATE_MODULE: [116],
      OR: [116],
      PARAMARRAY: [116],
      PRESERVE: [116],
      PRIVATE: [116],
      PROPERTY_GET: [116],
      PROPERTY_LET: [116],
      PROPERTY_SET: [116],
      PTRSAFE: [116],
      PUBLIC: [116],
      RAISEEVENT: [116],
      REDIM: [116],
      RESET: [116],
      RESUME: [116],
      RETURN: [116],
      SELECT: [116],
      SET: [116],
      SINGLE: [116],
      STATIC: [116],
      STEP: [116],
      STOP: [116],
      STRING: [116],
      SUB: [116],
      THEN: [116],
      TO: [116],
      TRUE: [116],
      TYPEOF: [116],
      UNTIL: [116],
      VARIANT: [116],
      WEND: [116],
      WHILE: [116],
      WITH: [116],
      WITHEVENTS: [116],
      XOR: [116],
      IDENTIFIER: [116],
    },
    iCS_S_VariableOrProcedureCall: {
      ALIAS: [117],
      AND: [117],
      ATTRIBUTE: [117],
      AS: [117],
      BEGIN: [117],
      BOOLEAN: [117],
      BYVAL: [117],
      BYREF: [117],
      BYTE: [117],
      CALL: [117],
      CASE: [117],
      CONST: [117],
      DECLARE: [117],
      DEFBOOL: [117],
      DEFBYTE: [117],
      DEFDATE: [117],
      DEFDBL: [117],
      DEFDEC: [117],
      DEFCUR: [117],
      DEFINT: [117],
      DEFLNG: [117],
      DEFOBJ: [117],
      DEFSNG: [117],
      DEFSTR: [117],
      DEFVAR: [117],
      DIM: [117],
      DO: [117],
      DOUBLE: [117],
      EACH: [117],
      ELSE: [117],
      ELSEIF: [117],
      END_ENUM: [117],
      END_FUNCTION: [117],
      END_IF: [117],
      END_PROPERTY: [117],
      END_SELECT: [117],
      END_SUB: [117],
      END_TYPE: [117],
      END_WITH: [117],
      END: [117],
      ENUM: [117],
      EQV: [117],
      ERASE: [117],
      ERROR: [117],
      EVENT: [117],
      EXIT_DO: [117],
      EXIT_FOR: [117],
      EXIT_FUNCTION: [117],
      EXIT_PROPERTY: [117],
      EXIT_SUB: [117],
      FALSE: [117],
      FRIEND: [117],
      FOR: [117],
      FUNCTION: [117],
      GET: [117],
      GLOBAL: [117],
      GOSUB: [117],
      GOTO: [117],
      IF: [117],
      IMPLEMENTS: [117],
      IN: [117],
      IS: [117],
      INTEGER: [117],
      LONG: [117],
      LOOP: [117],
      LEN: [117],
      LET: [117],
      LIB: [117],
      LIKE: [117],
      LSET: [117],
      MACRO_CONST: [117],
      MACRO_IF: [117],
      MACRO_ELSEIF: [117],
      MACRO_ELSE: [117],
      MACRO_END_IF: [117],
      MOD: [117],
      NEXT: [117],
      NEW: [117],
      NOT: [117],
      NOTHING: [117],
      NULL: [117],
      ON: [117],
      ON_ERROR: [117],
      ON_LOCAL_ERROR: [117],
      OPTIONAL: [117],
      OPTION_BASE: [117],
      OPTION_EXPLICIT: [117],
      OPTION_COMPARE: [117],
      OPTION_PRIVATE_MODULE: [117],
      OR: [117],
      PARAMARRAY: [117],
      PRESERVE: [117],
      PRIVATE: [117],
      PROPERTY_GET: [117],
      PROPERTY_LET: [117],
      PROPERTY_SET: [117],
      PTRSAFE: [117],
      PUBLIC: [117],
      RAISEEVENT: [117],
      REDIM: [117],
      RESET: [117],
      RESUME: [117],
      RETURN: [117],
      SELECT: [117],
      SET: [117],
      SINGLE: [117],
      STATIC: [117],
      STEP: [117],
      STOP: [117],
      STRING: [117],
      SUB: [117],
      THEN: [117],
      TO: [117],
      TRUE: [117],
      TYPEOF: [117],
      UNTIL: [117],
      VARIANT: [117],
      WEND: [117],
      WHILE: [117],
      WITH: [117],
      WITHEVENTS: [117],
      XOR: [117],
      IDENTIFIER: [117],
    },
    dictionaryCallStmt: {
      '!': [118],
    },
    literal: {
      INTEGERLITERAL: [119],
      STRINGLITERAL: [120],
      NOTHING: [121],
      NULL: [122],
      TRUE: [123],
      FALSE: [124],
    },
    typeHint: {
      '&': [125],
      '%': [126],
      '#': [127],
      '!': [128],
      '@': [129],
      $: [130],
    },
    arg_group_def_57: {
      BYVAL: [131],
    },
    arg_group_56: {
      BYVAL: [132],
      BYREF: [134],
    },
    arg_group_def_58: {
      BYREF: [133],
    },
    arg_group_def_60: {
      LPAREN: [135],
    },
    arg: {
      OPTIONAL: [136],
      BYVAL: [136],
      BYREF: [136],
      PARAMARRAY: [136],
      ALIAS: [136],
      AND: [136],
      ATTRIBUTE: [136],
      AS: [136],
      BEGIN: [136],
      BOOLEAN: [136],
      BYTE: [136],
      CALL: [136],
      CASE: [136],
      CONST: [136],
      DECLARE: [136],
      DEFBOOL: [136],
      DEFBYTE: [136],
      DEFDATE: [136],
      DEFDBL: [136],
      DEFDEC: [136],
      DEFCUR: [136],
      DEFINT: [136],
      DEFLNG: [136],
      DEFOBJ: [136],
      DEFSNG: [136],
      DEFSTR: [136],
      DEFVAR: [136],
      DIM: [136],
      DO: [136],
      DOUBLE: [136],
      EACH: [136],
      ELSE: [136],
      ELSEIF: [136],
      END_ENUM: [136],
      END_FUNCTION: [136],
      END_IF: [136],
      END_PROPERTY: [136],
      END_SELECT: [136],
      END_SUB: [136],
      END_TYPE: [136],
      END_WITH: [136],
      END: [136],
      ENUM: [136],
      EQV: [136],
      ERASE: [136],
      ERROR: [136],
      EVENT: [136],
      EXIT_DO: [136],
      EXIT_FOR: [136],
      EXIT_FUNCTION: [136],
      EXIT_PROPERTY: [136],
      EXIT_SUB: [136],
      FALSE: [136],
      FRIEND: [136],
      FOR: [136],
      FUNCTION: [136],
      GET: [136],
      GLOBAL: [136],
      GOSUB: [136],
      GOTO: [136],
      IF: [136],
      IMPLEMENTS: [136],
      IN: [136],
      IS: [136],
      INTEGER: [136],
      LONG: [136],
      LOOP: [136],
      LEN: [136],
      LET: [136],
      LIB: [136],
      LIKE: [136],
      LSET: [136],
      MACRO_CONST: [136],
      MACRO_IF: [136],
      MACRO_ELSEIF: [136],
      MACRO_ELSE: [136],
      MACRO_END_IF: [136],
      MOD: [136],
      NEXT: [136],
      NEW: [136],
      NOT: [136],
      NOTHING: [136],
      NULL: [136],
      ON: [136],
      ON_ERROR: [136],
      ON_LOCAL_ERROR: [136],
      OPTION_BASE: [136],
      OPTION_EXPLICIT: [136],
      OPTION_COMPARE: [136],
      OPTION_PRIVATE_MODULE: [136],
      OR: [136],
      PRESERVE: [136],
      PRIVATE: [136],
      PROPERTY_GET: [136],
      PROPERTY_LET: [136],
      PROPERTY_SET: [136],
      PTRSAFE: [136],
      PUBLIC: [136],
      RAISEEVENT: [136],
      REDIM: [136],
      RESET: [136],
      RESUME: [136],
      RETURN: [136],
      SELECT: [136],
      SET: [136],
      SINGLE: [136],
      STATIC: [136],
      STEP: [136],
      STOP: [136],
      STRING: [136],
      SUB: [136],
      THEN: [136],
      TO: [136],
      TRUE: [136],
      TYPEOF: [136],
      UNTIL: [136],
      VARIANT: [136],
      WEND: [136],
      WHILE: [136],
      WITH: [136],
      WITHEVENTS: [136],
      XOR: [136],
      IDENTIFIER: [136],
    },
    argDefaultValue: {
      EQ: [137],
    },
    asTypeClause: {
      AS: [138],
    },
    type__group_def_62: {
      BOOLEAN: [139],
      BYTE: [139],
      DOUBLE: [139],
      INTEGER: [139],
      LONG: [139],
      SINGLE: [139],
      VARIANT: [139],
      STRING: [139],
    },
    type__group_61: {
      BOOLEAN: [140, 142],
      BYTE: [140, 142],
      DOUBLE: [140, 142],
      INTEGER: [140, 142],
      LONG: [140, 142],
      SINGLE: [140, 142],
      VARIANT: [140, 142],
      STRING: [140, 142],
      ALIAS: [142],
      AND: [142],
      ATTRIBUTE: [142],
      AS: [142],
      BEGIN: [142],
      BYVAL: [142],
      BYREF: [142],
      CALL: [142],
      CASE: [142],
      CONST: [142],
      DECLARE: [142],
      DEFBOOL: [142],
      DEFBYTE: [142],
      DEFDATE: [142],
      DEFDBL: [142],
      DEFDEC: [142],
      DEFCUR: [142],
      DEFINT: [142],
      DEFLNG: [142],
      DEFOBJ: [142],
      DEFSNG: [142],
      DEFSTR: [142],
      DEFVAR: [142],
      DIM: [142],
      DO: [142],
      EACH: [142],
      ELSE: [142],
      ELSEIF: [142],
      END_ENUM: [142],
      END_FUNCTION: [142],
      END_IF: [142],
      END_PROPERTY: [142],
      END_SELECT: [142],
      END_SUB: [142],
      END_TYPE: [142],
      END_WITH: [142],
      END: [142],
      ENUM: [142],
      EQV: [142],
      ERASE: [142],
      ERROR: [142],
      EVENT: [142],
      EXIT_DO: [142],
      EXIT_FOR: [142],
      EXIT_FUNCTION: [142],
      EXIT_PROPERTY: [142],
      EXIT_SUB: [142],
      FALSE: [142],
      FRIEND: [142],
      FOR: [142],
      FUNCTION: [142],
      GET: [142],
      GLOBAL: [142],
      GOSUB: [142],
      GOTO: [142],
      IF: [142],
      IMPLEMENTS: [142],
      IN: [142],
      IS: [142],
      LOOP: [142],
      LEN: [142],
      LET: [142],
      LIB: [142],
      LIKE: [142],
      LSET: [142],
      MACRO_CONST: [142],
      MACRO_IF: [142],
      MACRO_ELSEIF: [142],
      MACRO_ELSE: [142],
      MACRO_END_IF: [142],
      MOD: [142],
      NEXT: [142],
      NEW: [142],
      NOT: [142],
      NOTHING: [142],
      NULL: [142],
      ON: [142],
      ON_ERROR: [142],
      ON_LOCAL_ERROR: [142],
      OPTIONAL: [142],
      OPTION_BASE: [142],
      OPTION_EXPLICIT: [142],
      OPTION_COMPARE: [142],
      OPTION_PRIVATE_MODULE: [142],
      OR: [142],
      PARAMARRAY: [142],
      PRESERVE: [142],
      PRIVATE: [142],
      PROPERTY_GET: [142],
      PROPERTY_LET: [142],
      PROPERTY_SET: [142],
      PTRSAFE: [142],
      PUBLIC: [142],
      RAISEEVENT: [142],
      REDIM: [142],
      RESET: [142],
      RESUME: [142],
      RETURN: [142],
      SELECT: [142],
      SET: [142],
      STATIC: [142],
      STEP: [142],
      STOP: [142],
      SUB: [142],
      THEN: [142],
      TO: [142],
      TRUE: [142],
      TYPEOF: [142],
      UNTIL: [142],
      WEND: [142],
      WHILE: [142],
      WITH: [142],
      WITHEVENTS: [142],
      XOR: [142],
      IDENTIFIER: [142],
    },
    type__group_def_63: {
      ALIAS: [141],
      AND: [141],
      ATTRIBUTE: [141],
      AS: [141],
      BEGIN: [141],
      BOOLEAN: [141],
      BYVAL: [141],
      BYREF: [141],
      BYTE: [141],
      CALL: [141],
      CASE: [141],
      CONST: [141],
      DECLARE: [141],
      DEFBOOL: [141],
      DEFBYTE: [141],
      DEFDATE: [141],
      DEFDBL: [141],
      DEFDEC: [141],
      DEFCUR: [141],
      DEFINT: [141],
      DEFLNG: [141],
      DEFOBJ: [141],
      DEFSNG: [141],
      DEFSTR: [141],
      DEFVAR: [141],
      DIM: [141],
      DO: [141],
      DOUBLE: [141],
      EACH: [141],
      ELSE: [141],
      ELSEIF: [141],
      END_ENUM: [141],
      END_FUNCTION: [141],
      END_IF: [141],
      END_PROPERTY: [141],
      END_SELECT: [141],
      END_SUB: [141],
      END_TYPE: [141],
      END_WITH: [141],
      END: [141],
      ENUM: [141],
      EQV: [141],
      ERASE: [141],
      ERROR: [141],
      EVENT: [141],
      EXIT_DO: [141],
      EXIT_FOR: [141],
      EXIT_FUNCTION: [141],
      EXIT_PROPERTY: [141],
      EXIT_SUB: [141],
      FALSE: [141],
      FRIEND: [141],
      FOR: [141],
      FUNCTION: [141],
      GET: [141],
      GLOBAL: [141],
      GOSUB: [141],
      GOTO: [141],
      IF: [141],
      IMPLEMENTS: [141],
      IN: [141],
      IS: [141],
      INTEGER: [141],
      LONG: [141],
      LOOP: [141],
      LEN: [141],
      LET: [141],
      LIB: [141],
      LIKE: [141],
      LSET: [141],
      MACRO_CONST: [141],
      MACRO_IF: [141],
      MACRO_ELSEIF: [141],
      MACRO_ELSE: [141],
      MACRO_END_IF: [141],
      MOD: [141],
      NEXT: [141],
      NEW: [141],
      NOT: [141],
      NOTHING: [141],
      NULL: [141],
      ON: [141],
      ON_ERROR: [141],
      ON_LOCAL_ERROR: [141],
      OPTIONAL: [141],
      OPTION_BASE: [141],
      OPTION_EXPLICIT: [141],
      OPTION_COMPARE: [141],
      OPTION_PRIVATE_MODULE: [141],
      OR: [141],
      PARAMARRAY: [141],
      PRESERVE: [141],
      PRIVATE: [141],
      PROPERTY_GET: [141],
      PROPERTY_LET: [141],
      PROPERTY_SET: [141],
      PTRSAFE: [141],
      PUBLIC: [141],
      RAISEEVENT: [141],
      REDIM: [141],
      RESET: [141],
      RESUME: [141],
      RETURN: [141],
      SELECT: [141],
      SET: [141],
      SINGLE: [141],
      STATIC: [141],
      STEP: [141],
      STOP: [141],
      STRING: [141],
      SUB: [141],
      THEN: [141],
      TO: [141],
      TRUE: [141],
      TYPEOF: [141],
      UNTIL: [141],
      VARIANT: [141],
      WEND: [141],
      WHILE: [141],
      WITH: [141],
      WITHEVENTS: [141],
      XOR: [141],
      IDENTIFIER: [141],
    },
    type_: {
      BOOLEAN: [143],
      BYTE: [143],
      DOUBLE: [143],
      INTEGER: [143],
      LONG: [143],
      SINGLE: [143],
      VARIANT: [143],
      STRING: [143],
      ALIAS: [143],
      AND: [143],
      ATTRIBUTE: [143],
      AS: [143],
      BEGIN: [143],
      BYVAL: [143],
      BYREF: [143],
      CALL: [143],
      CASE: [143],
      CONST: [143],
      DECLARE: [143],
      DEFBOOL: [143],
      DEFBYTE: [143],
      DEFDATE: [143],
      DEFDBL: [143],
      DEFDEC: [143],
      DEFCUR: [143],
      DEFINT: [143],
      DEFLNG: [143],
      DEFOBJ: [143],
      DEFSNG: [143],
      DEFSTR: [143],
      DEFVAR: [143],
      DIM: [143],
      DO: [143],
      EACH: [143],
      ELSE: [143],
      ELSEIF: [143],
      END_ENUM: [143],
      END_FUNCTION: [143],
      END_IF: [143],
      END_PROPERTY: [143],
      END_SELECT: [143],
      END_SUB: [143],
      END_TYPE: [143],
      END_WITH: [143],
      END: [143],
      ENUM: [143],
      EQV: [143],
      ERASE: [143],
      ERROR: [143],
      EVENT: [143],
      EXIT_DO: [143],
      EXIT_FOR: [143],
      EXIT_FUNCTION: [143],
      EXIT_PROPERTY: [143],
      EXIT_SUB: [143],
      FALSE: [143],
      FRIEND: [143],
      FOR: [143],
      FUNCTION: [143],
      GET: [143],
      GLOBAL: [143],
      GOSUB: [143],
      GOTO: [143],
      IF: [143],
      IMPLEMENTS: [143],
      IN: [143],
      IS: [143],
      LOOP: [143],
      LEN: [143],
      LET: [143],
      LIB: [143],
      LIKE: [143],
      LSET: [143],
      MACRO_CONST: [143],
      MACRO_IF: [143],
      MACRO_ELSEIF: [143],
      MACRO_ELSE: [143],
      MACRO_END_IF: [143],
      MOD: [143],
      NEXT: [143],
      NEW: [143],
      NOT: [143],
      NOTHING: [143],
      NULL: [143],
      ON: [143],
      ON_ERROR: [143],
      ON_LOCAL_ERROR: [143],
      OPTIONAL: [143],
      OPTION_BASE: [143],
      OPTION_EXPLICIT: [143],
      OPTION_COMPARE: [143],
      OPTION_PRIVATE_MODULE: [143],
      OR: [143],
      PARAMARRAY: [143],
      PRESERVE: [143],
      PRIVATE: [143],
      PROPERTY_GET: [143],
      PROPERTY_LET: [143],
      PROPERTY_SET: [143],
      PTRSAFE: [143],
      PUBLIC: [143],
      RAISEEVENT: [143],
      REDIM: [143],
      RESET: [143],
      RESUME: [143],
      RETURN: [143],
      SELECT: [143],
      SET: [143],
      STATIC: [143],
      STEP: [143],
      STOP: [143],
      SUB: [143],
      THEN: [143],
      TO: [143],
      TRUE: [143],
      TYPEOF: [143],
      UNTIL: [143],
      WEND: [143],
      WHILE: [143],
      WITH: [143],
      WITHEVENTS: [143],
      XOR: [143],
      IDENTIFIER: [143],
    },
    complexType_group_66: {
      '.': [144],
      '!': [145],
    },
    complexType_group_def_67: {
      '.': [146],
      '!': [146],
    },
    complexType: {
      ALIAS: [147],
      AND: [147],
      ATTRIBUTE: [147],
      AS: [147],
      BEGIN: [147],
      BOOLEAN: [147],
      BYVAL: [147],
      BYREF: [147],
      BYTE: [147],
      CALL: [147],
      CASE: [147],
      CONST: [147],
      DECLARE: [147],
      DEFBOOL: [147],
      DEFBYTE: [147],
      DEFDATE: [147],
      DEFDBL: [147],
      DEFDEC: [147],
      DEFCUR: [147],
      DEFINT: [147],
      DEFLNG: [147],
      DEFOBJ: [147],
      DEFSNG: [147],
      DEFSTR: [147],
      DEFVAR: [147],
      DIM: [147],
      DO: [147],
      DOUBLE: [147],
      EACH: [147],
      ELSE: [147],
      ELSEIF: [147],
      END_ENUM: [147],
      END_FUNCTION: [147],
      END_IF: [147],
      END_PROPERTY: [147],
      END_SELECT: [147],
      END_SUB: [147],
      END_TYPE: [147],
      END_WITH: [147],
      END: [147],
      ENUM: [147],
      EQV: [147],
      ERASE: [147],
      ERROR: [147],
      EVENT: [147],
      EXIT_DO: [147],
      EXIT_FOR: [147],
      EXIT_FUNCTION: [147],
      EXIT_PROPERTY: [147],
      EXIT_SUB: [147],
      FALSE: [147],
      FRIEND: [147],
      FOR: [147],
      FUNCTION: [147],
      GET: [147],
      GLOBAL: [147],
      GOSUB: [147],
      GOTO: [147],
      IF: [147],
      IMPLEMENTS: [147],
      IN: [147],
      IS: [147],
      INTEGER: [147],
      LONG: [147],
      LOOP: [147],
      LEN: [147],
      LET: [147],
      LIB: [147],
      LIKE: [147],
      LSET: [147],
      MACRO_CONST: [147],
      MACRO_IF: [147],
      MACRO_ELSEIF: [147],
      MACRO_ELSE: [147],
      MACRO_END_IF: [147],
      MOD: [147],
      NEXT: [147],
      NEW: [147],
      NOT: [147],
      NOTHING: [147],
      NULL: [147],
      ON: [147],
      ON_ERROR: [147],
      ON_LOCAL_ERROR: [147],
      OPTIONAL: [147],
      OPTION_BASE: [147],
      OPTION_EXPLICIT: [147],
      OPTION_COMPARE: [147],
      OPTION_PRIVATE_MODULE: [147],
      OR: [147],
      PARAMARRAY: [147],
      PRESERVE: [147],
      PRIVATE: [147],
      PROPERTY_GET: [147],
      PROPERTY_LET: [147],
      PROPERTY_SET: [147],
      PTRSAFE: [147],
      PUBLIC: [147],
      RAISEEVENT: [147],
      REDIM: [147],
      RESET: [147],
      RESUME: [147],
      RETURN: [147],
      SELECT: [147],
      SET: [147],
      SINGLE: [147],
      STATIC: [147],
      STEP: [147],
      STOP: [147],
      STRING: [147],
      SUB: [147],
      THEN: [147],
      TO: [147],
      TRUE: [147],
      TYPEOF: [147],
      UNTIL: [147],
      VARIANT: [147],
      WEND: [147],
      WHILE: [147],
      WITH: [147],
      WITHEVENTS: [147],
      XOR: [147],
      IDENTIFIER: [147],
    },
    baseType: {
      BOOLEAN: [148],
      BYTE: [149],
      DOUBLE: [150],
      INTEGER: [151],
      LONG: [152],
      SINGLE: [153],
      VARIANT: [154],
      STRING: [156],
    },
    baseType_group_def_69: {
      MULT: [155],
    },
    fieldLength: {
      MULT: [157, 158],
    },
    ambiguousIdentifier: {
      ALIAS: [159],
      AND: [160],
      ATTRIBUTE: [161],
      AS: [162],
      BEGIN: [163],
      BOOLEAN: [164],
      BYVAL: [165],
      BYREF: [166],
      BYTE: [167],
      CALL: [168],
      CASE: [169],
      CONST: [170],
      DECLARE: [171],
      DEFBOOL: [172],
      DEFBYTE: [173],
      DEFDATE: [174],
      DEFDBL: [175],
      DEFDEC: [176],
      DEFCUR: [177],
      DEFINT: [178],
      DEFLNG: [179],
      DEFOBJ: [180],
      DEFSNG: [181],
      DEFSTR: [182],
      DEFVAR: [183],
      DIM: [184],
      DO: [185],
      DOUBLE: [186],
      EACH: [187],
      ELSE: [188],
      ELSEIF: [189],
      END_ENUM: [190],
      END_FUNCTION: [191],
      END_IF: [192],
      END_PROPERTY: [193],
      END_SELECT: [194],
      END_SUB: [195],
      END_TYPE: [196],
      END_WITH: [197],
      END: [198],
      ENUM: [199],
      EQV: [200],
      ERASE: [201],
      ERROR: [202],
      EVENT: [203],
      EXIT_DO: [204],
      EXIT_FOR: [205],
      EXIT_FUNCTION: [206],
      EXIT_PROPERTY: [207],
      EXIT_SUB: [208],
      FALSE: [209],
      FRIEND: [210],
      FOR: [211],
      FUNCTION: [212],
      GET: [213],
      GLOBAL: [214],
      GOSUB: [215],
      GOTO: [216],
      IF: [217],
      IMPLEMENTS: [218],
      IN: [219],
      IS: [220],
      INTEGER: [221],
      LONG: [222],
      LOOP: [223],
      LEN: [224],
      LET: [225],
      LIB: [226],
      LIKE: [227],
      LSET: [228],
      MACRO_CONST: [229],
      MACRO_IF: [230],
      MACRO_ELSEIF: [231],
      MACRO_ELSE: [232],
      MACRO_END_IF: [233],
      MOD: [234],
      NEXT: [235],
      NEW: [236],
      NOT: [237],
      NOTHING: [238],
      NULL: [239],
      ON: [240],
      ON_ERROR: [241],
      ON_LOCAL_ERROR: [242],
      OPTIONAL: [243],
      OPTION_BASE: [244],
      OPTION_EXPLICIT: [245],
      OPTION_COMPARE: [246],
      OPTION_PRIVATE_MODULE: [247],
      OR: [248],
      PARAMARRAY: [249],
      PRESERVE: [250],
      PRIVATE: [251],
      PROPERTY_GET: [252],
      PROPERTY_LET: [253],
      PROPERTY_SET: [254],
      PTRSAFE: [255],
      PUBLIC: [256],
      RAISEEVENT: [257],
      REDIM: [258],
      RESET: [259],
      RESUME: [260],
      RETURN: [261],
      SELECT: [262],
      SET: [263],
      SINGLE: [264],
      STATIC: [265],
      STEP: [266],
      STOP: [267],
      STRING: [268],
      SUB: [269],
      THEN: [270],
      TO: [271],
      TRUE: [272],
      TYPEOF: [273],
      UNTIL: [274],
      VARIANT: [275],
      WEND: [276],
      WHILE: [277],
      WITH: [278],
      WITHEVENTS: [279],
      XOR: [280],
      IDENTIFIER: [281],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }

        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (
        ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX ||
        ruleIndexes.length === 0
      ) {
        // skip this symbol first
        return returnNext();
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 5,
    15: 6,
    16: 6,
    17: 6,
    18: 6,
    19: 7,
    20: 7,
    21: 8,
    22: 8,
    23: 8,
    24: 8,
    25: 8,
    26: 9,
    27: 9,
    28: 9,
    29: 9,
    30: 10,
    31: 11,
    32: 12,
    33: 13,
    34: 14,
    35: 15,
    36: 15,
    37: 16,
    38: 16,
    39: 16,
    40: 16,
    41: 16,
    42: 16,
    43: 16,
    44: 16,
    45: 17,
    46: 17,
    47: 18,
    48: 18,
    49: 19,
    50: 20,
    51: 20,
    52: 20,
    53: 20,
    54: 20,
    55: 20,
    56: 21,
    57: 21,
    58: 21,
    59: 21,
    60: 21,
    61: 21,
    62: 21,
    63: 22,
    64: 23,
    65: 23,
    66: 24,
    67: 24,
    68: 24,
    69: 25,
    70: 26,
    71: 26,
    72: 27,
    73: 28,
    74: 29,
    75: 29,
    76: 30,
    77: 31,
    78: 31,
    79: 31,
    80: 31,
    81: 31,
    82: 31,
    83: 31,
    84: 32,
    85: 32,
    86: 33,
    87: 33,
    88: 34,
    89: 35,
    90: 35,
    91: 36,
    92: 36,
    93: 37,
    94: 38,
    95: 38,
    96: 38,
    97: 39,
    98: 39,
    99: 39,
    100: 39,
    101: 40,
    102: 40,
    103: 40,
    104: 41,
    105: 41,
    106: 41,
    107: 41,
    108: 41,
    109: 42,
    110: 42,
    111: 42,
    112: 42,
    113: 42,
    114: 42,
    115: 42,
    116: 43,
    117: 44,
    118: 45,
    119: 46,
    120: 46,
    121: 46,
    122: 46,
    123: 46,
    124: 46,
    125: 47,
    126: 47,
    127: 47,
    128: 47,
    129: 47,
    130: 47,
    131: 48,
    132: 48,
    133: 48,
    134: 48,
    135: 48,
    136: 48,
    137: 49,
    138: 50,
    139: 51,
    140: 51,
    141: 51,
    142: 51,
    143: 51,
    144: 52,
    145: 52,
    146: 52,
    147: 52,
    148: 53,
    149: 53,
    150: 53,
    151: 53,
    152: 53,
    153: 53,
    154: 53,
    155: 53,
    156: 53,
    157: 54,
    158: 54,
    159: 55,
    160: 56,
    161: 57,
    162: 58,
    163: 59,
    164: 60,
    165: 61,
    166: 62,
    167: 63,
    168: 64,
    169: 65,
    170: 66,
    171: 67,
    172: 68,
    173: 69,
    174: 70,
    175: 71,
    176: 72,
    177: 73,
    178: 74,
    179: 75,
    180: 76,
    181: 77,
    182: 78,
    183: 79,
    184: 80,
    185: 81,
    186: 82,
    187: 83,
    188: 84,
    189: 85,
    190: 86,
    191: 87,
    192: 88,
    193: 89,
    194: 90,
    195: 91,
    196: 92,
    197: 93,
    198: 94,
    199: 95,
    200: 96,
    201: 97,
    202: 98,
    203: 99,
    204: 100,
    205: 101,
    206: 102,
    207: 103,
    208: 104,
    209: 105,
    210: 106,
    211: 107,
    212: 108,
    213: 109,
    214: 110,
    215: 111,
    216: 112,
    217: 113,
    218: 114,
    219: 115,
    220: 116,
    221: 117,
    222: 118,
    223: 119,
    224: 120,
    225: 121,
    226: 122,
    227: 123,
    228: 124,
    229: 125,
    230: 126,
    231: 127,
    232: 128,
    233: 129,
    234: 130,
    235: 131,
    236: 132,
    237: 133,
    238: 134,
    239: 135,
    240: 136,
    241: 137,
    242: 138,
    243: 139,
    244: 140,
    245: 141,
    246: 142,
    247: 143,
    248: 144,
    249: 145,
    250: 146,
    251: 147,
    252: 148,
    253: 149,
    254: 150,
    255: 151,
    256: 152,
    257: 153,
    258: 154,
    259: 155,
    260: 156,
    261: 157,
    262: 158,
    263: 159,
    264: 160,
    265: 161,
    266: 162,
    267: 163,
    268: 164,
    269: 165,
    270: 166,
    271: 167,
    272: 168,
    273: 169,
    274: 170,
    275: 171,
    276: 172,
    277: 173,
    278: 174,
    279: 175,
    280: 176,
    281: 177,
  };
  return parser;
})();

export default vbaParser;
