/*
Generated By kison v0.5.36

Generate time: Thu Dec 02 2021 14:23:30 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (topSymbol === nextToken.t || shouldDelete(nextToken)) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token =
      recommendedAction.action === 'add'
        ? lexer.peekTokens()[0]
        : lexer.getCurrentToken();
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      [
        'ALIAS',
        /ALIAS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AND',
        /AND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ATTRIBUTE',
        /ATTRIBUTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AS',
        /AS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BEGIN',
        /BEGIN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BOOLEAN',
        /BOOLEAN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYVAL',
        /BYVAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYREF',
        /BYREF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYTE',
        /BYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CALL',
        /CALL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CASE',
        /CASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CONST',
        /CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DECLARE',
        /DECLARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBOOL',
        /DEFBOOL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBYTE',
        /DEFBYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDATE',
        /DEFDATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDBL',
        /DEFDBL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDEC',
        /DEFDEC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFCUR',
        /DEFCUR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFINT',
        /DEFINT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFLNG',
        /DEFLNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFOBJ',
        /DEFOBJ\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSNG',
        /DEFSNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSTR',
        /DEFSTR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFVAR',
        /DEFVAR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DIM',
        /DIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DO',
        /DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DOUBLE',
        /DOUBLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EACH',
        /EACH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSE',
        /ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSEIF',
        /ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_ENUM',
        /END ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_FUNCTION',
        /END FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_IF',
        /END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_PROPERTY',
        /END PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SELECT',
        /END SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SUB',
        /END SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_TYPE',
        /END TYPE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_WITH',
        /END WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END',
        /END\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ENUM',
        /ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EQV',
        /EQV\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ERASE',
        /ERASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EVENT',
        /EVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_DO',
        /EXIT DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FOR',
        /EXIT FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FUNCTION',
        /EXIT FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_PROPERTY',
        /EXIT PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_SUB',
        /EXIT SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FALSE',
        /FALSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FRIEND',
        /FRIEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FOR',
        /FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FUNCTION',
        /FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GET',
        /GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GLOBAL',
        /GLOBAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOSUB',
        /GOSUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOTO',
        /GOTO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IF',
        /IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMPLEMENTS',
        /IMPLEMENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IN',
        /IN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ISNOT',
        /ISNOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IS',
        /IS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'INTEGER',
        /INTEGER\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LONG',
        /LONG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LOOP',
        /LOOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LEN',
        /LEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LET',
        /LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIB',
        /LIB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIKE',
        /LIKE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LSET',
        /LSET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_CONST',
        /#CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_IF',
        /#IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSEIF',
        /#ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSE',
        /#ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_END_IF',
        /#END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MOD',
        /MOD\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEXT',
        /NEXT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEW',
        /NEW\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOT',
        /NOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOTHING',
        /NOTHING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NULL',
        /NULL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_ERROR',
        /ON ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_LOCAL_ERROR',
        /ON LOCAL ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON',
        /ON\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTIONAL',
        /OPTIONAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_BASE',
        /OPTION BASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_EXPLICIT',
        /OPTION EXPLICIT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_COMPARE',
        /OPTION COMPARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_PRIVATE_MODULE',
        /OPTION PRIVATE MODULE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OR',
        /OR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PARAMARRAY',
        /PARAMARRAY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRESERVE',
        /PRESERVE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRIVATE',
        /PRIVATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_GET',
        /PROPERTY GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_LET',
        /PROPERTY LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_SET',
        /PROPERTY SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PTRSAFE',
        /PTRSAFE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PUBLIC',
        /PUBLIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RAISEEVENT',
        /RAISEEVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'REDIM',
        /REDIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESET',
        /RESET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESUME',
        /RESUME\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RETURN',
        /RETURN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SELECT',
        /SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SET',
        /SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SINGLE',
        /SINGLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STATIC',
        /STATIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STEP',
        /STEP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STOP',
        /STOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STRING',
        /STRING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SUB',
        /SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'THEN',
        /THEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TO',
        /TO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TRUE',
        /TRUE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TYPEOF',
        /TYPEOF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'UNTIL',
        /UNTIL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'VARIANT',
        /VARIANT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WEND',
        /WEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WHILE',
        /WHILE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITH',
        /WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITHEVENTS',
        /WITHEVENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'XOR',
        /XOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMP',
        /IMP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ['DOUBLELITERAL', /[0-9]*\.[0-9]+(E[0-9]+)?/g],
      ['SPACE_DOT', /\s+\./g],
      ['ASSIGN', /:=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['IDIV', /\\/g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS_EQ', /\-=/g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS_EQ', /\+=/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"(""|[^"\r\n])*"/g],
      ['INTEGERLITERAL', /[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ['.', /\./g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1*']],
      [
        'moduleDeclarations_group_def_5',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_5*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_7',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_7*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'RPAREN',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_9', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_9*', 'endOfStatement']],
      ['blockStmt', ['lineLabel']],
      ['blockStmt', ['goToStmt']],
      ['blockStmt', ['ifThenElseStmt']],
      ['blockStmt', ['onErrorStmt']],
      ['blockStmt', ['withStmt']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['ifThenElseStmt_group_def_11', ['ELSE', 'blockStmt']],
      [
        'ifThenElseStmt',
        [
          'IF',
          'valueStmt',
          'THEN',
          'blockStmt',
          'ifThenElseStmt_group_def_11?',
        ],
        undefined,
        'InlineIfThenElse',
      ],
      [
        'ifThenElseStmt',
        ['ifBlockStmt', 'ifElseIfBlockStmt*', 'ifElseBlockStmt?', 'END_IF'],
        undefined,
        'BlockIfThenElse',
      ],
      ['ifBlockStmt', ['IF', 'valueStmt', 'THEN', 'endOfStatement', 'block?']],
      [
        'ifElseIfBlockStmt',
        ['ELSEIF', 'valueStmt', 'THEN', 'endOfStatement', 'block?'],
      ],
      ['ifElseBlockStmt', ['ELSE', 'endOfStatement', 'block?']],
      ['onErrorStmt_group_def_13', ['ambiguousIdentifier']],
      ['onErrorStmt_group_12', ['onErrorStmt_group_def_13']],
      ['onErrorStmt_group_def_14', ['MINUS', 'INTEGERLITERAL']],
      ['onErrorStmt_group_12', ['onErrorStmt_group_def_14']],
      ['onErrorStmt', ['ON_ERROR', 'GOTO', 'onErrorStmt_group_12']],
      ['lineLabel', ['ambiguousIdentifier', 'COLON']],
      ['goToStmt', ['GOTO', 'ambiguousIdentifier']],
      ['eraseStmt_group_def_16', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_16*']],
      ['redimStmt_group_def_18', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_18*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_def_20', ['EQ']],
      ['letStmt_group_19', ['letStmt_group_def_20']],
      ['letStmt_group_def_21', ['PLUS_EQ']],
      ['letStmt_group_19', ['letStmt_group_def_21']],
      ['letStmt_group_def_22', ['MINUS_EQ']],
      ['letStmt_group_19', ['letStmt_group_def_22']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_19', 'valueStmt'],
      ],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_24',
        ['implicitCallStmt_InStmt?', '.'],
      ],
      [
        'eCS_MemberProcedureCall_group_23',
        ['eCS_MemberProcedureCall_group_def_24'],
      ],
      ['eCS_MemberProcedureCall_group_def_25', ['SPACE_DOT']],
      [
        'eCS_MemberProcedureCall_group_23',
        ['eCS_MemberProcedureCall_group_def_25'],
      ],
      [
        'eCS_MemberProcedureCall_group_def_27',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_29', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'eCS_MemberProcedureCall_group_23',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_27?',
          'eCS_MemberProcedureCall_group_def_29*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_27?',
          'eCS_MemberProcedureCall_group_def_29*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall',
        [
          'implicitCallStmt_InStmt',
          '.',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_29*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'certainIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_29?',
        ],
      ],
      ['argsCall_group_def_35', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_35*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_37', ['DIM']],
      ['variableStmt_group_36', ['variableStmt_group_def_37']],
      ['variableStmt_group_def_38', ['STATIC']],
      ['variableStmt_group_36', ['variableStmt_group_def_38']],
      ['variableStmt_group_def_39', ['visibility']],
      ['variableStmt_group_36', ['variableStmt_group_def_39']],
      [
        'variableStmt',
        ['variableStmt_group_36', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['withStmt_group_def_41', ['implicitCallStmt_InStmt']],
      ['withStmt_group_40', ['withStmt_group_def_41']],
      ['withStmt_group_def_42', ['NEW', 'type_']],
      ['withStmt_group_40', ['withStmt_group_def_42']],
      [
        'withStmt',
        ['WITH', 'withStmt_group_40', 'endOfStatement', 'block?', 'END_WITH'],
      ],
      ['variableListStmt_group_def_44', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_44*'],
      ],
      ['variableSubStmt_group_def_46', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_46?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_16*']],
      ['subscript__group_def_49', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_49?', 'valueStmt']],
      ['subscripts_group_def_51', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_51*']],
      ['subscript_', ['subscript__group_def_49?', 'valueStmt']],
      ['argList_group_def_55', [',', 'arg']],
      ['argList_group_def_56', ['arg', 'argList_group_def_55*']],
      ['argList', ['LPAREN', 'argList_group_def_56?', 'RPAREN']],
      ['valueStmt_p_end', ['literal']],
      ['valueStmt_p_end', ['implicitCallStmt_InStmt']],
      ['valueStmt_p_end', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['valueStmt_p_end', ['NEW', 'valueStmt']],
      [
        'valueStmt_p_end',
        ['LPAREN', 'valueStmt', 'RPAREN'],
        undefined,
        'AtomExpression',
      ],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_59', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_58', ['iCS_S_MembersCall_group_def_59']],
      ['iCS_S_MembersCall_group_def_60', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_58', ['iCS_S_MembersCall_group_def_60']],
      [
        'iCS_S_MembersCall_group_def_61',
        ['iCS_S_MembersCall_group_58', 'iCS_S_MemberCall'],
      ],
      ['iCS_S_MembersCall_group_57', ['iCS_S_MembersCall_group_def_61']],
      ['iCS_S_MembersCall_group_def_62', ['iCS_S_SpaceMemberCall']],
      ['iCS_S_MembersCall_group_57', ['iCS_S_MembersCall_group_def_62']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_57',
          'iCS_S_MemberCall*',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_29*',
        ],
      ],
      ['iCS_S_MemberCall_group_64', ['iCS_S_MembersCall_group_def_59']],
      ['iCS_S_MemberCall_group_64', ['iCS_S_MembersCall_group_def_60']],
      ['iCS_S_MemberCall', ['.', 'iCS_S_MemberCall_group_64']],
      ['iCS_S_SpaceMemberCall_group_65', ['iCS_S_MembersCall_group_def_59']],
      ['iCS_S_SpaceMemberCall_group_65', ['iCS_S_MembersCall_group_def_60']],
      [
        'iCS_S_SpaceMemberCall',
        ['SPACE_DOT', 'iCS_S_SpaceMemberCall_group_65'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_29*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'dictionaryCallStmt?',
          'eCS_MemberProcedureCall_group_def_29*',
        ],
      ],
      ['dictionaryCallStmt', ['!', 'ambiguousIdentifier', 'typeHint?']],
      ['literal', ['DOUBLELITERAL']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_69', ['BYVAL']],
      ['arg_group_68', ['arg_group_def_69']],
      ['arg_group_def_70', ['BYREF']],
      ['arg_group_68', ['arg_group_def_70']],
      ['arg_group_def_72', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_68?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_72?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type__group_def_74', ['baseType']],
      ['type__group_73', ['type__group_def_74']],
      ['type__group_def_75', ['complexType']],
      ['type__group_73', ['type__group_def_75']],
      ['type_', ['type__group_73', 'arg_group_def_72?']],
      ['complexType_group_def_79', ['.']],
      ['complexType_group_78', ['complexType_group_def_79']],
      ['complexType_group_def_80', ['!']],
      ['complexType_group_78', ['complexType_group_def_80']],
      [
        'complexType_group_def_81',
        ['complexType_group_78', 'ambiguousIdentifier'],
      ],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_81*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType_group_def_83', ['MULT', 'valueStmt']],
      ['baseType', ['STRING', 'baseType_group_def_83?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['fieldLength', ['MULT', 'ambiguousIdentifier']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['ISNOT']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IMP']],
      ['certainIdentifier', ['IDENTIFIER']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
      ['valueStmt', ['valueStmt_p_2'], undefined, undefined, undefined, true],
      ['valueStmt', ['NOT', 'valueStmt'], undefined, 'PrefixExpression'],
      [
        '(valueStmt_p_2)1_',
        ['IS', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_2',
        ['valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_2)1_',
        ['ISNOT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['NEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['EQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['XOR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_3',
        ['valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_3)1_',
        ['OR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['AND', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['PLUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_4',
        ['valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_4)1_',
        ['MINUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['AMPERSAND', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MULT', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_5',
        ['valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_5)1_',
        ['DIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['IDIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MOD', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_6)1_',
        ['POW', 'valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_6',
        ['valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['valueStmt_p_end'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['MINUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      [
        'valueStmt_p_7',
        ['PLUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      ['(valueStmt_p_2)1_', []],
      ['(valueStmt_p_3)1_', []],
      ['(valueStmt_p_4)1_', []],
      ['(valueStmt_p_5)1_', []],
      ['(valueStmt_p_6)1_', []],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {
    valueStmt_p_end: 'valueStmt',
    valueStmt_p_1: 'valueStmt',
    valueStmt_p_2: 'valueStmt',
    valueStmt_p_3: 'valueStmt',
    valueStmt_p_4: 'valueStmt',
    valueStmt_p_5: 'valueStmt',
    valueStmt_p_6: 'valueStmt',
    valueStmt_p_7: 'valueStmt',
  };
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 19, 35, 50, 56, 57, 58, 59, 63, 65, 74, 75, 76, 77, 78, 79,
    84, 85, 86, 87, 88, 89, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109,
    111, 113, 116, 118, 121, 122, 132, 133, 134, 135, 136, 137, 138, 139, 141,
    142, 144, 145, 163, 164, 165, 166, 167, 171, 172, 173, 174, 176, 177, 178,
    179, 180, 189, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333,
    335, 336, 337, 339, 340, 341, 342, 347, 348, 349, 350, 351,
  ]);
  const parserPredictTable = {
    $START: {
      COMMENT: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      NEWLINE: [0],
      REMCOMMENT: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      COMMENT: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      NEWLINE: [1],
      REMCOMMENT: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
      ALIAS: [9],
      AND: [9],
      ATTRIBUTE: [9],
      AS: [9],
      BEGIN: [9],
      BOOLEAN: [9],
      BYVAL: [9],
      BYREF: [9],
      BYTE: [9],
      CALL: [9],
      CASE: [9],
      CONST: [9],
      DECLARE: [9],
      DEFBOOL: [9],
      DEFBYTE: [9],
      DEFDATE: [9],
      DEFDBL: [9],
      DEFDEC: [9],
      DEFCUR: [9],
      DEFINT: [9],
      DEFLNG: [9],
      DEFOBJ: [9],
      DEFSNG: [9],
      DEFSTR: [9],
      DEFVAR: [9],
      DIM: [9],
      DO: [9],
      DOUBLE: [9],
      EACH: [9],
      ELSE: [9],
      ELSEIF: [9],
      END_ENUM: [9],
      END_FUNCTION: [9],
      END_IF: [9],
      END_PROPERTY: [9],
      END_SELECT: [9],
      END_SUB: [9],
      END_TYPE: [9],
      END_WITH: [9],
      END: [9],
      ENUM: [9],
      EQV: [9],
      ERASE: [9],
      EVENT: [9],
      EXIT_DO: [9],
      EXIT_FOR: [9],
      EXIT_FUNCTION: [9],
      EXIT_PROPERTY: [9],
      EXIT_SUB: [9],
      FALSE: [9],
      FRIEND: [9],
      FOR: [9],
      FUNCTION: [9],
      GET: [9],
      GLOBAL: [9],
      GOSUB: [9],
      GOTO: [9],
      IF: [9],
      IMPLEMENTS: [9],
      IN: [9],
      ISNOT: [9],
      IS: [9],
      INTEGER: [9],
      LONG: [9],
      LOOP: [9],
      LEN: [9],
      LET: [9],
      LIB: [9],
      LIKE: [9],
      LSET: [9],
      MACRO_CONST: [9],
      MACRO_IF: [9],
      MACRO_ELSEIF: [9],
      MACRO_ELSE: [9],
      MACRO_END_IF: [9],
      MOD: [9],
      NEXT: [9],
      NEW: [9],
      NOT: [9],
      NOTHING: [9],
      NULL: [9],
      ON_ERROR: [9],
      ON_LOCAL_ERROR: [9],
      ON: [9],
      OPTIONAL: [9],
      OPTION_BASE: [9],
      OPTION_EXPLICIT: [9],
      OPTION_COMPARE: [9],
      OPTION_PRIVATE_MODULE: [9],
      OR: [9],
      PARAMARRAY: [9],
      PRESERVE: [9],
      PRIVATE: [9],
      PROPERTY_GET: [9],
      PROPERTY_LET: [9],
      PROPERTY_SET: [9],
      PTRSAFE: [9],
      PUBLIC: [9],
      RAISEEVENT: [9],
      REDIM: [9],
      RESET: [9],
      RESUME: [9],
      RETURN: [9],
      SELECT: [9],
      SET: [9],
      SINGLE: [9],
      STATIC: [9],
      STEP: [9],
      STOP: [9],
      STRING: [9],
      SUB: [9],
      THEN: [9],
      TO: [9],
      TRUE: [9],
      TYPEOF: [9],
      UNTIL: [9],
      VARIANT: [9],
      WEND: [9],
      WHILE: [9],
      WITH: [9],
      WITHEVENTS: [9],
      XOR: [9],
      IMP: [9],
      IDENTIFIER: [9],
      SPACE_DOT: [9],
    },
    moduleDeclarations_group_def_5: {
      NEWLINE: [10],
      COMMENT: [10],
      REMCOMMENT: [10],
    },
    moduleDeclarations: {
      COMMENT: [11],
      DIM: [11],
      STATIC: [11],
      PRIVATE: [11],
      PUBLIC: [11],
      FRIEND: [11],
      GLOBAL: [11],
      OPTION_BASE: [11],
      OPTION_COMPARE: [11],
      OPTION_EXPLICIT: [11],
      OPTION_PRIVATE_MODULE: [11],
    },
    moduleDeclarationsElement: {
      COMMENT: [12],
      DIM: [13],
      STATIC: [13],
      PRIVATE: [13],
      PUBLIC: [13],
      FRIEND: [13],
      GLOBAL: [13],
      OPTION_BASE: [14],
      OPTION_COMPARE: [14],
      OPTION_EXPLICIT: [14],
      OPTION_PRIVATE_MODULE: [14],
    },
    moduleOption: {
      OPTION_BASE: [15],
      OPTION_COMPARE: [16],
      OPTION_EXPLICIT: [17],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleBody_group_def_7: {
      NEWLINE: [19],
      COMMENT: [19],
      REMCOMMENT: [19],
    },
    moduleBody: {
      PRIVATE: [20],
      PUBLIC: [20],
      FRIEND: [20],
      GLOBAL: [20],
      STATIC: [20],
      FUNCTION: [20],
      PROPERTY_GET: [20],
      PROPERTY_SET: [20],
      PROPERTY_LET: [20],
      SUB: [20],
    },
    moduleBodyElement: {
      PRIVATE: [21, 22, 23, 24, 25],
      PUBLIC: [21, 22, 23, 24, 25],
      FRIEND: [21, 22, 23, 24, 25],
      GLOBAL: [21, 22, 23, 24, 25],
      STATIC: [21, 22, 23, 24, 25],
      FUNCTION: [21],
      PROPERTY_GET: [22],
      PROPERTY_SET: [23],
      PROPERTY_LET: [24],
      SUB: [25],
    },
    visibility: {
      PRIVATE: [26],
      PUBLIC: [27],
      FRIEND: [28],
      GLOBAL: [29],
    },
    subStmt: {
      PRIVATE: [30],
      PUBLIC: [30],
      FRIEND: [30],
      GLOBAL: [30],
      STATIC: [30],
      SUB: [30],
    },
    propertyGetStmt: {
      PRIVATE: [31],
      PUBLIC: [31],
      FRIEND: [31],
      GLOBAL: [31],
      STATIC: [31],
      PROPERTY_GET: [31],
    },
    propertySetStmt: {
      PRIVATE: [32],
      PUBLIC: [32],
      FRIEND: [32],
      GLOBAL: [32],
      STATIC: [32],
      PROPERTY_SET: [32],
    },
    propertyLetStmt: {
      PRIVATE: [33],
      PUBLIC: [33],
      FRIEND: [33],
      GLOBAL: [33],
      STATIC: [33],
      PROPERTY_LET: [33],
    },
    functionStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      FUNCTION: [34],
    },
    block_group_def_9: {
      NEWLINE: [35],
      COMMENT: [35],
      REMCOMMENT: [35],
      COLON: [35],
      ALIAS: [35],
      AND: [35],
      ATTRIBUTE: [35],
      AS: [35],
      BEGIN: [35],
      BOOLEAN: [35],
      BYVAL: [35],
      BYREF: [35],
      BYTE: [35],
      CALL: [35],
      CASE: [35],
      CONST: [35],
      DECLARE: [35],
      DEFBOOL: [35],
      DEFBYTE: [35],
      DEFDATE: [35],
      DEFDBL: [35],
      DEFDEC: [35],
      DEFCUR: [35],
      DEFINT: [35],
      DEFLNG: [35],
      DEFOBJ: [35],
      DEFSNG: [35],
      DEFSTR: [35],
      DEFVAR: [35],
      DIM: [35],
      DO: [35],
      DOUBLE: [35],
      EACH: [35],
      ELSE: [35],
      ELSEIF: [35],
      END_ENUM: [35],
      END_FUNCTION: [35],
      END_IF: [35],
      END_PROPERTY: [35],
      END_SELECT: [35],
      END_SUB: [35],
      END_TYPE: [35],
      END_WITH: [35],
      END: [35],
      ENUM: [35],
      EQV: [35],
      ERASE: [35],
      EVENT: [35],
      EXIT_DO: [35],
      EXIT_FOR: [35],
      EXIT_FUNCTION: [35],
      EXIT_PROPERTY: [35],
      EXIT_SUB: [35],
      FALSE: [35],
      FRIEND: [35],
      FOR: [35],
      FUNCTION: [35],
      GET: [35],
      GLOBAL: [35],
      GOSUB: [35],
      GOTO: [35],
      IF: [35],
      IMPLEMENTS: [35],
      IN: [35],
      ISNOT: [35],
      IS: [35],
      INTEGER: [35],
      LONG: [35],
      LOOP: [35],
      LEN: [35],
      LET: [35],
      LIB: [35],
      LIKE: [35],
      LSET: [35],
      MACRO_CONST: [35],
      MACRO_IF: [35],
      MACRO_ELSEIF: [35],
      MACRO_ELSE: [35],
      MACRO_END_IF: [35],
      MOD: [35],
      NEXT: [35],
      NEW: [35],
      NOT: [35],
      NOTHING: [35],
      NULL: [35],
      ON_ERROR: [35],
      ON_LOCAL_ERROR: [35],
      ON: [35],
      OPTIONAL: [35],
      OPTION_BASE: [35],
      OPTION_EXPLICIT: [35],
      OPTION_COMPARE: [35],
      OPTION_PRIVATE_MODULE: [35],
      OR: [35],
      PARAMARRAY: [35],
      PRESERVE: [35],
      PRIVATE: [35],
      PROPERTY_GET: [35],
      PROPERTY_LET: [35],
      PROPERTY_SET: [35],
      PTRSAFE: [35],
      PUBLIC: [35],
      RAISEEVENT: [35],
      REDIM: [35],
      RESET: [35],
      RESUME: [35],
      RETURN: [35],
      SELECT: [35],
      SET: [35],
      SINGLE: [35],
      STATIC: [35],
      STEP: [35],
      STOP: [35],
      STRING: [35],
      SUB: [35],
      THEN: [35],
      TO: [35],
      TRUE: [35],
      TYPEOF: [35],
      UNTIL: [35],
      VARIANT: [35],
      WEND: [35],
      WHILE: [35],
      WITH: [35],
      WITHEVENTS: [35],
      XOR: [35],
      IMP: [35],
      IDENTIFIER: [35],
      SPACE_DOT: [35],
    },
    block: {
      ALIAS: [36],
      AND: [36],
      ATTRIBUTE: [36],
      AS: [36],
      BEGIN: [36],
      BOOLEAN: [36],
      BYVAL: [36],
      BYREF: [36],
      BYTE: [36],
      CALL: [36],
      CASE: [36],
      CONST: [36],
      DECLARE: [36],
      DEFBOOL: [36],
      DEFBYTE: [36],
      DEFDATE: [36],
      DEFDBL: [36],
      DEFDEC: [36],
      DEFCUR: [36],
      DEFINT: [36],
      DEFLNG: [36],
      DEFOBJ: [36],
      DEFSNG: [36],
      DEFSTR: [36],
      DEFVAR: [36],
      DIM: [36],
      DO: [36],
      DOUBLE: [36],
      EACH: [36],
      ELSE: [36],
      ELSEIF: [36],
      END_ENUM: [36],
      END_FUNCTION: [36],
      END_IF: [36],
      END_PROPERTY: [36],
      END_SELECT: [36],
      END_SUB: [36],
      END_TYPE: [36],
      END_WITH: [36],
      END: [36],
      ENUM: [36],
      EQV: [36],
      ERASE: [36],
      EVENT: [36],
      EXIT_DO: [36],
      EXIT_FOR: [36],
      EXIT_FUNCTION: [36],
      EXIT_PROPERTY: [36],
      EXIT_SUB: [36],
      FALSE: [36],
      FRIEND: [36],
      FOR: [36],
      FUNCTION: [36],
      GET: [36],
      GLOBAL: [36],
      GOSUB: [36],
      GOTO: [36],
      IF: [36],
      IMPLEMENTS: [36],
      IN: [36],
      ISNOT: [36],
      IS: [36],
      INTEGER: [36],
      LONG: [36],
      LOOP: [36],
      LEN: [36],
      LET: [36],
      LIB: [36],
      LIKE: [36],
      LSET: [36],
      MACRO_CONST: [36],
      MACRO_IF: [36],
      MACRO_ELSEIF: [36],
      MACRO_ELSE: [36],
      MACRO_END_IF: [36],
      MOD: [36],
      NEXT: [36],
      NEW: [36],
      NOT: [36],
      NOTHING: [36],
      NULL: [36],
      ON_ERROR: [36],
      ON_LOCAL_ERROR: [36],
      ON: [36],
      OPTIONAL: [36],
      OPTION_BASE: [36],
      OPTION_EXPLICIT: [36],
      OPTION_COMPARE: [36],
      OPTION_PRIVATE_MODULE: [36],
      OR: [36],
      PARAMARRAY: [36],
      PRESERVE: [36],
      PRIVATE: [36],
      PROPERTY_GET: [36],
      PROPERTY_LET: [36],
      PROPERTY_SET: [36],
      PTRSAFE: [36],
      PUBLIC: [36],
      RAISEEVENT: [36],
      REDIM: [36],
      RESET: [36],
      RESUME: [36],
      RETURN: [36],
      SELECT: [36],
      SET: [36],
      SINGLE: [36],
      STATIC: [36],
      STEP: [36],
      STOP: [36],
      STRING: [36],
      SUB: [36],
      THEN: [36],
      TO: [36],
      TRUE: [36],
      TYPEOF: [36],
      UNTIL: [36],
      VARIANT: [36],
      WEND: [36],
      WHILE: [36],
      WITH: [36],
      WITHEVENTS: [36],
      XOR: [36],
      IMP: [36],
      IDENTIFIER: [36],
      SPACE_DOT: [36],
    },
    blockStmt: {
      ALIAS: [37, 47, 49],
      AND: [37, 47, 49],
      ATTRIBUTE: [37, 47, 49],
      AS: [37, 47, 49],
      BEGIN: [37, 47, 49],
      BOOLEAN: [37, 47, 49],
      BYVAL: [37, 47, 49],
      BYREF: [37, 47, 49],
      BYTE: [37, 47, 49],
      CALL: [37, 44, 47, 49],
      CASE: [37, 47, 49],
      CONST: [37, 47, 49],
      DECLARE: [37, 47, 49],
      DEFBOOL: [37, 47, 49],
      DEFBYTE: [37, 47, 49],
      DEFDATE: [37, 47, 49],
      DEFDBL: [37, 47, 49],
      DEFDEC: [37, 47, 49],
      DEFCUR: [37, 47, 49],
      DEFINT: [37, 47, 49],
      DEFLNG: [37, 47, 49],
      DEFOBJ: [37, 47, 49],
      DEFSNG: [37, 47, 49],
      DEFSTR: [37, 47, 49],
      DEFVAR: [37, 47, 49],
      DIM: [37, 47, 48, 49],
      DO: [37, 47, 49],
      DOUBLE: [37, 47, 49],
      EACH: [37, 47, 49],
      ELSE: [37, 47, 49],
      ELSEIF: [37, 47, 49],
      END_ENUM: [37, 47, 49],
      END_FUNCTION: [37, 47, 49],
      END_IF: [37, 47, 49],
      END_PROPERTY: [37, 47, 49],
      END_SELECT: [37, 47, 49],
      END_SUB: [37, 47, 49],
      END_TYPE: [37, 47, 49],
      END_WITH: [37, 47, 49],
      END: [37, 43, 47, 49],
      ENUM: [37, 47, 49],
      EQV: [37, 47, 49],
      ERASE: [37, 42, 47, 49],
      EVENT: [37, 47, 49],
      EXIT_DO: [37, 43, 47, 49],
      EXIT_FOR: [37, 43, 47, 49],
      EXIT_FUNCTION: [37, 43, 47, 49],
      EXIT_PROPERTY: [37, 43, 47, 49],
      EXIT_SUB: [37, 43, 47, 49],
      FALSE: [37, 47, 49],
      FRIEND: [37, 47, 48, 49],
      FOR: [37, 47, 49],
      FUNCTION: [37, 47, 49],
      GET: [37, 47, 49],
      GLOBAL: [37, 47, 48, 49],
      GOSUB: [37, 47, 49],
      GOTO: [37, 38, 47, 49],
      IF: [37, 39, 47, 49],
      IMPLEMENTS: [37, 47, 49],
      IN: [37, 47, 49],
      ISNOT: [37, 47, 49],
      IS: [37, 47, 49],
      INTEGER: [37, 47, 49],
      LONG: [37, 47, 49],
      LOOP: [37, 47, 49],
      LEN: [37, 47, 49],
      LET: [37, 47, 49],
      LIB: [37, 47, 49],
      LIKE: [37, 47, 49],
      LSET: [37, 47, 49],
      MACRO_CONST: [37, 47, 49],
      MACRO_IF: [37, 47, 49],
      MACRO_ELSEIF: [37, 47, 49],
      MACRO_ELSE: [37, 47, 49],
      MACRO_END_IF: [37, 47, 49],
      MOD: [37, 47, 49],
      NEXT: [37, 47, 49],
      NEW: [37, 47, 49],
      NOT: [37, 47, 49],
      NOTHING: [37, 47, 49],
      NULL: [37, 47, 49],
      ON_ERROR: [37, 40, 47, 49],
      ON_LOCAL_ERROR: [37, 47, 49],
      ON: [37, 47, 49],
      OPTIONAL: [37, 47, 49],
      OPTION_BASE: [37, 47, 49],
      OPTION_EXPLICIT: [37, 47, 49],
      OPTION_COMPARE: [37, 47, 49],
      OPTION_PRIVATE_MODULE: [37, 47, 49],
      OR: [37, 47, 49],
      PARAMARRAY: [37, 47, 49],
      PRESERVE: [37, 47, 49],
      PRIVATE: [37, 47, 48, 49],
      PROPERTY_GET: [37, 47, 49],
      PROPERTY_LET: [37, 47, 49],
      PROPERTY_SET: [37, 47, 49],
      PTRSAFE: [37, 47, 49],
      PUBLIC: [37, 47, 48, 49],
      RAISEEVENT: [37, 47, 49],
      REDIM: [37, 46, 47, 49],
      RESET: [37, 47, 49],
      RESUME: [37, 47, 49],
      RETURN: [37, 47, 49],
      SELECT: [37, 47, 49],
      SET: [37, 45, 47, 49],
      SINGLE: [37, 47, 49],
      STATIC: [37, 47, 48, 49],
      STEP: [37, 47, 49],
      STOP: [37, 47, 49],
      STRING: [37, 47, 49],
      SUB: [37, 47, 49],
      THEN: [37, 47, 49],
      TO: [37, 47, 49],
      TRUE: [37, 47, 49],
      TYPEOF: [37, 47, 49],
      UNTIL: [37, 47, 49],
      VARIANT: [37, 47, 49],
      WEND: [37, 47, 49],
      WHILE: [37, 47, 49],
      WITH: [37, 41, 47, 49],
      WITHEVENTS: [37, 47, 49],
      XOR: [37, 47, 49],
      IMP: [37, 47, 49],
      IDENTIFIER: [37, 47, 49],
      SPACE_DOT: [47, 49],
    },
    ifThenElseStmt_group_def_11: {
      ELSE: [50],
    },
    ifThenElseStmt: {
      IF: [51, 52],
    },
    ifBlockStmt: {
      IF: [53],
    },
    ifElseIfBlockStmt: {
      ELSEIF: [54],
    },
    ifElseBlockStmt: {
      ELSE: [55],
    },
    onErrorStmt_group_def_13: {
      ALIAS: [56],
      AND: [56],
      ATTRIBUTE: [56],
      AS: [56],
      BEGIN: [56],
      BOOLEAN: [56],
      BYVAL: [56],
      BYREF: [56],
      BYTE: [56],
      CALL: [56],
      CASE: [56],
      CONST: [56],
      DECLARE: [56],
      DEFBOOL: [56],
      DEFBYTE: [56],
      DEFDATE: [56],
      DEFDBL: [56],
      DEFDEC: [56],
      DEFCUR: [56],
      DEFINT: [56],
      DEFLNG: [56],
      DEFOBJ: [56],
      DEFSNG: [56],
      DEFSTR: [56],
      DEFVAR: [56],
      DIM: [56],
      DO: [56],
      DOUBLE: [56],
      EACH: [56],
      ELSE: [56],
      ELSEIF: [56],
      END_ENUM: [56],
      END_FUNCTION: [56],
      END_IF: [56],
      END_PROPERTY: [56],
      END_SELECT: [56],
      END_SUB: [56],
      END_TYPE: [56],
      END_WITH: [56],
      END: [56],
      ENUM: [56],
      EQV: [56],
      ERASE: [56],
      EVENT: [56],
      EXIT_DO: [56],
      EXIT_FOR: [56],
      EXIT_FUNCTION: [56],
      EXIT_PROPERTY: [56],
      EXIT_SUB: [56],
      FALSE: [56],
      FRIEND: [56],
      FOR: [56],
      FUNCTION: [56],
      GET: [56],
      GLOBAL: [56],
      GOSUB: [56],
      GOTO: [56],
      IF: [56],
      IMPLEMENTS: [56],
      IN: [56],
      ISNOT: [56],
      IS: [56],
      INTEGER: [56],
      LONG: [56],
      LOOP: [56],
      LEN: [56],
      LET: [56],
      LIB: [56],
      LIKE: [56],
      LSET: [56],
      MACRO_CONST: [56],
      MACRO_IF: [56],
      MACRO_ELSEIF: [56],
      MACRO_ELSE: [56],
      MACRO_END_IF: [56],
      MOD: [56],
      NEXT: [56],
      NEW: [56],
      NOT: [56],
      NOTHING: [56],
      NULL: [56],
      ON_ERROR: [56],
      ON_LOCAL_ERROR: [56],
      ON: [56],
      OPTIONAL: [56],
      OPTION_BASE: [56],
      OPTION_EXPLICIT: [56],
      OPTION_COMPARE: [56],
      OPTION_PRIVATE_MODULE: [56],
      OR: [56],
      PARAMARRAY: [56],
      PRESERVE: [56],
      PRIVATE: [56],
      PROPERTY_GET: [56],
      PROPERTY_LET: [56],
      PROPERTY_SET: [56],
      PTRSAFE: [56],
      PUBLIC: [56],
      RAISEEVENT: [56],
      REDIM: [56],
      RESET: [56],
      RESUME: [56],
      RETURN: [56],
      SELECT: [56],
      SET: [56],
      SINGLE: [56],
      STATIC: [56],
      STEP: [56],
      STOP: [56],
      STRING: [56],
      SUB: [56],
      THEN: [56],
      TO: [56],
      TRUE: [56],
      TYPEOF: [56],
      UNTIL: [56],
      VARIANT: [56],
      WEND: [56],
      WHILE: [56],
      WITH: [56],
      WITHEVENTS: [56],
      XOR: [56],
      IMP: [56],
      IDENTIFIER: [56],
    },
    onErrorStmt_group_12: {
      ALIAS: [57],
      AND: [57],
      ATTRIBUTE: [57],
      AS: [57],
      BEGIN: [57],
      BOOLEAN: [57],
      BYVAL: [57],
      BYREF: [57],
      BYTE: [57],
      CALL: [57],
      CASE: [57],
      CONST: [57],
      DECLARE: [57],
      DEFBOOL: [57],
      DEFBYTE: [57],
      DEFDATE: [57],
      DEFDBL: [57],
      DEFDEC: [57],
      DEFCUR: [57],
      DEFINT: [57],
      DEFLNG: [57],
      DEFOBJ: [57],
      DEFSNG: [57],
      DEFSTR: [57],
      DEFVAR: [57],
      DIM: [57],
      DO: [57],
      DOUBLE: [57],
      EACH: [57],
      ELSE: [57],
      ELSEIF: [57],
      END_ENUM: [57],
      END_FUNCTION: [57],
      END_IF: [57],
      END_PROPERTY: [57],
      END_SELECT: [57],
      END_SUB: [57],
      END_TYPE: [57],
      END_WITH: [57],
      END: [57],
      ENUM: [57],
      EQV: [57],
      ERASE: [57],
      EVENT: [57],
      EXIT_DO: [57],
      EXIT_FOR: [57],
      EXIT_FUNCTION: [57],
      EXIT_PROPERTY: [57],
      EXIT_SUB: [57],
      FALSE: [57],
      FRIEND: [57],
      FOR: [57],
      FUNCTION: [57],
      GET: [57],
      GLOBAL: [57],
      GOSUB: [57],
      GOTO: [57],
      IF: [57],
      IMPLEMENTS: [57],
      IN: [57],
      ISNOT: [57],
      IS: [57],
      INTEGER: [57],
      LONG: [57],
      LOOP: [57],
      LEN: [57],
      LET: [57],
      LIB: [57],
      LIKE: [57],
      LSET: [57],
      MACRO_CONST: [57],
      MACRO_IF: [57],
      MACRO_ELSEIF: [57],
      MACRO_ELSE: [57],
      MACRO_END_IF: [57],
      MOD: [57],
      NEXT: [57],
      NEW: [57],
      NOT: [57],
      NOTHING: [57],
      NULL: [57],
      ON_ERROR: [57],
      ON_LOCAL_ERROR: [57],
      ON: [57],
      OPTIONAL: [57],
      OPTION_BASE: [57],
      OPTION_EXPLICIT: [57],
      OPTION_COMPARE: [57],
      OPTION_PRIVATE_MODULE: [57],
      OR: [57],
      PARAMARRAY: [57],
      PRESERVE: [57],
      PRIVATE: [57],
      PROPERTY_GET: [57],
      PROPERTY_LET: [57],
      PROPERTY_SET: [57],
      PTRSAFE: [57],
      PUBLIC: [57],
      RAISEEVENT: [57],
      REDIM: [57],
      RESET: [57],
      RESUME: [57],
      RETURN: [57],
      SELECT: [57],
      SET: [57],
      SINGLE: [57],
      STATIC: [57],
      STEP: [57],
      STOP: [57],
      STRING: [57],
      SUB: [57],
      THEN: [57],
      TO: [57],
      TRUE: [57],
      TYPEOF: [57],
      UNTIL: [57],
      VARIANT: [57],
      WEND: [57],
      WHILE: [57],
      WITH: [57],
      WITHEVENTS: [57],
      XOR: [57],
      IMP: [57],
      IDENTIFIER: [57],
      MINUS: [59],
    },
    onErrorStmt_group_def_14: {
      MINUS: [58],
    },
    onErrorStmt: {
      ON_ERROR: [60],
    },
    lineLabel: {
      ALIAS: [61],
      AND: [61],
      ATTRIBUTE: [61],
      AS: [61],
      BEGIN: [61],
      BOOLEAN: [61],
      BYVAL: [61],
      BYREF: [61],
      BYTE: [61],
      CALL: [61],
      CASE: [61],
      CONST: [61],
      DECLARE: [61],
      DEFBOOL: [61],
      DEFBYTE: [61],
      DEFDATE: [61],
      DEFDBL: [61],
      DEFDEC: [61],
      DEFCUR: [61],
      DEFINT: [61],
      DEFLNG: [61],
      DEFOBJ: [61],
      DEFSNG: [61],
      DEFSTR: [61],
      DEFVAR: [61],
      DIM: [61],
      DO: [61],
      DOUBLE: [61],
      EACH: [61],
      ELSE: [61],
      ELSEIF: [61],
      END_ENUM: [61],
      END_FUNCTION: [61],
      END_IF: [61],
      END_PROPERTY: [61],
      END_SELECT: [61],
      END_SUB: [61],
      END_TYPE: [61],
      END_WITH: [61],
      END: [61],
      ENUM: [61],
      EQV: [61],
      ERASE: [61],
      EVENT: [61],
      EXIT_DO: [61],
      EXIT_FOR: [61],
      EXIT_FUNCTION: [61],
      EXIT_PROPERTY: [61],
      EXIT_SUB: [61],
      FALSE: [61],
      FRIEND: [61],
      FOR: [61],
      FUNCTION: [61],
      GET: [61],
      GLOBAL: [61],
      GOSUB: [61],
      GOTO: [61],
      IF: [61],
      IMPLEMENTS: [61],
      IN: [61],
      ISNOT: [61],
      IS: [61],
      INTEGER: [61],
      LONG: [61],
      LOOP: [61],
      LEN: [61],
      LET: [61],
      LIB: [61],
      LIKE: [61],
      LSET: [61],
      MACRO_CONST: [61],
      MACRO_IF: [61],
      MACRO_ELSEIF: [61],
      MACRO_ELSE: [61],
      MACRO_END_IF: [61],
      MOD: [61],
      NEXT: [61],
      NEW: [61],
      NOT: [61],
      NOTHING: [61],
      NULL: [61],
      ON_ERROR: [61],
      ON_LOCAL_ERROR: [61],
      ON: [61],
      OPTIONAL: [61],
      OPTION_BASE: [61],
      OPTION_EXPLICIT: [61],
      OPTION_COMPARE: [61],
      OPTION_PRIVATE_MODULE: [61],
      OR: [61],
      PARAMARRAY: [61],
      PRESERVE: [61],
      PRIVATE: [61],
      PROPERTY_GET: [61],
      PROPERTY_LET: [61],
      PROPERTY_SET: [61],
      PTRSAFE: [61],
      PUBLIC: [61],
      RAISEEVENT: [61],
      REDIM: [61],
      RESET: [61],
      RESUME: [61],
      RETURN: [61],
      SELECT: [61],
      SET: [61],
      SINGLE: [61],
      STATIC: [61],
      STEP: [61],
      STOP: [61],
      STRING: [61],
      SUB: [61],
      THEN: [61],
      TO: [61],
      TRUE: [61],
      TYPEOF: [61],
      UNTIL: [61],
      VARIANT: [61],
      WEND: [61],
      WHILE: [61],
      WITH: [61],
      WITHEVENTS: [61],
      XOR: [61],
      IMP: [61],
      IDENTIFIER: [61],
    },
    goToStmt: {
      GOTO: [62],
    },
    eraseStmt_group_def_16: {
      ',': [63],
    },
    eraseStmt: {
      ERASE: [64],
    },
    redimStmt_group_def_18: {
      ',': [65],
    },
    redimStmt: {
      REDIM: [66],
    },
    redimSubStmt: {
      SPACE_DOT: [67],
      ALIAS: [67],
      AND: [67],
      ATTRIBUTE: [67],
      AS: [67],
      BEGIN: [67],
      BOOLEAN: [67],
      BYVAL: [67],
      BYREF: [67],
      BYTE: [67],
      CALL: [67],
      CASE: [67],
      CONST: [67],
      DECLARE: [67],
      DEFBOOL: [67],
      DEFBYTE: [67],
      DEFDATE: [67],
      DEFDBL: [67],
      DEFDEC: [67],
      DEFCUR: [67],
      DEFINT: [67],
      DEFLNG: [67],
      DEFOBJ: [67],
      DEFSNG: [67],
      DEFSTR: [67],
      DEFVAR: [67],
      DIM: [67],
      DO: [67],
      DOUBLE: [67],
      EACH: [67],
      ELSE: [67],
      ELSEIF: [67],
      END_ENUM: [67],
      END_FUNCTION: [67],
      END_IF: [67],
      END_PROPERTY: [67],
      END_SELECT: [67],
      END_SUB: [67],
      END_TYPE: [67],
      END_WITH: [67],
      END: [67],
      ENUM: [67],
      EQV: [67],
      ERASE: [67],
      EVENT: [67],
      EXIT_DO: [67],
      EXIT_FOR: [67],
      EXIT_FUNCTION: [67],
      EXIT_PROPERTY: [67],
      EXIT_SUB: [67],
      FALSE: [67],
      FRIEND: [67],
      FOR: [67],
      FUNCTION: [67],
      GET: [67],
      GLOBAL: [67],
      GOSUB: [67],
      GOTO: [67],
      IF: [67],
      IMPLEMENTS: [67],
      IN: [67],
      ISNOT: [67],
      IS: [67],
      INTEGER: [67],
      LONG: [67],
      LOOP: [67],
      LEN: [67],
      LET: [67],
      LIB: [67],
      LIKE: [67],
      LSET: [67],
      MACRO_CONST: [67],
      MACRO_IF: [67],
      MACRO_ELSEIF: [67],
      MACRO_ELSE: [67],
      MACRO_END_IF: [67],
      MOD: [67],
      NEXT: [67],
      NEW: [67],
      NOT: [67],
      NOTHING: [67],
      NULL: [67],
      ON_ERROR: [67],
      ON_LOCAL_ERROR: [67],
      ON: [67],
      OPTIONAL: [67],
      OPTION_BASE: [67],
      OPTION_EXPLICIT: [67],
      OPTION_COMPARE: [67],
      OPTION_PRIVATE_MODULE: [67],
      OR: [67],
      PARAMARRAY: [67],
      PRESERVE: [67],
      PRIVATE: [67],
      PROPERTY_GET: [67],
      PROPERTY_LET: [67],
      PROPERTY_SET: [67],
      PTRSAFE: [67],
      PUBLIC: [67],
      RAISEEVENT: [67],
      REDIM: [67],
      RESET: [67],
      RESUME: [67],
      RETURN: [67],
      SELECT: [67],
      SET: [67],
      SINGLE: [67],
      STATIC: [67],
      STEP: [67],
      STOP: [67],
      STRING: [67],
      SUB: [67],
      THEN: [67],
      TO: [67],
      TRUE: [67],
      TYPEOF: [67],
      UNTIL: [67],
      VARIANT: [67],
      WEND: [67],
      WHILE: [67],
      WITH: [67],
      WITHEVENTS: [67],
      XOR: [67],
      IMP: [67],
      IDENTIFIER: [67],
    },
    exitStmt: {
      EXIT_DO: [68],
      EXIT_FOR: [69],
      EXIT_FUNCTION: [70],
      EXIT_PROPERTY: [71],
      EXIT_SUB: [72],
      END: [73],
    },
    letStmt_group_def_20: {
      EQ: [74],
    },
    letStmt_group_19: {
      EQ: [75],
      PLUS_EQ: [77],
      MINUS_EQ: [79],
    },
    letStmt_group_def_21: {
      PLUS_EQ: [76],
    },
    letStmt_group_def_22: {
      MINUS_EQ: [78],
    },
    letStmt: {
      LET: [80],
      SPACE_DOT: [80],
      ALIAS: [80],
      AND: [80],
      ATTRIBUTE: [80],
      AS: [80],
      BEGIN: [80],
      BOOLEAN: [80],
      BYVAL: [80],
      BYREF: [80],
      BYTE: [80],
      CALL: [80],
      CASE: [80],
      CONST: [80],
      DECLARE: [80],
      DEFBOOL: [80],
      DEFBYTE: [80],
      DEFDATE: [80],
      DEFDBL: [80],
      DEFDEC: [80],
      DEFCUR: [80],
      DEFINT: [80],
      DEFLNG: [80],
      DEFOBJ: [80],
      DEFSNG: [80],
      DEFSTR: [80],
      DEFVAR: [80],
      DIM: [80],
      DO: [80],
      DOUBLE: [80],
      EACH: [80],
      ELSE: [80],
      ELSEIF: [80],
      END_ENUM: [80],
      END_FUNCTION: [80],
      END_IF: [80],
      END_PROPERTY: [80],
      END_SELECT: [80],
      END_SUB: [80],
      END_TYPE: [80],
      END_WITH: [80],
      END: [80],
      ENUM: [80],
      EQV: [80],
      ERASE: [80],
      EVENT: [80],
      EXIT_DO: [80],
      EXIT_FOR: [80],
      EXIT_FUNCTION: [80],
      EXIT_PROPERTY: [80],
      EXIT_SUB: [80],
      FALSE: [80],
      FRIEND: [80],
      FOR: [80],
      FUNCTION: [80],
      GET: [80],
      GLOBAL: [80],
      GOSUB: [80],
      GOTO: [80],
      IF: [80],
      IMPLEMENTS: [80],
      IN: [80],
      ISNOT: [80],
      IS: [80],
      INTEGER: [80],
      LONG: [80],
      LOOP: [80],
      LEN: [80],
      LIB: [80],
      LIKE: [80],
      LSET: [80],
      MACRO_CONST: [80],
      MACRO_IF: [80],
      MACRO_ELSEIF: [80],
      MACRO_ELSE: [80],
      MACRO_END_IF: [80],
      MOD: [80],
      NEXT: [80],
      NEW: [80],
      NOT: [80],
      NOTHING: [80],
      NULL: [80],
      ON_ERROR: [80],
      ON_LOCAL_ERROR: [80],
      ON: [80],
      OPTIONAL: [80],
      OPTION_BASE: [80],
      OPTION_EXPLICIT: [80],
      OPTION_COMPARE: [80],
      OPTION_PRIVATE_MODULE: [80],
      OR: [80],
      PARAMARRAY: [80],
      PRESERVE: [80],
      PRIVATE: [80],
      PROPERTY_GET: [80],
      PROPERTY_LET: [80],
      PROPERTY_SET: [80],
      PTRSAFE: [80],
      PUBLIC: [80],
      RAISEEVENT: [80],
      REDIM: [80],
      RESET: [80],
      RESUME: [80],
      RETURN: [80],
      SELECT: [80],
      SET: [80],
      SINGLE: [80],
      STATIC: [80],
      STEP: [80],
      STOP: [80],
      STRING: [80],
      SUB: [80],
      THEN: [80],
      TO: [80],
      TRUE: [80],
      TYPEOF: [80],
      UNTIL: [80],
      VARIANT: [80],
      WEND: [80],
      WHILE: [80],
      WITH: [80],
      WITHEVENTS: [80],
      XOR: [80],
      IMP: [80],
      IDENTIFIER: [80],
    },
    setStmt: {
      SET: [81],
    },
    explicitCallStmt: {
      CALL: [82, 83],
    },
    eCS_MemberProcedureCall_group_def_24: {
      SPACE_DOT: [84],
      ALIAS: [84],
      AND: [84],
      ATTRIBUTE: [84],
      AS: [84],
      BEGIN: [84],
      BOOLEAN: [84],
      BYVAL: [84],
      BYREF: [84],
      BYTE: [84],
      CALL: [84],
      CASE: [84],
      CONST: [84],
      DECLARE: [84],
      DEFBOOL: [84],
      DEFBYTE: [84],
      DEFDATE: [84],
      DEFDBL: [84],
      DEFDEC: [84],
      DEFCUR: [84],
      DEFINT: [84],
      DEFLNG: [84],
      DEFOBJ: [84],
      DEFSNG: [84],
      DEFSTR: [84],
      DEFVAR: [84],
      DIM: [84],
      DO: [84],
      DOUBLE: [84],
      EACH: [84],
      ELSE: [84],
      ELSEIF: [84],
      END_ENUM: [84],
      END_FUNCTION: [84],
      END_IF: [84],
      END_PROPERTY: [84],
      END_SELECT: [84],
      END_SUB: [84],
      END_TYPE: [84],
      END_WITH: [84],
      END: [84],
      ENUM: [84],
      EQV: [84],
      ERASE: [84],
      EVENT: [84],
      EXIT_DO: [84],
      EXIT_FOR: [84],
      EXIT_FUNCTION: [84],
      EXIT_PROPERTY: [84],
      EXIT_SUB: [84],
      FALSE: [84],
      FRIEND: [84],
      FOR: [84],
      FUNCTION: [84],
      GET: [84],
      GLOBAL: [84],
      GOSUB: [84],
      GOTO: [84],
      IF: [84],
      IMPLEMENTS: [84],
      IN: [84],
      ISNOT: [84],
      IS: [84],
      INTEGER: [84],
      LONG: [84],
      LOOP: [84],
      LEN: [84],
      LET: [84],
      LIB: [84],
      LIKE: [84],
      LSET: [84],
      MACRO_CONST: [84],
      MACRO_IF: [84],
      MACRO_ELSEIF: [84],
      MACRO_ELSE: [84],
      MACRO_END_IF: [84],
      MOD: [84],
      NEXT: [84],
      NEW: [84],
      NOT: [84],
      NOTHING: [84],
      NULL: [84],
      ON_ERROR: [84],
      ON_LOCAL_ERROR: [84],
      ON: [84],
      OPTIONAL: [84],
      OPTION_BASE: [84],
      OPTION_EXPLICIT: [84],
      OPTION_COMPARE: [84],
      OPTION_PRIVATE_MODULE: [84],
      OR: [84],
      PARAMARRAY: [84],
      PRESERVE: [84],
      PRIVATE: [84],
      PROPERTY_GET: [84],
      PROPERTY_LET: [84],
      PROPERTY_SET: [84],
      PTRSAFE: [84],
      PUBLIC: [84],
      RAISEEVENT: [84],
      REDIM: [84],
      RESET: [84],
      RESUME: [84],
      RETURN: [84],
      SELECT: [84],
      SET: [84],
      SINGLE: [84],
      STATIC: [84],
      STEP: [84],
      STOP: [84],
      STRING: [84],
      SUB: [84],
      THEN: [84],
      TO: [84],
      TRUE: [84],
      TYPEOF: [84],
      UNTIL: [84],
      VARIANT: [84],
      WEND: [84],
      WHILE: [84],
      WITH: [84],
      WITHEVENTS: [84],
      XOR: [84],
      IMP: [84],
      IDENTIFIER: [84],
      '.': [84],
    },
    eCS_MemberProcedureCall_group_23: {
      SPACE_DOT: [85, 87],
      ALIAS: [85],
      AND: [85],
      ATTRIBUTE: [85],
      AS: [85],
      BEGIN: [85],
      BOOLEAN: [85],
      BYVAL: [85],
      BYREF: [85],
      BYTE: [85],
      CALL: [85],
      CASE: [85],
      CONST: [85],
      DECLARE: [85],
      DEFBOOL: [85],
      DEFBYTE: [85],
      DEFDATE: [85],
      DEFDBL: [85],
      DEFDEC: [85],
      DEFCUR: [85],
      DEFINT: [85],
      DEFLNG: [85],
      DEFOBJ: [85],
      DEFSNG: [85],
      DEFSTR: [85],
      DEFVAR: [85],
      DIM: [85],
      DO: [85],
      DOUBLE: [85],
      EACH: [85],
      ELSE: [85],
      ELSEIF: [85],
      END_ENUM: [85],
      END_FUNCTION: [85],
      END_IF: [85],
      END_PROPERTY: [85],
      END_SELECT: [85],
      END_SUB: [85],
      END_TYPE: [85],
      END_WITH: [85],
      END: [85],
      ENUM: [85],
      EQV: [85],
      ERASE: [85],
      EVENT: [85],
      EXIT_DO: [85],
      EXIT_FOR: [85],
      EXIT_FUNCTION: [85],
      EXIT_PROPERTY: [85],
      EXIT_SUB: [85],
      FALSE: [85],
      FRIEND: [85],
      FOR: [85],
      FUNCTION: [85],
      GET: [85],
      GLOBAL: [85],
      GOSUB: [85],
      GOTO: [85],
      IF: [85],
      IMPLEMENTS: [85],
      IN: [85],
      ISNOT: [85],
      IS: [85],
      INTEGER: [85],
      LONG: [85],
      LOOP: [85],
      LEN: [85],
      LET: [85],
      LIB: [85],
      LIKE: [85],
      LSET: [85],
      MACRO_CONST: [85],
      MACRO_IF: [85],
      MACRO_ELSEIF: [85],
      MACRO_ELSE: [85],
      MACRO_END_IF: [85],
      MOD: [85],
      NEXT: [85],
      NEW: [85],
      NOT: [85],
      NOTHING: [85],
      NULL: [85],
      ON_ERROR: [85],
      ON_LOCAL_ERROR: [85],
      ON: [85],
      OPTIONAL: [85],
      OPTION_BASE: [85],
      OPTION_EXPLICIT: [85],
      OPTION_COMPARE: [85],
      OPTION_PRIVATE_MODULE: [85],
      OR: [85],
      PARAMARRAY: [85],
      PRESERVE: [85],
      PRIVATE: [85],
      PROPERTY_GET: [85],
      PROPERTY_LET: [85],
      PROPERTY_SET: [85],
      PTRSAFE: [85],
      PUBLIC: [85],
      RAISEEVENT: [85],
      REDIM: [85],
      RESET: [85],
      RESUME: [85],
      RETURN: [85],
      SELECT: [85],
      SET: [85],
      SINGLE: [85],
      STATIC: [85],
      STEP: [85],
      STOP: [85],
      STRING: [85],
      SUB: [85],
      THEN: [85],
      TO: [85],
      TRUE: [85],
      TYPEOF: [85],
      UNTIL: [85],
      VARIANT: [85],
      WEND: [85],
      WHILE: [85],
      WITH: [85],
      WITHEVENTS: [85],
      XOR: [85],
      IMP: [85],
      IDENTIFIER: [85],
      '.': [85],
    },
    eCS_MemberProcedureCall_group_def_25: {
      SPACE_DOT: [86],
    },
    eCS_MemberProcedureCall_group_def_27: {
      LPAREN: [88],
    },
    eCS_MemberProcedureCall_group_def_29: {
      LPAREN: [89],
    },
    eCS_MemberProcedureCall: {
      CALL: [90],
    },
    eCS_ProcedureCall: {
      CALL: [91],
    },
    implicitCallStmt_InBlock: {
      SPACE_DOT: [92],
      ALIAS: [92],
      AND: [92],
      ATTRIBUTE: [92],
      AS: [92],
      BEGIN: [92],
      BOOLEAN: [92],
      BYVAL: [92],
      BYREF: [92],
      BYTE: [92],
      CALL: [92],
      CASE: [92],
      CONST: [92],
      DECLARE: [92],
      DEFBOOL: [92],
      DEFBYTE: [92],
      DEFDATE: [92],
      DEFDBL: [92],
      DEFDEC: [92],
      DEFCUR: [92],
      DEFINT: [92],
      DEFLNG: [92],
      DEFOBJ: [92],
      DEFSNG: [92],
      DEFSTR: [92],
      DEFVAR: [92],
      DIM: [92],
      DO: [92],
      DOUBLE: [92],
      EACH: [92],
      ELSE: [92],
      ELSEIF: [92],
      END_ENUM: [92],
      END_FUNCTION: [92],
      END_IF: [92],
      END_PROPERTY: [92],
      END_SELECT: [92],
      END_SUB: [92],
      END_TYPE: [92],
      END_WITH: [92],
      END: [92],
      ENUM: [92],
      EQV: [92],
      ERASE: [92],
      EVENT: [92],
      EXIT_DO: [92],
      EXIT_FOR: [92],
      EXIT_FUNCTION: [92],
      EXIT_PROPERTY: [92],
      EXIT_SUB: [92],
      FALSE: [92],
      FRIEND: [92],
      FOR: [92],
      FUNCTION: [92],
      GET: [92],
      GLOBAL: [92],
      GOSUB: [92],
      GOTO: [92],
      IF: [92],
      IMPLEMENTS: [92],
      IN: [92],
      ISNOT: [92],
      IS: [92],
      INTEGER: [92],
      LONG: [92],
      LOOP: [92],
      LEN: [92],
      LET: [92],
      LIB: [92],
      LIKE: [92],
      LSET: [92],
      MACRO_CONST: [92],
      MACRO_IF: [92],
      MACRO_ELSEIF: [92],
      MACRO_ELSE: [92],
      MACRO_END_IF: [92],
      MOD: [92],
      NEXT: [92],
      NEW: [92],
      NOT: [92],
      NOTHING: [92],
      NULL: [92],
      ON_ERROR: [92],
      ON_LOCAL_ERROR: [92],
      ON: [92],
      OPTIONAL: [92],
      OPTION_BASE: [92],
      OPTION_EXPLICIT: [92],
      OPTION_COMPARE: [92],
      OPTION_PRIVATE_MODULE: [92],
      OR: [92],
      PARAMARRAY: [92],
      PRESERVE: [92],
      PRIVATE: [92],
      PROPERTY_GET: [92],
      PROPERTY_LET: [92],
      PROPERTY_SET: [92],
      PTRSAFE: [92],
      PUBLIC: [92],
      RAISEEVENT: [92],
      REDIM: [92],
      RESET: [92],
      RESUME: [92],
      RETURN: [92],
      SELECT: [92],
      SET: [92],
      SINGLE: [92],
      STATIC: [92],
      STEP: [92],
      STOP: [92],
      STRING: [92],
      SUB: [92],
      THEN: [92],
      TO: [92],
      TRUE: [92],
      TYPEOF: [92],
      UNTIL: [92],
      VARIANT: [92],
      WEND: [92],
      WHILE: [92],
      WITH: [92],
      WITHEVENTS: [92],
      XOR: [92],
      IMP: [92],
      IDENTIFIER: [92, 93],
    },
    iCS_B_MemberProcedureCall: {
      SPACE_DOT: [94],
      ALIAS: [94],
      AND: [94],
      ATTRIBUTE: [94],
      AS: [94],
      BEGIN: [94],
      BOOLEAN: [94],
      BYVAL: [94],
      BYREF: [94],
      BYTE: [94],
      CALL: [94],
      CASE: [94],
      CONST: [94],
      DECLARE: [94],
      DEFBOOL: [94],
      DEFBYTE: [94],
      DEFDATE: [94],
      DEFDBL: [94],
      DEFDEC: [94],
      DEFCUR: [94],
      DEFINT: [94],
      DEFLNG: [94],
      DEFOBJ: [94],
      DEFSNG: [94],
      DEFSTR: [94],
      DEFVAR: [94],
      DIM: [94],
      DO: [94],
      DOUBLE: [94],
      EACH: [94],
      ELSE: [94],
      ELSEIF: [94],
      END_ENUM: [94],
      END_FUNCTION: [94],
      END_IF: [94],
      END_PROPERTY: [94],
      END_SELECT: [94],
      END_SUB: [94],
      END_TYPE: [94],
      END_WITH: [94],
      END: [94],
      ENUM: [94],
      EQV: [94],
      ERASE: [94],
      EVENT: [94],
      EXIT_DO: [94],
      EXIT_FOR: [94],
      EXIT_FUNCTION: [94],
      EXIT_PROPERTY: [94],
      EXIT_SUB: [94],
      FALSE: [94],
      FRIEND: [94],
      FOR: [94],
      FUNCTION: [94],
      GET: [94],
      GLOBAL: [94],
      GOSUB: [94],
      GOTO: [94],
      IF: [94],
      IMPLEMENTS: [94],
      IN: [94],
      ISNOT: [94],
      IS: [94],
      INTEGER: [94],
      LONG: [94],
      LOOP: [94],
      LEN: [94],
      LET: [94],
      LIB: [94],
      LIKE: [94],
      LSET: [94],
      MACRO_CONST: [94],
      MACRO_IF: [94],
      MACRO_ELSEIF: [94],
      MACRO_ELSE: [94],
      MACRO_END_IF: [94],
      MOD: [94],
      NEXT: [94],
      NEW: [94],
      NOT: [94],
      NOTHING: [94],
      NULL: [94],
      ON_ERROR: [94],
      ON_LOCAL_ERROR: [94],
      ON: [94],
      OPTIONAL: [94],
      OPTION_BASE: [94],
      OPTION_EXPLICIT: [94],
      OPTION_COMPARE: [94],
      OPTION_PRIVATE_MODULE: [94],
      OR: [94],
      PARAMARRAY: [94],
      PRESERVE: [94],
      PRIVATE: [94],
      PROPERTY_GET: [94],
      PROPERTY_LET: [94],
      PROPERTY_SET: [94],
      PTRSAFE: [94],
      PUBLIC: [94],
      RAISEEVENT: [94],
      REDIM: [94],
      RESET: [94],
      RESUME: [94],
      RETURN: [94],
      SELECT: [94],
      SET: [94],
      SINGLE: [94],
      STATIC: [94],
      STEP: [94],
      STOP: [94],
      STRING: [94],
      SUB: [94],
      THEN: [94],
      TO: [94],
      TRUE: [94],
      TYPEOF: [94],
      UNTIL: [94],
      VARIANT: [94],
      WEND: [94],
      WHILE: [94],
      WITH: [94],
      WITHEVENTS: [94],
      XOR: [94],
      IMP: [94],
      IDENTIFIER: [94],
    },
    iCS_B_ProcedureCall: {
      IDENTIFIER: [95],
    },
    argsCall_group_def_35: {
      ',': [96],
    },
    argsCall: {
      ',': [97],
      DOUBLELITERAL: [97],
      INTEGERLITERAL: [97],
      STRINGLITERAL: [97],
      NOTHING: [97],
      NULL: [97],
      TRUE: [97],
      FALSE: [97],
      SPACE_DOT: [97],
      ALIAS: [97],
      AND: [97],
      ATTRIBUTE: [97],
      AS: [97],
      BEGIN: [97],
      BOOLEAN: [97],
      BYVAL: [97],
      BYREF: [97],
      BYTE: [97],
      CALL: [97],
      CASE: [97],
      CONST: [97],
      DECLARE: [97],
      DEFBOOL: [97],
      DEFBYTE: [97],
      DEFDATE: [97],
      DEFDBL: [97],
      DEFDEC: [97],
      DEFCUR: [97],
      DEFINT: [97],
      DEFLNG: [97],
      DEFOBJ: [97],
      DEFSNG: [97],
      DEFSTR: [97],
      DEFVAR: [97],
      DIM: [97],
      DO: [97],
      DOUBLE: [97],
      EACH: [97],
      ELSE: [97],
      ELSEIF: [97],
      END_ENUM: [97],
      END_FUNCTION: [97],
      END_IF: [97],
      END_PROPERTY: [97],
      END_SELECT: [97],
      END_SUB: [97],
      END_TYPE: [97],
      END_WITH: [97],
      END: [97],
      ENUM: [97],
      EQV: [97],
      ERASE: [97],
      EVENT: [97],
      EXIT_DO: [97],
      EXIT_FOR: [97],
      EXIT_FUNCTION: [97],
      EXIT_PROPERTY: [97],
      EXIT_SUB: [97],
      FRIEND: [97],
      FOR: [97],
      FUNCTION: [97],
      GET: [97],
      GLOBAL: [97],
      GOSUB: [97],
      GOTO: [97],
      IF: [97],
      IMPLEMENTS: [97],
      IN: [97],
      ISNOT: [97],
      IS: [97],
      INTEGER: [97],
      LONG: [97],
      LOOP: [97],
      LEN: [97],
      LET: [97],
      LIB: [97],
      LIKE: [97],
      LSET: [97],
      MACRO_CONST: [97],
      MACRO_IF: [97],
      MACRO_ELSEIF: [97],
      MACRO_ELSE: [97],
      MACRO_END_IF: [97],
      MOD: [97],
      NEXT: [97],
      NEW: [97],
      NOT: [97],
      ON_ERROR: [97],
      ON_LOCAL_ERROR: [97],
      ON: [97],
      OPTIONAL: [97],
      OPTION_BASE: [97],
      OPTION_EXPLICIT: [97],
      OPTION_COMPARE: [97],
      OPTION_PRIVATE_MODULE: [97],
      OR: [97],
      PARAMARRAY: [97],
      PRESERVE: [97],
      PRIVATE: [97],
      PROPERTY_GET: [97],
      PROPERTY_LET: [97],
      PROPERTY_SET: [97],
      PTRSAFE: [97],
      PUBLIC: [97],
      RAISEEVENT: [97],
      REDIM: [97],
      RESET: [97],
      RESUME: [97],
      RETURN: [97],
      SELECT: [97],
      SET: [97],
      SINGLE: [97],
      STATIC: [97],
      STEP: [97],
      STOP: [97],
      STRING: [97],
      SUB: [97],
      THEN: [97],
      TO: [97],
      TYPEOF: [97],
      UNTIL: [97],
      VARIANT: [97],
      WEND: [97],
      WHILE: [97],
      WITH: [97],
      WITHEVENTS: [97],
      XOR: [97],
      IMP: [97],
      IDENTIFIER: [97],
      LPAREN: [97],
      MINUS: [97],
      PLUS: [97],
    },
    argCall: {
      DOUBLELITERAL: [98],
      INTEGERLITERAL: [98],
      STRINGLITERAL: [98],
      NOTHING: [98],
      NULL: [98],
      TRUE: [98],
      FALSE: [98],
      SPACE_DOT: [98],
      ALIAS: [98],
      AND: [98],
      ATTRIBUTE: [98],
      AS: [98],
      BEGIN: [98],
      BOOLEAN: [98],
      BYVAL: [98],
      BYREF: [98],
      BYTE: [98],
      CALL: [98],
      CASE: [98],
      CONST: [98],
      DECLARE: [98],
      DEFBOOL: [98],
      DEFBYTE: [98],
      DEFDATE: [98],
      DEFDBL: [98],
      DEFDEC: [98],
      DEFCUR: [98],
      DEFINT: [98],
      DEFLNG: [98],
      DEFOBJ: [98],
      DEFSNG: [98],
      DEFSTR: [98],
      DEFVAR: [98],
      DIM: [98],
      DO: [98],
      DOUBLE: [98],
      EACH: [98],
      ELSE: [98],
      ELSEIF: [98],
      END_ENUM: [98],
      END_FUNCTION: [98],
      END_IF: [98],
      END_PROPERTY: [98],
      END_SELECT: [98],
      END_SUB: [98],
      END_TYPE: [98],
      END_WITH: [98],
      END: [98],
      ENUM: [98],
      EQV: [98],
      ERASE: [98],
      EVENT: [98],
      EXIT_DO: [98],
      EXIT_FOR: [98],
      EXIT_FUNCTION: [98],
      EXIT_PROPERTY: [98],
      EXIT_SUB: [98],
      FRIEND: [98],
      FOR: [98],
      FUNCTION: [98],
      GET: [98],
      GLOBAL: [98],
      GOSUB: [98],
      GOTO: [98],
      IF: [98],
      IMPLEMENTS: [98],
      IN: [98],
      ISNOT: [98],
      IS: [98],
      INTEGER: [98],
      LONG: [98],
      LOOP: [98],
      LEN: [98],
      LET: [98],
      LIB: [98],
      LIKE: [98],
      LSET: [98],
      MACRO_CONST: [98],
      MACRO_IF: [98],
      MACRO_ELSEIF: [98],
      MACRO_ELSE: [98],
      MACRO_END_IF: [98],
      MOD: [98],
      NEXT: [98],
      NEW: [98],
      NOT: [98],
      ON_ERROR: [98],
      ON_LOCAL_ERROR: [98],
      ON: [98],
      OPTIONAL: [98],
      OPTION_BASE: [98],
      OPTION_EXPLICIT: [98],
      OPTION_COMPARE: [98],
      OPTION_PRIVATE_MODULE: [98],
      OR: [98],
      PARAMARRAY: [98],
      PRESERVE: [98],
      PRIVATE: [98],
      PROPERTY_GET: [98],
      PROPERTY_LET: [98],
      PROPERTY_SET: [98],
      PTRSAFE: [98],
      PUBLIC: [98],
      RAISEEVENT: [98],
      REDIM: [98],
      RESET: [98],
      RESUME: [98],
      RETURN: [98],
      SELECT: [98],
      SET: [98],
      SINGLE: [98],
      STATIC: [98],
      STEP: [98],
      STOP: [98],
      STRING: [98],
      SUB: [98],
      THEN: [98],
      TO: [98],
      TYPEOF: [98],
      UNTIL: [98],
      VARIANT: [98],
      WEND: [98],
      WHILE: [98],
      WITH: [98],
      WITHEVENTS: [98],
      XOR: [98],
      IMP: [98],
      IDENTIFIER: [98],
      LPAREN: [98],
      MINUS: [98],
      PLUS: [98],
    },
    variableStmt_group_def_37: {
      DIM: [99],
    },
    variableStmt_group_36: {
      DIM: [100],
      STATIC: [102],
      PRIVATE: [104],
      PUBLIC: [104],
      FRIEND: [104],
      GLOBAL: [104],
    },
    variableStmt_group_def_38: {
      STATIC: [101],
    },
    variableStmt_group_def_39: {
      PRIVATE: [103],
      PUBLIC: [103],
      FRIEND: [103],
      GLOBAL: [103],
    },
    variableStmt: {
      DIM: [105],
      STATIC: [105],
      PRIVATE: [105],
      PUBLIC: [105],
      FRIEND: [105],
      GLOBAL: [105],
    },
    withStmt_group_def_41: {
      SPACE_DOT: [106],
      ALIAS: [106],
      AND: [106],
      ATTRIBUTE: [106],
      AS: [106],
      BEGIN: [106],
      BOOLEAN: [106],
      BYVAL: [106],
      BYREF: [106],
      BYTE: [106],
      CALL: [106],
      CASE: [106],
      CONST: [106],
      DECLARE: [106],
      DEFBOOL: [106],
      DEFBYTE: [106],
      DEFDATE: [106],
      DEFDBL: [106],
      DEFDEC: [106],
      DEFCUR: [106],
      DEFINT: [106],
      DEFLNG: [106],
      DEFOBJ: [106],
      DEFSNG: [106],
      DEFSTR: [106],
      DEFVAR: [106],
      DIM: [106],
      DO: [106],
      DOUBLE: [106],
      EACH: [106],
      ELSE: [106],
      ELSEIF: [106],
      END_ENUM: [106],
      END_FUNCTION: [106],
      END_IF: [106],
      END_PROPERTY: [106],
      END_SELECT: [106],
      END_SUB: [106],
      END_TYPE: [106],
      END_WITH: [106],
      END: [106],
      ENUM: [106],
      EQV: [106],
      ERASE: [106],
      EVENT: [106],
      EXIT_DO: [106],
      EXIT_FOR: [106],
      EXIT_FUNCTION: [106],
      EXIT_PROPERTY: [106],
      EXIT_SUB: [106],
      FALSE: [106],
      FRIEND: [106],
      FOR: [106],
      FUNCTION: [106],
      GET: [106],
      GLOBAL: [106],
      GOSUB: [106],
      GOTO: [106],
      IF: [106],
      IMPLEMENTS: [106],
      IN: [106],
      ISNOT: [106],
      IS: [106],
      INTEGER: [106],
      LONG: [106],
      LOOP: [106],
      LEN: [106],
      LET: [106],
      LIB: [106],
      LIKE: [106],
      LSET: [106],
      MACRO_CONST: [106],
      MACRO_IF: [106],
      MACRO_ELSEIF: [106],
      MACRO_ELSE: [106],
      MACRO_END_IF: [106],
      MOD: [106],
      NEXT: [106],
      NEW: [106],
      NOT: [106],
      NOTHING: [106],
      NULL: [106],
      ON_ERROR: [106],
      ON_LOCAL_ERROR: [106],
      ON: [106],
      OPTIONAL: [106],
      OPTION_BASE: [106],
      OPTION_EXPLICIT: [106],
      OPTION_COMPARE: [106],
      OPTION_PRIVATE_MODULE: [106],
      OR: [106],
      PARAMARRAY: [106],
      PRESERVE: [106],
      PRIVATE: [106],
      PROPERTY_GET: [106],
      PROPERTY_LET: [106],
      PROPERTY_SET: [106],
      PTRSAFE: [106],
      PUBLIC: [106],
      RAISEEVENT: [106],
      REDIM: [106],
      RESET: [106],
      RESUME: [106],
      RETURN: [106],
      SELECT: [106],
      SET: [106],
      SINGLE: [106],
      STATIC: [106],
      STEP: [106],
      STOP: [106],
      STRING: [106],
      SUB: [106],
      THEN: [106],
      TO: [106],
      TRUE: [106],
      TYPEOF: [106],
      UNTIL: [106],
      VARIANT: [106],
      WEND: [106],
      WHILE: [106],
      WITH: [106],
      WITHEVENTS: [106],
      XOR: [106],
      IMP: [106],
      IDENTIFIER: [106],
    },
    withStmt_group_40: {
      SPACE_DOT: [107],
      ALIAS: [107],
      AND: [107],
      ATTRIBUTE: [107],
      AS: [107],
      BEGIN: [107],
      BOOLEAN: [107],
      BYVAL: [107],
      BYREF: [107],
      BYTE: [107],
      CALL: [107],
      CASE: [107],
      CONST: [107],
      DECLARE: [107],
      DEFBOOL: [107],
      DEFBYTE: [107],
      DEFDATE: [107],
      DEFDBL: [107],
      DEFDEC: [107],
      DEFCUR: [107],
      DEFINT: [107],
      DEFLNG: [107],
      DEFOBJ: [107],
      DEFSNG: [107],
      DEFSTR: [107],
      DEFVAR: [107],
      DIM: [107],
      DO: [107],
      DOUBLE: [107],
      EACH: [107],
      ELSE: [107],
      ELSEIF: [107],
      END_ENUM: [107],
      END_FUNCTION: [107],
      END_IF: [107],
      END_PROPERTY: [107],
      END_SELECT: [107],
      END_SUB: [107],
      END_TYPE: [107],
      END_WITH: [107],
      END: [107],
      ENUM: [107],
      EQV: [107],
      ERASE: [107],
      EVENT: [107],
      EXIT_DO: [107],
      EXIT_FOR: [107],
      EXIT_FUNCTION: [107],
      EXIT_PROPERTY: [107],
      EXIT_SUB: [107],
      FALSE: [107],
      FRIEND: [107],
      FOR: [107],
      FUNCTION: [107],
      GET: [107],
      GLOBAL: [107],
      GOSUB: [107],
      GOTO: [107],
      IF: [107],
      IMPLEMENTS: [107],
      IN: [107],
      ISNOT: [107],
      IS: [107],
      INTEGER: [107],
      LONG: [107],
      LOOP: [107],
      LEN: [107],
      LET: [107],
      LIB: [107],
      LIKE: [107],
      LSET: [107],
      MACRO_CONST: [107],
      MACRO_IF: [107],
      MACRO_ELSEIF: [107],
      MACRO_ELSE: [107],
      MACRO_END_IF: [107],
      MOD: [107],
      NEXT: [107],
      NEW: [107, 109],
      NOT: [107],
      NOTHING: [107],
      NULL: [107],
      ON_ERROR: [107],
      ON_LOCAL_ERROR: [107],
      ON: [107],
      OPTIONAL: [107],
      OPTION_BASE: [107],
      OPTION_EXPLICIT: [107],
      OPTION_COMPARE: [107],
      OPTION_PRIVATE_MODULE: [107],
      OR: [107],
      PARAMARRAY: [107],
      PRESERVE: [107],
      PRIVATE: [107],
      PROPERTY_GET: [107],
      PROPERTY_LET: [107],
      PROPERTY_SET: [107],
      PTRSAFE: [107],
      PUBLIC: [107],
      RAISEEVENT: [107],
      REDIM: [107],
      RESET: [107],
      RESUME: [107],
      RETURN: [107],
      SELECT: [107],
      SET: [107],
      SINGLE: [107],
      STATIC: [107],
      STEP: [107],
      STOP: [107],
      STRING: [107],
      SUB: [107],
      THEN: [107],
      TO: [107],
      TRUE: [107],
      TYPEOF: [107],
      UNTIL: [107],
      VARIANT: [107],
      WEND: [107],
      WHILE: [107],
      WITH: [107],
      WITHEVENTS: [107],
      XOR: [107],
      IMP: [107],
      IDENTIFIER: [107],
    },
    withStmt_group_def_42: {
      NEW: [108],
    },
    withStmt: {
      WITH: [110],
    },
    variableListStmt_group_def_44: {
      ',': [111],
    },
    variableListStmt: {
      ALIAS: [112],
      AND: [112],
      ATTRIBUTE: [112],
      AS: [112],
      BEGIN: [112],
      BOOLEAN: [112],
      BYVAL: [112],
      BYREF: [112],
      BYTE: [112],
      CALL: [112],
      CASE: [112],
      CONST: [112],
      DECLARE: [112],
      DEFBOOL: [112],
      DEFBYTE: [112],
      DEFDATE: [112],
      DEFDBL: [112],
      DEFDEC: [112],
      DEFCUR: [112],
      DEFINT: [112],
      DEFLNG: [112],
      DEFOBJ: [112],
      DEFSNG: [112],
      DEFSTR: [112],
      DEFVAR: [112],
      DIM: [112],
      DO: [112],
      DOUBLE: [112],
      EACH: [112],
      ELSE: [112],
      ELSEIF: [112],
      END_ENUM: [112],
      END_FUNCTION: [112],
      END_IF: [112],
      END_PROPERTY: [112],
      END_SELECT: [112],
      END_SUB: [112],
      END_TYPE: [112],
      END_WITH: [112],
      END: [112],
      ENUM: [112],
      EQV: [112],
      ERASE: [112],
      EVENT: [112],
      EXIT_DO: [112],
      EXIT_FOR: [112],
      EXIT_FUNCTION: [112],
      EXIT_PROPERTY: [112],
      EXIT_SUB: [112],
      FALSE: [112],
      FRIEND: [112],
      FOR: [112],
      FUNCTION: [112],
      GET: [112],
      GLOBAL: [112],
      GOSUB: [112],
      GOTO: [112],
      IF: [112],
      IMPLEMENTS: [112],
      IN: [112],
      ISNOT: [112],
      IS: [112],
      INTEGER: [112],
      LONG: [112],
      LOOP: [112],
      LEN: [112],
      LET: [112],
      LIB: [112],
      LIKE: [112],
      LSET: [112],
      MACRO_CONST: [112],
      MACRO_IF: [112],
      MACRO_ELSEIF: [112],
      MACRO_ELSE: [112],
      MACRO_END_IF: [112],
      MOD: [112],
      NEXT: [112],
      NEW: [112],
      NOT: [112],
      NOTHING: [112],
      NULL: [112],
      ON_ERROR: [112],
      ON_LOCAL_ERROR: [112],
      ON: [112],
      OPTIONAL: [112],
      OPTION_BASE: [112],
      OPTION_EXPLICIT: [112],
      OPTION_COMPARE: [112],
      OPTION_PRIVATE_MODULE: [112],
      OR: [112],
      PARAMARRAY: [112],
      PRESERVE: [112],
      PRIVATE: [112],
      PROPERTY_GET: [112],
      PROPERTY_LET: [112],
      PROPERTY_SET: [112],
      PTRSAFE: [112],
      PUBLIC: [112],
      RAISEEVENT: [112],
      REDIM: [112],
      RESET: [112],
      RESUME: [112],
      RETURN: [112],
      SELECT: [112],
      SET: [112],
      SINGLE: [112],
      STATIC: [112],
      STEP: [112],
      STOP: [112],
      STRING: [112],
      SUB: [112],
      THEN: [112],
      TO: [112],
      TRUE: [112],
      TYPEOF: [112],
      UNTIL: [112],
      VARIANT: [112],
      WEND: [112],
      WHILE: [112],
      WITH: [112],
      WITHEVENTS: [112],
      XOR: [112],
      IMP: [112],
      IDENTIFIER: [112],
    },
    variableSubStmt_group_def_46: {
      LPAREN: [113],
    },
    variableSubStmt: {
      ALIAS: [114],
      AND: [114],
      ATTRIBUTE: [114],
      AS: [114],
      BEGIN: [114],
      BOOLEAN: [114],
      BYVAL: [114],
      BYREF: [114],
      BYTE: [114],
      CALL: [114],
      CASE: [114],
      CONST: [114],
      DECLARE: [114],
      DEFBOOL: [114],
      DEFBYTE: [114],
      DEFDATE: [114],
      DEFDBL: [114],
      DEFDEC: [114],
      DEFCUR: [114],
      DEFINT: [114],
      DEFLNG: [114],
      DEFOBJ: [114],
      DEFSNG: [114],
      DEFSTR: [114],
      DEFVAR: [114],
      DIM: [114],
      DO: [114],
      DOUBLE: [114],
      EACH: [114],
      ELSE: [114],
      ELSEIF: [114],
      END_ENUM: [114],
      END_FUNCTION: [114],
      END_IF: [114],
      END_PROPERTY: [114],
      END_SELECT: [114],
      END_SUB: [114],
      END_TYPE: [114],
      END_WITH: [114],
      END: [114],
      ENUM: [114],
      EQV: [114],
      ERASE: [114],
      EVENT: [114],
      EXIT_DO: [114],
      EXIT_FOR: [114],
      EXIT_FUNCTION: [114],
      EXIT_PROPERTY: [114],
      EXIT_SUB: [114],
      FALSE: [114],
      FRIEND: [114],
      FOR: [114],
      FUNCTION: [114],
      GET: [114],
      GLOBAL: [114],
      GOSUB: [114],
      GOTO: [114],
      IF: [114],
      IMPLEMENTS: [114],
      IN: [114],
      ISNOT: [114],
      IS: [114],
      INTEGER: [114],
      LONG: [114],
      LOOP: [114],
      LEN: [114],
      LET: [114],
      LIB: [114],
      LIKE: [114],
      LSET: [114],
      MACRO_CONST: [114],
      MACRO_IF: [114],
      MACRO_ELSEIF: [114],
      MACRO_ELSE: [114],
      MACRO_END_IF: [114],
      MOD: [114],
      NEXT: [114],
      NEW: [114],
      NOT: [114],
      NOTHING: [114],
      NULL: [114],
      ON_ERROR: [114],
      ON_LOCAL_ERROR: [114],
      ON: [114],
      OPTIONAL: [114],
      OPTION_BASE: [114],
      OPTION_EXPLICIT: [114],
      OPTION_COMPARE: [114],
      OPTION_PRIVATE_MODULE: [114],
      OR: [114],
      PARAMARRAY: [114],
      PRESERVE: [114],
      PRIVATE: [114],
      PROPERTY_GET: [114],
      PROPERTY_LET: [114],
      PROPERTY_SET: [114],
      PTRSAFE: [114],
      PUBLIC: [114],
      RAISEEVENT: [114],
      REDIM: [114],
      RESET: [114],
      RESUME: [114],
      RETURN: [114],
      SELECT: [114],
      SET: [114],
      SINGLE: [114],
      STATIC: [114],
      STEP: [114],
      STOP: [114],
      STRING: [114],
      SUB: [114],
      THEN: [114],
      TO: [114],
      TRUE: [114],
      TYPEOF: [114],
      UNTIL: [114],
      VARIANT: [114],
      WEND: [114],
      WHILE: [114],
      WITH: [114],
      WITHEVENTS: [114],
      XOR: [114],
      IMP: [114],
      IDENTIFIER: [114],
    },
    indexes: {
      DOUBLELITERAL: [115],
      INTEGERLITERAL: [115],
      STRINGLITERAL: [115],
      NOTHING: [115],
      NULL: [115],
      TRUE: [115],
      FALSE: [115],
      SPACE_DOT: [115],
      ALIAS: [115],
      AND: [115],
      ATTRIBUTE: [115],
      AS: [115],
      BEGIN: [115],
      BOOLEAN: [115],
      BYVAL: [115],
      BYREF: [115],
      BYTE: [115],
      CALL: [115],
      CASE: [115],
      CONST: [115],
      DECLARE: [115],
      DEFBOOL: [115],
      DEFBYTE: [115],
      DEFDATE: [115],
      DEFDBL: [115],
      DEFDEC: [115],
      DEFCUR: [115],
      DEFINT: [115],
      DEFLNG: [115],
      DEFOBJ: [115],
      DEFSNG: [115],
      DEFSTR: [115],
      DEFVAR: [115],
      DIM: [115],
      DO: [115],
      DOUBLE: [115],
      EACH: [115],
      ELSE: [115],
      ELSEIF: [115],
      END_ENUM: [115],
      END_FUNCTION: [115],
      END_IF: [115],
      END_PROPERTY: [115],
      END_SELECT: [115],
      END_SUB: [115],
      END_TYPE: [115],
      END_WITH: [115],
      END: [115],
      ENUM: [115],
      EQV: [115],
      ERASE: [115],
      EVENT: [115],
      EXIT_DO: [115],
      EXIT_FOR: [115],
      EXIT_FUNCTION: [115],
      EXIT_PROPERTY: [115],
      EXIT_SUB: [115],
      FRIEND: [115],
      FOR: [115],
      FUNCTION: [115],
      GET: [115],
      GLOBAL: [115],
      GOSUB: [115],
      GOTO: [115],
      IF: [115],
      IMPLEMENTS: [115],
      IN: [115],
      ISNOT: [115],
      IS: [115],
      INTEGER: [115],
      LONG: [115],
      LOOP: [115],
      LEN: [115],
      LET: [115],
      LIB: [115],
      LIKE: [115],
      LSET: [115],
      MACRO_CONST: [115],
      MACRO_IF: [115],
      MACRO_ELSEIF: [115],
      MACRO_ELSE: [115],
      MACRO_END_IF: [115],
      MOD: [115],
      NEXT: [115],
      NEW: [115],
      NOT: [115],
      ON_ERROR: [115],
      ON_LOCAL_ERROR: [115],
      ON: [115],
      OPTIONAL: [115],
      OPTION_BASE: [115],
      OPTION_EXPLICIT: [115],
      OPTION_COMPARE: [115],
      OPTION_PRIVATE_MODULE: [115],
      OR: [115],
      PARAMARRAY: [115],
      PRESERVE: [115],
      PRIVATE: [115],
      PROPERTY_GET: [115],
      PROPERTY_LET: [115],
      PROPERTY_SET: [115],
      PTRSAFE: [115],
      PUBLIC: [115],
      RAISEEVENT: [115],
      REDIM: [115],
      RESET: [115],
      RESUME: [115],
      RETURN: [115],
      SELECT: [115],
      SET: [115],
      SINGLE: [115],
      STATIC: [115],
      STEP: [115],
      STOP: [115],
      STRING: [115],
      SUB: [115],
      THEN: [115],
      TO: [115],
      TYPEOF: [115],
      UNTIL: [115],
      VARIANT: [115],
      WEND: [115],
      WHILE: [115],
      WITH: [115],
      WITHEVENTS: [115],
      XOR: [115],
      IMP: [115],
      IDENTIFIER: [115],
      LPAREN: [115],
      MINUS: [115],
      PLUS: [115],
    },
    subscript__group_def_49: {
      DOUBLELITERAL: [116],
      INTEGERLITERAL: [116],
      STRINGLITERAL: [116],
      NOTHING: [116],
      NULL: [116],
      TRUE: [116],
      FALSE: [116],
      SPACE_DOT: [116],
      ALIAS: [116],
      AND: [116],
      ATTRIBUTE: [116],
      AS: [116],
      BEGIN: [116],
      BOOLEAN: [116],
      BYVAL: [116],
      BYREF: [116],
      BYTE: [116],
      CALL: [116],
      CASE: [116],
      CONST: [116],
      DECLARE: [116],
      DEFBOOL: [116],
      DEFBYTE: [116],
      DEFDATE: [116],
      DEFDBL: [116],
      DEFDEC: [116],
      DEFCUR: [116],
      DEFINT: [116],
      DEFLNG: [116],
      DEFOBJ: [116],
      DEFSNG: [116],
      DEFSTR: [116],
      DEFVAR: [116],
      DIM: [116],
      DO: [116],
      DOUBLE: [116],
      EACH: [116],
      ELSE: [116],
      ELSEIF: [116],
      END_ENUM: [116],
      END_FUNCTION: [116],
      END_IF: [116],
      END_PROPERTY: [116],
      END_SELECT: [116],
      END_SUB: [116],
      END_TYPE: [116],
      END_WITH: [116],
      END: [116],
      ENUM: [116],
      EQV: [116],
      ERASE: [116],
      EVENT: [116],
      EXIT_DO: [116],
      EXIT_FOR: [116],
      EXIT_FUNCTION: [116],
      EXIT_PROPERTY: [116],
      EXIT_SUB: [116],
      FRIEND: [116],
      FOR: [116],
      FUNCTION: [116],
      GET: [116],
      GLOBAL: [116],
      GOSUB: [116],
      GOTO: [116],
      IF: [116],
      IMPLEMENTS: [116],
      IN: [116],
      ISNOT: [116],
      IS: [116],
      INTEGER: [116],
      LONG: [116],
      LOOP: [116],
      LEN: [116],
      LET: [116],
      LIB: [116],
      LIKE: [116],
      LSET: [116],
      MACRO_CONST: [116],
      MACRO_IF: [116],
      MACRO_ELSEIF: [116],
      MACRO_ELSE: [116],
      MACRO_END_IF: [116],
      MOD: [116],
      NEXT: [116],
      NEW: [116],
      NOT: [116],
      ON_ERROR: [116],
      ON_LOCAL_ERROR: [116],
      ON: [116],
      OPTIONAL: [116],
      OPTION_BASE: [116],
      OPTION_EXPLICIT: [116],
      OPTION_COMPARE: [116],
      OPTION_PRIVATE_MODULE: [116],
      OR: [116],
      PARAMARRAY: [116],
      PRESERVE: [116],
      PRIVATE: [116],
      PROPERTY_GET: [116],
      PROPERTY_LET: [116],
      PROPERTY_SET: [116],
      PTRSAFE: [116],
      PUBLIC: [116],
      RAISEEVENT: [116],
      REDIM: [116],
      RESET: [116],
      RESUME: [116],
      RETURN: [116],
      SELECT: [116],
      SET: [116],
      SINGLE: [116],
      STATIC: [116],
      STEP: [116],
      STOP: [116],
      STRING: [116],
      SUB: [116],
      THEN: [116],
      TO: [116],
      TYPEOF: [116],
      UNTIL: [116],
      VARIANT: [116],
      WEND: [116],
      WHILE: [116],
      WITH: [116],
      WITHEVENTS: [116],
      XOR: [116],
      IMP: [116],
      IDENTIFIER: [116],
      LPAREN: [116],
      MINUS: [116],
      PLUS: [116],
    },
    subscript_: {
      DOUBLELITERAL: [117, 120],
      INTEGERLITERAL: [117, 120],
      STRINGLITERAL: [117, 120],
      NOTHING: [117, 120],
      NULL: [117, 120],
      TRUE: [117, 120],
      FALSE: [117, 120],
      SPACE_DOT: [117, 120],
      ALIAS: [117, 120],
      AND: [117, 120],
      ATTRIBUTE: [117, 120],
      AS: [117, 120],
      BEGIN: [117, 120],
      BOOLEAN: [117, 120],
      BYVAL: [117, 120],
      BYREF: [117, 120],
      BYTE: [117, 120],
      CALL: [117, 120],
      CASE: [117, 120],
      CONST: [117, 120],
      DECLARE: [117, 120],
      DEFBOOL: [117, 120],
      DEFBYTE: [117, 120],
      DEFDATE: [117, 120],
      DEFDBL: [117, 120],
      DEFDEC: [117, 120],
      DEFCUR: [117, 120],
      DEFINT: [117, 120],
      DEFLNG: [117, 120],
      DEFOBJ: [117, 120],
      DEFSNG: [117, 120],
      DEFSTR: [117, 120],
      DEFVAR: [117, 120],
      DIM: [117, 120],
      DO: [117, 120],
      DOUBLE: [117, 120],
      EACH: [117, 120],
      ELSE: [117, 120],
      ELSEIF: [117, 120],
      END_ENUM: [117, 120],
      END_FUNCTION: [117, 120],
      END_IF: [117, 120],
      END_PROPERTY: [117, 120],
      END_SELECT: [117, 120],
      END_SUB: [117, 120],
      END_TYPE: [117, 120],
      END_WITH: [117, 120],
      END: [117, 120],
      ENUM: [117, 120],
      EQV: [117, 120],
      ERASE: [117, 120],
      EVENT: [117, 120],
      EXIT_DO: [117, 120],
      EXIT_FOR: [117, 120],
      EXIT_FUNCTION: [117, 120],
      EXIT_PROPERTY: [117, 120],
      EXIT_SUB: [117, 120],
      FRIEND: [117, 120],
      FOR: [117, 120],
      FUNCTION: [117, 120],
      GET: [117, 120],
      GLOBAL: [117, 120],
      GOSUB: [117, 120],
      GOTO: [117, 120],
      IF: [117, 120],
      IMPLEMENTS: [117, 120],
      IN: [117, 120],
      ISNOT: [117, 120],
      IS: [117, 120],
      INTEGER: [117, 120],
      LONG: [117, 120],
      LOOP: [117, 120],
      LEN: [117, 120],
      LET: [117, 120],
      LIB: [117, 120],
      LIKE: [117, 120],
      LSET: [117, 120],
      MACRO_CONST: [117, 120],
      MACRO_IF: [117, 120],
      MACRO_ELSEIF: [117, 120],
      MACRO_ELSE: [117, 120],
      MACRO_END_IF: [117, 120],
      MOD: [117, 120],
      NEXT: [117, 120],
      NEW: [117, 120],
      NOT: [117, 120],
      ON_ERROR: [117, 120],
      ON_LOCAL_ERROR: [117, 120],
      ON: [117, 120],
      OPTIONAL: [117, 120],
      OPTION_BASE: [117, 120],
      OPTION_EXPLICIT: [117, 120],
      OPTION_COMPARE: [117, 120],
      OPTION_PRIVATE_MODULE: [117, 120],
      OR: [117, 120],
      PARAMARRAY: [117, 120],
      PRESERVE: [117, 120],
      PRIVATE: [117, 120],
      PROPERTY_GET: [117, 120],
      PROPERTY_LET: [117, 120],
      PROPERTY_SET: [117, 120],
      PTRSAFE: [117, 120],
      PUBLIC: [117, 120],
      RAISEEVENT: [117, 120],
      REDIM: [117, 120],
      RESET: [117, 120],
      RESUME: [117, 120],
      RETURN: [117, 120],
      SELECT: [117, 120],
      SET: [117, 120],
      SINGLE: [117, 120],
      STATIC: [117, 120],
      STEP: [117, 120],
      STOP: [117, 120],
      STRING: [117, 120],
      SUB: [117, 120],
      THEN: [117, 120],
      TO: [117, 120],
      TYPEOF: [117, 120],
      UNTIL: [117, 120],
      VARIANT: [117, 120],
      WEND: [117, 120],
      WHILE: [117, 120],
      WITH: [117, 120],
      WITHEVENTS: [117, 120],
      XOR: [117, 120],
      IMP: [117, 120],
      IDENTIFIER: [117, 120],
      LPAREN: [117, 120],
      MINUS: [117, 120],
      PLUS: [117, 120],
    },
    subscripts_group_def_51: {
      ',': [118],
    },
    subscripts: {
      DOUBLELITERAL: [119],
      INTEGERLITERAL: [119],
      STRINGLITERAL: [119],
      NOTHING: [119],
      NULL: [119],
      TRUE: [119],
      FALSE: [119],
      ALIAS: [119],
      AND: [119],
      ATTRIBUTE: [119],
      AS: [119],
      BEGIN: [119],
      BOOLEAN: [119],
      BYVAL: [119],
      BYREF: [119],
      BYTE: [119],
      CALL: [119],
      CASE: [119],
      CONST: [119],
      DECLARE: [119],
      DEFBOOL: [119],
      DEFBYTE: [119],
      DEFDATE: [119],
      DEFDBL: [119],
      DEFDEC: [119],
      DEFCUR: [119],
      DEFINT: [119],
      DEFLNG: [119],
      DEFOBJ: [119],
      DEFSNG: [119],
      DEFSTR: [119],
      DEFVAR: [119],
      DIM: [119],
      DO: [119],
      DOUBLE: [119],
      EACH: [119],
      ELSE: [119],
      ELSEIF: [119],
      END_ENUM: [119],
      END_FUNCTION: [119],
      END_IF: [119],
      END_PROPERTY: [119],
      END_SELECT: [119],
      END_SUB: [119],
      END_TYPE: [119],
      END_WITH: [119],
      END: [119],
      ENUM: [119],
      EQV: [119],
      ERASE: [119],
      EVENT: [119],
      EXIT_DO: [119],
      EXIT_FOR: [119],
      EXIT_FUNCTION: [119],
      EXIT_PROPERTY: [119],
      EXIT_SUB: [119],
      FRIEND: [119],
      FOR: [119],
      FUNCTION: [119],
      GET: [119],
      GLOBAL: [119],
      GOSUB: [119],
      GOTO: [119],
      IF: [119],
      IMPLEMENTS: [119],
      IN: [119],
      ISNOT: [119],
      IS: [119],
      INTEGER: [119],
      LONG: [119],
      LOOP: [119],
      LEN: [119],
      LET: [119],
      LIB: [119],
      LIKE: [119],
      LSET: [119],
      MACRO_CONST: [119],
      MACRO_IF: [119],
      MACRO_ELSEIF: [119],
      MACRO_ELSE: [119],
      MACRO_END_IF: [119],
      MOD: [119],
      NEXT: [119],
      NEW: [119],
      NOT: [119],
      ON_ERROR: [119],
      ON_LOCAL_ERROR: [119],
      ON: [119],
      OPTIONAL: [119],
      OPTION_BASE: [119],
      OPTION_EXPLICIT: [119],
      OPTION_COMPARE: [119],
      OPTION_PRIVATE_MODULE: [119],
      OR: [119],
      PARAMARRAY: [119],
      PRESERVE: [119],
      PRIVATE: [119],
      PROPERTY_GET: [119],
      PROPERTY_LET: [119],
      PROPERTY_SET: [119],
      PTRSAFE: [119],
      PUBLIC: [119],
      RAISEEVENT: [119],
      REDIM: [119],
      RESET: [119],
      RESUME: [119],
      RETURN: [119],
      SELECT: [119],
      SET: [119],
      SINGLE: [119],
      STATIC: [119],
      STEP: [119],
      STOP: [119],
      STRING: [119],
      SUB: [119],
      THEN: [119],
      TO: [119],
      TYPEOF: [119],
      UNTIL: [119],
      VARIANT: [119],
      WEND: [119],
      WHILE: [119],
      WITH: [119],
      WITHEVENTS: [119],
      XOR: [119],
      IMP: [119],
      IDENTIFIER: [119],
      LPAREN: [119],
      MINUS: [119],
      PLUS: [119],
      SPACE_DOT: [119],
    },
    argList_group_def_55: {
      ',': [121],
    },
    argList_group_def_56: {
      OPTIONAL: [122],
      PARAMARRAY: [122],
      ALIAS: [122],
      AND: [122],
      ATTRIBUTE: [122],
      AS: [122],
      BEGIN: [122],
      BOOLEAN: [122],
      BYVAL: [122],
      BYREF: [122],
      BYTE: [122],
      CALL: [122],
      CASE: [122],
      CONST: [122],
      DECLARE: [122],
      DEFBOOL: [122],
      DEFBYTE: [122],
      DEFDATE: [122],
      DEFDBL: [122],
      DEFDEC: [122],
      DEFCUR: [122],
      DEFINT: [122],
      DEFLNG: [122],
      DEFOBJ: [122],
      DEFSNG: [122],
      DEFSTR: [122],
      DEFVAR: [122],
      DIM: [122],
      DO: [122],
      DOUBLE: [122],
      EACH: [122],
      ELSE: [122],
      ELSEIF: [122],
      END_ENUM: [122],
      END_FUNCTION: [122],
      END_IF: [122],
      END_PROPERTY: [122],
      END_SELECT: [122],
      END_SUB: [122],
      END_TYPE: [122],
      END_WITH: [122],
      END: [122],
      ENUM: [122],
      EQV: [122],
      ERASE: [122],
      EVENT: [122],
      EXIT_DO: [122],
      EXIT_FOR: [122],
      EXIT_FUNCTION: [122],
      EXIT_PROPERTY: [122],
      EXIT_SUB: [122],
      FALSE: [122],
      FRIEND: [122],
      FOR: [122],
      FUNCTION: [122],
      GET: [122],
      GLOBAL: [122],
      GOSUB: [122],
      GOTO: [122],
      IF: [122],
      IMPLEMENTS: [122],
      IN: [122],
      ISNOT: [122],
      IS: [122],
      INTEGER: [122],
      LONG: [122],
      LOOP: [122],
      LEN: [122],
      LET: [122],
      LIB: [122],
      LIKE: [122],
      LSET: [122],
      MACRO_CONST: [122],
      MACRO_IF: [122],
      MACRO_ELSEIF: [122],
      MACRO_ELSE: [122],
      MACRO_END_IF: [122],
      MOD: [122],
      NEXT: [122],
      NEW: [122],
      NOT: [122],
      NOTHING: [122],
      NULL: [122],
      ON_ERROR: [122],
      ON_LOCAL_ERROR: [122],
      ON: [122],
      OPTION_BASE: [122],
      OPTION_EXPLICIT: [122],
      OPTION_COMPARE: [122],
      OPTION_PRIVATE_MODULE: [122],
      OR: [122],
      PRESERVE: [122],
      PRIVATE: [122],
      PROPERTY_GET: [122],
      PROPERTY_LET: [122],
      PROPERTY_SET: [122],
      PTRSAFE: [122],
      PUBLIC: [122],
      RAISEEVENT: [122],
      REDIM: [122],
      RESET: [122],
      RESUME: [122],
      RETURN: [122],
      SELECT: [122],
      SET: [122],
      SINGLE: [122],
      STATIC: [122],
      STEP: [122],
      STOP: [122],
      STRING: [122],
      SUB: [122],
      THEN: [122],
      TO: [122],
      TRUE: [122],
      TYPEOF: [122],
      UNTIL: [122],
      VARIANT: [122],
      WEND: [122],
      WHILE: [122],
      WITH: [122],
      WITHEVENTS: [122],
      XOR: [122],
      IMP: [122],
      IDENTIFIER: [122],
    },
    argList: {
      LPAREN: [123],
    },
    valueStmt_p_end: {
      DOUBLELITERAL: [124],
      INTEGERLITERAL: [124],
      STRINGLITERAL: [124],
      NOTHING: [124, 125, 126],
      NULL: [124, 125, 126],
      TRUE: [124, 125, 126],
      FALSE: [124, 125, 126],
      SPACE_DOT: [125],
      ALIAS: [125, 126],
      AND: [125, 126],
      ATTRIBUTE: [125, 126],
      AS: [125, 126],
      BEGIN: [125, 126],
      BOOLEAN: [125, 126],
      BYVAL: [125, 126],
      BYREF: [125, 126],
      BYTE: [125, 126],
      CALL: [125, 126],
      CASE: [125, 126],
      CONST: [125, 126],
      DECLARE: [125, 126],
      DEFBOOL: [125, 126],
      DEFBYTE: [125, 126],
      DEFDATE: [125, 126],
      DEFDBL: [125, 126],
      DEFDEC: [125, 126],
      DEFCUR: [125, 126],
      DEFINT: [125, 126],
      DEFLNG: [125, 126],
      DEFOBJ: [125, 126],
      DEFSNG: [125, 126],
      DEFSTR: [125, 126],
      DEFVAR: [125, 126],
      DIM: [125, 126],
      DO: [125, 126],
      DOUBLE: [125, 126],
      EACH: [125, 126],
      ELSE: [125, 126],
      ELSEIF: [125, 126],
      END_ENUM: [125, 126],
      END_FUNCTION: [125, 126],
      END_IF: [125, 126],
      END_PROPERTY: [125, 126],
      END_SELECT: [125, 126],
      END_SUB: [125, 126],
      END_TYPE: [125, 126],
      END_WITH: [125, 126],
      END: [125, 126],
      ENUM: [125, 126],
      EQV: [125, 126],
      ERASE: [125, 126],
      EVENT: [125, 126],
      EXIT_DO: [125, 126],
      EXIT_FOR: [125, 126],
      EXIT_FUNCTION: [125, 126],
      EXIT_PROPERTY: [125, 126],
      EXIT_SUB: [125, 126],
      FRIEND: [125, 126],
      FOR: [125, 126],
      FUNCTION: [125, 126],
      GET: [125, 126],
      GLOBAL: [125, 126],
      GOSUB: [125, 126],
      GOTO: [125, 126],
      IF: [125, 126],
      IMPLEMENTS: [125, 126],
      IN: [125, 126],
      ISNOT: [125, 126],
      IS: [125, 126],
      INTEGER: [125, 126],
      LONG: [125, 126],
      LOOP: [125, 126],
      LEN: [125, 126],
      LET: [125, 126],
      LIB: [125, 126],
      LIKE: [125, 126],
      LSET: [125, 126],
      MACRO_CONST: [125, 126],
      MACRO_IF: [125, 126],
      MACRO_ELSEIF: [125, 126],
      MACRO_ELSE: [125, 126],
      MACRO_END_IF: [125, 126],
      MOD: [125, 126],
      NEXT: [125, 126],
      NEW: [125, 126, 127],
      NOT: [125, 126],
      ON_ERROR: [125, 126],
      ON_LOCAL_ERROR: [125, 126],
      ON: [125, 126],
      OPTIONAL: [125, 126],
      OPTION_BASE: [125, 126],
      OPTION_EXPLICIT: [125, 126],
      OPTION_COMPARE: [125, 126],
      OPTION_PRIVATE_MODULE: [125, 126],
      OR: [125, 126],
      PARAMARRAY: [125, 126],
      PRESERVE: [125, 126],
      PRIVATE: [125, 126],
      PROPERTY_GET: [125, 126],
      PROPERTY_LET: [125, 126],
      PROPERTY_SET: [125, 126],
      PTRSAFE: [125, 126],
      PUBLIC: [125, 126],
      RAISEEVENT: [125, 126],
      REDIM: [125, 126],
      RESET: [125, 126],
      RESUME: [125, 126],
      RETURN: [125, 126],
      SELECT: [125, 126],
      SET: [125, 126],
      SINGLE: [125, 126],
      STATIC: [125, 126],
      STEP: [125, 126],
      STOP: [125, 126],
      STRING: [125, 126],
      SUB: [125, 126],
      THEN: [125, 126],
      TO: [125, 126],
      TYPEOF: [125, 126],
      UNTIL: [125, 126],
      VARIANT: [125, 126],
      WEND: [125, 126],
      WHILE: [125, 126],
      WITH: [125, 126],
      WITHEVENTS: [125, 126],
      XOR: [125, 126],
      IMP: [125, 126],
      IDENTIFIER: [125, 126],
      LPAREN: [128],
    },
    implicitCallStmt_InStmt: {
      ALIAS: [129, 130, 131],
      AND: [129, 130, 131],
      ATTRIBUTE: [129, 130, 131],
      AS: [129, 130, 131],
      BEGIN: [129, 130, 131],
      BOOLEAN: [129, 130, 131],
      BYVAL: [129, 130, 131],
      BYREF: [129, 130, 131],
      BYTE: [129, 130, 131],
      CALL: [129, 130, 131],
      CASE: [129, 130, 131],
      CONST: [129, 130, 131],
      DECLARE: [129, 130, 131],
      DEFBOOL: [129, 130, 131],
      DEFBYTE: [129, 130, 131],
      DEFDATE: [129, 130, 131],
      DEFDBL: [129, 130, 131],
      DEFDEC: [129, 130, 131],
      DEFCUR: [129, 130, 131],
      DEFINT: [129, 130, 131],
      DEFLNG: [129, 130, 131],
      DEFOBJ: [129, 130, 131],
      DEFSNG: [129, 130, 131],
      DEFSTR: [129, 130, 131],
      DEFVAR: [129, 130, 131],
      DIM: [129, 130, 131],
      DO: [129, 130, 131],
      DOUBLE: [129, 130, 131],
      EACH: [129, 130, 131],
      ELSE: [129, 130, 131],
      ELSEIF: [129, 130, 131],
      END_ENUM: [129, 130, 131],
      END_FUNCTION: [129, 130, 131],
      END_IF: [129, 130, 131],
      END_PROPERTY: [129, 130, 131],
      END_SELECT: [129, 130, 131],
      END_SUB: [129, 130, 131],
      END_TYPE: [129, 130, 131],
      END_WITH: [129, 130, 131],
      END: [129, 130, 131],
      ENUM: [129, 130, 131],
      EQV: [129, 130, 131],
      ERASE: [129, 130, 131],
      EVENT: [129, 130, 131],
      EXIT_DO: [129, 130, 131],
      EXIT_FOR: [129, 130, 131],
      EXIT_FUNCTION: [129, 130, 131],
      EXIT_PROPERTY: [129, 130, 131],
      EXIT_SUB: [129, 130, 131],
      FALSE: [129, 130, 131],
      FRIEND: [129, 130, 131],
      FOR: [129, 130, 131],
      FUNCTION: [129, 130, 131],
      GET: [129, 130, 131],
      GLOBAL: [129, 130, 131],
      GOSUB: [129, 130, 131],
      GOTO: [129, 130, 131],
      IF: [129, 130, 131],
      IMPLEMENTS: [129, 130, 131],
      IN: [129, 130, 131],
      ISNOT: [129, 130, 131],
      IS: [129, 130, 131],
      INTEGER: [129, 130, 131],
      LONG: [129, 130, 131],
      LOOP: [129, 130, 131],
      LEN: [129, 130, 131],
      LET: [129, 130, 131],
      LIB: [129, 130, 131],
      LIKE: [129, 130, 131],
      LSET: [129, 130, 131],
      MACRO_CONST: [129, 130, 131],
      MACRO_IF: [129, 130, 131],
      MACRO_ELSEIF: [129, 130, 131],
      MACRO_ELSE: [129, 130, 131],
      MACRO_END_IF: [129, 130, 131],
      MOD: [129, 130, 131],
      NEXT: [129, 130, 131],
      NEW: [129, 130, 131],
      NOT: [129, 130, 131],
      NOTHING: [129, 130, 131],
      NULL: [129, 130, 131],
      ON_ERROR: [129, 130, 131],
      ON_LOCAL_ERROR: [129, 130, 131],
      ON: [129, 130, 131],
      OPTIONAL: [129, 130, 131],
      OPTION_BASE: [129, 130, 131],
      OPTION_EXPLICIT: [129, 130, 131],
      OPTION_COMPARE: [129, 130, 131],
      OPTION_PRIVATE_MODULE: [129, 130, 131],
      OR: [129, 130, 131],
      PARAMARRAY: [129, 130, 131],
      PRESERVE: [129, 130, 131],
      PRIVATE: [129, 130, 131],
      PROPERTY_GET: [129, 130, 131],
      PROPERTY_LET: [129, 130, 131],
      PROPERTY_SET: [129, 130, 131],
      PTRSAFE: [129, 130, 131],
      PUBLIC: [129, 130, 131],
      RAISEEVENT: [129, 130, 131],
      REDIM: [129, 130, 131],
      RESET: [129, 130, 131],
      RESUME: [129, 130, 131],
      RETURN: [129, 130, 131],
      SELECT: [129, 130, 131],
      SET: [129, 130, 131],
      SINGLE: [129, 130, 131],
      STATIC: [129, 130, 131],
      STEP: [129, 130, 131],
      STOP: [129, 130, 131],
      STRING: [129, 130, 131],
      SUB: [129, 130, 131],
      THEN: [129, 130, 131],
      TO: [129, 130, 131],
      TRUE: [129, 130, 131],
      TYPEOF: [129, 130, 131],
      UNTIL: [129, 130, 131],
      VARIANT: [129, 130, 131],
      WEND: [129, 130, 131],
      WHILE: [129, 130, 131],
      WITH: [129, 130, 131],
      WITHEVENTS: [129, 130, 131],
      XOR: [129, 130, 131],
      IMP: [129, 130, 131],
      IDENTIFIER: [129, 130, 131],
      SPACE_DOT: [129],
    },
    iCS_S_MembersCall_group_def_59: {
      ALIAS: [132],
      AND: [132],
      ATTRIBUTE: [132],
      AS: [132],
      BEGIN: [132],
      BOOLEAN: [132],
      BYVAL: [132],
      BYREF: [132],
      BYTE: [132],
      CALL: [132],
      CASE: [132],
      CONST: [132],
      DECLARE: [132],
      DEFBOOL: [132],
      DEFBYTE: [132],
      DEFDATE: [132],
      DEFDBL: [132],
      DEFDEC: [132],
      DEFCUR: [132],
      DEFINT: [132],
      DEFLNG: [132],
      DEFOBJ: [132],
      DEFSNG: [132],
      DEFSTR: [132],
      DEFVAR: [132],
      DIM: [132],
      DO: [132],
      DOUBLE: [132],
      EACH: [132],
      ELSE: [132],
      ELSEIF: [132],
      END_ENUM: [132],
      END_FUNCTION: [132],
      END_IF: [132],
      END_PROPERTY: [132],
      END_SELECT: [132],
      END_SUB: [132],
      END_TYPE: [132],
      END_WITH: [132],
      END: [132],
      ENUM: [132],
      EQV: [132],
      ERASE: [132],
      EVENT: [132],
      EXIT_DO: [132],
      EXIT_FOR: [132],
      EXIT_FUNCTION: [132],
      EXIT_PROPERTY: [132],
      EXIT_SUB: [132],
      FALSE: [132],
      FRIEND: [132],
      FOR: [132],
      FUNCTION: [132],
      GET: [132],
      GLOBAL: [132],
      GOSUB: [132],
      GOTO: [132],
      IF: [132],
      IMPLEMENTS: [132],
      IN: [132],
      ISNOT: [132],
      IS: [132],
      INTEGER: [132],
      LONG: [132],
      LOOP: [132],
      LEN: [132],
      LET: [132],
      LIB: [132],
      LIKE: [132],
      LSET: [132],
      MACRO_CONST: [132],
      MACRO_IF: [132],
      MACRO_ELSEIF: [132],
      MACRO_ELSE: [132],
      MACRO_END_IF: [132],
      MOD: [132],
      NEXT: [132],
      NEW: [132],
      NOT: [132],
      NOTHING: [132],
      NULL: [132],
      ON_ERROR: [132],
      ON_LOCAL_ERROR: [132],
      ON: [132],
      OPTIONAL: [132],
      OPTION_BASE: [132],
      OPTION_EXPLICIT: [132],
      OPTION_COMPARE: [132],
      OPTION_PRIVATE_MODULE: [132],
      OR: [132],
      PARAMARRAY: [132],
      PRESERVE: [132],
      PRIVATE: [132],
      PROPERTY_GET: [132],
      PROPERTY_LET: [132],
      PROPERTY_SET: [132],
      PTRSAFE: [132],
      PUBLIC: [132],
      RAISEEVENT: [132],
      REDIM: [132],
      RESET: [132],
      RESUME: [132],
      RETURN: [132],
      SELECT: [132],
      SET: [132],
      SINGLE: [132],
      STATIC: [132],
      STEP: [132],
      STOP: [132],
      STRING: [132],
      SUB: [132],
      THEN: [132],
      TO: [132],
      TRUE: [132],
      TYPEOF: [132],
      UNTIL: [132],
      VARIANT: [132],
      WEND: [132],
      WHILE: [132],
      WITH: [132],
      WITHEVENTS: [132],
      XOR: [132],
      IMP: [132],
      IDENTIFIER: [132],
    },
    iCS_S_MembersCall_group_58: {
      ALIAS: [133, 135],
      AND: [133, 135],
      ATTRIBUTE: [133, 135],
      AS: [133, 135],
      BEGIN: [133, 135],
      BOOLEAN: [133, 135],
      BYVAL: [133, 135],
      BYREF: [133, 135],
      BYTE: [133, 135],
      CALL: [133, 135],
      CASE: [133, 135],
      CONST: [133, 135],
      DECLARE: [133, 135],
      DEFBOOL: [133, 135],
      DEFBYTE: [133, 135],
      DEFDATE: [133, 135],
      DEFDBL: [133, 135],
      DEFDEC: [133, 135],
      DEFCUR: [133, 135],
      DEFINT: [133, 135],
      DEFLNG: [133, 135],
      DEFOBJ: [133, 135],
      DEFSNG: [133, 135],
      DEFSTR: [133, 135],
      DEFVAR: [133, 135],
      DIM: [133, 135],
      DO: [133, 135],
      DOUBLE: [133, 135],
      EACH: [133, 135],
      ELSE: [133, 135],
      ELSEIF: [133, 135],
      END_ENUM: [133, 135],
      END_FUNCTION: [133, 135],
      END_IF: [133, 135],
      END_PROPERTY: [133, 135],
      END_SELECT: [133, 135],
      END_SUB: [133, 135],
      END_TYPE: [133, 135],
      END_WITH: [133, 135],
      END: [133, 135],
      ENUM: [133, 135],
      EQV: [133, 135],
      ERASE: [133, 135],
      EVENT: [133, 135],
      EXIT_DO: [133, 135],
      EXIT_FOR: [133, 135],
      EXIT_FUNCTION: [133, 135],
      EXIT_PROPERTY: [133, 135],
      EXIT_SUB: [133, 135],
      FALSE: [133, 135],
      FRIEND: [133, 135],
      FOR: [133, 135],
      FUNCTION: [133, 135],
      GET: [133, 135],
      GLOBAL: [133, 135],
      GOSUB: [133, 135],
      GOTO: [133, 135],
      IF: [133, 135],
      IMPLEMENTS: [133, 135],
      IN: [133, 135],
      ISNOT: [133, 135],
      IS: [133, 135],
      INTEGER: [133, 135],
      LONG: [133, 135],
      LOOP: [133, 135],
      LEN: [133, 135],
      LET: [133, 135],
      LIB: [133, 135],
      LIKE: [133, 135],
      LSET: [133, 135],
      MACRO_CONST: [133, 135],
      MACRO_IF: [133, 135],
      MACRO_ELSEIF: [133, 135],
      MACRO_ELSE: [133, 135],
      MACRO_END_IF: [133, 135],
      MOD: [133, 135],
      NEXT: [133, 135],
      NEW: [133, 135],
      NOT: [133, 135],
      NOTHING: [133, 135],
      NULL: [133, 135],
      ON_ERROR: [133, 135],
      ON_LOCAL_ERROR: [133, 135],
      ON: [133, 135],
      OPTIONAL: [133, 135],
      OPTION_BASE: [133, 135],
      OPTION_EXPLICIT: [133, 135],
      OPTION_COMPARE: [133, 135],
      OPTION_PRIVATE_MODULE: [133, 135],
      OR: [133, 135],
      PARAMARRAY: [133, 135],
      PRESERVE: [133, 135],
      PRIVATE: [133, 135],
      PROPERTY_GET: [133, 135],
      PROPERTY_LET: [133, 135],
      PROPERTY_SET: [133, 135],
      PTRSAFE: [133, 135],
      PUBLIC: [133, 135],
      RAISEEVENT: [133, 135],
      REDIM: [133, 135],
      RESET: [133, 135],
      RESUME: [133, 135],
      RETURN: [133, 135],
      SELECT: [133, 135],
      SET: [133, 135],
      SINGLE: [133, 135],
      STATIC: [133, 135],
      STEP: [133, 135],
      STOP: [133, 135],
      STRING: [133, 135],
      SUB: [133, 135],
      THEN: [133, 135],
      TO: [133, 135],
      TRUE: [133, 135],
      TYPEOF: [133, 135],
      UNTIL: [133, 135],
      VARIANT: [133, 135],
      WEND: [133, 135],
      WHILE: [133, 135],
      WITH: [133, 135],
      WITHEVENTS: [133, 135],
      XOR: [133, 135],
      IMP: [133, 135],
      IDENTIFIER: [133, 135],
    },
    iCS_S_MembersCall_group_def_60: {
      ALIAS: [134],
      AND: [134],
      ATTRIBUTE: [134],
      AS: [134],
      BEGIN: [134],
      BOOLEAN: [134],
      BYVAL: [134],
      BYREF: [134],
      BYTE: [134],
      CALL: [134],
      CASE: [134],
      CONST: [134],
      DECLARE: [134],
      DEFBOOL: [134],
      DEFBYTE: [134],
      DEFDATE: [134],
      DEFDBL: [134],
      DEFDEC: [134],
      DEFCUR: [134],
      DEFINT: [134],
      DEFLNG: [134],
      DEFOBJ: [134],
      DEFSNG: [134],
      DEFSTR: [134],
      DEFVAR: [134],
      DIM: [134],
      DO: [134],
      DOUBLE: [134],
      EACH: [134],
      ELSE: [134],
      ELSEIF: [134],
      END_ENUM: [134],
      END_FUNCTION: [134],
      END_IF: [134],
      END_PROPERTY: [134],
      END_SELECT: [134],
      END_SUB: [134],
      END_TYPE: [134],
      END_WITH: [134],
      END: [134],
      ENUM: [134],
      EQV: [134],
      ERASE: [134],
      EVENT: [134],
      EXIT_DO: [134],
      EXIT_FOR: [134],
      EXIT_FUNCTION: [134],
      EXIT_PROPERTY: [134],
      EXIT_SUB: [134],
      FALSE: [134],
      FRIEND: [134],
      FOR: [134],
      FUNCTION: [134],
      GET: [134],
      GLOBAL: [134],
      GOSUB: [134],
      GOTO: [134],
      IF: [134],
      IMPLEMENTS: [134],
      IN: [134],
      ISNOT: [134],
      IS: [134],
      INTEGER: [134],
      LONG: [134],
      LOOP: [134],
      LEN: [134],
      LET: [134],
      LIB: [134],
      LIKE: [134],
      LSET: [134],
      MACRO_CONST: [134],
      MACRO_IF: [134],
      MACRO_ELSEIF: [134],
      MACRO_ELSE: [134],
      MACRO_END_IF: [134],
      MOD: [134],
      NEXT: [134],
      NEW: [134],
      NOT: [134],
      NOTHING: [134],
      NULL: [134],
      ON_ERROR: [134],
      ON_LOCAL_ERROR: [134],
      ON: [134],
      OPTIONAL: [134],
      OPTION_BASE: [134],
      OPTION_EXPLICIT: [134],
      OPTION_COMPARE: [134],
      OPTION_PRIVATE_MODULE: [134],
      OR: [134],
      PARAMARRAY: [134],
      PRESERVE: [134],
      PRIVATE: [134],
      PROPERTY_GET: [134],
      PROPERTY_LET: [134],
      PROPERTY_SET: [134],
      PTRSAFE: [134],
      PUBLIC: [134],
      RAISEEVENT: [134],
      REDIM: [134],
      RESET: [134],
      RESUME: [134],
      RETURN: [134],
      SELECT: [134],
      SET: [134],
      SINGLE: [134],
      STATIC: [134],
      STEP: [134],
      STOP: [134],
      STRING: [134],
      SUB: [134],
      THEN: [134],
      TO: [134],
      TRUE: [134],
      TYPEOF: [134],
      UNTIL: [134],
      VARIANT: [134],
      WEND: [134],
      WHILE: [134],
      WITH: [134],
      WITHEVENTS: [134],
      XOR: [134],
      IMP: [134],
      IDENTIFIER: [134],
    },
    iCS_S_MembersCall_group_def_61: {
      ALIAS: [136],
      AND: [136],
      ATTRIBUTE: [136],
      AS: [136],
      BEGIN: [136],
      BOOLEAN: [136],
      BYVAL: [136],
      BYREF: [136],
      BYTE: [136],
      CALL: [136],
      CASE: [136],
      CONST: [136],
      DECLARE: [136],
      DEFBOOL: [136],
      DEFBYTE: [136],
      DEFDATE: [136],
      DEFDBL: [136],
      DEFDEC: [136],
      DEFCUR: [136],
      DEFINT: [136],
      DEFLNG: [136],
      DEFOBJ: [136],
      DEFSNG: [136],
      DEFSTR: [136],
      DEFVAR: [136],
      DIM: [136],
      DO: [136],
      DOUBLE: [136],
      EACH: [136],
      ELSE: [136],
      ELSEIF: [136],
      END_ENUM: [136],
      END_FUNCTION: [136],
      END_IF: [136],
      END_PROPERTY: [136],
      END_SELECT: [136],
      END_SUB: [136],
      END_TYPE: [136],
      END_WITH: [136],
      END: [136],
      ENUM: [136],
      EQV: [136],
      ERASE: [136],
      EVENT: [136],
      EXIT_DO: [136],
      EXIT_FOR: [136],
      EXIT_FUNCTION: [136],
      EXIT_PROPERTY: [136],
      EXIT_SUB: [136],
      FALSE: [136],
      FRIEND: [136],
      FOR: [136],
      FUNCTION: [136],
      GET: [136],
      GLOBAL: [136],
      GOSUB: [136],
      GOTO: [136],
      IF: [136],
      IMPLEMENTS: [136],
      IN: [136],
      ISNOT: [136],
      IS: [136],
      INTEGER: [136],
      LONG: [136],
      LOOP: [136],
      LEN: [136],
      LET: [136],
      LIB: [136],
      LIKE: [136],
      LSET: [136],
      MACRO_CONST: [136],
      MACRO_IF: [136],
      MACRO_ELSEIF: [136],
      MACRO_ELSE: [136],
      MACRO_END_IF: [136],
      MOD: [136],
      NEXT: [136],
      NEW: [136],
      NOT: [136],
      NOTHING: [136],
      NULL: [136],
      ON_ERROR: [136],
      ON_LOCAL_ERROR: [136],
      ON: [136],
      OPTIONAL: [136],
      OPTION_BASE: [136],
      OPTION_EXPLICIT: [136],
      OPTION_COMPARE: [136],
      OPTION_PRIVATE_MODULE: [136],
      OR: [136],
      PARAMARRAY: [136],
      PRESERVE: [136],
      PRIVATE: [136],
      PROPERTY_GET: [136],
      PROPERTY_LET: [136],
      PROPERTY_SET: [136],
      PTRSAFE: [136],
      PUBLIC: [136],
      RAISEEVENT: [136],
      REDIM: [136],
      RESET: [136],
      RESUME: [136],
      RETURN: [136],
      SELECT: [136],
      SET: [136],
      SINGLE: [136],
      STATIC: [136],
      STEP: [136],
      STOP: [136],
      STRING: [136],
      SUB: [136],
      THEN: [136],
      TO: [136],
      TRUE: [136],
      TYPEOF: [136],
      UNTIL: [136],
      VARIANT: [136],
      WEND: [136],
      WHILE: [136],
      WITH: [136],
      WITHEVENTS: [136],
      XOR: [136],
      IMP: [136],
      IDENTIFIER: [136],
    },
    iCS_S_MembersCall_group_57: {
      ALIAS: [137],
      AND: [137],
      ATTRIBUTE: [137],
      AS: [137],
      BEGIN: [137],
      BOOLEAN: [137],
      BYVAL: [137],
      BYREF: [137],
      BYTE: [137],
      CALL: [137],
      CASE: [137],
      CONST: [137],
      DECLARE: [137],
      DEFBOOL: [137],
      DEFBYTE: [137],
      DEFDATE: [137],
      DEFDBL: [137],
      DEFDEC: [137],
      DEFCUR: [137],
      DEFINT: [137],
      DEFLNG: [137],
      DEFOBJ: [137],
      DEFSNG: [137],
      DEFSTR: [137],
      DEFVAR: [137],
      DIM: [137],
      DO: [137],
      DOUBLE: [137],
      EACH: [137],
      ELSE: [137],
      ELSEIF: [137],
      END_ENUM: [137],
      END_FUNCTION: [137],
      END_IF: [137],
      END_PROPERTY: [137],
      END_SELECT: [137],
      END_SUB: [137],
      END_TYPE: [137],
      END_WITH: [137],
      END: [137],
      ENUM: [137],
      EQV: [137],
      ERASE: [137],
      EVENT: [137],
      EXIT_DO: [137],
      EXIT_FOR: [137],
      EXIT_FUNCTION: [137],
      EXIT_PROPERTY: [137],
      EXIT_SUB: [137],
      FALSE: [137],
      FRIEND: [137],
      FOR: [137],
      FUNCTION: [137],
      GET: [137],
      GLOBAL: [137],
      GOSUB: [137],
      GOTO: [137],
      IF: [137],
      IMPLEMENTS: [137],
      IN: [137],
      ISNOT: [137],
      IS: [137],
      INTEGER: [137],
      LONG: [137],
      LOOP: [137],
      LEN: [137],
      LET: [137],
      LIB: [137],
      LIKE: [137],
      LSET: [137],
      MACRO_CONST: [137],
      MACRO_IF: [137],
      MACRO_ELSEIF: [137],
      MACRO_ELSE: [137],
      MACRO_END_IF: [137],
      MOD: [137],
      NEXT: [137],
      NEW: [137],
      NOT: [137],
      NOTHING: [137],
      NULL: [137],
      ON_ERROR: [137],
      ON_LOCAL_ERROR: [137],
      ON: [137],
      OPTIONAL: [137],
      OPTION_BASE: [137],
      OPTION_EXPLICIT: [137],
      OPTION_COMPARE: [137],
      OPTION_PRIVATE_MODULE: [137],
      OR: [137],
      PARAMARRAY: [137],
      PRESERVE: [137],
      PRIVATE: [137],
      PROPERTY_GET: [137],
      PROPERTY_LET: [137],
      PROPERTY_SET: [137],
      PTRSAFE: [137],
      PUBLIC: [137],
      RAISEEVENT: [137],
      REDIM: [137],
      RESET: [137],
      RESUME: [137],
      RETURN: [137],
      SELECT: [137],
      SET: [137],
      SINGLE: [137],
      STATIC: [137],
      STEP: [137],
      STOP: [137],
      STRING: [137],
      SUB: [137],
      THEN: [137],
      TO: [137],
      TRUE: [137],
      TYPEOF: [137],
      UNTIL: [137],
      VARIANT: [137],
      WEND: [137],
      WHILE: [137],
      WITH: [137],
      WITHEVENTS: [137],
      XOR: [137],
      IMP: [137],
      IDENTIFIER: [137],
      SPACE_DOT: [139],
    },
    iCS_S_MembersCall_group_def_62: {
      SPACE_DOT: [138],
    },
    iCS_S_MembersCall: {
      ALIAS: [140],
      AND: [140],
      ATTRIBUTE: [140],
      AS: [140],
      BEGIN: [140],
      BOOLEAN: [140],
      BYVAL: [140],
      BYREF: [140],
      BYTE: [140],
      CALL: [140],
      CASE: [140],
      CONST: [140],
      DECLARE: [140],
      DEFBOOL: [140],
      DEFBYTE: [140],
      DEFDATE: [140],
      DEFDBL: [140],
      DEFDEC: [140],
      DEFCUR: [140],
      DEFINT: [140],
      DEFLNG: [140],
      DEFOBJ: [140],
      DEFSNG: [140],
      DEFSTR: [140],
      DEFVAR: [140],
      DIM: [140],
      DO: [140],
      DOUBLE: [140],
      EACH: [140],
      ELSE: [140],
      ELSEIF: [140],
      END_ENUM: [140],
      END_FUNCTION: [140],
      END_IF: [140],
      END_PROPERTY: [140],
      END_SELECT: [140],
      END_SUB: [140],
      END_TYPE: [140],
      END_WITH: [140],
      END: [140],
      ENUM: [140],
      EQV: [140],
      ERASE: [140],
      EVENT: [140],
      EXIT_DO: [140],
      EXIT_FOR: [140],
      EXIT_FUNCTION: [140],
      EXIT_PROPERTY: [140],
      EXIT_SUB: [140],
      FALSE: [140],
      FRIEND: [140],
      FOR: [140],
      FUNCTION: [140],
      GET: [140],
      GLOBAL: [140],
      GOSUB: [140],
      GOTO: [140],
      IF: [140],
      IMPLEMENTS: [140],
      IN: [140],
      ISNOT: [140],
      IS: [140],
      INTEGER: [140],
      LONG: [140],
      LOOP: [140],
      LEN: [140],
      LET: [140],
      LIB: [140],
      LIKE: [140],
      LSET: [140],
      MACRO_CONST: [140],
      MACRO_IF: [140],
      MACRO_ELSEIF: [140],
      MACRO_ELSE: [140],
      MACRO_END_IF: [140],
      MOD: [140],
      NEXT: [140],
      NEW: [140],
      NOT: [140],
      NOTHING: [140],
      NULL: [140],
      ON_ERROR: [140],
      ON_LOCAL_ERROR: [140],
      ON: [140],
      OPTIONAL: [140],
      OPTION_BASE: [140],
      OPTION_EXPLICIT: [140],
      OPTION_COMPARE: [140],
      OPTION_PRIVATE_MODULE: [140],
      OR: [140],
      PARAMARRAY: [140],
      PRESERVE: [140],
      PRIVATE: [140],
      PROPERTY_GET: [140],
      PROPERTY_LET: [140],
      PROPERTY_SET: [140],
      PTRSAFE: [140],
      PUBLIC: [140],
      RAISEEVENT: [140],
      REDIM: [140],
      RESET: [140],
      RESUME: [140],
      RETURN: [140],
      SELECT: [140],
      SET: [140],
      SINGLE: [140],
      STATIC: [140],
      STEP: [140],
      STOP: [140],
      STRING: [140],
      SUB: [140],
      THEN: [140],
      TO: [140],
      TRUE: [140],
      TYPEOF: [140],
      UNTIL: [140],
      VARIANT: [140],
      WEND: [140],
      WHILE: [140],
      WITH: [140],
      WITHEVENTS: [140],
      XOR: [140],
      IMP: [140],
      IDENTIFIER: [140],
      SPACE_DOT: [140],
    },
    iCS_S_MemberCall_group_64: {
      ALIAS: [141, 142],
      AND: [141, 142],
      ATTRIBUTE: [141, 142],
      AS: [141, 142],
      BEGIN: [141, 142],
      BOOLEAN: [141, 142],
      BYVAL: [141, 142],
      BYREF: [141, 142],
      BYTE: [141, 142],
      CALL: [141, 142],
      CASE: [141, 142],
      CONST: [141, 142],
      DECLARE: [141, 142],
      DEFBOOL: [141, 142],
      DEFBYTE: [141, 142],
      DEFDATE: [141, 142],
      DEFDBL: [141, 142],
      DEFDEC: [141, 142],
      DEFCUR: [141, 142],
      DEFINT: [141, 142],
      DEFLNG: [141, 142],
      DEFOBJ: [141, 142],
      DEFSNG: [141, 142],
      DEFSTR: [141, 142],
      DEFVAR: [141, 142],
      DIM: [141, 142],
      DO: [141, 142],
      DOUBLE: [141, 142],
      EACH: [141, 142],
      ELSE: [141, 142],
      ELSEIF: [141, 142],
      END_ENUM: [141, 142],
      END_FUNCTION: [141, 142],
      END_IF: [141, 142],
      END_PROPERTY: [141, 142],
      END_SELECT: [141, 142],
      END_SUB: [141, 142],
      END_TYPE: [141, 142],
      END_WITH: [141, 142],
      END: [141, 142],
      ENUM: [141, 142],
      EQV: [141, 142],
      ERASE: [141, 142],
      EVENT: [141, 142],
      EXIT_DO: [141, 142],
      EXIT_FOR: [141, 142],
      EXIT_FUNCTION: [141, 142],
      EXIT_PROPERTY: [141, 142],
      EXIT_SUB: [141, 142],
      FALSE: [141, 142],
      FRIEND: [141, 142],
      FOR: [141, 142],
      FUNCTION: [141, 142],
      GET: [141, 142],
      GLOBAL: [141, 142],
      GOSUB: [141, 142],
      GOTO: [141, 142],
      IF: [141, 142],
      IMPLEMENTS: [141, 142],
      IN: [141, 142],
      ISNOT: [141, 142],
      IS: [141, 142],
      INTEGER: [141, 142],
      LONG: [141, 142],
      LOOP: [141, 142],
      LEN: [141, 142],
      LET: [141, 142],
      LIB: [141, 142],
      LIKE: [141, 142],
      LSET: [141, 142],
      MACRO_CONST: [141, 142],
      MACRO_IF: [141, 142],
      MACRO_ELSEIF: [141, 142],
      MACRO_ELSE: [141, 142],
      MACRO_END_IF: [141, 142],
      MOD: [141, 142],
      NEXT: [141, 142],
      NEW: [141, 142],
      NOT: [141, 142],
      NOTHING: [141, 142],
      NULL: [141, 142],
      ON_ERROR: [141, 142],
      ON_LOCAL_ERROR: [141, 142],
      ON: [141, 142],
      OPTIONAL: [141, 142],
      OPTION_BASE: [141, 142],
      OPTION_EXPLICIT: [141, 142],
      OPTION_COMPARE: [141, 142],
      OPTION_PRIVATE_MODULE: [141, 142],
      OR: [141, 142],
      PARAMARRAY: [141, 142],
      PRESERVE: [141, 142],
      PRIVATE: [141, 142],
      PROPERTY_GET: [141, 142],
      PROPERTY_LET: [141, 142],
      PROPERTY_SET: [141, 142],
      PTRSAFE: [141, 142],
      PUBLIC: [141, 142],
      RAISEEVENT: [141, 142],
      REDIM: [141, 142],
      RESET: [141, 142],
      RESUME: [141, 142],
      RETURN: [141, 142],
      SELECT: [141, 142],
      SET: [141, 142],
      SINGLE: [141, 142],
      STATIC: [141, 142],
      STEP: [141, 142],
      STOP: [141, 142],
      STRING: [141, 142],
      SUB: [141, 142],
      THEN: [141, 142],
      TO: [141, 142],
      TRUE: [141, 142],
      TYPEOF: [141, 142],
      UNTIL: [141, 142],
      VARIANT: [141, 142],
      WEND: [141, 142],
      WHILE: [141, 142],
      WITH: [141, 142],
      WITHEVENTS: [141, 142],
      XOR: [141, 142],
      IMP: [141, 142],
      IDENTIFIER: [141, 142],
    },
    iCS_S_MemberCall: {
      '.': [143],
    },
    iCS_S_SpaceMemberCall_group_65: {
      ALIAS: [144, 145],
      AND: [144, 145],
      ATTRIBUTE: [144, 145],
      AS: [144, 145],
      BEGIN: [144, 145],
      BOOLEAN: [144, 145],
      BYVAL: [144, 145],
      BYREF: [144, 145],
      BYTE: [144, 145],
      CALL: [144, 145],
      CASE: [144, 145],
      CONST: [144, 145],
      DECLARE: [144, 145],
      DEFBOOL: [144, 145],
      DEFBYTE: [144, 145],
      DEFDATE: [144, 145],
      DEFDBL: [144, 145],
      DEFDEC: [144, 145],
      DEFCUR: [144, 145],
      DEFINT: [144, 145],
      DEFLNG: [144, 145],
      DEFOBJ: [144, 145],
      DEFSNG: [144, 145],
      DEFSTR: [144, 145],
      DEFVAR: [144, 145],
      DIM: [144, 145],
      DO: [144, 145],
      DOUBLE: [144, 145],
      EACH: [144, 145],
      ELSE: [144, 145],
      ELSEIF: [144, 145],
      END_ENUM: [144, 145],
      END_FUNCTION: [144, 145],
      END_IF: [144, 145],
      END_PROPERTY: [144, 145],
      END_SELECT: [144, 145],
      END_SUB: [144, 145],
      END_TYPE: [144, 145],
      END_WITH: [144, 145],
      END: [144, 145],
      ENUM: [144, 145],
      EQV: [144, 145],
      ERASE: [144, 145],
      EVENT: [144, 145],
      EXIT_DO: [144, 145],
      EXIT_FOR: [144, 145],
      EXIT_FUNCTION: [144, 145],
      EXIT_PROPERTY: [144, 145],
      EXIT_SUB: [144, 145],
      FALSE: [144, 145],
      FRIEND: [144, 145],
      FOR: [144, 145],
      FUNCTION: [144, 145],
      GET: [144, 145],
      GLOBAL: [144, 145],
      GOSUB: [144, 145],
      GOTO: [144, 145],
      IF: [144, 145],
      IMPLEMENTS: [144, 145],
      IN: [144, 145],
      ISNOT: [144, 145],
      IS: [144, 145],
      INTEGER: [144, 145],
      LONG: [144, 145],
      LOOP: [144, 145],
      LEN: [144, 145],
      LET: [144, 145],
      LIB: [144, 145],
      LIKE: [144, 145],
      LSET: [144, 145],
      MACRO_CONST: [144, 145],
      MACRO_IF: [144, 145],
      MACRO_ELSEIF: [144, 145],
      MACRO_ELSE: [144, 145],
      MACRO_END_IF: [144, 145],
      MOD: [144, 145],
      NEXT: [144, 145],
      NEW: [144, 145],
      NOT: [144, 145],
      NOTHING: [144, 145],
      NULL: [144, 145],
      ON_ERROR: [144, 145],
      ON_LOCAL_ERROR: [144, 145],
      ON: [144, 145],
      OPTIONAL: [144, 145],
      OPTION_BASE: [144, 145],
      OPTION_EXPLICIT: [144, 145],
      OPTION_COMPARE: [144, 145],
      OPTION_PRIVATE_MODULE: [144, 145],
      OR: [144, 145],
      PARAMARRAY: [144, 145],
      PRESERVE: [144, 145],
      PRIVATE: [144, 145],
      PROPERTY_GET: [144, 145],
      PROPERTY_LET: [144, 145],
      PROPERTY_SET: [144, 145],
      PTRSAFE: [144, 145],
      PUBLIC: [144, 145],
      RAISEEVENT: [144, 145],
      REDIM: [144, 145],
      RESET: [144, 145],
      RESUME: [144, 145],
      RETURN: [144, 145],
      SELECT: [144, 145],
      SET: [144, 145],
      SINGLE: [144, 145],
      STATIC: [144, 145],
      STEP: [144, 145],
      STOP: [144, 145],
      STRING: [144, 145],
      SUB: [144, 145],
      THEN: [144, 145],
      TO: [144, 145],
      TRUE: [144, 145],
      TYPEOF: [144, 145],
      UNTIL: [144, 145],
      VARIANT: [144, 145],
      WEND: [144, 145],
      WHILE: [144, 145],
      WITH: [144, 145],
      WITHEVENTS: [144, 145],
      XOR: [144, 145],
      IMP: [144, 145],
      IDENTIFIER: [144, 145],
    },
    iCS_S_SpaceMemberCall: {
      SPACE_DOT: [146],
    },
    iCS_S_ProcedureOrArrayCall: {
      ALIAS: [147],
      AND: [147],
      ATTRIBUTE: [147],
      AS: [147],
      BEGIN: [147],
      BOOLEAN: [147],
      BYVAL: [147],
      BYREF: [147],
      BYTE: [147],
      CALL: [147],
      CASE: [147],
      CONST: [147],
      DECLARE: [147],
      DEFBOOL: [147],
      DEFBYTE: [147],
      DEFDATE: [147],
      DEFDBL: [147],
      DEFDEC: [147],
      DEFCUR: [147],
      DEFINT: [147],
      DEFLNG: [147],
      DEFOBJ: [147],
      DEFSNG: [147],
      DEFSTR: [147],
      DEFVAR: [147],
      DIM: [147],
      DO: [147],
      DOUBLE: [147],
      EACH: [147],
      ELSE: [147],
      ELSEIF: [147],
      END_ENUM: [147],
      END_FUNCTION: [147],
      END_IF: [147],
      END_PROPERTY: [147],
      END_SELECT: [147],
      END_SUB: [147],
      END_TYPE: [147],
      END_WITH: [147],
      END: [147],
      ENUM: [147],
      EQV: [147],
      ERASE: [147],
      EVENT: [147],
      EXIT_DO: [147],
      EXIT_FOR: [147],
      EXIT_FUNCTION: [147],
      EXIT_PROPERTY: [147],
      EXIT_SUB: [147],
      FALSE: [147],
      FRIEND: [147],
      FOR: [147],
      FUNCTION: [147],
      GET: [147],
      GLOBAL: [147],
      GOSUB: [147],
      GOTO: [147],
      IF: [147],
      IMPLEMENTS: [147],
      IN: [147],
      ISNOT: [147],
      IS: [147],
      INTEGER: [147],
      LONG: [147],
      LOOP: [147],
      LEN: [147],
      LET: [147],
      LIB: [147],
      LIKE: [147],
      LSET: [147],
      MACRO_CONST: [147],
      MACRO_IF: [147],
      MACRO_ELSEIF: [147],
      MACRO_ELSE: [147],
      MACRO_END_IF: [147],
      MOD: [147],
      NEXT: [147],
      NEW: [147],
      NOT: [147],
      NOTHING: [147],
      NULL: [147],
      ON_ERROR: [147],
      ON_LOCAL_ERROR: [147],
      ON: [147],
      OPTIONAL: [147],
      OPTION_BASE: [147],
      OPTION_EXPLICIT: [147],
      OPTION_COMPARE: [147],
      OPTION_PRIVATE_MODULE: [147],
      OR: [147],
      PARAMARRAY: [147],
      PRESERVE: [147],
      PRIVATE: [147],
      PROPERTY_GET: [147],
      PROPERTY_LET: [147],
      PROPERTY_SET: [147],
      PTRSAFE: [147],
      PUBLIC: [147],
      RAISEEVENT: [147],
      REDIM: [147],
      RESET: [147],
      RESUME: [147],
      RETURN: [147],
      SELECT: [147],
      SET: [147],
      SINGLE: [147],
      STATIC: [147],
      STEP: [147],
      STOP: [147],
      STRING: [147],
      SUB: [147],
      THEN: [147],
      TO: [147],
      TRUE: [147],
      TYPEOF: [147],
      UNTIL: [147],
      VARIANT: [147],
      WEND: [147],
      WHILE: [147],
      WITH: [147],
      WITHEVENTS: [147],
      XOR: [147],
      IMP: [147],
      IDENTIFIER: [147],
    },
    iCS_S_VariableOrProcedureCall: {
      ALIAS: [148],
      AND: [148],
      ATTRIBUTE: [148],
      AS: [148],
      BEGIN: [148],
      BOOLEAN: [148],
      BYVAL: [148],
      BYREF: [148],
      BYTE: [148],
      CALL: [148],
      CASE: [148],
      CONST: [148],
      DECLARE: [148],
      DEFBOOL: [148],
      DEFBYTE: [148],
      DEFDATE: [148],
      DEFDBL: [148],
      DEFDEC: [148],
      DEFCUR: [148],
      DEFINT: [148],
      DEFLNG: [148],
      DEFOBJ: [148],
      DEFSNG: [148],
      DEFSTR: [148],
      DEFVAR: [148],
      DIM: [148],
      DO: [148],
      DOUBLE: [148],
      EACH: [148],
      ELSE: [148],
      ELSEIF: [148],
      END_ENUM: [148],
      END_FUNCTION: [148],
      END_IF: [148],
      END_PROPERTY: [148],
      END_SELECT: [148],
      END_SUB: [148],
      END_TYPE: [148],
      END_WITH: [148],
      END: [148],
      ENUM: [148],
      EQV: [148],
      ERASE: [148],
      EVENT: [148],
      EXIT_DO: [148],
      EXIT_FOR: [148],
      EXIT_FUNCTION: [148],
      EXIT_PROPERTY: [148],
      EXIT_SUB: [148],
      FALSE: [148],
      FRIEND: [148],
      FOR: [148],
      FUNCTION: [148],
      GET: [148],
      GLOBAL: [148],
      GOSUB: [148],
      GOTO: [148],
      IF: [148],
      IMPLEMENTS: [148],
      IN: [148],
      ISNOT: [148],
      IS: [148],
      INTEGER: [148],
      LONG: [148],
      LOOP: [148],
      LEN: [148],
      LET: [148],
      LIB: [148],
      LIKE: [148],
      LSET: [148],
      MACRO_CONST: [148],
      MACRO_IF: [148],
      MACRO_ELSEIF: [148],
      MACRO_ELSE: [148],
      MACRO_END_IF: [148],
      MOD: [148],
      NEXT: [148],
      NEW: [148],
      NOT: [148],
      NOTHING: [148],
      NULL: [148],
      ON_ERROR: [148],
      ON_LOCAL_ERROR: [148],
      ON: [148],
      OPTIONAL: [148],
      OPTION_BASE: [148],
      OPTION_EXPLICIT: [148],
      OPTION_COMPARE: [148],
      OPTION_PRIVATE_MODULE: [148],
      OR: [148],
      PARAMARRAY: [148],
      PRESERVE: [148],
      PRIVATE: [148],
      PROPERTY_GET: [148],
      PROPERTY_LET: [148],
      PROPERTY_SET: [148],
      PTRSAFE: [148],
      PUBLIC: [148],
      RAISEEVENT: [148],
      REDIM: [148],
      RESET: [148],
      RESUME: [148],
      RETURN: [148],
      SELECT: [148],
      SET: [148],
      SINGLE: [148],
      STATIC: [148],
      STEP: [148],
      STOP: [148],
      STRING: [148],
      SUB: [148],
      THEN: [148],
      TO: [148],
      TRUE: [148],
      TYPEOF: [148],
      UNTIL: [148],
      VARIANT: [148],
      WEND: [148],
      WHILE: [148],
      WITH: [148],
      WITHEVENTS: [148],
      XOR: [148],
      IMP: [148],
      IDENTIFIER: [148],
    },
    dictionaryCallStmt: {
      '!': [149],
    },
    literal: {
      DOUBLELITERAL: [150],
      INTEGERLITERAL: [151],
      STRINGLITERAL: [152],
      NOTHING: [153],
      NULL: [154],
      TRUE: [155],
      FALSE: [156],
    },
    typeHint: {
      '&': [157],
      '%': [158],
      '#': [159],
      '!': [160],
      '@': [161],
      $: [162],
    },
    arg_group_def_69: {
      BYVAL: [163],
    },
    arg_group_68: {
      BYVAL: [164],
      BYREF: [166],
    },
    arg_group_def_70: {
      BYREF: [165],
    },
    arg_group_def_72: {
      LPAREN: [167],
    },
    arg: {
      OPTIONAL: [168],
      BYVAL: [168],
      BYREF: [168],
      PARAMARRAY: [168],
      ALIAS: [168],
      AND: [168],
      ATTRIBUTE: [168],
      AS: [168],
      BEGIN: [168],
      BOOLEAN: [168],
      BYTE: [168],
      CALL: [168],
      CASE: [168],
      CONST: [168],
      DECLARE: [168],
      DEFBOOL: [168],
      DEFBYTE: [168],
      DEFDATE: [168],
      DEFDBL: [168],
      DEFDEC: [168],
      DEFCUR: [168],
      DEFINT: [168],
      DEFLNG: [168],
      DEFOBJ: [168],
      DEFSNG: [168],
      DEFSTR: [168],
      DEFVAR: [168],
      DIM: [168],
      DO: [168],
      DOUBLE: [168],
      EACH: [168],
      ELSE: [168],
      ELSEIF: [168],
      END_ENUM: [168],
      END_FUNCTION: [168],
      END_IF: [168],
      END_PROPERTY: [168],
      END_SELECT: [168],
      END_SUB: [168],
      END_TYPE: [168],
      END_WITH: [168],
      END: [168],
      ENUM: [168],
      EQV: [168],
      ERASE: [168],
      EVENT: [168],
      EXIT_DO: [168],
      EXIT_FOR: [168],
      EXIT_FUNCTION: [168],
      EXIT_PROPERTY: [168],
      EXIT_SUB: [168],
      FALSE: [168],
      FRIEND: [168],
      FOR: [168],
      FUNCTION: [168],
      GET: [168],
      GLOBAL: [168],
      GOSUB: [168],
      GOTO: [168],
      IF: [168],
      IMPLEMENTS: [168],
      IN: [168],
      ISNOT: [168],
      IS: [168],
      INTEGER: [168],
      LONG: [168],
      LOOP: [168],
      LEN: [168],
      LET: [168],
      LIB: [168],
      LIKE: [168],
      LSET: [168],
      MACRO_CONST: [168],
      MACRO_IF: [168],
      MACRO_ELSEIF: [168],
      MACRO_ELSE: [168],
      MACRO_END_IF: [168],
      MOD: [168],
      NEXT: [168],
      NEW: [168],
      NOT: [168],
      NOTHING: [168],
      NULL: [168],
      ON_ERROR: [168],
      ON_LOCAL_ERROR: [168],
      ON: [168],
      OPTION_BASE: [168],
      OPTION_EXPLICIT: [168],
      OPTION_COMPARE: [168],
      OPTION_PRIVATE_MODULE: [168],
      OR: [168],
      PRESERVE: [168],
      PRIVATE: [168],
      PROPERTY_GET: [168],
      PROPERTY_LET: [168],
      PROPERTY_SET: [168],
      PTRSAFE: [168],
      PUBLIC: [168],
      RAISEEVENT: [168],
      REDIM: [168],
      RESET: [168],
      RESUME: [168],
      RETURN: [168],
      SELECT: [168],
      SET: [168],
      SINGLE: [168],
      STATIC: [168],
      STEP: [168],
      STOP: [168],
      STRING: [168],
      SUB: [168],
      THEN: [168],
      TO: [168],
      TRUE: [168],
      TYPEOF: [168],
      UNTIL: [168],
      VARIANT: [168],
      WEND: [168],
      WHILE: [168],
      WITH: [168],
      WITHEVENTS: [168],
      XOR: [168],
      IMP: [168],
      IDENTIFIER: [168],
    },
    argDefaultValue: {
      EQ: [169],
    },
    asTypeClause: {
      AS: [170],
    },
    type__group_def_74: {
      BOOLEAN: [171],
      BYTE: [171],
      DOUBLE: [171],
      INTEGER: [171],
      LONG: [171],
      SINGLE: [171],
      VARIANT: [171],
      STRING: [171],
    },
    type__group_73: {
      BOOLEAN: [172, 174],
      BYTE: [172, 174],
      DOUBLE: [172, 174],
      INTEGER: [172, 174],
      LONG: [172, 174],
      SINGLE: [172, 174],
      VARIANT: [172, 174],
      STRING: [172, 174],
      ALIAS: [174],
      AND: [174],
      ATTRIBUTE: [174],
      AS: [174],
      BEGIN: [174],
      BYVAL: [174],
      BYREF: [174],
      CALL: [174],
      CASE: [174],
      CONST: [174],
      DECLARE: [174],
      DEFBOOL: [174],
      DEFBYTE: [174],
      DEFDATE: [174],
      DEFDBL: [174],
      DEFDEC: [174],
      DEFCUR: [174],
      DEFINT: [174],
      DEFLNG: [174],
      DEFOBJ: [174],
      DEFSNG: [174],
      DEFSTR: [174],
      DEFVAR: [174],
      DIM: [174],
      DO: [174],
      EACH: [174],
      ELSE: [174],
      ELSEIF: [174],
      END_ENUM: [174],
      END_FUNCTION: [174],
      END_IF: [174],
      END_PROPERTY: [174],
      END_SELECT: [174],
      END_SUB: [174],
      END_TYPE: [174],
      END_WITH: [174],
      END: [174],
      ENUM: [174],
      EQV: [174],
      ERASE: [174],
      EVENT: [174],
      EXIT_DO: [174],
      EXIT_FOR: [174],
      EXIT_FUNCTION: [174],
      EXIT_PROPERTY: [174],
      EXIT_SUB: [174],
      FALSE: [174],
      FRIEND: [174],
      FOR: [174],
      FUNCTION: [174],
      GET: [174],
      GLOBAL: [174],
      GOSUB: [174],
      GOTO: [174],
      IF: [174],
      IMPLEMENTS: [174],
      IN: [174],
      ISNOT: [174],
      IS: [174],
      LOOP: [174],
      LEN: [174],
      LET: [174],
      LIB: [174],
      LIKE: [174],
      LSET: [174],
      MACRO_CONST: [174],
      MACRO_IF: [174],
      MACRO_ELSEIF: [174],
      MACRO_ELSE: [174],
      MACRO_END_IF: [174],
      MOD: [174],
      NEXT: [174],
      NEW: [174],
      NOT: [174],
      NOTHING: [174],
      NULL: [174],
      ON_ERROR: [174],
      ON_LOCAL_ERROR: [174],
      ON: [174],
      OPTIONAL: [174],
      OPTION_BASE: [174],
      OPTION_EXPLICIT: [174],
      OPTION_COMPARE: [174],
      OPTION_PRIVATE_MODULE: [174],
      OR: [174],
      PARAMARRAY: [174],
      PRESERVE: [174],
      PRIVATE: [174],
      PROPERTY_GET: [174],
      PROPERTY_LET: [174],
      PROPERTY_SET: [174],
      PTRSAFE: [174],
      PUBLIC: [174],
      RAISEEVENT: [174],
      REDIM: [174],
      RESET: [174],
      RESUME: [174],
      RETURN: [174],
      SELECT: [174],
      SET: [174],
      STATIC: [174],
      STEP: [174],
      STOP: [174],
      SUB: [174],
      THEN: [174],
      TO: [174],
      TRUE: [174],
      TYPEOF: [174],
      UNTIL: [174],
      WEND: [174],
      WHILE: [174],
      WITH: [174],
      WITHEVENTS: [174],
      XOR: [174],
      IMP: [174],
      IDENTIFIER: [174],
    },
    type__group_def_75: {
      ALIAS: [173],
      AND: [173],
      ATTRIBUTE: [173],
      AS: [173],
      BEGIN: [173],
      BOOLEAN: [173],
      BYVAL: [173],
      BYREF: [173],
      BYTE: [173],
      CALL: [173],
      CASE: [173],
      CONST: [173],
      DECLARE: [173],
      DEFBOOL: [173],
      DEFBYTE: [173],
      DEFDATE: [173],
      DEFDBL: [173],
      DEFDEC: [173],
      DEFCUR: [173],
      DEFINT: [173],
      DEFLNG: [173],
      DEFOBJ: [173],
      DEFSNG: [173],
      DEFSTR: [173],
      DEFVAR: [173],
      DIM: [173],
      DO: [173],
      DOUBLE: [173],
      EACH: [173],
      ELSE: [173],
      ELSEIF: [173],
      END_ENUM: [173],
      END_FUNCTION: [173],
      END_IF: [173],
      END_PROPERTY: [173],
      END_SELECT: [173],
      END_SUB: [173],
      END_TYPE: [173],
      END_WITH: [173],
      END: [173],
      ENUM: [173],
      EQV: [173],
      ERASE: [173],
      EVENT: [173],
      EXIT_DO: [173],
      EXIT_FOR: [173],
      EXIT_FUNCTION: [173],
      EXIT_PROPERTY: [173],
      EXIT_SUB: [173],
      FALSE: [173],
      FRIEND: [173],
      FOR: [173],
      FUNCTION: [173],
      GET: [173],
      GLOBAL: [173],
      GOSUB: [173],
      GOTO: [173],
      IF: [173],
      IMPLEMENTS: [173],
      IN: [173],
      ISNOT: [173],
      IS: [173],
      INTEGER: [173],
      LONG: [173],
      LOOP: [173],
      LEN: [173],
      LET: [173],
      LIB: [173],
      LIKE: [173],
      LSET: [173],
      MACRO_CONST: [173],
      MACRO_IF: [173],
      MACRO_ELSEIF: [173],
      MACRO_ELSE: [173],
      MACRO_END_IF: [173],
      MOD: [173],
      NEXT: [173],
      NEW: [173],
      NOT: [173],
      NOTHING: [173],
      NULL: [173],
      ON_ERROR: [173],
      ON_LOCAL_ERROR: [173],
      ON: [173],
      OPTIONAL: [173],
      OPTION_BASE: [173],
      OPTION_EXPLICIT: [173],
      OPTION_COMPARE: [173],
      OPTION_PRIVATE_MODULE: [173],
      OR: [173],
      PARAMARRAY: [173],
      PRESERVE: [173],
      PRIVATE: [173],
      PROPERTY_GET: [173],
      PROPERTY_LET: [173],
      PROPERTY_SET: [173],
      PTRSAFE: [173],
      PUBLIC: [173],
      RAISEEVENT: [173],
      REDIM: [173],
      RESET: [173],
      RESUME: [173],
      RETURN: [173],
      SELECT: [173],
      SET: [173],
      SINGLE: [173],
      STATIC: [173],
      STEP: [173],
      STOP: [173],
      STRING: [173],
      SUB: [173],
      THEN: [173],
      TO: [173],
      TRUE: [173],
      TYPEOF: [173],
      UNTIL: [173],
      VARIANT: [173],
      WEND: [173],
      WHILE: [173],
      WITH: [173],
      WITHEVENTS: [173],
      XOR: [173],
      IMP: [173],
      IDENTIFIER: [173],
    },
    type_: {
      BOOLEAN: [175],
      BYTE: [175],
      DOUBLE: [175],
      INTEGER: [175],
      LONG: [175],
      SINGLE: [175],
      VARIANT: [175],
      STRING: [175],
      ALIAS: [175],
      AND: [175],
      ATTRIBUTE: [175],
      AS: [175],
      BEGIN: [175],
      BYVAL: [175],
      BYREF: [175],
      CALL: [175],
      CASE: [175],
      CONST: [175],
      DECLARE: [175],
      DEFBOOL: [175],
      DEFBYTE: [175],
      DEFDATE: [175],
      DEFDBL: [175],
      DEFDEC: [175],
      DEFCUR: [175],
      DEFINT: [175],
      DEFLNG: [175],
      DEFOBJ: [175],
      DEFSNG: [175],
      DEFSTR: [175],
      DEFVAR: [175],
      DIM: [175],
      DO: [175],
      EACH: [175],
      ELSE: [175],
      ELSEIF: [175],
      END_ENUM: [175],
      END_FUNCTION: [175],
      END_IF: [175],
      END_PROPERTY: [175],
      END_SELECT: [175],
      END_SUB: [175],
      END_TYPE: [175],
      END_WITH: [175],
      END: [175],
      ENUM: [175],
      EQV: [175],
      ERASE: [175],
      EVENT: [175],
      EXIT_DO: [175],
      EXIT_FOR: [175],
      EXIT_FUNCTION: [175],
      EXIT_PROPERTY: [175],
      EXIT_SUB: [175],
      FALSE: [175],
      FRIEND: [175],
      FOR: [175],
      FUNCTION: [175],
      GET: [175],
      GLOBAL: [175],
      GOSUB: [175],
      GOTO: [175],
      IF: [175],
      IMPLEMENTS: [175],
      IN: [175],
      ISNOT: [175],
      IS: [175],
      LOOP: [175],
      LEN: [175],
      LET: [175],
      LIB: [175],
      LIKE: [175],
      LSET: [175],
      MACRO_CONST: [175],
      MACRO_IF: [175],
      MACRO_ELSEIF: [175],
      MACRO_ELSE: [175],
      MACRO_END_IF: [175],
      MOD: [175],
      NEXT: [175],
      NEW: [175],
      NOT: [175],
      NOTHING: [175],
      NULL: [175],
      ON_ERROR: [175],
      ON_LOCAL_ERROR: [175],
      ON: [175],
      OPTIONAL: [175],
      OPTION_BASE: [175],
      OPTION_EXPLICIT: [175],
      OPTION_COMPARE: [175],
      OPTION_PRIVATE_MODULE: [175],
      OR: [175],
      PARAMARRAY: [175],
      PRESERVE: [175],
      PRIVATE: [175],
      PROPERTY_GET: [175],
      PROPERTY_LET: [175],
      PROPERTY_SET: [175],
      PTRSAFE: [175],
      PUBLIC: [175],
      RAISEEVENT: [175],
      REDIM: [175],
      RESET: [175],
      RESUME: [175],
      RETURN: [175],
      SELECT: [175],
      SET: [175],
      STATIC: [175],
      STEP: [175],
      STOP: [175],
      SUB: [175],
      THEN: [175],
      TO: [175],
      TRUE: [175],
      TYPEOF: [175],
      UNTIL: [175],
      WEND: [175],
      WHILE: [175],
      WITH: [175],
      WITHEVENTS: [175],
      XOR: [175],
      IMP: [175],
      IDENTIFIER: [175],
    },
    complexType_group_def_79: {
      '.': [176],
    },
    complexType_group_78: {
      '.': [177],
      '!': [179],
    },
    complexType_group_def_80: {
      '!': [178],
    },
    complexType_group_def_81: {
      '.': [180],
      '!': [180],
    },
    complexType: {
      ALIAS: [181],
      AND: [181],
      ATTRIBUTE: [181],
      AS: [181],
      BEGIN: [181],
      BOOLEAN: [181],
      BYVAL: [181],
      BYREF: [181],
      BYTE: [181],
      CALL: [181],
      CASE: [181],
      CONST: [181],
      DECLARE: [181],
      DEFBOOL: [181],
      DEFBYTE: [181],
      DEFDATE: [181],
      DEFDBL: [181],
      DEFDEC: [181],
      DEFCUR: [181],
      DEFINT: [181],
      DEFLNG: [181],
      DEFOBJ: [181],
      DEFSNG: [181],
      DEFSTR: [181],
      DEFVAR: [181],
      DIM: [181],
      DO: [181],
      DOUBLE: [181],
      EACH: [181],
      ELSE: [181],
      ELSEIF: [181],
      END_ENUM: [181],
      END_FUNCTION: [181],
      END_IF: [181],
      END_PROPERTY: [181],
      END_SELECT: [181],
      END_SUB: [181],
      END_TYPE: [181],
      END_WITH: [181],
      END: [181],
      ENUM: [181],
      EQV: [181],
      ERASE: [181],
      EVENT: [181],
      EXIT_DO: [181],
      EXIT_FOR: [181],
      EXIT_FUNCTION: [181],
      EXIT_PROPERTY: [181],
      EXIT_SUB: [181],
      FALSE: [181],
      FRIEND: [181],
      FOR: [181],
      FUNCTION: [181],
      GET: [181],
      GLOBAL: [181],
      GOSUB: [181],
      GOTO: [181],
      IF: [181],
      IMPLEMENTS: [181],
      IN: [181],
      ISNOT: [181],
      IS: [181],
      INTEGER: [181],
      LONG: [181],
      LOOP: [181],
      LEN: [181],
      LET: [181],
      LIB: [181],
      LIKE: [181],
      LSET: [181],
      MACRO_CONST: [181],
      MACRO_IF: [181],
      MACRO_ELSEIF: [181],
      MACRO_ELSE: [181],
      MACRO_END_IF: [181],
      MOD: [181],
      NEXT: [181],
      NEW: [181],
      NOT: [181],
      NOTHING: [181],
      NULL: [181],
      ON_ERROR: [181],
      ON_LOCAL_ERROR: [181],
      ON: [181],
      OPTIONAL: [181],
      OPTION_BASE: [181],
      OPTION_EXPLICIT: [181],
      OPTION_COMPARE: [181],
      OPTION_PRIVATE_MODULE: [181],
      OR: [181],
      PARAMARRAY: [181],
      PRESERVE: [181],
      PRIVATE: [181],
      PROPERTY_GET: [181],
      PROPERTY_LET: [181],
      PROPERTY_SET: [181],
      PTRSAFE: [181],
      PUBLIC: [181],
      RAISEEVENT: [181],
      REDIM: [181],
      RESET: [181],
      RESUME: [181],
      RETURN: [181],
      SELECT: [181],
      SET: [181],
      SINGLE: [181],
      STATIC: [181],
      STEP: [181],
      STOP: [181],
      STRING: [181],
      SUB: [181],
      THEN: [181],
      TO: [181],
      TRUE: [181],
      TYPEOF: [181],
      UNTIL: [181],
      VARIANT: [181],
      WEND: [181],
      WHILE: [181],
      WITH: [181],
      WITHEVENTS: [181],
      XOR: [181],
      IMP: [181],
      IDENTIFIER: [181],
    },
    baseType: {
      BOOLEAN: [182],
      BYTE: [183],
      DOUBLE: [184],
      INTEGER: [185],
      LONG: [186],
      SINGLE: [187],
      VARIANT: [188],
      STRING: [190],
    },
    baseType_group_def_83: {
      MULT: [189],
    },
    fieldLength: {
      MULT: [191, 192],
    },
    ambiguousIdentifier: {
      ALIAS: [193],
      AND: [194],
      ATTRIBUTE: [195],
      AS: [196],
      BEGIN: [197],
      BOOLEAN: [198],
      BYVAL: [199],
      BYREF: [200],
      BYTE: [201],
      CALL: [202],
      CASE: [203],
      CONST: [204],
      DECLARE: [205],
      DEFBOOL: [206],
      DEFBYTE: [207],
      DEFDATE: [208],
      DEFDBL: [209],
      DEFDEC: [210],
      DEFCUR: [211],
      DEFINT: [212],
      DEFLNG: [213],
      DEFOBJ: [214],
      DEFSNG: [215],
      DEFSTR: [216],
      DEFVAR: [217],
      DIM: [218],
      DO: [219],
      DOUBLE: [220],
      EACH: [221],
      ELSE: [222],
      ELSEIF: [223],
      END_ENUM: [224],
      END_FUNCTION: [225],
      END_IF: [226],
      END_PROPERTY: [227],
      END_SELECT: [228],
      END_SUB: [229],
      END_TYPE: [230],
      END_WITH: [231],
      END: [232],
      ENUM: [233],
      EQV: [234],
      ERASE: [235],
      EVENT: [236],
      EXIT_DO: [237],
      EXIT_FOR: [238],
      EXIT_FUNCTION: [239],
      EXIT_PROPERTY: [240],
      EXIT_SUB: [241],
      FALSE: [242],
      FRIEND: [243],
      FOR: [244],
      FUNCTION: [245],
      GET: [246],
      GLOBAL: [247],
      GOSUB: [248],
      GOTO: [249],
      IF: [250],
      IMPLEMENTS: [251],
      IN: [252],
      ISNOT: [253],
      IS: [254],
      INTEGER: [255],
      LONG: [256],
      LOOP: [257],
      LEN: [258],
      LET: [259],
      LIB: [260],
      LIKE: [261],
      LSET: [262],
      MACRO_CONST: [263],
      MACRO_IF: [264],
      MACRO_ELSEIF: [265],
      MACRO_ELSE: [266],
      MACRO_END_IF: [267],
      MOD: [268],
      NEXT: [269],
      NEW: [270],
      NOT: [271],
      NOTHING: [272],
      NULL: [273],
      ON_ERROR: [274],
      ON_LOCAL_ERROR: [275],
      ON: [276],
      OPTIONAL: [277],
      OPTION_BASE: [278],
      OPTION_EXPLICIT: [279],
      OPTION_COMPARE: [280],
      OPTION_PRIVATE_MODULE: [281],
      OR: [282],
      PARAMARRAY: [283],
      PRESERVE: [284],
      PRIVATE: [285],
      PROPERTY_GET: [286],
      PROPERTY_LET: [287],
      PROPERTY_SET: [288],
      PTRSAFE: [289],
      PUBLIC: [290],
      RAISEEVENT: [291],
      REDIM: [292],
      RESET: [293],
      RESUME: [294],
      RETURN: [295],
      SELECT: [296],
      SET: [297],
      SINGLE: [298],
      STATIC: [299],
      STEP: [300],
      STOP: [301],
      STRING: [302],
      SUB: [303],
      THEN: [304],
      TO: [305],
      TRUE: [306],
      TYPEOF: [307],
      UNTIL: [308],
      VARIANT: [309],
      WEND: [310],
      WHILE: [311],
      WITH: [312],
      WITHEVENTS: [313],
      XOR: [314],
      IMP: [315],
      IDENTIFIER: [317],
    },
    certainIdentifier: {
      IDENTIFIER: [316],
    },
    valueStmt: {
      DOUBLELITERAL: [318],
      INTEGERLITERAL: [318],
      STRINGLITERAL: [318],
      NOTHING: [318],
      NULL: [318],
      TRUE: [318],
      FALSE: [318],
      SPACE_DOT: [318],
      ALIAS: [318],
      AND: [318],
      ATTRIBUTE: [318],
      AS: [318],
      BEGIN: [318],
      BOOLEAN: [318],
      BYVAL: [318],
      BYREF: [318],
      BYTE: [318],
      CALL: [318],
      CASE: [318],
      CONST: [318],
      DECLARE: [318],
      DEFBOOL: [318],
      DEFBYTE: [318],
      DEFDATE: [318],
      DEFDBL: [318],
      DEFDEC: [318],
      DEFCUR: [318],
      DEFINT: [318],
      DEFLNG: [318],
      DEFOBJ: [318],
      DEFSNG: [318],
      DEFSTR: [318],
      DEFVAR: [318],
      DIM: [318],
      DO: [318],
      DOUBLE: [318],
      EACH: [318],
      ELSE: [318],
      ELSEIF: [318],
      END_ENUM: [318],
      END_FUNCTION: [318],
      END_IF: [318],
      END_PROPERTY: [318],
      END_SELECT: [318],
      END_SUB: [318],
      END_TYPE: [318],
      END_WITH: [318],
      END: [318],
      ENUM: [318],
      EQV: [318],
      ERASE: [318],
      EVENT: [318],
      EXIT_DO: [318],
      EXIT_FOR: [318],
      EXIT_FUNCTION: [318],
      EXIT_PROPERTY: [318],
      EXIT_SUB: [318],
      FRIEND: [318],
      FOR: [318],
      FUNCTION: [318],
      GET: [318],
      GLOBAL: [318],
      GOSUB: [318],
      GOTO: [318],
      IF: [318],
      IMPLEMENTS: [318],
      IN: [318],
      ISNOT: [318],
      IS: [318],
      INTEGER: [318],
      LONG: [318],
      LOOP: [318],
      LEN: [318],
      LET: [318],
      LIB: [318],
      LIKE: [318],
      LSET: [318],
      MACRO_CONST: [318],
      MACRO_IF: [318],
      MACRO_ELSEIF: [318],
      MACRO_ELSE: [318],
      MACRO_END_IF: [318],
      MOD: [318],
      NEXT: [318],
      NEW: [318],
      NOT: [318, 319],
      ON_ERROR: [318],
      ON_LOCAL_ERROR: [318],
      ON: [318],
      OPTIONAL: [318],
      OPTION_BASE: [318],
      OPTION_EXPLICIT: [318],
      OPTION_COMPARE: [318],
      OPTION_PRIVATE_MODULE: [318],
      OR: [318],
      PARAMARRAY: [318],
      PRESERVE: [318],
      PRIVATE: [318],
      PROPERTY_GET: [318],
      PROPERTY_LET: [318],
      PROPERTY_SET: [318],
      PTRSAFE: [318],
      PUBLIC: [318],
      RAISEEVENT: [318],
      REDIM: [318],
      RESET: [318],
      RESUME: [318],
      RETURN: [318],
      SELECT: [318],
      SET: [318],
      SINGLE: [318],
      STATIC: [318],
      STEP: [318],
      STOP: [318],
      STRING: [318],
      SUB: [318],
      THEN: [318],
      TO: [318],
      TYPEOF: [318],
      UNTIL: [318],
      VARIANT: [318],
      WEND: [318],
      WHILE: [318],
      WITH: [318],
      WITHEVENTS: [318],
      XOR: [318],
      IMP: [318],
      IDENTIFIER: [318],
      LPAREN: [318],
      MINUS: [318],
      PLUS: [318],
    },
    '(valueStmt_p_2)1_': {
      IS: [320, 347],
      ISNOT: [322, 347],
      GEQ: [323, 347],
      LEQ: [324, 347],
      GT: [325, 347],
      LT: [326, 347],
      NEQ: [327, 347],
      EQ: [328, 347],
      THEN: [347],
      ',': [347],
      NEWLINE: [347],
      COMMENT: [347],
      REMCOMMENT: [347],
      COLON: [347],
      ALIAS: [347],
      AND: [347],
      ATTRIBUTE: [347],
      AS: [347],
      BEGIN: [347],
      BOOLEAN: [347],
      BYVAL: [347],
      BYREF: [347],
      BYTE: [347],
      CALL: [347],
      CASE: [347],
      CONST: [347],
      DECLARE: [347],
      DEFBOOL: [347],
      DEFBYTE: [347],
      DEFDATE: [347],
      DEFDBL: [347],
      DEFDEC: [347],
      DEFCUR: [347],
      DEFINT: [347],
      DEFLNG: [347],
      DEFOBJ: [347],
      DEFSNG: [347],
      DEFSTR: [347],
      DEFVAR: [347],
      DIM: [347],
      DO: [347],
      DOUBLE: [347],
      EACH: [347],
      ELSE: [347],
      ELSEIF: [347],
      END_ENUM: [347],
      END_FUNCTION: [347],
      END_IF: [347],
      END_PROPERTY: [347],
      END_SELECT: [347],
      END_SUB: [347],
      END_TYPE: [347],
      END_WITH: [347],
      END: [347],
      ENUM: [347],
      EQV: [347],
      ERASE: [347],
      EVENT: [347],
      EXIT_DO: [347],
      EXIT_FOR: [347],
      EXIT_FUNCTION: [347],
      EXIT_PROPERTY: [347],
      EXIT_SUB: [347],
      FALSE: [347],
      FRIEND: [347],
      FOR: [347],
      FUNCTION: [347],
      GET: [347],
      GLOBAL: [347],
      GOSUB: [347],
      GOTO: [347],
      IF: [347],
      IMPLEMENTS: [347],
      IN: [347],
      INTEGER: [347],
      LONG: [347],
      LOOP: [347],
      LEN: [347],
      LET: [347],
      LIB: [347],
      LIKE: [347],
      LSET: [347],
      MACRO_CONST: [347],
      MACRO_IF: [347],
      MACRO_ELSEIF: [347],
      MACRO_ELSE: [347],
      MACRO_END_IF: [347],
      MOD: [347],
      NEXT: [347],
      NEW: [347],
      NOT: [347],
      NOTHING: [347],
      NULL: [347],
      ON_ERROR: [347],
      ON_LOCAL_ERROR: [347],
      ON: [347],
      OPTIONAL: [347],
      OPTION_BASE: [347],
      OPTION_EXPLICIT: [347],
      OPTION_COMPARE: [347],
      OPTION_PRIVATE_MODULE: [347],
      OR: [347],
      PARAMARRAY: [347],
      PRESERVE: [347],
      PRIVATE: [347],
      PROPERTY_GET: [347],
      PROPERTY_LET: [347],
      PROPERTY_SET: [347],
      PTRSAFE: [347],
      PUBLIC: [347],
      RAISEEVENT: [347],
      REDIM: [347],
      RESET: [347],
      RESUME: [347],
      RETURN: [347],
      SELECT: [347],
      SET: [347],
      SINGLE: [347],
      STATIC: [347],
      STEP: [347],
      STOP: [347],
      STRING: [347],
      SUB: [347],
      TO: [347],
      TRUE: [347],
      TYPEOF: [347],
      UNTIL: [347],
      VARIANT: [347],
      WEND: [347],
      WHILE: [347],
      WITH: [347],
      WITHEVENTS: [347],
      XOR: [347],
      IMP: [347],
      IDENTIFIER: [347],
      SPACE_DOT: [347],
      RPAREN: [347],
      '!': [347],
      LPAREN: [347],
      POW: [347],
      MULT: [347],
      DIV: [347],
      IDIV: [347],
      PLUS: [347],
      MINUS: [347],
      AMPERSAND: [347],
      $EOF: [347],
    },
    valueStmt_p_2: {
      DOUBLELITERAL: [321],
      INTEGERLITERAL: [321],
      STRINGLITERAL: [321],
      NOTHING: [321],
      NULL: [321],
      TRUE: [321],
      FALSE: [321],
      SPACE_DOT: [321],
      ALIAS: [321],
      AND: [321],
      ATTRIBUTE: [321],
      AS: [321],
      BEGIN: [321],
      BOOLEAN: [321],
      BYVAL: [321],
      BYREF: [321],
      BYTE: [321],
      CALL: [321],
      CASE: [321],
      CONST: [321],
      DECLARE: [321],
      DEFBOOL: [321],
      DEFBYTE: [321],
      DEFDATE: [321],
      DEFDBL: [321],
      DEFDEC: [321],
      DEFCUR: [321],
      DEFINT: [321],
      DEFLNG: [321],
      DEFOBJ: [321],
      DEFSNG: [321],
      DEFSTR: [321],
      DEFVAR: [321],
      DIM: [321],
      DO: [321],
      DOUBLE: [321],
      EACH: [321],
      ELSE: [321],
      ELSEIF: [321],
      END_ENUM: [321],
      END_FUNCTION: [321],
      END_IF: [321],
      END_PROPERTY: [321],
      END_SELECT: [321],
      END_SUB: [321],
      END_TYPE: [321],
      END_WITH: [321],
      END: [321],
      ENUM: [321],
      EQV: [321],
      ERASE: [321],
      EVENT: [321],
      EXIT_DO: [321],
      EXIT_FOR: [321],
      EXIT_FUNCTION: [321],
      EXIT_PROPERTY: [321],
      EXIT_SUB: [321],
      FRIEND: [321],
      FOR: [321],
      FUNCTION: [321],
      GET: [321],
      GLOBAL: [321],
      GOSUB: [321],
      GOTO: [321],
      IF: [321],
      IMPLEMENTS: [321],
      IN: [321],
      ISNOT: [321],
      IS: [321],
      INTEGER: [321],
      LONG: [321],
      LOOP: [321],
      LEN: [321],
      LET: [321],
      LIB: [321],
      LIKE: [321],
      LSET: [321],
      MACRO_CONST: [321],
      MACRO_IF: [321],
      MACRO_ELSEIF: [321],
      MACRO_ELSE: [321],
      MACRO_END_IF: [321],
      MOD: [321],
      NEXT: [321],
      NEW: [321],
      NOT: [321],
      ON_ERROR: [321],
      ON_LOCAL_ERROR: [321],
      ON: [321],
      OPTIONAL: [321],
      OPTION_BASE: [321],
      OPTION_EXPLICIT: [321],
      OPTION_COMPARE: [321],
      OPTION_PRIVATE_MODULE: [321],
      OR: [321],
      PARAMARRAY: [321],
      PRESERVE: [321],
      PRIVATE: [321],
      PROPERTY_GET: [321],
      PROPERTY_LET: [321],
      PROPERTY_SET: [321],
      PTRSAFE: [321],
      PUBLIC: [321],
      RAISEEVENT: [321],
      REDIM: [321],
      RESET: [321],
      RESUME: [321],
      RETURN: [321],
      SELECT: [321],
      SET: [321],
      SINGLE: [321],
      STATIC: [321],
      STEP: [321],
      STOP: [321],
      STRING: [321],
      SUB: [321],
      THEN: [321],
      TO: [321],
      TYPEOF: [321],
      UNTIL: [321],
      VARIANT: [321],
      WEND: [321],
      WHILE: [321],
      WITH: [321],
      WITHEVENTS: [321],
      XOR: [321],
      IMP: [321],
      IDENTIFIER: [321],
      LPAREN: [321],
      MINUS: [321],
      PLUS: [321],
    },
    '(valueStmt_p_3)1_': {
      XOR: [329, 348],
      OR: [331, 348],
      AND: [332, 348],
      IS: [348],
      ISNOT: [348],
      GEQ: [348],
      LEQ: [348],
      GT: [348],
      LT: [348],
      NEQ: [348],
      EQ: [348],
      THEN: [348],
      ',': [348],
      NEWLINE: [348],
      COMMENT: [348],
      REMCOMMENT: [348],
      COLON: [348],
      ALIAS: [348],
      ATTRIBUTE: [348],
      AS: [348],
      BEGIN: [348],
      BOOLEAN: [348],
      BYVAL: [348],
      BYREF: [348],
      BYTE: [348],
      CALL: [348],
      CASE: [348],
      CONST: [348],
      DECLARE: [348],
      DEFBOOL: [348],
      DEFBYTE: [348],
      DEFDATE: [348],
      DEFDBL: [348],
      DEFDEC: [348],
      DEFCUR: [348],
      DEFINT: [348],
      DEFLNG: [348],
      DEFOBJ: [348],
      DEFSNG: [348],
      DEFSTR: [348],
      DEFVAR: [348],
      DIM: [348],
      DO: [348],
      DOUBLE: [348],
      EACH: [348],
      ELSE: [348],
      ELSEIF: [348],
      END_ENUM: [348],
      END_FUNCTION: [348],
      END_IF: [348],
      END_PROPERTY: [348],
      END_SELECT: [348],
      END_SUB: [348],
      END_TYPE: [348],
      END_WITH: [348],
      END: [348],
      ENUM: [348],
      EQV: [348],
      ERASE: [348],
      EVENT: [348],
      EXIT_DO: [348],
      EXIT_FOR: [348],
      EXIT_FUNCTION: [348],
      EXIT_PROPERTY: [348],
      EXIT_SUB: [348],
      FALSE: [348],
      FRIEND: [348],
      FOR: [348],
      FUNCTION: [348],
      GET: [348],
      GLOBAL: [348],
      GOSUB: [348],
      GOTO: [348],
      IF: [348],
      IMPLEMENTS: [348],
      IN: [348],
      INTEGER: [348],
      LONG: [348],
      LOOP: [348],
      LEN: [348],
      LET: [348],
      LIB: [348],
      LIKE: [348],
      LSET: [348],
      MACRO_CONST: [348],
      MACRO_IF: [348],
      MACRO_ELSEIF: [348],
      MACRO_ELSE: [348],
      MACRO_END_IF: [348],
      MOD: [348],
      NEXT: [348],
      NEW: [348],
      NOT: [348],
      NOTHING: [348],
      NULL: [348],
      ON_ERROR: [348],
      ON_LOCAL_ERROR: [348],
      ON: [348],
      OPTIONAL: [348],
      OPTION_BASE: [348],
      OPTION_EXPLICIT: [348],
      OPTION_COMPARE: [348],
      OPTION_PRIVATE_MODULE: [348],
      PARAMARRAY: [348],
      PRESERVE: [348],
      PRIVATE: [348],
      PROPERTY_GET: [348],
      PROPERTY_LET: [348],
      PROPERTY_SET: [348],
      PTRSAFE: [348],
      PUBLIC: [348],
      RAISEEVENT: [348],
      REDIM: [348],
      RESET: [348],
      RESUME: [348],
      RETURN: [348],
      SELECT: [348],
      SET: [348],
      SINGLE: [348],
      STATIC: [348],
      STEP: [348],
      STOP: [348],
      STRING: [348],
      SUB: [348],
      TO: [348],
      TRUE: [348],
      TYPEOF: [348],
      UNTIL: [348],
      VARIANT: [348],
      WEND: [348],
      WHILE: [348],
      WITH: [348],
      WITHEVENTS: [348],
      IMP: [348],
      IDENTIFIER: [348],
      SPACE_DOT: [348],
      RPAREN: [348],
      '!': [348],
      LPAREN: [348],
      POW: [348],
      MULT: [348],
      DIV: [348],
      IDIV: [348],
      PLUS: [348],
      MINUS: [348],
      AMPERSAND: [348],
      $EOF: [348],
    },
    valueStmt_p_3: {
      DOUBLELITERAL: [330],
      INTEGERLITERAL: [330],
      STRINGLITERAL: [330],
      NOTHING: [330],
      NULL: [330],
      TRUE: [330],
      FALSE: [330],
      SPACE_DOT: [330],
      ALIAS: [330],
      AND: [330],
      ATTRIBUTE: [330],
      AS: [330],
      BEGIN: [330],
      BOOLEAN: [330],
      BYVAL: [330],
      BYREF: [330],
      BYTE: [330],
      CALL: [330],
      CASE: [330],
      CONST: [330],
      DECLARE: [330],
      DEFBOOL: [330],
      DEFBYTE: [330],
      DEFDATE: [330],
      DEFDBL: [330],
      DEFDEC: [330],
      DEFCUR: [330],
      DEFINT: [330],
      DEFLNG: [330],
      DEFOBJ: [330],
      DEFSNG: [330],
      DEFSTR: [330],
      DEFVAR: [330],
      DIM: [330],
      DO: [330],
      DOUBLE: [330],
      EACH: [330],
      ELSE: [330],
      ELSEIF: [330],
      END_ENUM: [330],
      END_FUNCTION: [330],
      END_IF: [330],
      END_PROPERTY: [330],
      END_SELECT: [330],
      END_SUB: [330],
      END_TYPE: [330],
      END_WITH: [330],
      END: [330],
      ENUM: [330],
      EQV: [330],
      ERASE: [330],
      EVENT: [330],
      EXIT_DO: [330],
      EXIT_FOR: [330],
      EXIT_FUNCTION: [330],
      EXIT_PROPERTY: [330],
      EXIT_SUB: [330],
      FRIEND: [330],
      FOR: [330],
      FUNCTION: [330],
      GET: [330],
      GLOBAL: [330],
      GOSUB: [330],
      GOTO: [330],
      IF: [330],
      IMPLEMENTS: [330],
      IN: [330],
      ISNOT: [330],
      IS: [330],
      INTEGER: [330],
      LONG: [330],
      LOOP: [330],
      LEN: [330],
      LET: [330],
      LIB: [330],
      LIKE: [330],
      LSET: [330],
      MACRO_CONST: [330],
      MACRO_IF: [330],
      MACRO_ELSEIF: [330],
      MACRO_ELSE: [330],
      MACRO_END_IF: [330],
      MOD: [330],
      NEXT: [330],
      NEW: [330],
      NOT: [330],
      ON_ERROR: [330],
      ON_LOCAL_ERROR: [330],
      ON: [330],
      OPTIONAL: [330],
      OPTION_BASE: [330],
      OPTION_EXPLICIT: [330],
      OPTION_COMPARE: [330],
      OPTION_PRIVATE_MODULE: [330],
      OR: [330],
      PARAMARRAY: [330],
      PRESERVE: [330],
      PRIVATE: [330],
      PROPERTY_GET: [330],
      PROPERTY_LET: [330],
      PROPERTY_SET: [330],
      PTRSAFE: [330],
      PUBLIC: [330],
      RAISEEVENT: [330],
      REDIM: [330],
      RESET: [330],
      RESUME: [330],
      RETURN: [330],
      SELECT: [330],
      SET: [330],
      SINGLE: [330],
      STATIC: [330],
      STEP: [330],
      STOP: [330],
      STRING: [330],
      SUB: [330],
      THEN: [330],
      TO: [330],
      TYPEOF: [330],
      UNTIL: [330],
      VARIANT: [330],
      WEND: [330],
      WHILE: [330],
      WITH: [330],
      WITHEVENTS: [330],
      XOR: [330],
      IMP: [330],
      IDENTIFIER: [330],
      LPAREN: [330],
      MINUS: [330],
      PLUS: [330],
    },
    '(valueStmt_p_4)1_': {
      PLUS: [333, 349],
      MINUS: [335, 349],
      AMPERSAND: [336, 349],
      XOR: [349],
      OR: [349],
      AND: [349],
      IS: [349],
      ISNOT: [349],
      GEQ: [349],
      LEQ: [349],
      GT: [349],
      LT: [349],
      NEQ: [349],
      EQ: [349],
      THEN: [349],
      ',': [349],
      NEWLINE: [349],
      COMMENT: [349],
      REMCOMMENT: [349],
      COLON: [349],
      ALIAS: [349],
      ATTRIBUTE: [349],
      AS: [349],
      BEGIN: [349],
      BOOLEAN: [349],
      BYVAL: [349],
      BYREF: [349],
      BYTE: [349],
      CALL: [349],
      CASE: [349],
      CONST: [349],
      DECLARE: [349],
      DEFBOOL: [349],
      DEFBYTE: [349],
      DEFDATE: [349],
      DEFDBL: [349],
      DEFDEC: [349],
      DEFCUR: [349],
      DEFINT: [349],
      DEFLNG: [349],
      DEFOBJ: [349],
      DEFSNG: [349],
      DEFSTR: [349],
      DEFVAR: [349],
      DIM: [349],
      DO: [349],
      DOUBLE: [349],
      EACH: [349],
      ELSE: [349],
      ELSEIF: [349],
      END_ENUM: [349],
      END_FUNCTION: [349],
      END_IF: [349],
      END_PROPERTY: [349],
      END_SELECT: [349],
      END_SUB: [349],
      END_TYPE: [349],
      END_WITH: [349],
      END: [349],
      ENUM: [349],
      EQV: [349],
      ERASE: [349],
      EVENT: [349],
      EXIT_DO: [349],
      EXIT_FOR: [349],
      EXIT_FUNCTION: [349],
      EXIT_PROPERTY: [349],
      EXIT_SUB: [349],
      FALSE: [349],
      FRIEND: [349],
      FOR: [349],
      FUNCTION: [349],
      GET: [349],
      GLOBAL: [349],
      GOSUB: [349],
      GOTO: [349],
      IF: [349],
      IMPLEMENTS: [349],
      IN: [349],
      INTEGER: [349],
      LONG: [349],
      LOOP: [349],
      LEN: [349],
      LET: [349],
      LIB: [349],
      LIKE: [349],
      LSET: [349],
      MACRO_CONST: [349],
      MACRO_IF: [349],
      MACRO_ELSEIF: [349],
      MACRO_ELSE: [349],
      MACRO_END_IF: [349],
      MOD: [349],
      NEXT: [349],
      NEW: [349],
      NOT: [349],
      NOTHING: [349],
      NULL: [349],
      ON_ERROR: [349],
      ON_LOCAL_ERROR: [349],
      ON: [349],
      OPTIONAL: [349],
      OPTION_BASE: [349],
      OPTION_EXPLICIT: [349],
      OPTION_COMPARE: [349],
      OPTION_PRIVATE_MODULE: [349],
      PARAMARRAY: [349],
      PRESERVE: [349],
      PRIVATE: [349],
      PROPERTY_GET: [349],
      PROPERTY_LET: [349],
      PROPERTY_SET: [349],
      PTRSAFE: [349],
      PUBLIC: [349],
      RAISEEVENT: [349],
      REDIM: [349],
      RESET: [349],
      RESUME: [349],
      RETURN: [349],
      SELECT: [349],
      SET: [349],
      SINGLE: [349],
      STATIC: [349],
      STEP: [349],
      STOP: [349],
      STRING: [349],
      SUB: [349],
      TO: [349],
      TRUE: [349],
      TYPEOF: [349],
      UNTIL: [349],
      VARIANT: [349],
      WEND: [349],
      WHILE: [349],
      WITH: [349],
      WITHEVENTS: [349],
      IMP: [349],
      IDENTIFIER: [349],
      SPACE_DOT: [349],
      RPAREN: [349],
      '!': [349],
      LPAREN: [349],
      POW: [349],
      MULT: [349],
      DIV: [349],
      IDIV: [349],
      $EOF: [349],
    },
    valueStmt_p_4: {
      DOUBLELITERAL: [334],
      INTEGERLITERAL: [334],
      STRINGLITERAL: [334],
      NOTHING: [334],
      NULL: [334],
      TRUE: [334],
      FALSE: [334],
      SPACE_DOT: [334],
      ALIAS: [334],
      AND: [334],
      ATTRIBUTE: [334],
      AS: [334],
      BEGIN: [334],
      BOOLEAN: [334],
      BYVAL: [334],
      BYREF: [334],
      BYTE: [334],
      CALL: [334],
      CASE: [334],
      CONST: [334],
      DECLARE: [334],
      DEFBOOL: [334],
      DEFBYTE: [334],
      DEFDATE: [334],
      DEFDBL: [334],
      DEFDEC: [334],
      DEFCUR: [334],
      DEFINT: [334],
      DEFLNG: [334],
      DEFOBJ: [334],
      DEFSNG: [334],
      DEFSTR: [334],
      DEFVAR: [334],
      DIM: [334],
      DO: [334],
      DOUBLE: [334],
      EACH: [334],
      ELSE: [334],
      ELSEIF: [334],
      END_ENUM: [334],
      END_FUNCTION: [334],
      END_IF: [334],
      END_PROPERTY: [334],
      END_SELECT: [334],
      END_SUB: [334],
      END_TYPE: [334],
      END_WITH: [334],
      END: [334],
      ENUM: [334],
      EQV: [334],
      ERASE: [334],
      EVENT: [334],
      EXIT_DO: [334],
      EXIT_FOR: [334],
      EXIT_FUNCTION: [334],
      EXIT_PROPERTY: [334],
      EXIT_SUB: [334],
      FRIEND: [334],
      FOR: [334],
      FUNCTION: [334],
      GET: [334],
      GLOBAL: [334],
      GOSUB: [334],
      GOTO: [334],
      IF: [334],
      IMPLEMENTS: [334],
      IN: [334],
      ISNOT: [334],
      IS: [334],
      INTEGER: [334],
      LONG: [334],
      LOOP: [334],
      LEN: [334],
      LET: [334],
      LIB: [334],
      LIKE: [334],
      LSET: [334],
      MACRO_CONST: [334],
      MACRO_IF: [334],
      MACRO_ELSEIF: [334],
      MACRO_ELSE: [334],
      MACRO_END_IF: [334],
      MOD: [334],
      NEXT: [334],
      NEW: [334],
      NOT: [334],
      ON_ERROR: [334],
      ON_LOCAL_ERROR: [334],
      ON: [334],
      OPTIONAL: [334],
      OPTION_BASE: [334],
      OPTION_EXPLICIT: [334],
      OPTION_COMPARE: [334],
      OPTION_PRIVATE_MODULE: [334],
      OR: [334],
      PARAMARRAY: [334],
      PRESERVE: [334],
      PRIVATE: [334],
      PROPERTY_GET: [334],
      PROPERTY_LET: [334],
      PROPERTY_SET: [334],
      PTRSAFE: [334],
      PUBLIC: [334],
      RAISEEVENT: [334],
      REDIM: [334],
      RESET: [334],
      RESUME: [334],
      RETURN: [334],
      SELECT: [334],
      SET: [334],
      SINGLE: [334],
      STATIC: [334],
      STEP: [334],
      STOP: [334],
      STRING: [334],
      SUB: [334],
      THEN: [334],
      TO: [334],
      TYPEOF: [334],
      UNTIL: [334],
      VARIANT: [334],
      WEND: [334],
      WHILE: [334],
      WITH: [334],
      WITHEVENTS: [334],
      XOR: [334],
      IMP: [334],
      IDENTIFIER: [334],
      LPAREN: [334],
      MINUS: [334],
      PLUS: [334],
    },
    '(valueStmt_p_5)1_': {
      MULT: [337, 350],
      DIV: [339, 350],
      IDIV: [340, 350],
      MOD: [341, 350],
      PLUS: [350],
      MINUS: [350],
      AMPERSAND: [350],
      XOR: [350],
      OR: [350],
      AND: [350],
      IS: [350],
      ISNOT: [350],
      GEQ: [350],
      LEQ: [350],
      GT: [350],
      LT: [350],
      NEQ: [350],
      EQ: [350],
      THEN: [350],
      ',': [350],
      NEWLINE: [350],
      COMMENT: [350],
      REMCOMMENT: [350],
      COLON: [350],
      ALIAS: [350],
      ATTRIBUTE: [350],
      AS: [350],
      BEGIN: [350],
      BOOLEAN: [350],
      BYVAL: [350],
      BYREF: [350],
      BYTE: [350],
      CALL: [350],
      CASE: [350],
      CONST: [350],
      DECLARE: [350],
      DEFBOOL: [350],
      DEFBYTE: [350],
      DEFDATE: [350],
      DEFDBL: [350],
      DEFDEC: [350],
      DEFCUR: [350],
      DEFINT: [350],
      DEFLNG: [350],
      DEFOBJ: [350],
      DEFSNG: [350],
      DEFSTR: [350],
      DEFVAR: [350],
      DIM: [350],
      DO: [350],
      DOUBLE: [350],
      EACH: [350],
      ELSE: [350],
      ELSEIF: [350],
      END_ENUM: [350],
      END_FUNCTION: [350],
      END_IF: [350],
      END_PROPERTY: [350],
      END_SELECT: [350],
      END_SUB: [350],
      END_TYPE: [350],
      END_WITH: [350],
      END: [350],
      ENUM: [350],
      EQV: [350],
      ERASE: [350],
      EVENT: [350],
      EXIT_DO: [350],
      EXIT_FOR: [350],
      EXIT_FUNCTION: [350],
      EXIT_PROPERTY: [350],
      EXIT_SUB: [350],
      FALSE: [350],
      FRIEND: [350],
      FOR: [350],
      FUNCTION: [350],
      GET: [350],
      GLOBAL: [350],
      GOSUB: [350],
      GOTO: [350],
      IF: [350],
      IMPLEMENTS: [350],
      IN: [350],
      INTEGER: [350],
      LONG: [350],
      LOOP: [350],
      LEN: [350],
      LET: [350],
      LIB: [350],
      LIKE: [350],
      LSET: [350],
      MACRO_CONST: [350],
      MACRO_IF: [350],
      MACRO_ELSEIF: [350],
      MACRO_ELSE: [350],
      MACRO_END_IF: [350],
      NEXT: [350],
      NEW: [350],
      NOT: [350],
      NOTHING: [350],
      NULL: [350],
      ON_ERROR: [350],
      ON_LOCAL_ERROR: [350],
      ON: [350],
      OPTIONAL: [350],
      OPTION_BASE: [350],
      OPTION_EXPLICIT: [350],
      OPTION_COMPARE: [350],
      OPTION_PRIVATE_MODULE: [350],
      PARAMARRAY: [350],
      PRESERVE: [350],
      PRIVATE: [350],
      PROPERTY_GET: [350],
      PROPERTY_LET: [350],
      PROPERTY_SET: [350],
      PTRSAFE: [350],
      PUBLIC: [350],
      RAISEEVENT: [350],
      REDIM: [350],
      RESET: [350],
      RESUME: [350],
      RETURN: [350],
      SELECT: [350],
      SET: [350],
      SINGLE: [350],
      STATIC: [350],
      STEP: [350],
      STOP: [350],
      STRING: [350],
      SUB: [350],
      TO: [350],
      TRUE: [350],
      TYPEOF: [350],
      UNTIL: [350],
      VARIANT: [350],
      WEND: [350],
      WHILE: [350],
      WITH: [350],
      WITHEVENTS: [350],
      IMP: [350],
      IDENTIFIER: [350],
      SPACE_DOT: [350],
      RPAREN: [350],
      '!': [350],
      LPAREN: [350],
      POW: [350],
      $EOF: [350],
    },
    valueStmt_p_5: {
      DOUBLELITERAL: [338],
      INTEGERLITERAL: [338],
      STRINGLITERAL: [338],
      NOTHING: [338],
      NULL: [338],
      TRUE: [338],
      FALSE: [338],
      SPACE_DOT: [338],
      ALIAS: [338],
      AND: [338],
      ATTRIBUTE: [338],
      AS: [338],
      BEGIN: [338],
      BOOLEAN: [338],
      BYVAL: [338],
      BYREF: [338],
      BYTE: [338],
      CALL: [338],
      CASE: [338],
      CONST: [338],
      DECLARE: [338],
      DEFBOOL: [338],
      DEFBYTE: [338],
      DEFDATE: [338],
      DEFDBL: [338],
      DEFDEC: [338],
      DEFCUR: [338],
      DEFINT: [338],
      DEFLNG: [338],
      DEFOBJ: [338],
      DEFSNG: [338],
      DEFSTR: [338],
      DEFVAR: [338],
      DIM: [338],
      DO: [338],
      DOUBLE: [338],
      EACH: [338],
      ELSE: [338],
      ELSEIF: [338],
      END_ENUM: [338],
      END_FUNCTION: [338],
      END_IF: [338],
      END_PROPERTY: [338],
      END_SELECT: [338],
      END_SUB: [338],
      END_TYPE: [338],
      END_WITH: [338],
      END: [338],
      ENUM: [338],
      EQV: [338],
      ERASE: [338],
      EVENT: [338],
      EXIT_DO: [338],
      EXIT_FOR: [338],
      EXIT_FUNCTION: [338],
      EXIT_PROPERTY: [338],
      EXIT_SUB: [338],
      FRIEND: [338],
      FOR: [338],
      FUNCTION: [338],
      GET: [338],
      GLOBAL: [338],
      GOSUB: [338],
      GOTO: [338],
      IF: [338],
      IMPLEMENTS: [338],
      IN: [338],
      ISNOT: [338],
      IS: [338],
      INTEGER: [338],
      LONG: [338],
      LOOP: [338],
      LEN: [338],
      LET: [338],
      LIB: [338],
      LIKE: [338],
      LSET: [338],
      MACRO_CONST: [338],
      MACRO_IF: [338],
      MACRO_ELSEIF: [338],
      MACRO_ELSE: [338],
      MACRO_END_IF: [338],
      MOD: [338],
      NEXT: [338],
      NEW: [338],
      NOT: [338],
      ON_ERROR: [338],
      ON_LOCAL_ERROR: [338],
      ON: [338],
      OPTIONAL: [338],
      OPTION_BASE: [338],
      OPTION_EXPLICIT: [338],
      OPTION_COMPARE: [338],
      OPTION_PRIVATE_MODULE: [338],
      OR: [338],
      PARAMARRAY: [338],
      PRESERVE: [338],
      PRIVATE: [338],
      PROPERTY_GET: [338],
      PROPERTY_LET: [338],
      PROPERTY_SET: [338],
      PTRSAFE: [338],
      PUBLIC: [338],
      RAISEEVENT: [338],
      REDIM: [338],
      RESET: [338],
      RESUME: [338],
      RETURN: [338],
      SELECT: [338],
      SET: [338],
      SINGLE: [338],
      STATIC: [338],
      STEP: [338],
      STOP: [338],
      STRING: [338],
      SUB: [338],
      THEN: [338],
      TO: [338],
      TYPEOF: [338],
      UNTIL: [338],
      VARIANT: [338],
      WEND: [338],
      WHILE: [338],
      WITH: [338],
      WITHEVENTS: [338],
      XOR: [338],
      IMP: [338],
      IDENTIFIER: [338],
      LPAREN: [338],
      MINUS: [338],
      PLUS: [338],
    },
    '(valueStmt_p_6)1_': {
      POW: [342, 351],
      MULT: [351],
      DIV: [351],
      IDIV: [351],
      MOD: [351],
      PLUS: [351],
      MINUS: [351],
      AMPERSAND: [351],
      XOR: [351],
      OR: [351],
      AND: [351],
      IS: [351],
      ISNOT: [351],
      GEQ: [351],
      LEQ: [351],
      GT: [351],
      LT: [351],
      NEQ: [351],
      EQ: [351],
      THEN: [351],
      ',': [351],
      NEWLINE: [351],
      COMMENT: [351],
      REMCOMMENT: [351],
      COLON: [351],
      ALIAS: [351],
      ATTRIBUTE: [351],
      AS: [351],
      BEGIN: [351],
      BOOLEAN: [351],
      BYVAL: [351],
      BYREF: [351],
      BYTE: [351],
      CALL: [351],
      CASE: [351],
      CONST: [351],
      DECLARE: [351],
      DEFBOOL: [351],
      DEFBYTE: [351],
      DEFDATE: [351],
      DEFDBL: [351],
      DEFDEC: [351],
      DEFCUR: [351],
      DEFINT: [351],
      DEFLNG: [351],
      DEFOBJ: [351],
      DEFSNG: [351],
      DEFSTR: [351],
      DEFVAR: [351],
      DIM: [351],
      DO: [351],
      DOUBLE: [351],
      EACH: [351],
      ELSE: [351],
      ELSEIF: [351],
      END_ENUM: [351],
      END_FUNCTION: [351],
      END_IF: [351],
      END_PROPERTY: [351],
      END_SELECT: [351],
      END_SUB: [351],
      END_TYPE: [351],
      END_WITH: [351],
      END: [351],
      ENUM: [351],
      EQV: [351],
      ERASE: [351],
      EVENT: [351],
      EXIT_DO: [351],
      EXIT_FOR: [351],
      EXIT_FUNCTION: [351],
      EXIT_PROPERTY: [351],
      EXIT_SUB: [351],
      FALSE: [351],
      FRIEND: [351],
      FOR: [351],
      FUNCTION: [351],
      GET: [351],
      GLOBAL: [351],
      GOSUB: [351],
      GOTO: [351],
      IF: [351],
      IMPLEMENTS: [351],
      IN: [351],
      INTEGER: [351],
      LONG: [351],
      LOOP: [351],
      LEN: [351],
      LET: [351],
      LIB: [351],
      LIKE: [351],
      LSET: [351],
      MACRO_CONST: [351],
      MACRO_IF: [351],
      MACRO_ELSEIF: [351],
      MACRO_ELSE: [351],
      MACRO_END_IF: [351],
      NEXT: [351],
      NEW: [351],
      NOT: [351],
      NOTHING: [351],
      NULL: [351],
      ON_ERROR: [351],
      ON_LOCAL_ERROR: [351],
      ON: [351],
      OPTIONAL: [351],
      OPTION_BASE: [351],
      OPTION_EXPLICIT: [351],
      OPTION_COMPARE: [351],
      OPTION_PRIVATE_MODULE: [351],
      PARAMARRAY: [351],
      PRESERVE: [351],
      PRIVATE: [351],
      PROPERTY_GET: [351],
      PROPERTY_LET: [351],
      PROPERTY_SET: [351],
      PTRSAFE: [351],
      PUBLIC: [351],
      RAISEEVENT: [351],
      REDIM: [351],
      RESET: [351],
      RESUME: [351],
      RETURN: [351],
      SELECT: [351],
      SET: [351],
      SINGLE: [351],
      STATIC: [351],
      STEP: [351],
      STOP: [351],
      STRING: [351],
      SUB: [351],
      TO: [351],
      TRUE: [351],
      TYPEOF: [351],
      UNTIL: [351],
      VARIANT: [351],
      WEND: [351],
      WHILE: [351],
      WITH: [351],
      WITHEVENTS: [351],
      IMP: [351],
      IDENTIFIER: [351],
      SPACE_DOT: [351],
      RPAREN: [351],
      '!': [351],
      LPAREN: [351],
      $EOF: [351],
    },
    valueStmt_p_6: {
      DOUBLELITERAL: [343],
      INTEGERLITERAL: [343],
      STRINGLITERAL: [343],
      NOTHING: [343],
      NULL: [343],
      TRUE: [343],
      FALSE: [343],
      SPACE_DOT: [343],
      ALIAS: [343],
      AND: [343],
      ATTRIBUTE: [343],
      AS: [343],
      BEGIN: [343],
      BOOLEAN: [343],
      BYVAL: [343],
      BYREF: [343],
      BYTE: [343],
      CALL: [343],
      CASE: [343],
      CONST: [343],
      DECLARE: [343],
      DEFBOOL: [343],
      DEFBYTE: [343],
      DEFDATE: [343],
      DEFDBL: [343],
      DEFDEC: [343],
      DEFCUR: [343],
      DEFINT: [343],
      DEFLNG: [343],
      DEFOBJ: [343],
      DEFSNG: [343],
      DEFSTR: [343],
      DEFVAR: [343],
      DIM: [343],
      DO: [343],
      DOUBLE: [343],
      EACH: [343],
      ELSE: [343],
      ELSEIF: [343],
      END_ENUM: [343],
      END_FUNCTION: [343],
      END_IF: [343],
      END_PROPERTY: [343],
      END_SELECT: [343],
      END_SUB: [343],
      END_TYPE: [343],
      END_WITH: [343],
      END: [343],
      ENUM: [343],
      EQV: [343],
      ERASE: [343],
      EVENT: [343],
      EXIT_DO: [343],
      EXIT_FOR: [343],
      EXIT_FUNCTION: [343],
      EXIT_PROPERTY: [343],
      EXIT_SUB: [343],
      FRIEND: [343],
      FOR: [343],
      FUNCTION: [343],
      GET: [343],
      GLOBAL: [343],
      GOSUB: [343],
      GOTO: [343],
      IF: [343],
      IMPLEMENTS: [343],
      IN: [343],
      ISNOT: [343],
      IS: [343],
      INTEGER: [343],
      LONG: [343],
      LOOP: [343],
      LEN: [343],
      LET: [343],
      LIB: [343],
      LIKE: [343],
      LSET: [343],
      MACRO_CONST: [343],
      MACRO_IF: [343],
      MACRO_ELSEIF: [343],
      MACRO_ELSE: [343],
      MACRO_END_IF: [343],
      MOD: [343],
      NEXT: [343],
      NEW: [343],
      NOT: [343],
      ON_ERROR: [343],
      ON_LOCAL_ERROR: [343],
      ON: [343],
      OPTIONAL: [343],
      OPTION_BASE: [343],
      OPTION_EXPLICIT: [343],
      OPTION_COMPARE: [343],
      OPTION_PRIVATE_MODULE: [343],
      OR: [343],
      PARAMARRAY: [343],
      PRESERVE: [343],
      PRIVATE: [343],
      PROPERTY_GET: [343],
      PROPERTY_LET: [343],
      PROPERTY_SET: [343],
      PTRSAFE: [343],
      PUBLIC: [343],
      RAISEEVENT: [343],
      REDIM: [343],
      RESET: [343],
      RESUME: [343],
      RETURN: [343],
      SELECT: [343],
      SET: [343],
      SINGLE: [343],
      STATIC: [343],
      STEP: [343],
      STOP: [343],
      STRING: [343],
      SUB: [343],
      THEN: [343],
      TO: [343],
      TYPEOF: [343],
      UNTIL: [343],
      VARIANT: [343],
      WEND: [343],
      WHILE: [343],
      WITH: [343],
      WITHEVENTS: [343],
      XOR: [343],
      IMP: [343],
      IDENTIFIER: [343],
      LPAREN: [343],
      MINUS: [343],
      PLUS: [343],
    },
    valueStmt_p_7: {
      DOUBLELITERAL: [344],
      INTEGERLITERAL: [344],
      STRINGLITERAL: [344],
      NOTHING: [344],
      NULL: [344],
      TRUE: [344],
      FALSE: [344],
      SPACE_DOT: [344],
      ALIAS: [344],
      AND: [344],
      ATTRIBUTE: [344],
      AS: [344],
      BEGIN: [344],
      BOOLEAN: [344],
      BYVAL: [344],
      BYREF: [344],
      BYTE: [344],
      CALL: [344],
      CASE: [344],
      CONST: [344],
      DECLARE: [344],
      DEFBOOL: [344],
      DEFBYTE: [344],
      DEFDATE: [344],
      DEFDBL: [344],
      DEFDEC: [344],
      DEFCUR: [344],
      DEFINT: [344],
      DEFLNG: [344],
      DEFOBJ: [344],
      DEFSNG: [344],
      DEFSTR: [344],
      DEFVAR: [344],
      DIM: [344],
      DO: [344],
      DOUBLE: [344],
      EACH: [344],
      ELSE: [344],
      ELSEIF: [344],
      END_ENUM: [344],
      END_FUNCTION: [344],
      END_IF: [344],
      END_PROPERTY: [344],
      END_SELECT: [344],
      END_SUB: [344],
      END_TYPE: [344],
      END_WITH: [344],
      END: [344],
      ENUM: [344],
      EQV: [344],
      ERASE: [344],
      EVENT: [344],
      EXIT_DO: [344],
      EXIT_FOR: [344],
      EXIT_FUNCTION: [344],
      EXIT_PROPERTY: [344],
      EXIT_SUB: [344],
      FRIEND: [344],
      FOR: [344],
      FUNCTION: [344],
      GET: [344],
      GLOBAL: [344],
      GOSUB: [344],
      GOTO: [344],
      IF: [344],
      IMPLEMENTS: [344],
      IN: [344],
      ISNOT: [344],
      IS: [344],
      INTEGER: [344],
      LONG: [344],
      LOOP: [344],
      LEN: [344],
      LET: [344],
      LIB: [344],
      LIKE: [344],
      LSET: [344],
      MACRO_CONST: [344],
      MACRO_IF: [344],
      MACRO_ELSEIF: [344],
      MACRO_ELSE: [344],
      MACRO_END_IF: [344],
      MOD: [344],
      NEXT: [344],
      NEW: [344],
      NOT: [344],
      ON_ERROR: [344],
      ON_LOCAL_ERROR: [344],
      ON: [344],
      OPTIONAL: [344],
      OPTION_BASE: [344],
      OPTION_EXPLICIT: [344],
      OPTION_COMPARE: [344],
      OPTION_PRIVATE_MODULE: [344],
      OR: [344],
      PARAMARRAY: [344],
      PRESERVE: [344],
      PRIVATE: [344],
      PROPERTY_GET: [344],
      PROPERTY_LET: [344],
      PROPERTY_SET: [344],
      PTRSAFE: [344],
      PUBLIC: [344],
      RAISEEVENT: [344],
      REDIM: [344],
      RESET: [344],
      RESUME: [344],
      RETURN: [344],
      SELECT: [344],
      SET: [344],
      SINGLE: [344],
      STATIC: [344],
      STEP: [344],
      STOP: [344],
      STRING: [344],
      SUB: [344],
      THEN: [344],
      TO: [344],
      TYPEOF: [344],
      UNTIL: [344],
      VARIANT: [344],
      WEND: [344],
      WHILE: [344],
      WITH: [344],
      WITHEVENTS: [344],
      XOR: [344],
      IMP: [344],
      IDENTIFIER: [344],
      LPAREN: [344],
      MINUS: [345],
      PLUS: [346],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }

        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (
        ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX ||
        ruleIndexes.length === 0
      ) {
        // skip this symbol first
        return returnNext();
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 5,
    15: 6,
    16: 6,
    17: 6,
    18: 6,
    19: 7,
    20: 7,
    21: 8,
    22: 8,
    23: 8,
    24: 8,
    25: 8,
    26: 9,
    27: 9,
    28: 9,
    29: 9,
    30: 10,
    31: 11,
    32: 12,
    33: 13,
    34: 14,
    35: 15,
    36: 15,
    37: 16,
    38: 16,
    39: 16,
    40: 16,
    41: 16,
    42: 16,
    43: 16,
    44: 16,
    45: 16,
    46: 16,
    47: 16,
    48: 16,
    49: 16,
    50: 17,
    51: 17,
    52: 18,
    53: 19,
    54: 20,
    55: 21,
    56: 22,
    57: 22,
    58: 22,
    59: 22,
    60: 22,
    61: 23,
    62: 24,
    63: 25,
    64: 25,
    65: 26,
    66: 26,
    67: 27,
    68: 28,
    69: 28,
    70: 28,
    71: 28,
    72: 28,
    73: 28,
    74: 29,
    75: 29,
    76: 29,
    77: 29,
    78: 29,
    79: 29,
    80: 29,
    81: 30,
    82: 31,
    83: 31,
    84: 32,
    85: 32,
    86: 32,
    87: 32,
    88: 32,
    89: 32,
    90: 32,
    91: 33,
    92: 34,
    93: 34,
    94: 35,
    95: 36,
    96: 37,
    97: 37,
    98: 38,
    99: 39,
    100: 39,
    101: 39,
    102: 39,
    103: 39,
    104: 39,
    105: 39,
    106: 40,
    107: 40,
    108: 40,
    109: 40,
    110: 40,
    111: 41,
    112: 41,
    113: 42,
    114: 42,
    115: 43,
    116: 44,
    117: 44,
    118: 45,
    119: 45,
    120: 46,
    121: 47,
    122: 47,
    123: 47,
    124: 48,
    125: 48,
    126: 48,
    127: 48,
    128: 49,
    129: 72,
    130: 72,
    131: 72,
    132: 73,
    133: 73,
    134: 73,
    135: 73,
    136: 73,
    137: 73,
    138: 73,
    139: 73,
    140: 73,
    141: 74,
    142: 74,
    143: 74,
    144: 75,
    145: 75,
    146: 75,
    147: 76,
    148: 77,
    149: 78,
    150: 79,
    151: 79,
    152: 79,
    153: 79,
    154: 79,
    155: 79,
    156: 79,
    157: 80,
    158: 80,
    159: 80,
    160: 80,
    161: 80,
    162: 80,
    163: 81,
    164: 81,
    165: 81,
    166: 81,
    167: 81,
    168: 81,
    169: 82,
    170: 83,
    171: 84,
    172: 84,
    173: 84,
    174: 84,
    175: 84,
    176: 85,
    177: 85,
    178: 85,
    179: 85,
    180: 85,
    181: 85,
    182: 86,
    183: 86,
    184: 86,
    185: 86,
    186: 86,
    187: 86,
    188: 86,
    189: 86,
    190: 86,
    191: 87,
    192: 87,
    193: 88,
    194: 89,
    195: 90,
    196: 91,
    197: 92,
    198: 93,
    199: 94,
    200: 95,
    201: 96,
    202: 97,
    203: 98,
    204: 99,
    205: 100,
    206: 101,
    207: 102,
    208: 103,
    209: 104,
    210: 105,
    211: 106,
    212: 107,
    213: 108,
    214: 109,
    215: 110,
    216: 111,
    217: 112,
    218: 113,
    219: 114,
    220: 115,
    221: 116,
    222: 117,
    223: 118,
    224: 119,
    225: 120,
    226: 121,
    227: 122,
    228: 123,
    229: 124,
    230: 125,
    231: 126,
    232: 127,
    233: 128,
    234: 129,
    235: 130,
    236: 131,
    237: 132,
    238: 133,
    239: 134,
    240: 135,
    241: 136,
    242: 137,
    243: 138,
    244: 139,
    245: 140,
    246: 141,
    247: 142,
    248: 143,
    249: 144,
    250: 145,
    251: 146,
    252: 147,
    253: 148,
    254: 149,
    255: 150,
    256: 151,
    257: 152,
    258: 153,
    259: 154,
    260: 155,
    261: 156,
    262: 157,
    263: 158,
    264: 159,
    265: 160,
    266: 161,
    267: 162,
    268: 163,
    269: 164,
    270: 165,
    271: 166,
    272: 167,
    273: 168,
    274: 169,
    275: 170,
    276: 171,
    277: 172,
    278: 173,
    279: 174,
    280: 175,
    281: 176,
    282: 177,
    283: 178,
    284: 179,
    285: 180,
    286: 181,
    287: 182,
    288: 183,
    289: 184,
    290: 185,
    291: 186,
    292: 187,
    293: 188,
    294: 189,
    295: 190,
    296: 191,
    297: 192,
    298: 193,
    299: 194,
    300: 195,
    301: 196,
    302: 197,
    303: 198,
    304: 199,
    305: 200,
    306: 201,
    307: 202,
    308: 203,
    309: 204,
    310: 205,
    311: 206,
    312: 207,
    313: 208,
    314: 209,
    315: 210,
    316: 211,
    317: 212,
    318: 71,
    319: 71,
    320: 50,
    321: 50,
    322: 51,
    323: 52,
    324: 53,
    325: 54,
    326: 55,
    327: 56,
    328: 57,
    329: 58,
    330: 58,
    331: 59,
    332: 60,
    333: 61,
    334: 61,
    335: 62,
    336: 63,
    337: 64,
    338: 64,
    339: 65,
    340: 66,
    341: 67,
    342: 68,
    343: 68,
    344: 69,
    345: 69,
    346: 70,
  };
  return parser;
})();

export default vbaParser;
