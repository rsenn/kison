/*
Generated By kison v0.5.37

Generate time: Fri Dec 10 2021 18:07:16 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var BaseAstNode = class BaseAstNode {
    start = 0;
    end = 0;
    firstLine = 0;
    lastLine = 0;
    firstColumn = 0;
    lastColumn = 0;

    toJSON() {
      const ret = {};

      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          const v = this[k];

          if (v !== undefined) {
            ret[k] = v;
          }
        }
      }

      return ret;
    }
  };
  var AstSymbolNode = class AstSymbolNode extends BaseAstNode {
    symbol = '';
    type = 'symbol';
    children = [];
    ruleIndex = -1;
    internalRuleIndex = -1;

    constructor(params) {
      super();
      Object.assign(this, params);

      if (params.children) {
        this.setChildren(params.children);
      }

      if (params.internalRuleIndex !== undefined) {
        this.ruleIndex = productionRuleIndexMap[this.internalRuleIndex];
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children = this.children || [];
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    done() {
      if (this.isWrap && this.children.length === 1) {
        const c = this.children[0];

        if (c.type === 'symbol' && c.symbol === this.symbol) {
          this.label = c.label;
          this.setChildren(c.children);
          return false;
        }
      }

      this.setChildren(this.children);
      return true;
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }

      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;

      for (const c of cs) {
        c.parent = this;
      }
    }
  };
  var AstTokenNode = class AstTokenNode extends BaseAstNode {
    token = '';
    t = '';
    type = 'token';
    text = '';

    constructor(params) {
      super();
      Object.assign(this, params);
    }
  };
  var AstErrorNode = class AstErrorNode extends AstTokenNode {
    constructor(ErrorTokenParams) {
      super(ErrorTokenParams);
      Object.assign(ErrorTokenParams);
    }
  };
  var getLabeledRhsForAddNodeFlag = function (production, extraRhs) {
    let rhs = extraRhs || parser.getProductionRhs(production);
    const label = parser.getProductionLabel(production);

    if (label) {
      let newRhs = [];

      for (const r of rhs) {
        if (isAddAstNodeFlag(r)) {
          newRhs.push(() => {
            astStack[astStack.length - 1].label = getOriginalSymbol(label);
          });
        }

        newRhs.push(r);
      }

      rhs = newRhs;
    } else if (!extraRhs) {
      rhs = [...rhs];
    }

    return rhs;
  };
  var checkLLEndError = function (parseTree, getExpected, ret) {
    const { EOF_TOKEN } = Lexer.STATIC;

    if (!ret.error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      var _peekStack;

      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];

        lexer.lex();
      }

      const token = lexer.getCurrentToken();
      ret.error = {
        ...getParseError(getExpected, token),
        expected: getExpected(),
        symbol:
          (_peekStack = peekStack(astStack)) === null || _peekStack === void 0
            ? void 0
            : _peekStack.symbol,
        token,
      };
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
    }

    return ret;
  };
  var takeCareLLError = function (
    parseTree,
    getExpected,
    onErrorRecovery,
    topSymbol,
    shouldDelete,
    transformNode,
    recoveryTokens,
    ret,
  ) {
    const expected = getExpected();
    const recommendedAction = {};
    const currentToken = lexer.getCurrentToken();
    const nextToken = lexer.peekTokens()[0]; // should delete

    if (expected.indexOf(nextToken.token) !== -1) {
      recommendedAction.action = 'del';
    } else if (expected.length) {
      recommendedAction.action = 'add';
    }

    const token = currentToken;
    ret.error = {
      recovery: false,
      ...getParseError(() => expected, token),
      expected,
      symbol: peekStack(astStack).symbol,
      token,
    };

    if (onErrorRecovery) {
      const localErrorNode = new AstErrorNode({
        error: ret.error,
        ...ret.error.token,
      });

      if (parseTree) {
        peekStack(astStack).addChild(localErrorNode);
      }

      const recovery =
        onErrorRecovery(
          {
            errorNode: localErrorNode,
            parseTree: getAstRootNode(astStack, transformNode, true),
          },
          recommendedAction,
        ) || {};
      const { action } = recovery;
      peekStack(astStack).children.pop();

      if (!action) {
        ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
        ret.breakToEnd = true;
        return ret;
      }

      if (action === 'del') {
        ret.error.recovery = true;
        const deleteToken = recoveryTokens.pop();
        deleteToken.recovery = 'del';
        ret.token = undefined;
      } else if (action === 'add') {
        ret.error.recovery = true;
        ret.token = {
          ...ret.token,
          token: recovery.token,
          text: recovery.text,
          t: lexer.mapSymbol(recovery.token),
          recovery: 'add',
        };
        lexer.pushToken(ret.token);
        pushRecoveryTokens(recoveryTokens, ret.token);
      }
    } else {
      ret.errorNode = closeAstWhenError(parseTree, ret.error, astStack);
      ret.breakToEnd = true;
    }

    return ret;
  };
  var takeCareLLAction = function (popSymbolStack, peekSymbolStack) {
    let topSymbol = peekSymbolStack();

    while (topSymbol && typeof topSymbol === 'function') {
      topSymbol.call(parser);
      popSymbolStack();
      topSymbol = peekSymbolStack();
    }

    return topSymbol;
  };
  var reduceLLAction = function (
    parseTree,
    topSymbol,
    popSymbolStack,
    peekSymbolStack,
  ) {
    while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
      if (parseTree) {
        let ast = astStack.pop();
        const needAction = ast.done();

        if (needAction) {
          const ruleIndex = ast.internalRuleIndex;
          const production = parser.productions[ruleIndex];
          const action = parser.getProductionAction(production);

          if (action) {
            action.call(parser);
          }
        }

        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstSymbolNode({
            id: ++globalSymbolNodeId,
            isWrap: true,
            symbol: ast.symbol,
            label: ast.label,
            children: [ast],
            internalRuleIndex: ast.internalRuleIndex,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
      }

      popSymbolStack();
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }
    }

    return topSymbol;
  };
  var prepareLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [
      new AstSymbolNode({
        id: 0,
        symbol: '',
        children: [],
      }),
    ];
  };
  var endLLParse = function () {
    globalSymbolNodeId = 0;
    parser.userData = {};
    symbolStack = [];
    astStack = [];
  };
  var filterRhs = function (rhs) {
    const ret = [];

    for (const r of rhs) {
      if (typeof r === 'string') {
        ret.push(r);
      }
    }

    return ret;
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n = 1) {
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s); // return uncompressed;

    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (parseTree, error, astStack) {
    const errorNode = new AstErrorNode({
      error,
      ...error.token,
    });

    if (parseTree) {
      const top = peekStack(astStack);

      if (top.type === 'symbol') {
        top.addChild(errorNode);
      }

      while (astStack.length > 1) {
        const ast = astStack.pop();

        if (ast && ast.type === 'symbol' && isExtraAstNode(ast)) {
          const topAst = peekStack(astStack);

          if (topAst.type === 'symbol') {
            topAst.children.pop();
            topAst.addChildren(ast.children);
          }
        }
      }
    }

    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    var _recoveryTokens;

    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;

    if (
      ((_recoveryTokens = recoveryTokens[recoveryTokens.length - 1]) === null ||
      _recoveryTokens === void 0
        ? void 0
        : _recoveryTokens.token) === EOF_TOKEN
    ) {
      eof = recoveryTokens.pop();
    }

    recoveryTokens.push(token);

    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (
    getExpected,
    nextToken = lexer.getCurrentToken(),
  ) {
    const expected = getExpected();
    const tips = [];

    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }

    tips.push("current token: '" + nextToken.token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          nextToken.firstLine +
          ':\n' +
          lexer.showDebugInfo(nextToken),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }

    if (ast.children) {
      let children;
      let childrenChanged;

      while (true) {
        let changed = false;
        let index = 0;
        children = [];

        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });

          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }

          changed = changed || node !== c;
          index++;
        }

        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }

      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          if (c.type === 'symbol') {
            cleanAst(c, transformNode);
          }
        }
      }
    }

    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    var _ast, _ast$children;

    let ast = astStack[0];

    if (!ast) {
      return ast;
    }

    if (ast.type !== 'symbol') {
      return ast;
    }

    ast =
      (_ast = ast) === null || _ast === void 0
        ? void 0
        : (_ast$children = _ast.children) === null || _ast$children === void 0
        ? void 0
        : _ast$children[0];

    if (ast && ast.type === 'symbol' && ast.symbol === START_TAG) {
      var _ast2, _ast2$children;

      ast =
        (_ast2 = ast) === null || _ast2 === void 0
          ? void 0
          : (_ast2$children = _ast2.children) === null ||
            _ast2$children === void 0
          ? void 0
          : _ast2$children[0];
    }

    if (ast) {
      ast.parent = undefined;
    }

    if (raw) {
      return ast;
    }

    if (ast && ast.type === 'token') {
      return ast;
    }

    return ast && cleanAst(ast, transformNode);
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.type === 'token' || node.symbol !== parent.symbol) {
      return node;
    }

    if (node.label || parent.label) {
      if (node.label !== parent.label) {
        return node;
      }
    }

    if (parent.children.length === 1) {
      return node.children;
    }

    return node;
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isZeroOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '*?' && s.length > 1 && !!s.match(/\*\??$/)
    );
  };
  var isOneOrMoreSymbol = function (s) {
    return (
      typeof s === 'string' && s !== '+?' && s.length > 1 && !!s.match(/\+\??$/)
    );
  };
  var isLazySymbol = function (s) {
    const match = typeof s === 'string' && s.match(/(\*|\+|\?)\?$/);
    return match && s.length !== 2;
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && !!s.match(/\??\?$/);
  };
  var normalizeSymbol = function (s) {
    const ret =
      isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
        ? s.replace(/(\*|\+|\?)?\??$/, '')
        : s; // ??

    return ret || (s && s.slice(0, -1));
  };
  var VIRTUAL_OPTIONAL_RULE_INDEX = -100;
  var START_TAG = '$START';
  var smUnitBySymbol = {};
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var astStack = [];
  var productionsBySymbol = {};
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var globalSymbolNodeId = 0;
  var Lexer = function (cfg) {
    this.nextTokens = [];

    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const lexerRuleIndexMap = (this.lexerRuleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      predict: 3,
      state: 4,
      channel: 5,
      more: 6,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([STATIC.EOF_TOKEN, STATIC.UNKNOWN_TOKEN]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();
    this.regexpIndex = this.isCompress
      ? this.lexerRuleIndexMap.regexp
      : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;
    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });

    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    }

    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[lexerRuleIndexMap.token] = errorRule.token;
      errorRuleCompress[lexerRuleIndexMap.regexp] = errorRule.regexp;
    }

    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];

      if (pattern.test) {
        let source = pattern.source;

        if (source.startsWith('^')) {
          source = source.slice(1);
        }

        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;

        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');

      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = '';
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.lexerRuleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];

      for (const r of this.rules) {
        var state = this.getRuleItem(r, 'state');

        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }

      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n = 1) {
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num = 1) {
      var ret;

      while (num--) {
        ret = this.stateStack.pop();
      }

      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function (nextToken) {
      function truncate(str, before = false) {
        let c = before
          ? str.slice(0 - DEBUG_CONTEXT_LIMIT)
          : str.slice(0, DEBUG_CONTEXT_LIMIT);
        c = c.replace(/\r\n/g, '\n');
        let s = str.length > DEBUG_CONTEXT_LIMIT ? '...' : '';
        const ret = before ? s + c : c + s;
        let end = '';

        if (str.endsWith('\n') && !ret.endsWith('\n')) {
          end = '\n';
        }

        return ret + end;
      }

      nextToken = nextToken || this.getCurrentToken();
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { input } = this;
      const matched = input.slice(0, nextToken.start);
      var past = truncate(matched, true);
      var next = input.slice(nextToken.start).replace(/\r\n/g, '\n'); //#JSCOVERAGE_ENDIF

      const lastLine = past.lastIndexOf('\n');
      const dashLength = past.length - lastLine;
      let middleIndex = next.indexOf('\n');
      let middle = '';

      if (middleIndex > -1) {
        middle = truncate(next.slice(0, middleIndex + 1));
        next = next.slice(middleIndex);
      } else {
        middle = truncate(next) + '\n';
        next = '';
      }

      middle += new Array(dashLength).join('-') + '^';
      next = truncate(next);
      return past + middle + next;
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        t: currentToken.t,
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (predict, regexp) {
      let ret;

      if (typeof regexp !== 'function') {
        regexp.lastIndex = this.end;
        ret = regexp.exec(this.input);

        if (ret && ret.index !== this.end) {
          return null;
        }
      } else {
        ret = regexp.call(this, this);
      }

      if (
        ret &&
        (predict === null || predict === void 0
          ? void 0
          : predict.call(this, ret)) === false
      ) {
        return null;
      }

      return ret;
    },
    pushToken: function (token) {
      var _tokens;

      const tokens = this.tokens;

      if (
        ((_tokens = tokens[tokens.length - 1]) === null || _tokens === void 0
          ? void 0
          : _tokens.token) === Lexer.STATIC.EOF_TOKEN
      ) {
        tokens.pop();
      }

      tokens.push(token);
    },
    peekTokens: function (num = 1) {
      const ret = [];
      this.stash();

      for (let i = 0; i < num; i++) {
        ret.push(this.lex());
      }

      this.stashPop();
      return ret;
    },
    lex: function () {
      const { EOF_TOKEN } = Lexer.STATIC;
      let token = this.nextToken();

      while (token.more) {
        const nextToken = this.nextToken();
        nextToken.start = token.start;
        nextToken.firstLine = token.firstLine;
        nextToken.firstColumn = token.firstColumn;
        nextToken.text = token.text + nextToken.text;
        token = nextToken;
      }

      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];

      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }

      this.tokens.push(token);

      if (token.channel || !token.token) {
        return this.lex();
      }

      return token;
    },
    getCurrentToken: function () {
      const { tokens } = this;
      return tokens[tokens.length - 1] || this.lex();
    },
    getLastToken: function (filter) {
      const { tokens } = this;
      let index = tokens.length - 2;

      if (filter) {
        while (index >= 0 && filter(tokens[index]) === false) {
          index--;
        }
      }

      return tokens[index] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;

      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }

      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);

        if (code === undefined || isNaN(code)) {
          return '';
        }

        return String.fromCodePoint(code);
      }

      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }

      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }

      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();
      var { input } = this;
      var { env = this.defaultEnv } = this.options;
      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        let regexp = this.getRuleItem(rule, 'regexp');
        let token = this.getRuleItem(rule, 'token');
        let channel = this.getRuleItem(rule, 'channel');
        let action = this.getRuleItem(rule, 'action');
        let more = this.getRuleItem(rule, 'more');
        let predict = this.getRuleItem(rule, 'predict');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        } //#JSCOVERAGE_ENDIF

        if ((m = this.matchRegExp(predict, regexp))) {
          const start = this.end;
          const end = this.end + m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: start,
            end: end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          if (more) {
            position.more = more;
          }

          Object.assign(this, position);
          var match; // for error report

          match = this.match = m[0]; // all matches

          this.matches = m; // may change by user

          this.text = match; // matched content utils now

          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              channel,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }

      throw new Error('no match lexer');
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 79,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
  };
  var lexer = new Lexer({
    rules: [
      [
        'ALIAS',
        /ALIAS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AND',
        /AND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ATTRIBUTE',
        /ATTRIBUTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'AS',
        /AS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BEGIN',
        /BEGIN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BOOLEAN',
        /BOOLEAN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYVAL',
        /BYVAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYREF',
        /BYREF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'BYTE',
        /BYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CALL',
        /CALL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CASE',
        /CASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'CONST',
        /CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DATE',
        /DATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DECLARE',
        /DECLARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBOOL',
        /DEFBOOL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFBYTE',
        /DEFBYTE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDATE',
        /DEFDATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDBL',
        /DEFDBL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFDEC',
        /DEFDEC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFCUR',
        /DEFCUR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFINT',
        /DEFINT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFLNG',
        /DEFLNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFOBJ',
        /DEFOBJ\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSNG',
        /DEFSNG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFSTR',
        /DEFSTR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DEFVAR',
        /DEFVAR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DIM',
        /DIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DO',
        /DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DOUBLE',
        /DOUBLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EACH',
        /EACH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSE',
        /ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ELSEIF',
        /ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_ENUM',
        /END ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_FUNCTION',
        /END FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_IF',
        /END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_PROPERTY',
        /END PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SELECT',
        /END SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_SUB',
        /END SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_TYPE',
        /END TYPE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END_WITH',
        /END WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'END',
        /END\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ENUM',
        /ENUM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EQV',
        /EQV\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ERASE',
        /ERASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EVENT',
        /EVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_DO',
        /EXIT DO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FOR',
        /EXIT FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_FUNCTION',
        /EXIT FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_PROPERTY',
        /EXIT PROPERTY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'EXIT_SUB',
        /EXIT SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FALSE',
        /FALSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FRIEND',
        /FRIEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FOR',
        /FOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'FUNCTION',
        /FUNCTION\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GET',
        /GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GLOBAL',
        /GLOBAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOSUB',
        /GOSUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'GOTO',
        /GOTO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IF',
        /IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMPLEMENTS',
        /IMPLEMENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IN',
        /IN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ISNOT',
        /ISNOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IS',
        /IS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'INTEGER',
        /INTEGER\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LONG',
        /LONG\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LOOP',
        /LOOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LEN',
        /LEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LET',
        /LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIB',
        /LIB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LIKE',
        /LIKE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'LSET',
        /LSET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_CONST',
        /#CONST\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_IF',
        /#IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSEIF',
        /#ELSEIF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_ELSE',
        /#ELSE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MACRO_END_IF',
        /#END IF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'MOD',
        /MOD\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEXT',
        /NEXT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NEW',
        /NEW\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOT',
        /NOT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NOTHING',
        /NOTHING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'NULL',
        /NULL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_ERROR',
        /ON ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON_LOCAL_ERROR',
        /ON LOCAL ERROR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'ON',
        /ON\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTIONAL',
        /OPTIONAL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_BASE',
        /OPTION BASE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_EXPLICIT',
        /OPTION EXPLICIT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_COMPARE',
        /OPTION COMPARE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OPTION_PRIVATE_MODULE',
        /OPTION PRIVATE MODULE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'OR',
        /OR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PARAMARRAY',
        /PARAMARRAY\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRESERVE',
        /PRESERVE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PRIVATE',
        /PRIVATE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_GET',
        /PROPERTY GET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_LET',
        /PROPERTY LET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PROPERTY_SET',
        /PROPERTY SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PTRSAFE',
        /PTRSAFE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'PUBLIC',
        /PUBLIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RAISEEVENT',
        /RAISEEVENT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'REDIM',
        /REDIM\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESET',
        /RESET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RESUME',
        /RESUME\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'RETURN',
        /RETURN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SELECT',
        /SELECT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SET',
        /SET\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SINGLE',
        /SINGLE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STATIC',
        /STATIC\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STEP',
        /STEP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STOP',
        /STOP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'STRING',
        /STRING\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'SUB',
        /SUB\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'THEN',
        /THEN\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TO',
        /TO\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TRUE',
        /TRUE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'TYPEOF',
        /TYPEOF\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'UNTIL',
        /UNTIL\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'VARIANT',
        /VARIANT\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WEND',
        /WEND\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WHILE',
        /WHILE\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITH',
        /WITH\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'WITHEVENTS',
        /WITHEVENTS\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'XOR',
        /XOR\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'IMP',
        /IMP\b/gi,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      [
        'DATELITERAL',
        /#(?:(?:(?:\d+|(?:(?:JAN|FEB|MAR|APR|JUN|JUL|AUG|SEP|OCT|NOV|DEC)|(?:JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)))(?:\s?[\/,-]?\s?)(?:\d+|(?:(?:JAN|FEB|MAR|APR|JUN|JUL|AUG|SEP|OCT|NOV|DEC)|(?:JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)))(?:(?:\s?[\/,-]?\s?)(?:\d+|(?:(?:JAN|FEB|MAR|APR|JUN|JUL|AUG|SEP|OCT|NOV|DEC)|(?:JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER))))?)\s?(?:\d+(?:\s?(AM|PM|A|P))|\d+(?:\s?(:|.)\s?)\d+(?:(?:\s?(:|.)\s?)\d+)?(?:\s?(AM|PM|A|P))?)|(?:(?:\d+|(?:(?:JAN|FEB|MAR|APR|JUN|JUL|AUG|SEP|OCT|NOV|DEC)|(?:JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)))(?:\s?[\/,-]?\s?)(?:\d+|(?:(?:JAN|FEB|MAR|APR|JUN|JUL|AUG|SEP|OCT|NOV|DEC)|(?:JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER)))(?:(?:\s?[\/,-]?\s?)(?:\d+|(?:(?:JAN|FEB|MAR|APR|JUN|JUL|AUG|SEP|OCT|NOV|DEC)|(?:JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER))))?)|(?:\d+(?:\s?(AM|PM|A|P))|\d+(?:\s?(:|.)\s?)\d+(?:(?:\s?(:|.)\s?)\d+)?(?:\s?(AM|PM|A|P))?))#/gi,
      ],
      ['DOUBLELITERAL', /[0-9]*\.[0-9]+(E[0-9]+)?/g],
      ['SPACE_DOT', / +\./g],
      ['ASSIGN', /:=/g],
      ['NEQ', /<>/g],
      ['LEQ', /<=/g],
      ['GEQ', />=/g],
      ['MINUS_EQ', /\-=/g],
      ['PLUS_EQ', /\+=/g],
      ['COLON', /:/g],
      ['AMPERSAND', /&/g],
      ['DIV', /\//g],
      ['IDIV', /\\/g],
      ['EQ', /=/g],
      ['GT', />/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS', /\-/g],
      ['MULT', /\*/g],
      ['PLUS', /\+/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['NEWLINE', /([\r\n]+)/g],
      [
        'REMCOMMENT',
        /(\:?rem((([\u0020\t]+_\r?\n)|[\u0020\t])+)(([\u0020\t]+_\r?\n)|[^\r\n])*)/g,
      ],
      ['COMMENT', /('(([\u0020\t]+_\r?\n)|[^\r\n])*)/g],
      [
        'HIDDEN',
        /((([\u0020\t]+_\r?\n)|[\u0020\t])+)|(\s+)/gi,
        undefined,
        undefined,
        undefined,
        'HIDDEN',
      ],
      ['STRINGLITERAL', /"(""|[^"\r\n])*"/g],
      ['INTEGERLITERAL', /[0-9]+/g],
      [
        'IDENTIFIER',
        /\w[\w\d]*/g,
        function () {
          this.text = (this.text || '').toLowerCase();
        },
      ],
      ["'|'", /'\|'/g],
      ["'('", /'\('/g],
      ["')'+", /'\)'\+/g],
      ['endOfLine+', /endOfLine\+/g],
      [',', /,/g],
      ["')'", /'\)'/g],
      ['.', /\./g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['!', /!/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;

    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }

      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }

    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);

    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      [
        'progam',
        [
          'endOfLine*',
          'moduleAttributes?',
          'endOfLine*',
          'moduleDeclarations?',
          'endOfLine*',
          'moduleBody?',
          'endOfLine*',
          '$EOF',
        ],
      ],
      ['endOfLine', ['NEWLINE']],
      ['endOfLine', ['COMMENT']],
      ['endOfLine', ['REMCOMMENT']],
      ['endOfStatement_group_def_2', ['endOfLine']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_2']],
      ['endOfStatement_group_def_3', ['COLON']],
      ['endOfStatement_group_1', ['endOfStatement_group_def_3']],
      ['endOfStatement', ['endOfStatement_group_1', 'endOfStatement_group_1*']],
      [
        'moduleAttributes_group_def_5',
        ['attributeStmt', 'endOfLine', 'endOfLine*'],
      ],
      [
        'moduleAttributes',
        ['moduleAttributes_group_def_5', 'moduleAttributes_group_def_5*'],
      ],
      ['attributeStmt_group_def_7', [',', 'literal']],
      [
        'attributeStmt',
        [
          'ATTRIBUTE',
          'implicitCallStmt_InStmt',
          'EQ',
          'literal',
          'attributeStmt_group_def_7*',
        ],
      ],
      [
        'moduleDeclarations_group_def_9',
        ['endOfLine', 'endOfLine*', 'moduleDeclarationsElement'],
      ],
      [
        'moduleDeclarations',
        [
          'moduleDeclarationsElement',
          'moduleDeclarations_group_def_9*',
          'endOfLine*',
        ],
      ],
      ['moduleDeclarationsElement', ['COMMENT']],
      ['moduleDeclarationsElement', ['variableStmt']],
      ['moduleDeclarationsElement', ['moduleOption']],
      ['moduleOption', ['OPTION_BASE', 'INTEGERLITERAL']],
      ['moduleOption', ['OPTION_COMPARE', 'IDENTIFIER']],
      ['moduleOption', ['OPTION_EXPLICIT']],
      ['moduleOption', ['OPTION_PRIVATE_MODULE']],
      [
        'moduleBody_group_def_11',
        ['endOfLine', 'endOfLine*', 'moduleBodyElement'],
      ],
      [
        'moduleBody',
        ['moduleBodyElement', 'moduleBody_group_def_11*', 'endOfLine*'],
      ],
      ['moduleBodyElement', ['functionStmt']],
      ['moduleBodyElement', ['propertyGetStmt']],
      ['moduleBodyElement', ['propertySetStmt']],
      ['moduleBodyElement', ['propertyLetStmt']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_SUB',
        ],
      ],
      [
        'propertyGetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_GET',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertySetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_SET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'propertyLetStmt',
        [
          'visibility?',
          'STATIC?',
          'PROPERTY_LET',
          'ambiguousIdentifier',
          'argList?',
          'endOfStatement',
          'block?',
          'END_PROPERTY',
        ],
      ],
      [
        'functionStmt',
        [
          'visibility?',
          'STATIC?',
          'FUNCTION',
          'ambiguousIdentifier',
          'typeHint?',
          'argList?',
          'asTypeClause?',
          'endOfStatement',
          'block?',
          'END_FUNCTION',
        ],
      ],
      ['block_group_def_13', ['endOfStatement', 'blockStmt']],
      ['block', ['blockStmt', 'block_group_def_13*', 'endOfStatement']],
      ['blockStmt', ['lineLabel', 'blockStmt?']],
      ['blockStmt', ['attributeStmt']],
      ['blockStmt', ['goToStmt']],
      ['blockStmt', ['resumeStmt']],
      ['blockStmt', ['ifThenElseStmt']],
      ['blockStmt', ['selectCaseStmt']],
      ['blockStmt', ['forNextStmt']],
      ['blockStmt', ['forEachStmt']],
      ['blockStmt', ['doLoopStmt']],
      ['blockStmt', ['whileWendStmt']],
      ['blockStmt', ['onErrorStmt']],
      ['blockStmt', ['withStmt']],
      ['blockStmt', ['eraseStmt']],
      ['blockStmt', ['exitStmt']],
      ['blockStmt', ['explicitCallStmt']],
      ['blockStmt', ['setStmt']],
      ['blockStmt', ['redimStmt']],
      ['blockStmt', ['letStmt']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['resumeStmt', ['RESUME', 'ambiguousIdentifier']],
      [
        'whileWendStmt',
        ['WHILE', 'valueStmt', 'endOfStatement', 'block', 'WEND'],
      ],
      ['doLoopStmt', ['DO', 'endOfStatement', 'block', 'LOOP']],
      ['doLoopStmt_group_def_15', ['WHILE']],
      ['doLoopStmt_group_14', ['doLoopStmt_group_def_15']],
      ['doLoopStmt_group_def_16', ['UNTIL']],
      ['doLoopStmt_group_14', ['doLoopStmt_group_def_16']],
      [
        'doLoopStmt',
        [
          'DO',
          'doLoopStmt_group_14',
          'valueStmt',
          'endOfStatement',
          'block',
          'LOOP',
        ],
      ],
      ['doLoopStmt_group_17', ['doLoopStmt_group_def_15']],
      ['doLoopStmt_group_17', ['doLoopStmt_group_def_16']],
      [
        'doLoopStmt',
        [
          'DO',
          'endOfStatement',
          'block',
          'LOOP',
          'doLoopStmt_group_17',
          'valueStmt',
        ],
      ],
      ['forNextStmt_group_def_19', ['STEP', 'valueStmt']],
      [
        'forNextStmt',
        [
          'FOR',
          'ambiguousIdentifier',
          'typeHint?',
          'asTypeClause?',
          'EQ',
          'valueStmt',
          'TO',
          'valueStmt',
          'forNextStmt_group_def_19?',
          'endOfStatement',
          'block?',
          'NEXT',
          'ambiguousIdentifier?',
        ],
      ],
      [
        'forEachStmt',
        [
          'FOR',
          'EACH',
          'ambiguousIdentifier',
          'typeHint?',
          'IN',
          'valueStmt',
          'endOfStatement',
          'block?',
          'NEXT',
          'ambiguousIdentifier?',
        ],
      ],
      [
        'selectCaseStmt',
        [
          'SELECT',
          'CASE',
          'valueStmt',
          'endOfStatement',
          'sC_Case*',
          'END_SELECT',
        ],
      ],
      [
        'sC_Selection',
        ['IS', 'comparisonOperator', 'valueStmt'],
        undefined,
        'caseCondIs',
      ],
      [
        'sC_Selection',
        ['valueStmt', 'TO', 'valueStmt'],
        undefined,
        'caseCondTo',
      ],
      ['sC_Selection', ['valueStmt'], undefined, 'caseCondValue'],
      ['sC_Case', ['CASE', 'sC_Cond', 'endOfStatement', 'block?']],
      ['sC_Cond', ['ELSE'], undefined, 'caseCondElse'],
      ['sC_Cond_group_def_21', [',', 'sC_Selection']],
      [
        'sC_Cond',
        ['sC_Selection', 'sC_Cond_group_def_21*'],
        undefined,
        'caseCondSelection',
      ],
      ['comparisonOperator', ['LT']],
      ['comparisonOperator', ['LEQ']],
      ['comparisonOperator', ['GT']],
      ['comparisonOperator', ['GEQ']],
      ['comparisonOperator', ['EQ']],
      ['comparisonOperator', ['NEQ']],
      ['comparisonOperator', ['IS']],
      ['ifThenElseStmt_group_def_23', ['ELSE', 'blockStmt']],
      [
        'ifThenElseStmt',
        [
          'IF',
          'valueStmt',
          'THEN',
          'blockStmt',
          'ifThenElseStmt_group_def_23?',
        ],
        undefined,
        'InlineIfThenElse',
      ],
      [
        'ifThenElseStmt',
        ['ifBlockStmt', 'ifElseIfBlockStmt*', 'ifElseBlockStmt?', 'END_IF'],
        undefined,
        'BlockIfThenElse',
      ],
      ['ifBlockStmt', ['IF', 'valueStmt', 'THEN', 'endOfStatement', 'block?']],
      [
        'ifElseIfBlockStmt',
        ['ELSEIF', 'valueStmt', 'THEN', 'endOfStatement', 'block?'],
      ],
      ['ifElseBlockStmt', ['ELSE', 'endOfStatement', 'block?']],
      ['onErrorStmt_group_def_26', ['ambiguousIdentifier']],
      ['onErrorStmt_group_25', ['onErrorStmt_group_def_26']],
      ['onErrorStmt_group_def_27', ['MINUS', 'INTEGERLITERAL']],
      ['onErrorStmt_group_25', ['onErrorStmt_group_def_27']],
      ['onErrorStmt_group_def_28', ['GOTO', 'onErrorStmt_group_25']],
      ['onErrorStmt_group_24', ['onErrorStmt_group_def_28']],
      ['onErrorStmt_group_def_29', ['RESUME', 'NEXT']],
      ['onErrorStmt_group_24', ['onErrorStmt_group_def_29']],
      ['onErrorStmt', ['ON_ERROR', 'onErrorStmt_group_24']],
      ['lineLabel', ['certainIdentifier', 'COLON']],
      ['goToStmt', ['GOTO', 'ambiguousIdentifier']],
      ['eraseStmt_group_def_31', [',', 'valueStmt']],
      ['eraseStmt', ['ERASE', 'valueStmt', 'eraseStmt_group_def_31*']],
      ['redimStmt_group_def_33', [',', 'redimSubStmt']],
      [
        'redimStmt',
        ['REDIM', 'PRESERVE?', 'redimSubStmt', 'redimStmt_group_def_33*'],
      ],
      [
        'redimSubStmt',
        [
          'implicitCallStmt_InStmt',
          'LPAREN',
          'subscripts',
          'RPAREN',
          'asTypeClause?',
        ],
      ],
      ['exitStmt', ['EXIT_DO']],
      ['exitStmt', ['EXIT_FOR']],
      ['exitStmt', ['EXIT_FUNCTION']],
      ['exitStmt', ['EXIT_PROPERTY']],
      ['exitStmt', ['EXIT_SUB']],
      ['exitStmt', ['END']],
      ['letStmt_group_def_35', ['EQ']],
      ['letStmt_group_34', ['letStmt_group_def_35']],
      ['letStmt_group_def_36', ['PLUS_EQ']],
      ['letStmt_group_34', ['letStmt_group_def_36']],
      ['letStmt_group_def_37', ['MINUS_EQ']],
      ['letStmt_group_34', ['letStmt_group_def_37']],
      [
        'letStmt',
        ['LET?', 'implicitCallStmt_InStmt', 'letStmt_group_34', 'valueStmt'],
      ],
      ['setStmt', ['SET', 'implicitCallStmt_InStmt', 'EQ', 'valueStmt']],
      ['explicitCallStmt', ['eCS_MemberProcedureCall']],
      ['explicitCallStmt', ['eCS_ProcedureCall']],
      [
        'eCS_MemberProcedureCall_group_def_39',
        ['implicitCallStmt_InStmt?', '.'],
      ],
      [
        'eCS_MemberProcedureCall_group_38',
        ['eCS_MemberProcedureCall_group_def_39'],
      ],
      ['eCS_MemberProcedureCall_group_def_40', ['SPACE_DOT']],
      [
        'eCS_MemberProcedureCall_group_38',
        ['eCS_MemberProcedureCall_group_def_40'],
      ],
      [
        'eCS_MemberProcedureCall_group_def_42',
        ['LPAREN', 'argsCall', 'RPAREN'],
      ],
      ['eCS_MemberProcedureCall_group_def_44', ['LPAREN', 'indexes', 'RPAREN']],
      [
        'eCS_MemberProcedureCall',
        [
          'CALL',
          'eCS_MemberProcedureCall_group_38',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_42?',
          'eCS_MemberProcedureCall_group_def_44*',
        ],
      ],
      [
        'eCS_ProcedureCall',
        [
          'CALL',
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_42?',
          'eCS_MemberProcedureCall_group_def_44*',
        ],
      ],
      ['implicitCallStmt_InBlock', ['iCS_B_MemberProcedureCall']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_MemberProcedureCall_group_47',
        ['eCS_MemberProcedureCall_group_def_40'],
      ],
      [
        'iCS_B_MemberProcedureCall_group_47',
        ['eCS_MemberProcedureCall_group_def_39'],
      ],
      [
        'iCS_B_MemberProcedureCall',
        [
          'iCS_B_MemberProcedureCall_group_47',
          'ambiguousIdentifier',
          'typeHint?',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_44*',
        ],
      ],
      [
        'iCS_B_ProcedureCall',
        [
          'certainIdentifier',
          'argsCall?',
          'eCS_MemberProcedureCall_group_def_44?',
        ],
      ],
      ['argsCall_group_def_51', [',', 'argCall?']],
      ['argsCall', [',*', 'argCall', 'argsCall_group_def_51*']],
      ['argCall', ['valueStmt']],
      ['variableStmt_group_def_53', ['DIM']],
      ['variableStmt_group_52', ['variableStmt_group_def_53']],
      ['variableStmt_group_def_54', ['STATIC']],
      ['variableStmt_group_52', ['variableStmt_group_def_54']],
      ['variableStmt_group_def_55', ['visibility']],
      ['variableStmt_group_52', ['variableStmt_group_def_55']],
      [
        'variableStmt',
        ['variableStmt_group_52', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['withStmt_group_def_57', ['implicitCallStmt_InStmt']],
      ['withStmt_group_56', ['withStmt_group_def_57']],
      ['withStmt_group_def_58', ['NEW', 'type_']],
      ['withStmt_group_56', ['withStmt_group_def_58']],
      [
        'withStmt',
        ['WITH', 'withStmt_group_56', 'endOfStatement', 'block?', 'END_WITH'],
      ],
      ['variableListStmt_group_def_60', [',', 'variableSubStmt']],
      [
        'variableListStmt',
        ['variableSubStmt', 'variableListStmt_group_def_60*'],
      ],
      ['variableSubStmt_group_def_62', ['LPAREN', 'subscripts?', 'RPAREN']],
      [
        'variableSubStmt',
        [
          'ambiguousIdentifier',
          'variableSubStmt_group_def_62?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['indexes', ['valueStmt', 'eraseStmt_group_def_31*']],
      ['subscript__group_def_65', ['valueStmt', 'TO']],
      ['subscript_', ['subscript__group_def_65?', 'valueStmt']],
      ['subscripts_group_def_67', [',', 'subscript_']],
      ['subscripts', ['subscript_', 'subscripts_group_def_67*']],
      ['subscript_', ['subscript__group_def_65?', 'valueStmt']],
      ['argList_group_def_71', [',', 'arg']],
      ['argList_group_def_72', ['arg', 'argList_group_def_71*']],
      ['argList', ['LPAREN', 'argList_group_def_72?', 'RPAREN']],
      ['valueStmt_p_end', ['literal']],
      ['valueStmt_p_end', ['implicitCallStmt_InStmt']],
      ['valueStmt_p_end', ['ambiguousIdentifier', 'ASSIGN', 'valueStmt']],
      ['valueStmt_p_end', ['NEW', 'valueStmt']],
      [
        'valueStmt_p_end',
        ['LPAREN', 'valueStmt', 'RPAREN'],
        undefined,
        'AtomExpression',
      ],
      ['implicitCallStmt_InStmt', ['iCS_S_MembersCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_VariableOrProcedureCall']],
      ['implicitCallStmt_InStmt', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_def_75', ['iCS_S_VariableOrProcedureCall']],
      ['iCS_S_MembersCall_group_74', ['iCS_S_MembersCall_group_def_75']],
      ['iCS_S_MembersCall_group_def_76', ['iCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MembersCall_group_74', ['iCS_S_MembersCall_group_def_76']],
      [
        'iCS_S_MembersCall_group_def_77',
        ['iCS_S_MembersCall_group_74?', 'iCS_S_MemberCall'],
      ],
      ['iCS_S_MembersCall_group_73', ['iCS_S_MembersCall_group_def_77']],
      ['iCS_S_MembersCall_group_def_78', ['iCS_S_SpaceMemberCall']],
      ['iCS_S_MembersCall_group_73', ['iCS_S_MembersCall_group_def_78']],
      [
        'iCS_S_MembersCall',
        [
          'iCS_S_MembersCall_group_73',
          'iCS_S_MemberCall*',
          'eCS_MemberProcedureCall_group_def_44*',
        ],
      ],
      ['iCS_S_MemberCall_group_def_81', ['mCS_S_VariableOrProcedureCall']],
      ['iCS_S_MemberCall_group_80', ['iCS_S_MemberCall_group_def_81']],
      ['iCS_S_MemberCall_group_def_82', ['mCS_S_ProcedureOrArrayCall']],
      ['iCS_S_MemberCall_group_80', ['iCS_S_MemberCall_group_def_82']],
      ['iCS_S_MemberCall', ['.', 'iCS_S_MemberCall_group_80']],
      ['iCS_S_SpaceMemberCall_group_83', ['iCS_S_MemberCall_group_def_81']],
      ['iCS_S_SpaceMemberCall_group_83', ['iCS_S_MemberCall_group_def_82']],
      [
        'iCS_S_SpaceMemberCall',
        ['SPACE_DOT', 'iCS_S_SpaceMemberCall_group_83'],
      ],
      [
        'iCS_S_ProcedureOrArrayCall',
        [
          'certainIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'eCS_MemberProcedureCall_group_def_44*',
        ],
      ],
      [
        'mCS_S_ProcedureOrArrayCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'LPAREN',
          'argsCall?',
          'RPAREN',
          'eCS_MemberProcedureCall_group_def_44*',
        ],
      ],
      [
        'iCS_S_VariableOrProcedureCall',
        [
          'certainIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_44*',
        ],
      ],
      [
        'mCS_S_VariableOrProcedureCall',
        [
          'ambiguousIdentifier',
          'typeHint?',
          'eCS_MemberProcedureCall_group_def_44*',
        ],
      ],
      ['literal', ['DOUBLELITERAL']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['literal', ['NOTHING']],
      ['literal', ['NULL']],
      ['literal', ['TRUE']],
      ['literal', ['FALSE']],
      ['literal', ['DATELITERAL']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      ['arg_group_def_89', ['BYVAL']],
      ['arg_group_88', ['arg_group_def_89']],
      ['arg_group_def_90', ['BYREF']],
      ['arg_group_88', ['arg_group_def_90']],
      ['arg_group_def_92', ['LPAREN', 'RPAREN']],
      [
        'arg',
        [
          'OPTIONAL?',
          'arg_group_88?',
          'PARAMARRAY?',
          'ambiguousIdentifier',
          'typeHint?',
          'arg_group_def_92?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_']],
      ['type__group_def_94', ['baseType']],
      ['type__group_93', ['type__group_def_94']],
      ['type__group_def_95', ['complexType']],
      ['type__group_93', ['type__group_def_95']],
      ['type_', ['type__group_93', 'arg_group_def_92?']],
      ['complexType_group_def_98', ['.', 'ambiguousIdentifier']],
      ['complexType', ['ambiguousIdentifier', 'complexType_group_def_98*']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType', ['STRING']],
      ['baseType', ['DATE']],
      ['ambiguousIdentifier', ['ALIAS']],
      ['ambiguousIdentifier', ['AND']],
      ['ambiguousIdentifier', ['ATTRIBUTE']],
      ['ambiguousIdentifier', ['AS']],
      ['ambiguousIdentifier', ['BEGIN']],
      ['ambiguousIdentifier', ['BOOLEAN']],
      ['ambiguousIdentifier', ['BYVAL']],
      ['ambiguousIdentifier', ['BYREF']],
      ['ambiguousIdentifier', ['BYTE']],
      ['ambiguousIdentifier', ['CALL']],
      ['ambiguousIdentifier', ['CASE']],
      ['ambiguousIdentifier', ['CONST']],
      ['ambiguousIdentifier', ['DATE']],
      ['ambiguousIdentifier', ['DECLARE']],
      ['ambiguousIdentifier', ['DEFBOOL']],
      ['ambiguousIdentifier', ['DEFBYTE']],
      ['ambiguousIdentifier', ['DEFDATE']],
      ['ambiguousIdentifier', ['DEFDBL']],
      ['ambiguousIdentifier', ['DEFDEC']],
      ['ambiguousIdentifier', ['DEFCUR']],
      ['ambiguousIdentifier', ['DEFINT']],
      ['ambiguousIdentifier', ['DEFLNG']],
      ['ambiguousIdentifier', ['DEFOBJ']],
      ['ambiguousIdentifier', ['DEFSNG']],
      ['ambiguousIdentifier', ['DEFSTR']],
      ['ambiguousIdentifier', ['DEFVAR']],
      ['ambiguousIdentifier', ['DIM']],
      ['ambiguousIdentifier', ['DO']],
      ['ambiguousIdentifier', ['DOUBLE']],
      ['ambiguousIdentifier', ['EACH']],
      ['ambiguousIdentifier', ['ELSE']],
      ['ambiguousIdentifier', ['ELSEIF']],
      ['ambiguousIdentifier', ['END_ENUM']],
      ['ambiguousIdentifier', ['END_FUNCTION']],
      ['ambiguousIdentifier', ['END_IF']],
      ['ambiguousIdentifier', ['END_PROPERTY']],
      ['ambiguousIdentifier', ['END_SELECT']],
      ['ambiguousIdentifier', ['END_SUB']],
      ['ambiguousIdentifier', ['END_TYPE']],
      ['ambiguousIdentifier', ['END_WITH']],
      ['ambiguousIdentifier', ['END']],
      ['ambiguousIdentifier', ['ENUM']],
      ['ambiguousIdentifier', ['EQV']],
      ['ambiguousIdentifier', ['ERASE']],
      ['ambiguousIdentifier', ['EVENT']],
      ['ambiguousIdentifier', ['EXIT_DO']],
      ['ambiguousIdentifier', ['EXIT_FOR']],
      ['ambiguousIdentifier', ['EXIT_FUNCTION']],
      ['ambiguousIdentifier', ['EXIT_PROPERTY']],
      ['ambiguousIdentifier', ['EXIT_SUB']],
      ['ambiguousIdentifier', ['FALSE']],
      ['ambiguousIdentifier', ['FRIEND']],
      ['ambiguousIdentifier', ['FOR']],
      ['ambiguousIdentifier', ['FUNCTION']],
      ['ambiguousIdentifier', ['GET']],
      ['ambiguousIdentifier', ['GLOBAL']],
      ['ambiguousIdentifier', ['GOSUB']],
      ['ambiguousIdentifier', ['GOTO']],
      ['ambiguousIdentifier', ['IF']],
      ['ambiguousIdentifier', ['IMPLEMENTS']],
      ['ambiguousIdentifier', ['IN']],
      ['ambiguousIdentifier', ['ISNOT']],
      ['ambiguousIdentifier', ['IS']],
      ['ambiguousIdentifier', ['INTEGER']],
      ['ambiguousIdentifier', ['LONG']],
      ['ambiguousIdentifier', ['LOOP']],
      ['ambiguousIdentifier', ['LEN']],
      ['ambiguousIdentifier', ['LET']],
      ['ambiguousIdentifier', ['LIB']],
      ['ambiguousIdentifier', ['LIKE']],
      ['ambiguousIdentifier', ['LSET']],
      ['ambiguousIdentifier', ['MACRO_CONST']],
      ['ambiguousIdentifier', ['MACRO_IF']],
      ['ambiguousIdentifier', ['MACRO_ELSEIF']],
      ['ambiguousIdentifier', ['MACRO_ELSE']],
      ['ambiguousIdentifier', ['MACRO_END_IF']],
      ['ambiguousIdentifier', ['MOD']],
      ['ambiguousIdentifier', ['NEXT']],
      ['ambiguousIdentifier', ['NEW']],
      ['ambiguousIdentifier', ['NOT']],
      ['ambiguousIdentifier', ['NOTHING']],
      ['ambiguousIdentifier', ['NULL']],
      ['ambiguousIdentifier', ['ON_ERROR']],
      ['ambiguousIdentifier', ['ON_LOCAL_ERROR']],
      ['ambiguousIdentifier', ['ON']],
      ['ambiguousIdentifier', ['OPTIONAL']],
      ['ambiguousIdentifier', ['OPTION_BASE']],
      ['ambiguousIdentifier', ['OPTION_EXPLICIT']],
      ['ambiguousIdentifier', ['OPTION_COMPARE']],
      ['ambiguousIdentifier', ['OPTION_PRIVATE_MODULE']],
      ['ambiguousIdentifier', ['OR']],
      ['ambiguousIdentifier', ['PARAMARRAY']],
      ['ambiguousIdentifier', ['PRESERVE']],
      ['ambiguousIdentifier', ['PRIVATE']],
      ['ambiguousIdentifier', ['PROPERTY_GET']],
      ['ambiguousIdentifier', ['PROPERTY_LET']],
      ['ambiguousIdentifier', ['PROPERTY_SET']],
      ['ambiguousIdentifier', ['PTRSAFE']],
      ['ambiguousIdentifier', ['PUBLIC']],
      ['ambiguousIdentifier', ['RAISEEVENT']],
      ['ambiguousIdentifier', ['REDIM']],
      ['ambiguousIdentifier', ['RESET']],
      ['ambiguousIdentifier', ['RESUME']],
      ['ambiguousIdentifier', ['RETURN']],
      ['ambiguousIdentifier', ['SELECT']],
      ['ambiguousIdentifier', ['SET']],
      ['ambiguousIdentifier', ['SINGLE']],
      ['ambiguousIdentifier', ['STATIC']],
      ['ambiguousIdentifier', ['STEP']],
      ['ambiguousIdentifier', ['STOP']],
      ['ambiguousIdentifier', ['STRING']],
      ['ambiguousIdentifier', ['SUB']],
      ['ambiguousIdentifier', ['THEN']],
      ['ambiguousIdentifier', ['TO']],
      ['ambiguousIdentifier', ['TRUE']],
      ['ambiguousIdentifier', ['TYPEOF']],
      ['ambiguousIdentifier', ['UNTIL']],
      ['ambiguousIdentifier', ['VARIANT']],
      ['ambiguousIdentifier', ['WEND']],
      ['ambiguousIdentifier', ['WHILE']],
      ['ambiguousIdentifier', ['WITH']],
      ['ambiguousIdentifier', ['WITHEVENTS']],
      ['ambiguousIdentifier', ['XOR']],
      ['ambiguousIdentifier', ['IMP']],
      ['certainIdentifier', ['IDENTIFIER']],
      ['ambiguousIdentifier', ['IDENTIFIER']],
      ['valueStmt', ['valueStmt_p_2'], undefined, undefined, undefined, true],
      ['valueStmt', ['NOT', 'valueStmt'], undefined, 'PrefixExpression'],
      [
        '(valueStmt_p_2)1_',
        ['IS', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_2',
        ['valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_2)1_',
        ['ISNOT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['GT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['LT', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['NEQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_2)1_',
        ['EQ', 'valueStmt_p_3', 1, '(valueStmt_p_2)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['XOR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_3',
        ['valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_3)1_',
        ['OR', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_3)1_',
        ['AND', 'valueStmt_p_4', 1, '(valueStmt_p_3)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['PLUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_4',
        ['valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_4)1_',
        ['MINUS', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_4)1_',
        ['AMPERSAND', 'valueStmt_p_5', 1, '(valueStmt_p_4)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MULT', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_5',
        ['valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        '(valueStmt_p_5)1_',
        ['DIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['IDIV', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_5)1_',
        ['MOD', 'valueStmt_p_6', 1, '(valueStmt_p_5)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        '(valueStmt_p_6)1_',
        ['POW', 'valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        'BinaryExpression',
      ],
      [
        'valueStmt_p_6',
        ['valueStmt_p_7', 1, '(valueStmt_p_6)1_'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['valueStmt_p_end'],
        undefined,
        undefined,
        undefined,
        true,
      ],
      [
        'valueStmt_p_7',
        ['MINUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      [
        'valueStmt_p_7',
        ['PLUS', 'valueStmt_p_7'],
        undefined,
        'PrefixExpression',
      ],
      ['(valueStmt_p_2)1_', []],
      ['(valueStmt_p_3)1_', []],
      ['(valueStmt_p_4)1_', []],
      ['(valueStmt_p_5)1_', []],
      ['(valueStmt_p_6)1_', []],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
      predict: 4,
      isWrap: 5,
    },
    isCompress: 1,
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p && p[this.productionIndexMap[itemType]];
      }

      return p && p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionPredict: function (p) {
      return this.getProductionItemByType(p, 'predict');
    },
    getProductionIsWrap: function (p) {
      return this.getProductionItemByType(p, 'isWrap');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    getCurrentSymbolNode: function () {
      return astStack[astStack.length - 1];
    },
  };
  parser.getProductionItemByType = parser.getProductionItemByType.bind(parser);
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionPredict = parser.getProductionPredict.bind(parser);
  parser.getProductionIsWrap = parser.getProductionIsWrap.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.getCurrentSymbolNode = parser.getCurrentSymbolNode.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {
    valueStmt_p_end: 'valueStmt',
    valueStmt_p_1: 'valueStmt',
    valueStmt_p_2: 'valueStmt',
    valueStmt_p_3: 'valueStmt',
    valueStmt_p_4: 'valueStmt',
    valueStmt_p_5: 'valueStmt',
    valueStmt_p_6: 'valueStmt',
    valueStmt_p_7: 'valueStmt',
  };
  productionSkipAstNodeSet = new Set([
    5, 6, 7, 8, 10, 12, 14, 23, 39, 64, 65, 66, 67, 69, 70, 72, 81, 90, 96, 97,
    98, 99, 100, 101, 102, 103, 107, 109, 118, 119, 120, 121, 122, 123, 128,
    129, 130, 131, 132, 133, 138, 139, 142, 145, 146, 147, 148, 149, 150, 152,
    153, 154, 155, 157, 159, 162, 164, 167, 168, 178, 179, 180, 181, 182, 183,
    184, 185, 187, 188, 189, 190, 192, 193, 213, 214, 215, 216, 217, 221, 222,
    223, 224, 226, 365, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378,
    380, 381, 382, 384, 385, 386, 387, 392, 393, 394, 395, 396,
  ]);
  const parserPredictTable = {
    $START: {
      NEWLINE: [0],
      COMMENT: [0],
      REMCOMMENT: [0],
      ATTRIBUTE: [0],
      DIM: [0],
      STATIC: [0],
      OPTION_BASE: [0],
      OPTION_COMPARE: [0],
      OPTION_EXPLICIT: [0],
      OPTION_PRIVATE_MODULE: [0],
      PRIVATE: [0],
      PUBLIC: [0],
      FRIEND: [0],
      GLOBAL: [0],
      FUNCTION: [0],
      PROPERTY_GET: [0],
      PROPERTY_SET: [0],
      PROPERTY_LET: [0],
      SUB: [0],
      $EOF: [0],
    },
    progam: {
      NEWLINE: [1],
      COMMENT: [1],
      REMCOMMENT: [1],
      ATTRIBUTE: [1],
      DIM: [1],
      STATIC: [1],
      PRIVATE: [1],
      PUBLIC: [1],
      FRIEND: [1],
      GLOBAL: [1],
      OPTION_BASE: [1],
      OPTION_COMPARE: [1],
      OPTION_EXPLICIT: [1],
      OPTION_PRIVATE_MODULE: [1],
      FUNCTION: [1],
      PROPERTY_GET: [1],
      PROPERTY_SET: [1],
      PROPERTY_LET: [1],
      SUB: [1],
      $EOF: [1],
    },
    endOfLine: {
      NEWLINE: [2],
      COMMENT: [3],
      REMCOMMENT: [4],
    },
    endOfStatement_group_def_2: {
      NEWLINE: [5],
      COMMENT: [5],
      REMCOMMENT: [5],
    },
    endOfStatement_group_1: {
      NEWLINE: [6],
      COMMENT: [6],
      REMCOMMENT: [6],
      COLON: [8],
    },
    endOfStatement_group_def_3: {
      COLON: [7],
    },
    endOfStatement: {
      NEWLINE: [9],
      COMMENT: [9],
      REMCOMMENT: [9],
      COLON: [9],
    },
    moduleAttributes_group_def_5: {
      ATTRIBUTE: [10],
    },
    moduleAttributes: {
      ATTRIBUTE: [11],
    },
    attributeStmt_group_def_7: {
      ',': [12],
    },
    attributeStmt: {
      ATTRIBUTE: [13],
    },
    moduleDeclarations_group_def_9: {
      NEWLINE: [14],
      COMMENT: [14],
      REMCOMMENT: [14],
    },
    moduleDeclarations: {
      COMMENT: [15],
      DIM: [15],
      STATIC: [15],
      PRIVATE: [15],
      PUBLIC: [15],
      FRIEND: [15],
      GLOBAL: [15],
      OPTION_BASE: [15],
      OPTION_COMPARE: [15],
      OPTION_EXPLICIT: [15],
      OPTION_PRIVATE_MODULE: [15],
    },
    moduleDeclarationsElement: {
      COMMENT: [16],
      DIM: [17],
      STATIC: [17],
      PRIVATE: [17],
      PUBLIC: [17],
      FRIEND: [17],
      GLOBAL: [17],
      OPTION_BASE: [18],
      OPTION_COMPARE: [18],
      OPTION_EXPLICIT: [18],
      OPTION_PRIVATE_MODULE: [18],
    },
    moduleOption: {
      OPTION_BASE: [19],
      OPTION_COMPARE: [20],
      OPTION_EXPLICIT: [21],
      OPTION_PRIVATE_MODULE: [22],
    },
    moduleBody_group_def_11: {
      NEWLINE: [23],
      COMMENT: [23],
      REMCOMMENT: [23],
    },
    moduleBody: {
      PRIVATE: [24],
      PUBLIC: [24],
      FRIEND: [24],
      GLOBAL: [24],
      STATIC: [24],
      FUNCTION: [24],
      PROPERTY_GET: [24],
      PROPERTY_SET: [24],
      PROPERTY_LET: [24],
      SUB: [24],
    },
    moduleBodyElement: {
      PRIVATE: [25, 26, 27, 28, 29],
      PUBLIC: [25, 26, 27, 28, 29],
      FRIEND: [25, 26, 27, 28, 29],
      GLOBAL: [25, 26, 27, 28, 29],
      STATIC: [25, 26, 27, 28, 29],
      FUNCTION: [25],
      PROPERTY_GET: [26],
      PROPERTY_SET: [27],
      PROPERTY_LET: [28],
      SUB: [29],
    },
    visibility: {
      PRIVATE: [30],
      PUBLIC: [31],
      FRIEND: [32],
      GLOBAL: [33],
    },
    subStmt: {
      PRIVATE: [34],
      PUBLIC: [34],
      FRIEND: [34],
      GLOBAL: [34],
      STATIC: [34],
      SUB: [34],
    },
    propertyGetStmt: {
      PRIVATE: [35],
      PUBLIC: [35],
      FRIEND: [35],
      GLOBAL: [35],
      STATIC: [35],
      PROPERTY_GET: [35],
    },
    propertySetStmt: {
      PRIVATE: [36],
      PUBLIC: [36],
      FRIEND: [36],
      GLOBAL: [36],
      STATIC: [36],
      PROPERTY_SET: [36],
    },
    propertyLetStmt: {
      PRIVATE: [37],
      PUBLIC: [37],
      FRIEND: [37],
      GLOBAL: [37],
      STATIC: [37],
      PROPERTY_LET: [37],
    },
    functionStmt: {
      PRIVATE: [38],
      PUBLIC: [38],
      FRIEND: [38],
      GLOBAL: [38],
      STATIC: [38],
      FUNCTION: [38],
    },
    block_group_def_13: {
      NEWLINE: [39],
      COMMENT: [39],
      REMCOMMENT: [39],
      COLON: [39],
    },
    block: {
      IDENTIFIER: [40],
      ATTRIBUTE: [40],
      GOTO: [40],
      RESUME: [40],
      IF: [40],
      SELECT: [40],
      FOR: [40],
      DO: [40],
      WHILE: [40],
      ON_ERROR: [40],
      WITH: [40],
      ERASE: [40],
      EXIT_DO: [40],
      EXIT_FOR: [40],
      EXIT_FUNCTION: [40],
      EXIT_PROPERTY: [40],
      EXIT_SUB: [40],
      END: [40],
      CALL: [40],
      SET: [40],
      REDIM: [40],
      LET: [40],
      DIM: [40],
      STATIC: [40],
      PRIVATE: [40],
      PUBLIC: [40],
      FRIEND: [40],
      GLOBAL: [40],
      SPACE_DOT: [40],
      '.': [40],
    },
    blockStmt: {
      IDENTIFIER: [41, 58, 60],
      ATTRIBUTE: [42],
      GOTO: [43],
      RESUME: [44],
      IF: [45],
      SELECT: [46],
      FOR: [47, 48],
      DO: [49],
      WHILE: [50],
      ON_ERROR: [51],
      WITH: [52],
      ERASE: [53],
      EXIT_DO: [54],
      EXIT_FOR: [54],
      EXIT_FUNCTION: [54],
      EXIT_PROPERTY: [54],
      EXIT_SUB: [54],
      END: [54],
      CALL: [55],
      SET: [56],
      REDIM: [57],
      LET: [58],
      '.': [58, 60],
      SPACE_DOT: [58, 60],
      DIM: [59],
      STATIC: [59],
      PRIVATE: [59],
      PUBLIC: [59],
      FRIEND: [59],
      GLOBAL: [59],
    },
    resumeStmt: {
      RESUME: [61],
    },
    whileWendStmt: {
      WHILE: [62],
    },
    doLoopStmt: {
      DO: [63, 68, 71],
    },
    doLoopStmt_group_def_15: {
      WHILE: [64],
    },
    doLoopStmt_group_14: {
      WHILE: [65],
      UNTIL: [67],
    },
    doLoopStmt_group_def_16: {
      UNTIL: [66],
    },
    doLoopStmt_group_17: {
      WHILE: [69],
      UNTIL: [70],
    },
    forNextStmt_group_def_19: {
      STEP: [72],
    },
    forNextStmt: {
      FOR: [73],
    },
    forEachStmt: {
      FOR: [74],
    },
    selectCaseStmt: {
      SELECT: [75],
    },
    sC_Selection: {
      IS: [76, 77, 78],
      DOUBLELITERAL: [77, 78],
      INTEGERLITERAL: [77, 78],
      STRINGLITERAL: [77, 78],
      NOTHING: [77, 78],
      NULL: [77, 78],
      TRUE: [77, 78],
      FALSE: [77, 78],
      DATELITERAL: [77, 78],
      '.': [77, 78],
      SPACE_DOT: [77, 78],
      IDENTIFIER: [77, 78],
      ALIAS: [77, 78],
      AND: [77, 78],
      ATTRIBUTE: [77, 78],
      AS: [77, 78],
      BEGIN: [77, 78],
      BOOLEAN: [77, 78],
      BYVAL: [77, 78],
      BYREF: [77, 78],
      BYTE: [77, 78],
      CALL: [77, 78],
      CASE: [77, 78],
      CONST: [77, 78],
      DATE: [77, 78],
      DECLARE: [77, 78],
      DEFBOOL: [77, 78],
      DEFBYTE: [77, 78],
      DEFDATE: [77, 78],
      DEFDBL: [77, 78],
      DEFDEC: [77, 78],
      DEFCUR: [77, 78],
      DEFINT: [77, 78],
      DEFLNG: [77, 78],
      DEFOBJ: [77, 78],
      DEFSNG: [77, 78],
      DEFSTR: [77, 78],
      DEFVAR: [77, 78],
      DIM: [77, 78],
      DO: [77, 78],
      DOUBLE: [77, 78],
      EACH: [77, 78],
      ELSE: [77, 78],
      ELSEIF: [77, 78],
      END_ENUM: [77, 78],
      END_FUNCTION: [77, 78],
      END_IF: [77, 78],
      END_PROPERTY: [77, 78],
      END_SELECT: [77, 78],
      END_SUB: [77, 78],
      END_TYPE: [77, 78],
      END_WITH: [77, 78],
      END: [77, 78],
      ENUM: [77, 78],
      EQV: [77, 78],
      ERASE: [77, 78],
      EVENT: [77, 78],
      EXIT_DO: [77, 78],
      EXIT_FOR: [77, 78],
      EXIT_FUNCTION: [77, 78],
      EXIT_PROPERTY: [77, 78],
      EXIT_SUB: [77, 78],
      FRIEND: [77, 78],
      FOR: [77, 78],
      FUNCTION: [77, 78],
      GET: [77, 78],
      GLOBAL: [77, 78],
      GOSUB: [77, 78],
      GOTO: [77, 78],
      IF: [77, 78],
      IMPLEMENTS: [77, 78],
      IN: [77, 78],
      ISNOT: [77, 78],
      INTEGER: [77, 78],
      LONG: [77, 78],
      LOOP: [77, 78],
      LEN: [77, 78],
      LET: [77, 78],
      LIB: [77, 78],
      LIKE: [77, 78],
      LSET: [77, 78],
      MACRO_CONST: [77, 78],
      MACRO_IF: [77, 78],
      MACRO_ELSEIF: [77, 78],
      MACRO_ELSE: [77, 78],
      MACRO_END_IF: [77, 78],
      MOD: [77, 78],
      NEXT: [77, 78],
      NEW: [77, 78],
      NOT: [77, 78],
      ON_ERROR: [77, 78],
      ON_LOCAL_ERROR: [77, 78],
      ON: [77, 78],
      OPTIONAL: [77, 78],
      OPTION_BASE: [77, 78],
      OPTION_EXPLICIT: [77, 78],
      OPTION_COMPARE: [77, 78],
      OPTION_PRIVATE_MODULE: [77, 78],
      OR: [77, 78],
      PARAMARRAY: [77, 78],
      PRESERVE: [77, 78],
      PRIVATE: [77, 78],
      PROPERTY_GET: [77, 78],
      PROPERTY_LET: [77, 78],
      PROPERTY_SET: [77, 78],
      PTRSAFE: [77, 78],
      PUBLIC: [77, 78],
      RAISEEVENT: [77, 78],
      REDIM: [77, 78],
      RESET: [77, 78],
      RESUME: [77, 78],
      RETURN: [77, 78],
      SELECT: [77, 78],
      SET: [77, 78],
      SINGLE: [77, 78],
      STATIC: [77, 78],
      STEP: [77, 78],
      STOP: [77, 78],
      STRING: [77, 78],
      SUB: [77, 78],
      THEN: [77, 78],
      TO: [77, 78],
      TYPEOF: [77, 78],
      UNTIL: [77, 78],
      VARIANT: [77, 78],
      WEND: [77, 78],
      WHILE: [77, 78],
      WITH: [77, 78],
      WITHEVENTS: [77, 78],
      XOR: [77, 78],
      IMP: [77, 78],
      LPAREN: [77, 78],
      MINUS: [77, 78],
      PLUS: [77, 78],
    },
    sC_Case: {
      CASE: [79],
    },
    sC_Cond: {
      ELSE: [80, 82],
      IS: [82],
      DOUBLELITERAL: [82],
      INTEGERLITERAL: [82],
      STRINGLITERAL: [82],
      NOTHING: [82],
      NULL: [82],
      TRUE: [82],
      FALSE: [82],
      DATELITERAL: [82],
      '.': [82],
      SPACE_DOT: [82],
      IDENTIFIER: [82],
      ALIAS: [82],
      AND: [82],
      ATTRIBUTE: [82],
      AS: [82],
      BEGIN: [82],
      BOOLEAN: [82],
      BYVAL: [82],
      BYREF: [82],
      BYTE: [82],
      CALL: [82],
      CASE: [82],
      CONST: [82],
      DATE: [82],
      DECLARE: [82],
      DEFBOOL: [82],
      DEFBYTE: [82],
      DEFDATE: [82],
      DEFDBL: [82],
      DEFDEC: [82],
      DEFCUR: [82],
      DEFINT: [82],
      DEFLNG: [82],
      DEFOBJ: [82],
      DEFSNG: [82],
      DEFSTR: [82],
      DEFVAR: [82],
      DIM: [82],
      DO: [82],
      DOUBLE: [82],
      EACH: [82],
      ELSEIF: [82],
      END_ENUM: [82],
      END_FUNCTION: [82],
      END_IF: [82],
      END_PROPERTY: [82],
      END_SELECT: [82],
      END_SUB: [82],
      END_TYPE: [82],
      END_WITH: [82],
      END: [82],
      ENUM: [82],
      EQV: [82],
      ERASE: [82],
      EVENT: [82],
      EXIT_DO: [82],
      EXIT_FOR: [82],
      EXIT_FUNCTION: [82],
      EXIT_PROPERTY: [82],
      EXIT_SUB: [82],
      FRIEND: [82],
      FOR: [82],
      FUNCTION: [82],
      GET: [82],
      GLOBAL: [82],
      GOSUB: [82],
      GOTO: [82],
      IF: [82],
      IMPLEMENTS: [82],
      IN: [82],
      ISNOT: [82],
      INTEGER: [82],
      LONG: [82],
      LOOP: [82],
      LEN: [82],
      LET: [82],
      LIB: [82],
      LIKE: [82],
      LSET: [82],
      MACRO_CONST: [82],
      MACRO_IF: [82],
      MACRO_ELSEIF: [82],
      MACRO_ELSE: [82],
      MACRO_END_IF: [82],
      MOD: [82],
      NEXT: [82],
      NEW: [82],
      NOT: [82],
      ON_ERROR: [82],
      ON_LOCAL_ERROR: [82],
      ON: [82],
      OPTIONAL: [82],
      OPTION_BASE: [82],
      OPTION_EXPLICIT: [82],
      OPTION_COMPARE: [82],
      OPTION_PRIVATE_MODULE: [82],
      OR: [82],
      PARAMARRAY: [82],
      PRESERVE: [82],
      PRIVATE: [82],
      PROPERTY_GET: [82],
      PROPERTY_LET: [82],
      PROPERTY_SET: [82],
      PTRSAFE: [82],
      PUBLIC: [82],
      RAISEEVENT: [82],
      REDIM: [82],
      RESET: [82],
      RESUME: [82],
      RETURN: [82],
      SELECT: [82],
      SET: [82],
      SINGLE: [82],
      STATIC: [82],
      STEP: [82],
      STOP: [82],
      STRING: [82],
      SUB: [82],
      THEN: [82],
      TO: [82],
      TYPEOF: [82],
      UNTIL: [82],
      VARIANT: [82],
      WEND: [82],
      WHILE: [82],
      WITH: [82],
      WITHEVENTS: [82],
      XOR: [82],
      IMP: [82],
      LPAREN: [82],
      MINUS: [82],
      PLUS: [82],
    },
    sC_Cond_group_def_21: {
      ',': [81],
    },
    comparisonOperator: {
      LT: [83],
      LEQ: [84],
      GT: [85],
      GEQ: [86],
      EQ: [87],
      NEQ: [88],
      IS: [89],
    },
    ifThenElseStmt_group_def_23: {
      ELSE: [90],
    },
    ifThenElseStmt: {
      IF: [91, 92],
    },
    ifBlockStmt: {
      IF: [93],
    },
    ifElseIfBlockStmt: {
      ELSEIF: [94],
    },
    ifElseBlockStmt: {
      ELSE: [95],
    },
    onErrorStmt_group_def_26: {
      ALIAS: [96],
      AND: [96],
      ATTRIBUTE: [96],
      AS: [96],
      BEGIN: [96],
      BOOLEAN: [96],
      BYVAL: [96],
      BYREF: [96],
      BYTE: [96],
      CALL: [96],
      CASE: [96],
      CONST: [96],
      DATE: [96],
      DECLARE: [96],
      DEFBOOL: [96],
      DEFBYTE: [96],
      DEFDATE: [96],
      DEFDBL: [96],
      DEFDEC: [96],
      DEFCUR: [96],
      DEFINT: [96],
      DEFLNG: [96],
      DEFOBJ: [96],
      DEFSNG: [96],
      DEFSTR: [96],
      DEFVAR: [96],
      DIM: [96],
      DO: [96],
      DOUBLE: [96],
      EACH: [96],
      ELSE: [96],
      ELSEIF: [96],
      END_ENUM: [96],
      END_FUNCTION: [96],
      END_IF: [96],
      END_PROPERTY: [96],
      END_SELECT: [96],
      END_SUB: [96],
      END_TYPE: [96],
      END_WITH: [96],
      END: [96],
      ENUM: [96],
      EQV: [96],
      ERASE: [96],
      EVENT: [96],
      EXIT_DO: [96],
      EXIT_FOR: [96],
      EXIT_FUNCTION: [96],
      EXIT_PROPERTY: [96],
      EXIT_SUB: [96],
      FALSE: [96],
      FRIEND: [96],
      FOR: [96],
      FUNCTION: [96],
      GET: [96],
      GLOBAL: [96],
      GOSUB: [96],
      GOTO: [96],
      IF: [96],
      IMPLEMENTS: [96],
      IN: [96],
      ISNOT: [96],
      IS: [96],
      INTEGER: [96],
      LONG: [96],
      LOOP: [96],
      LEN: [96],
      LET: [96],
      LIB: [96],
      LIKE: [96],
      LSET: [96],
      MACRO_CONST: [96],
      MACRO_IF: [96],
      MACRO_ELSEIF: [96],
      MACRO_ELSE: [96],
      MACRO_END_IF: [96],
      MOD: [96],
      NEXT: [96],
      NEW: [96],
      NOT: [96],
      NOTHING: [96],
      NULL: [96],
      ON_ERROR: [96],
      ON_LOCAL_ERROR: [96],
      ON: [96],
      OPTIONAL: [96],
      OPTION_BASE: [96],
      OPTION_EXPLICIT: [96],
      OPTION_COMPARE: [96],
      OPTION_PRIVATE_MODULE: [96],
      OR: [96],
      PARAMARRAY: [96],
      PRESERVE: [96],
      PRIVATE: [96],
      PROPERTY_GET: [96],
      PROPERTY_LET: [96],
      PROPERTY_SET: [96],
      PTRSAFE: [96],
      PUBLIC: [96],
      RAISEEVENT: [96],
      REDIM: [96],
      RESET: [96],
      RESUME: [96],
      RETURN: [96],
      SELECT: [96],
      SET: [96],
      SINGLE: [96],
      STATIC: [96],
      STEP: [96],
      STOP: [96],
      STRING: [96],
      SUB: [96],
      THEN: [96],
      TO: [96],
      TRUE: [96],
      TYPEOF: [96],
      UNTIL: [96],
      VARIANT: [96],
      WEND: [96],
      WHILE: [96],
      WITH: [96],
      WITHEVENTS: [96],
      XOR: [96],
      IMP: [96],
      IDENTIFIER: [96],
    },
    onErrorStmt_group_25: {
      ALIAS: [97],
      AND: [97],
      ATTRIBUTE: [97],
      AS: [97],
      BEGIN: [97],
      BOOLEAN: [97],
      BYVAL: [97],
      BYREF: [97],
      BYTE: [97],
      CALL: [97],
      CASE: [97],
      CONST: [97],
      DATE: [97],
      DECLARE: [97],
      DEFBOOL: [97],
      DEFBYTE: [97],
      DEFDATE: [97],
      DEFDBL: [97],
      DEFDEC: [97],
      DEFCUR: [97],
      DEFINT: [97],
      DEFLNG: [97],
      DEFOBJ: [97],
      DEFSNG: [97],
      DEFSTR: [97],
      DEFVAR: [97],
      DIM: [97],
      DO: [97],
      DOUBLE: [97],
      EACH: [97],
      ELSE: [97],
      ELSEIF: [97],
      END_ENUM: [97],
      END_FUNCTION: [97],
      END_IF: [97],
      END_PROPERTY: [97],
      END_SELECT: [97],
      END_SUB: [97],
      END_TYPE: [97],
      END_WITH: [97],
      END: [97],
      ENUM: [97],
      EQV: [97],
      ERASE: [97],
      EVENT: [97],
      EXIT_DO: [97],
      EXIT_FOR: [97],
      EXIT_FUNCTION: [97],
      EXIT_PROPERTY: [97],
      EXIT_SUB: [97],
      FALSE: [97],
      FRIEND: [97],
      FOR: [97],
      FUNCTION: [97],
      GET: [97],
      GLOBAL: [97],
      GOSUB: [97],
      GOTO: [97],
      IF: [97],
      IMPLEMENTS: [97],
      IN: [97],
      ISNOT: [97],
      IS: [97],
      INTEGER: [97],
      LONG: [97],
      LOOP: [97],
      LEN: [97],
      LET: [97],
      LIB: [97],
      LIKE: [97],
      LSET: [97],
      MACRO_CONST: [97],
      MACRO_IF: [97],
      MACRO_ELSEIF: [97],
      MACRO_ELSE: [97],
      MACRO_END_IF: [97],
      MOD: [97],
      NEXT: [97],
      NEW: [97],
      NOT: [97],
      NOTHING: [97],
      NULL: [97],
      ON_ERROR: [97],
      ON_LOCAL_ERROR: [97],
      ON: [97],
      OPTIONAL: [97],
      OPTION_BASE: [97],
      OPTION_EXPLICIT: [97],
      OPTION_COMPARE: [97],
      OPTION_PRIVATE_MODULE: [97],
      OR: [97],
      PARAMARRAY: [97],
      PRESERVE: [97],
      PRIVATE: [97],
      PROPERTY_GET: [97],
      PROPERTY_LET: [97],
      PROPERTY_SET: [97],
      PTRSAFE: [97],
      PUBLIC: [97],
      RAISEEVENT: [97],
      REDIM: [97],
      RESET: [97],
      RESUME: [97],
      RETURN: [97],
      SELECT: [97],
      SET: [97],
      SINGLE: [97],
      STATIC: [97],
      STEP: [97],
      STOP: [97],
      STRING: [97],
      SUB: [97],
      THEN: [97],
      TO: [97],
      TRUE: [97],
      TYPEOF: [97],
      UNTIL: [97],
      VARIANT: [97],
      WEND: [97],
      WHILE: [97],
      WITH: [97],
      WITHEVENTS: [97],
      XOR: [97],
      IMP: [97],
      IDENTIFIER: [97],
      MINUS: [99],
    },
    onErrorStmt_group_def_27: {
      MINUS: [98],
    },
    onErrorStmt_group_def_28: {
      GOTO: [100],
    },
    onErrorStmt_group_24: {
      GOTO: [101],
      RESUME: [103],
    },
    onErrorStmt_group_def_29: {
      RESUME: [102],
    },
    onErrorStmt: {
      ON_ERROR: [104],
    },
    lineLabel: {
      IDENTIFIER: [105],
    },
    goToStmt: {
      GOTO: [106],
    },
    eraseStmt_group_def_31: {
      ',': [107],
    },
    eraseStmt: {
      ERASE: [108],
    },
    redimStmt_group_def_33: {
      ',': [109],
    },
    redimStmt: {
      REDIM: [110],
    },
    redimSubStmt: {
      '.': [111],
      SPACE_DOT: [111],
      IDENTIFIER: [111],
    },
    exitStmt: {
      EXIT_DO: [112],
      EXIT_FOR: [113],
      EXIT_FUNCTION: [114],
      EXIT_PROPERTY: [115],
      EXIT_SUB: [116],
      END: [117],
    },
    letStmt_group_def_35: {
      EQ: [118],
    },
    letStmt_group_34: {
      EQ: [119],
      PLUS_EQ: [121],
      MINUS_EQ: [123],
    },
    letStmt_group_def_36: {
      PLUS_EQ: [120],
    },
    letStmt_group_def_37: {
      MINUS_EQ: [122],
    },
    letStmt: {
      LET: [124],
      '.': [124],
      SPACE_DOT: [124],
      IDENTIFIER: [124],
    },
    setStmt: {
      SET: [125],
    },
    explicitCallStmt: {
      CALL: [126, 127],
    },
    eCS_MemberProcedureCall_group_def_39: {
      '.': [128],
      SPACE_DOT: [128],
      IDENTIFIER: [128],
    },
    eCS_MemberProcedureCall_group_38: {
      '.': [129],
      SPACE_DOT: [129, 131],
      IDENTIFIER: [129],
    },
    eCS_MemberProcedureCall_group_def_40: {
      SPACE_DOT: [130],
    },
    eCS_MemberProcedureCall_group_def_42: {
      LPAREN: [132],
    },
    eCS_MemberProcedureCall_group_def_44: {
      LPAREN: [133],
    },
    eCS_MemberProcedureCall: {
      CALL: [134],
    },
    eCS_ProcedureCall: {
      CALL: [135],
    },
    implicitCallStmt_InBlock: {
      SPACE_DOT: [136],
      IDENTIFIER: [136, 137],
      '.': [136],
    },
    iCS_B_MemberProcedureCall_group_47: {
      SPACE_DOT: [138, 139],
      '.': [139],
      IDENTIFIER: [139],
    },
    iCS_B_MemberProcedureCall: {
      SPACE_DOT: [140],
      IDENTIFIER: [140],
      '.': [140],
    },
    iCS_B_ProcedureCall: {
      IDENTIFIER: [141],
    },
    argsCall_group_def_51: {
      ',': [142],
    },
    argsCall: {
      ',': [143],
      DOUBLELITERAL: [143],
      INTEGERLITERAL: [143],
      STRINGLITERAL: [143],
      NOTHING: [143],
      NULL: [143],
      TRUE: [143],
      FALSE: [143],
      DATELITERAL: [143],
      '.': [143],
      SPACE_DOT: [143],
      IDENTIFIER: [143],
      ALIAS: [143],
      AND: [143],
      ATTRIBUTE: [143],
      AS: [143],
      BEGIN: [143],
      BOOLEAN: [143],
      BYVAL: [143],
      BYREF: [143],
      BYTE: [143],
      CALL: [143],
      CASE: [143],
      CONST: [143],
      DATE: [143],
      DECLARE: [143],
      DEFBOOL: [143],
      DEFBYTE: [143],
      DEFDATE: [143],
      DEFDBL: [143],
      DEFDEC: [143],
      DEFCUR: [143],
      DEFINT: [143],
      DEFLNG: [143],
      DEFOBJ: [143],
      DEFSNG: [143],
      DEFSTR: [143],
      DEFVAR: [143],
      DIM: [143],
      DO: [143],
      DOUBLE: [143],
      EACH: [143],
      ELSE: [143],
      ELSEIF: [143],
      END_ENUM: [143],
      END_FUNCTION: [143],
      END_IF: [143],
      END_PROPERTY: [143],
      END_SELECT: [143],
      END_SUB: [143],
      END_TYPE: [143],
      END_WITH: [143],
      END: [143],
      ENUM: [143],
      EQV: [143],
      ERASE: [143],
      EVENT: [143],
      EXIT_DO: [143],
      EXIT_FOR: [143],
      EXIT_FUNCTION: [143],
      EXIT_PROPERTY: [143],
      EXIT_SUB: [143],
      FRIEND: [143],
      FOR: [143],
      FUNCTION: [143],
      GET: [143],
      GLOBAL: [143],
      GOSUB: [143],
      GOTO: [143],
      IF: [143],
      IMPLEMENTS: [143],
      IN: [143],
      ISNOT: [143],
      IS: [143],
      INTEGER: [143],
      LONG: [143],
      LOOP: [143],
      LEN: [143],
      LET: [143],
      LIB: [143],
      LIKE: [143],
      LSET: [143],
      MACRO_CONST: [143],
      MACRO_IF: [143],
      MACRO_ELSEIF: [143],
      MACRO_ELSE: [143],
      MACRO_END_IF: [143],
      MOD: [143],
      NEXT: [143],
      NEW: [143],
      NOT: [143],
      ON_ERROR: [143],
      ON_LOCAL_ERROR: [143],
      ON: [143],
      OPTIONAL: [143],
      OPTION_BASE: [143],
      OPTION_EXPLICIT: [143],
      OPTION_COMPARE: [143],
      OPTION_PRIVATE_MODULE: [143],
      OR: [143],
      PARAMARRAY: [143],
      PRESERVE: [143],
      PRIVATE: [143],
      PROPERTY_GET: [143],
      PROPERTY_LET: [143],
      PROPERTY_SET: [143],
      PTRSAFE: [143],
      PUBLIC: [143],
      RAISEEVENT: [143],
      REDIM: [143],
      RESET: [143],
      RESUME: [143],
      RETURN: [143],
      SELECT: [143],
      SET: [143],
      SINGLE: [143],
      STATIC: [143],
      STEP: [143],
      STOP: [143],
      STRING: [143],
      SUB: [143],
      THEN: [143],
      TO: [143],
      TYPEOF: [143],
      UNTIL: [143],
      VARIANT: [143],
      WEND: [143],
      WHILE: [143],
      WITH: [143],
      WITHEVENTS: [143],
      XOR: [143],
      IMP: [143],
      LPAREN: [143],
      MINUS: [143],
      PLUS: [143],
    },
    argCall: {
      DOUBLELITERAL: [144],
      INTEGERLITERAL: [144],
      STRINGLITERAL: [144],
      NOTHING: [144],
      NULL: [144],
      TRUE: [144],
      FALSE: [144],
      DATELITERAL: [144],
      '.': [144],
      SPACE_DOT: [144],
      IDENTIFIER: [144],
      ALIAS: [144],
      AND: [144],
      ATTRIBUTE: [144],
      AS: [144],
      BEGIN: [144],
      BOOLEAN: [144],
      BYVAL: [144],
      BYREF: [144],
      BYTE: [144],
      CALL: [144],
      CASE: [144],
      CONST: [144],
      DATE: [144],
      DECLARE: [144],
      DEFBOOL: [144],
      DEFBYTE: [144],
      DEFDATE: [144],
      DEFDBL: [144],
      DEFDEC: [144],
      DEFCUR: [144],
      DEFINT: [144],
      DEFLNG: [144],
      DEFOBJ: [144],
      DEFSNG: [144],
      DEFSTR: [144],
      DEFVAR: [144],
      DIM: [144],
      DO: [144],
      DOUBLE: [144],
      EACH: [144],
      ELSE: [144],
      ELSEIF: [144],
      END_ENUM: [144],
      END_FUNCTION: [144],
      END_IF: [144],
      END_PROPERTY: [144],
      END_SELECT: [144],
      END_SUB: [144],
      END_TYPE: [144],
      END_WITH: [144],
      END: [144],
      ENUM: [144],
      EQV: [144],
      ERASE: [144],
      EVENT: [144],
      EXIT_DO: [144],
      EXIT_FOR: [144],
      EXIT_FUNCTION: [144],
      EXIT_PROPERTY: [144],
      EXIT_SUB: [144],
      FRIEND: [144],
      FOR: [144],
      FUNCTION: [144],
      GET: [144],
      GLOBAL: [144],
      GOSUB: [144],
      GOTO: [144],
      IF: [144],
      IMPLEMENTS: [144],
      IN: [144],
      ISNOT: [144],
      IS: [144],
      INTEGER: [144],
      LONG: [144],
      LOOP: [144],
      LEN: [144],
      LET: [144],
      LIB: [144],
      LIKE: [144],
      LSET: [144],
      MACRO_CONST: [144],
      MACRO_IF: [144],
      MACRO_ELSEIF: [144],
      MACRO_ELSE: [144],
      MACRO_END_IF: [144],
      MOD: [144],
      NEXT: [144],
      NEW: [144],
      NOT: [144],
      ON_ERROR: [144],
      ON_LOCAL_ERROR: [144],
      ON: [144],
      OPTIONAL: [144],
      OPTION_BASE: [144],
      OPTION_EXPLICIT: [144],
      OPTION_COMPARE: [144],
      OPTION_PRIVATE_MODULE: [144],
      OR: [144],
      PARAMARRAY: [144],
      PRESERVE: [144],
      PRIVATE: [144],
      PROPERTY_GET: [144],
      PROPERTY_LET: [144],
      PROPERTY_SET: [144],
      PTRSAFE: [144],
      PUBLIC: [144],
      RAISEEVENT: [144],
      REDIM: [144],
      RESET: [144],
      RESUME: [144],
      RETURN: [144],
      SELECT: [144],
      SET: [144],
      SINGLE: [144],
      STATIC: [144],
      STEP: [144],
      STOP: [144],
      STRING: [144],
      SUB: [144],
      THEN: [144],
      TO: [144],
      TYPEOF: [144],
      UNTIL: [144],
      VARIANT: [144],
      WEND: [144],
      WHILE: [144],
      WITH: [144],
      WITHEVENTS: [144],
      XOR: [144],
      IMP: [144],
      LPAREN: [144],
      MINUS: [144],
      PLUS: [144],
    },
    variableStmt_group_def_53: {
      DIM: [145],
    },
    variableStmt_group_52: {
      DIM: [146],
      STATIC: [148],
      PRIVATE: [150],
      PUBLIC: [150],
      FRIEND: [150],
      GLOBAL: [150],
    },
    variableStmt_group_def_54: {
      STATIC: [147],
    },
    variableStmt_group_def_55: {
      PRIVATE: [149],
      PUBLIC: [149],
      FRIEND: [149],
      GLOBAL: [149],
    },
    variableStmt: {
      DIM: [151],
      STATIC: [151],
      PRIVATE: [151],
      PUBLIC: [151],
      FRIEND: [151],
      GLOBAL: [151],
    },
    withStmt_group_def_57: {
      '.': [152],
      SPACE_DOT: [152],
      IDENTIFIER: [152],
    },
    withStmt_group_56: {
      '.': [153],
      SPACE_DOT: [153],
      IDENTIFIER: [153],
      NEW: [155],
    },
    withStmt_group_def_58: {
      NEW: [154],
    },
    withStmt: {
      WITH: [156],
    },
    variableListStmt_group_def_60: {
      ',': [157],
    },
    variableListStmt: {
      ALIAS: [158],
      AND: [158],
      ATTRIBUTE: [158],
      AS: [158],
      BEGIN: [158],
      BOOLEAN: [158],
      BYVAL: [158],
      BYREF: [158],
      BYTE: [158],
      CALL: [158],
      CASE: [158],
      CONST: [158],
      DATE: [158],
      DECLARE: [158],
      DEFBOOL: [158],
      DEFBYTE: [158],
      DEFDATE: [158],
      DEFDBL: [158],
      DEFDEC: [158],
      DEFCUR: [158],
      DEFINT: [158],
      DEFLNG: [158],
      DEFOBJ: [158],
      DEFSNG: [158],
      DEFSTR: [158],
      DEFVAR: [158],
      DIM: [158],
      DO: [158],
      DOUBLE: [158],
      EACH: [158],
      ELSE: [158],
      ELSEIF: [158],
      END_ENUM: [158],
      END_FUNCTION: [158],
      END_IF: [158],
      END_PROPERTY: [158],
      END_SELECT: [158],
      END_SUB: [158],
      END_TYPE: [158],
      END_WITH: [158],
      END: [158],
      ENUM: [158],
      EQV: [158],
      ERASE: [158],
      EVENT: [158],
      EXIT_DO: [158],
      EXIT_FOR: [158],
      EXIT_FUNCTION: [158],
      EXIT_PROPERTY: [158],
      EXIT_SUB: [158],
      FALSE: [158],
      FRIEND: [158],
      FOR: [158],
      FUNCTION: [158],
      GET: [158],
      GLOBAL: [158],
      GOSUB: [158],
      GOTO: [158],
      IF: [158],
      IMPLEMENTS: [158],
      IN: [158],
      ISNOT: [158],
      IS: [158],
      INTEGER: [158],
      LONG: [158],
      LOOP: [158],
      LEN: [158],
      LET: [158],
      LIB: [158],
      LIKE: [158],
      LSET: [158],
      MACRO_CONST: [158],
      MACRO_IF: [158],
      MACRO_ELSEIF: [158],
      MACRO_ELSE: [158],
      MACRO_END_IF: [158],
      MOD: [158],
      NEXT: [158],
      NEW: [158],
      NOT: [158],
      NOTHING: [158],
      NULL: [158],
      ON_ERROR: [158],
      ON_LOCAL_ERROR: [158],
      ON: [158],
      OPTIONAL: [158],
      OPTION_BASE: [158],
      OPTION_EXPLICIT: [158],
      OPTION_COMPARE: [158],
      OPTION_PRIVATE_MODULE: [158],
      OR: [158],
      PARAMARRAY: [158],
      PRESERVE: [158],
      PRIVATE: [158],
      PROPERTY_GET: [158],
      PROPERTY_LET: [158],
      PROPERTY_SET: [158],
      PTRSAFE: [158],
      PUBLIC: [158],
      RAISEEVENT: [158],
      REDIM: [158],
      RESET: [158],
      RESUME: [158],
      RETURN: [158],
      SELECT: [158],
      SET: [158],
      SINGLE: [158],
      STATIC: [158],
      STEP: [158],
      STOP: [158],
      STRING: [158],
      SUB: [158],
      THEN: [158],
      TO: [158],
      TRUE: [158],
      TYPEOF: [158],
      UNTIL: [158],
      VARIANT: [158],
      WEND: [158],
      WHILE: [158],
      WITH: [158],
      WITHEVENTS: [158],
      XOR: [158],
      IMP: [158],
      IDENTIFIER: [158],
    },
    variableSubStmt_group_def_62: {
      LPAREN: [159],
    },
    variableSubStmt: {
      ALIAS: [160],
      AND: [160],
      ATTRIBUTE: [160],
      AS: [160],
      BEGIN: [160],
      BOOLEAN: [160],
      BYVAL: [160],
      BYREF: [160],
      BYTE: [160],
      CALL: [160],
      CASE: [160],
      CONST: [160],
      DATE: [160],
      DECLARE: [160],
      DEFBOOL: [160],
      DEFBYTE: [160],
      DEFDATE: [160],
      DEFDBL: [160],
      DEFDEC: [160],
      DEFCUR: [160],
      DEFINT: [160],
      DEFLNG: [160],
      DEFOBJ: [160],
      DEFSNG: [160],
      DEFSTR: [160],
      DEFVAR: [160],
      DIM: [160],
      DO: [160],
      DOUBLE: [160],
      EACH: [160],
      ELSE: [160],
      ELSEIF: [160],
      END_ENUM: [160],
      END_FUNCTION: [160],
      END_IF: [160],
      END_PROPERTY: [160],
      END_SELECT: [160],
      END_SUB: [160],
      END_TYPE: [160],
      END_WITH: [160],
      END: [160],
      ENUM: [160],
      EQV: [160],
      ERASE: [160],
      EVENT: [160],
      EXIT_DO: [160],
      EXIT_FOR: [160],
      EXIT_FUNCTION: [160],
      EXIT_PROPERTY: [160],
      EXIT_SUB: [160],
      FALSE: [160],
      FRIEND: [160],
      FOR: [160],
      FUNCTION: [160],
      GET: [160],
      GLOBAL: [160],
      GOSUB: [160],
      GOTO: [160],
      IF: [160],
      IMPLEMENTS: [160],
      IN: [160],
      ISNOT: [160],
      IS: [160],
      INTEGER: [160],
      LONG: [160],
      LOOP: [160],
      LEN: [160],
      LET: [160],
      LIB: [160],
      LIKE: [160],
      LSET: [160],
      MACRO_CONST: [160],
      MACRO_IF: [160],
      MACRO_ELSEIF: [160],
      MACRO_ELSE: [160],
      MACRO_END_IF: [160],
      MOD: [160],
      NEXT: [160],
      NEW: [160],
      NOT: [160],
      NOTHING: [160],
      NULL: [160],
      ON_ERROR: [160],
      ON_LOCAL_ERROR: [160],
      ON: [160],
      OPTIONAL: [160],
      OPTION_BASE: [160],
      OPTION_EXPLICIT: [160],
      OPTION_COMPARE: [160],
      OPTION_PRIVATE_MODULE: [160],
      OR: [160],
      PARAMARRAY: [160],
      PRESERVE: [160],
      PRIVATE: [160],
      PROPERTY_GET: [160],
      PROPERTY_LET: [160],
      PROPERTY_SET: [160],
      PTRSAFE: [160],
      PUBLIC: [160],
      RAISEEVENT: [160],
      REDIM: [160],
      RESET: [160],
      RESUME: [160],
      RETURN: [160],
      SELECT: [160],
      SET: [160],
      SINGLE: [160],
      STATIC: [160],
      STEP: [160],
      STOP: [160],
      STRING: [160],
      SUB: [160],
      THEN: [160],
      TO: [160],
      TRUE: [160],
      TYPEOF: [160],
      UNTIL: [160],
      VARIANT: [160],
      WEND: [160],
      WHILE: [160],
      WITH: [160],
      WITHEVENTS: [160],
      XOR: [160],
      IMP: [160],
      IDENTIFIER: [160],
    },
    indexes: {
      DOUBLELITERAL: [161],
      INTEGERLITERAL: [161],
      STRINGLITERAL: [161],
      NOTHING: [161],
      NULL: [161],
      TRUE: [161],
      FALSE: [161],
      DATELITERAL: [161],
      '.': [161],
      SPACE_DOT: [161],
      IDENTIFIER: [161],
      ALIAS: [161],
      AND: [161],
      ATTRIBUTE: [161],
      AS: [161],
      BEGIN: [161],
      BOOLEAN: [161],
      BYVAL: [161],
      BYREF: [161],
      BYTE: [161],
      CALL: [161],
      CASE: [161],
      CONST: [161],
      DATE: [161],
      DECLARE: [161],
      DEFBOOL: [161],
      DEFBYTE: [161],
      DEFDATE: [161],
      DEFDBL: [161],
      DEFDEC: [161],
      DEFCUR: [161],
      DEFINT: [161],
      DEFLNG: [161],
      DEFOBJ: [161],
      DEFSNG: [161],
      DEFSTR: [161],
      DEFVAR: [161],
      DIM: [161],
      DO: [161],
      DOUBLE: [161],
      EACH: [161],
      ELSE: [161],
      ELSEIF: [161],
      END_ENUM: [161],
      END_FUNCTION: [161],
      END_IF: [161],
      END_PROPERTY: [161],
      END_SELECT: [161],
      END_SUB: [161],
      END_TYPE: [161],
      END_WITH: [161],
      END: [161],
      ENUM: [161],
      EQV: [161],
      ERASE: [161],
      EVENT: [161],
      EXIT_DO: [161],
      EXIT_FOR: [161],
      EXIT_FUNCTION: [161],
      EXIT_PROPERTY: [161],
      EXIT_SUB: [161],
      FRIEND: [161],
      FOR: [161],
      FUNCTION: [161],
      GET: [161],
      GLOBAL: [161],
      GOSUB: [161],
      GOTO: [161],
      IF: [161],
      IMPLEMENTS: [161],
      IN: [161],
      ISNOT: [161],
      IS: [161],
      INTEGER: [161],
      LONG: [161],
      LOOP: [161],
      LEN: [161],
      LET: [161],
      LIB: [161],
      LIKE: [161],
      LSET: [161],
      MACRO_CONST: [161],
      MACRO_IF: [161],
      MACRO_ELSEIF: [161],
      MACRO_ELSE: [161],
      MACRO_END_IF: [161],
      MOD: [161],
      NEXT: [161],
      NEW: [161],
      NOT: [161],
      ON_ERROR: [161],
      ON_LOCAL_ERROR: [161],
      ON: [161],
      OPTIONAL: [161],
      OPTION_BASE: [161],
      OPTION_EXPLICIT: [161],
      OPTION_COMPARE: [161],
      OPTION_PRIVATE_MODULE: [161],
      OR: [161],
      PARAMARRAY: [161],
      PRESERVE: [161],
      PRIVATE: [161],
      PROPERTY_GET: [161],
      PROPERTY_LET: [161],
      PROPERTY_SET: [161],
      PTRSAFE: [161],
      PUBLIC: [161],
      RAISEEVENT: [161],
      REDIM: [161],
      RESET: [161],
      RESUME: [161],
      RETURN: [161],
      SELECT: [161],
      SET: [161],
      SINGLE: [161],
      STATIC: [161],
      STEP: [161],
      STOP: [161],
      STRING: [161],
      SUB: [161],
      THEN: [161],
      TO: [161],
      TYPEOF: [161],
      UNTIL: [161],
      VARIANT: [161],
      WEND: [161],
      WHILE: [161],
      WITH: [161],
      WITHEVENTS: [161],
      XOR: [161],
      IMP: [161],
      LPAREN: [161],
      MINUS: [161],
      PLUS: [161],
    },
    subscript__group_def_65: {
      DOUBLELITERAL: [162],
      INTEGERLITERAL: [162],
      STRINGLITERAL: [162],
      NOTHING: [162],
      NULL: [162],
      TRUE: [162],
      FALSE: [162],
      DATELITERAL: [162],
      '.': [162],
      SPACE_DOT: [162],
      IDENTIFIER: [162],
      ALIAS: [162],
      AND: [162],
      ATTRIBUTE: [162],
      AS: [162],
      BEGIN: [162],
      BOOLEAN: [162],
      BYVAL: [162],
      BYREF: [162],
      BYTE: [162],
      CALL: [162],
      CASE: [162],
      CONST: [162],
      DATE: [162],
      DECLARE: [162],
      DEFBOOL: [162],
      DEFBYTE: [162],
      DEFDATE: [162],
      DEFDBL: [162],
      DEFDEC: [162],
      DEFCUR: [162],
      DEFINT: [162],
      DEFLNG: [162],
      DEFOBJ: [162],
      DEFSNG: [162],
      DEFSTR: [162],
      DEFVAR: [162],
      DIM: [162],
      DO: [162],
      DOUBLE: [162],
      EACH: [162],
      ELSE: [162],
      ELSEIF: [162],
      END_ENUM: [162],
      END_FUNCTION: [162],
      END_IF: [162],
      END_PROPERTY: [162],
      END_SELECT: [162],
      END_SUB: [162],
      END_TYPE: [162],
      END_WITH: [162],
      END: [162],
      ENUM: [162],
      EQV: [162],
      ERASE: [162],
      EVENT: [162],
      EXIT_DO: [162],
      EXIT_FOR: [162],
      EXIT_FUNCTION: [162],
      EXIT_PROPERTY: [162],
      EXIT_SUB: [162],
      FRIEND: [162],
      FOR: [162],
      FUNCTION: [162],
      GET: [162],
      GLOBAL: [162],
      GOSUB: [162],
      GOTO: [162],
      IF: [162],
      IMPLEMENTS: [162],
      IN: [162],
      ISNOT: [162],
      IS: [162],
      INTEGER: [162],
      LONG: [162],
      LOOP: [162],
      LEN: [162],
      LET: [162],
      LIB: [162],
      LIKE: [162],
      LSET: [162],
      MACRO_CONST: [162],
      MACRO_IF: [162],
      MACRO_ELSEIF: [162],
      MACRO_ELSE: [162],
      MACRO_END_IF: [162],
      MOD: [162],
      NEXT: [162],
      NEW: [162],
      NOT: [162],
      ON_ERROR: [162],
      ON_LOCAL_ERROR: [162],
      ON: [162],
      OPTIONAL: [162],
      OPTION_BASE: [162],
      OPTION_EXPLICIT: [162],
      OPTION_COMPARE: [162],
      OPTION_PRIVATE_MODULE: [162],
      OR: [162],
      PARAMARRAY: [162],
      PRESERVE: [162],
      PRIVATE: [162],
      PROPERTY_GET: [162],
      PROPERTY_LET: [162],
      PROPERTY_SET: [162],
      PTRSAFE: [162],
      PUBLIC: [162],
      RAISEEVENT: [162],
      REDIM: [162],
      RESET: [162],
      RESUME: [162],
      RETURN: [162],
      SELECT: [162],
      SET: [162],
      SINGLE: [162],
      STATIC: [162],
      STEP: [162],
      STOP: [162],
      STRING: [162],
      SUB: [162],
      THEN: [162],
      TO: [162],
      TYPEOF: [162],
      UNTIL: [162],
      VARIANT: [162],
      WEND: [162],
      WHILE: [162],
      WITH: [162],
      WITHEVENTS: [162],
      XOR: [162],
      IMP: [162],
      LPAREN: [162],
      MINUS: [162],
      PLUS: [162],
    },
    subscript_: {
      DOUBLELITERAL: [163, 166],
      INTEGERLITERAL: [163, 166],
      STRINGLITERAL: [163, 166],
      NOTHING: [163, 166],
      NULL: [163, 166],
      TRUE: [163, 166],
      FALSE: [163, 166],
      DATELITERAL: [163, 166],
      '.': [163, 166],
      SPACE_DOT: [163, 166],
      IDENTIFIER: [163, 166],
      ALIAS: [163, 166],
      AND: [163, 166],
      ATTRIBUTE: [163, 166],
      AS: [163, 166],
      BEGIN: [163, 166],
      BOOLEAN: [163, 166],
      BYVAL: [163, 166],
      BYREF: [163, 166],
      BYTE: [163, 166],
      CALL: [163, 166],
      CASE: [163, 166],
      CONST: [163, 166],
      DATE: [163, 166],
      DECLARE: [163, 166],
      DEFBOOL: [163, 166],
      DEFBYTE: [163, 166],
      DEFDATE: [163, 166],
      DEFDBL: [163, 166],
      DEFDEC: [163, 166],
      DEFCUR: [163, 166],
      DEFINT: [163, 166],
      DEFLNG: [163, 166],
      DEFOBJ: [163, 166],
      DEFSNG: [163, 166],
      DEFSTR: [163, 166],
      DEFVAR: [163, 166],
      DIM: [163, 166],
      DO: [163, 166],
      DOUBLE: [163, 166],
      EACH: [163, 166],
      ELSE: [163, 166],
      ELSEIF: [163, 166],
      END_ENUM: [163, 166],
      END_FUNCTION: [163, 166],
      END_IF: [163, 166],
      END_PROPERTY: [163, 166],
      END_SELECT: [163, 166],
      END_SUB: [163, 166],
      END_TYPE: [163, 166],
      END_WITH: [163, 166],
      END: [163, 166],
      ENUM: [163, 166],
      EQV: [163, 166],
      ERASE: [163, 166],
      EVENT: [163, 166],
      EXIT_DO: [163, 166],
      EXIT_FOR: [163, 166],
      EXIT_FUNCTION: [163, 166],
      EXIT_PROPERTY: [163, 166],
      EXIT_SUB: [163, 166],
      FRIEND: [163, 166],
      FOR: [163, 166],
      FUNCTION: [163, 166],
      GET: [163, 166],
      GLOBAL: [163, 166],
      GOSUB: [163, 166],
      GOTO: [163, 166],
      IF: [163, 166],
      IMPLEMENTS: [163, 166],
      IN: [163, 166],
      ISNOT: [163, 166],
      IS: [163, 166],
      INTEGER: [163, 166],
      LONG: [163, 166],
      LOOP: [163, 166],
      LEN: [163, 166],
      LET: [163, 166],
      LIB: [163, 166],
      LIKE: [163, 166],
      LSET: [163, 166],
      MACRO_CONST: [163, 166],
      MACRO_IF: [163, 166],
      MACRO_ELSEIF: [163, 166],
      MACRO_ELSE: [163, 166],
      MACRO_END_IF: [163, 166],
      MOD: [163, 166],
      NEXT: [163, 166],
      NEW: [163, 166],
      NOT: [163, 166],
      ON_ERROR: [163, 166],
      ON_LOCAL_ERROR: [163, 166],
      ON: [163, 166],
      OPTIONAL: [163, 166],
      OPTION_BASE: [163, 166],
      OPTION_EXPLICIT: [163, 166],
      OPTION_COMPARE: [163, 166],
      OPTION_PRIVATE_MODULE: [163, 166],
      OR: [163, 166],
      PARAMARRAY: [163, 166],
      PRESERVE: [163, 166],
      PRIVATE: [163, 166],
      PROPERTY_GET: [163, 166],
      PROPERTY_LET: [163, 166],
      PROPERTY_SET: [163, 166],
      PTRSAFE: [163, 166],
      PUBLIC: [163, 166],
      RAISEEVENT: [163, 166],
      REDIM: [163, 166],
      RESET: [163, 166],
      RESUME: [163, 166],
      RETURN: [163, 166],
      SELECT: [163, 166],
      SET: [163, 166],
      SINGLE: [163, 166],
      STATIC: [163, 166],
      STEP: [163, 166],
      STOP: [163, 166],
      STRING: [163, 166],
      SUB: [163, 166],
      THEN: [163, 166],
      TO: [163, 166],
      TYPEOF: [163, 166],
      UNTIL: [163, 166],
      VARIANT: [163, 166],
      WEND: [163, 166],
      WHILE: [163, 166],
      WITH: [163, 166],
      WITHEVENTS: [163, 166],
      XOR: [163, 166],
      IMP: [163, 166],
      LPAREN: [163, 166],
      MINUS: [163, 166],
      PLUS: [163, 166],
    },
    subscripts_group_def_67: {
      ',': [164],
    },
    subscripts: {
      DOUBLELITERAL: [165],
      INTEGERLITERAL: [165],
      STRINGLITERAL: [165],
      NOTHING: [165],
      NULL: [165],
      TRUE: [165],
      FALSE: [165],
      DATELITERAL: [165],
      ALIAS: [165],
      AND: [165],
      ATTRIBUTE: [165],
      AS: [165],
      BEGIN: [165],
      BOOLEAN: [165],
      BYVAL: [165],
      BYREF: [165],
      BYTE: [165],
      CALL: [165],
      CASE: [165],
      CONST: [165],
      DATE: [165],
      DECLARE: [165],
      DEFBOOL: [165],
      DEFBYTE: [165],
      DEFDATE: [165],
      DEFDBL: [165],
      DEFDEC: [165],
      DEFCUR: [165],
      DEFINT: [165],
      DEFLNG: [165],
      DEFOBJ: [165],
      DEFSNG: [165],
      DEFSTR: [165],
      DEFVAR: [165],
      DIM: [165],
      DO: [165],
      DOUBLE: [165],
      EACH: [165],
      ELSE: [165],
      ELSEIF: [165],
      END_ENUM: [165],
      END_FUNCTION: [165],
      END_IF: [165],
      END_PROPERTY: [165],
      END_SELECT: [165],
      END_SUB: [165],
      END_TYPE: [165],
      END_WITH: [165],
      END: [165],
      ENUM: [165],
      EQV: [165],
      ERASE: [165],
      EVENT: [165],
      EXIT_DO: [165],
      EXIT_FOR: [165],
      EXIT_FUNCTION: [165],
      EXIT_PROPERTY: [165],
      EXIT_SUB: [165],
      FRIEND: [165],
      FOR: [165],
      FUNCTION: [165],
      GET: [165],
      GLOBAL: [165],
      GOSUB: [165],
      GOTO: [165],
      IF: [165],
      IMPLEMENTS: [165],
      IN: [165],
      ISNOT: [165],
      IS: [165],
      INTEGER: [165],
      LONG: [165],
      LOOP: [165],
      LEN: [165],
      LET: [165],
      LIB: [165],
      LIKE: [165],
      LSET: [165],
      MACRO_CONST: [165],
      MACRO_IF: [165],
      MACRO_ELSEIF: [165],
      MACRO_ELSE: [165],
      MACRO_END_IF: [165],
      MOD: [165],
      NEXT: [165],
      NEW: [165],
      NOT: [165],
      ON_ERROR: [165],
      ON_LOCAL_ERROR: [165],
      ON: [165],
      OPTIONAL: [165],
      OPTION_BASE: [165],
      OPTION_EXPLICIT: [165],
      OPTION_COMPARE: [165],
      OPTION_PRIVATE_MODULE: [165],
      OR: [165],
      PARAMARRAY: [165],
      PRESERVE: [165],
      PRIVATE: [165],
      PROPERTY_GET: [165],
      PROPERTY_LET: [165],
      PROPERTY_SET: [165],
      PTRSAFE: [165],
      PUBLIC: [165],
      RAISEEVENT: [165],
      REDIM: [165],
      RESET: [165],
      RESUME: [165],
      RETURN: [165],
      SELECT: [165],
      SET: [165],
      SINGLE: [165],
      STATIC: [165],
      STEP: [165],
      STOP: [165],
      STRING: [165],
      SUB: [165],
      THEN: [165],
      TO: [165],
      TYPEOF: [165],
      UNTIL: [165],
      VARIANT: [165],
      WEND: [165],
      WHILE: [165],
      WITH: [165],
      WITHEVENTS: [165],
      XOR: [165],
      IMP: [165],
      IDENTIFIER: [165],
      LPAREN: [165],
      MINUS: [165],
      PLUS: [165],
      '.': [165],
      SPACE_DOT: [165],
    },
    argList_group_def_71: {
      ',': [167],
    },
    argList_group_def_72: {
      OPTIONAL: [168],
      PARAMARRAY: [168],
      ALIAS: [168],
      AND: [168],
      ATTRIBUTE: [168],
      AS: [168],
      BEGIN: [168],
      BOOLEAN: [168],
      BYVAL: [168],
      BYREF: [168],
      BYTE: [168],
      CALL: [168],
      CASE: [168],
      CONST: [168],
      DATE: [168],
      DECLARE: [168],
      DEFBOOL: [168],
      DEFBYTE: [168],
      DEFDATE: [168],
      DEFDBL: [168],
      DEFDEC: [168],
      DEFCUR: [168],
      DEFINT: [168],
      DEFLNG: [168],
      DEFOBJ: [168],
      DEFSNG: [168],
      DEFSTR: [168],
      DEFVAR: [168],
      DIM: [168],
      DO: [168],
      DOUBLE: [168],
      EACH: [168],
      ELSE: [168],
      ELSEIF: [168],
      END_ENUM: [168],
      END_FUNCTION: [168],
      END_IF: [168],
      END_PROPERTY: [168],
      END_SELECT: [168],
      END_SUB: [168],
      END_TYPE: [168],
      END_WITH: [168],
      END: [168],
      ENUM: [168],
      EQV: [168],
      ERASE: [168],
      EVENT: [168],
      EXIT_DO: [168],
      EXIT_FOR: [168],
      EXIT_FUNCTION: [168],
      EXIT_PROPERTY: [168],
      EXIT_SUB: [168],
      FALSE: [168],
      FRIEND: [168],
      FOR: [168],
      FUNCTION: [168],
      GET: [168],
      GLOBAL: [168],
      GOSUB: [168],
      GOTO: [168],
      IF: [168],
      IMPLEMENTS: [168],
      IN: [168],
      ISNOT: [168],
      IS: [168],
      INTEGER: [168],
      LONG: [168],
      LOOP: [168],
      LEN: [168],
      LET: [168],
      LIB: [168],
      LIKE: [168],
      LSET: [168],
      MACRO_CONST: [168],
      MACRO_IF: [168],
      MACRO_ELSEIF: [168],
      MACRO_ELSE: [168],
      MACRO_END_IF: [168],
      MOD: [168],
      NEXT: [168],
      NEW: [168],
      NOT: [168],
      NOTHING: [168],
      NULL: [168],
      ON_ERROR: [168],
      ON_LOCAL_ERROR: [168],
      ON: [168],
      OPTION_BASE: [168],
      OPTION_EXPLICIT: [168],
      OPTION_COMPARE: [168],
      OPTION_PRIVATE_MODULE: [168],
      OR: [168],
      PRESERVE: [168],
      PRIVATE: [168],
      PROPERTY_GET: [168],
      PROPERTY_LET: [168],
      PROPERTY_SET: [168],
      PTRSAFE: [168],
      PUBLIC: [168],
      RAISEEVENT: [168],
      REDIM: [168],
      RESET: [168],
      RESUME: [168],
      RETURN: [168],
      SELECT: [168],
      SET: [168],
      SINGLE: [168],
      STATIC: [168],
      STEP: [168],
      STOP: [168],
      STRING: [168],
      SUB: [168],
      THEN: [168],
      TO: [168],
      TRUE: [168],
      TYPEOF: [168],
      UNTIL: [168],
      VARIANT: [168],
      WEND: [168],
      WHILE: [168],
      WITH: [168],
      WITHEVENTS: [168],
      XOR: [168],
      IMP: [168],
      IDENTIFIER: [168],
    },
    argList: {
      LPAREN: [169],
    },
    valueStmt_p_end: {
      DOUBLELITERAL: [170],
      INTEGERLITERAL: [170],
      STRINGLITERAL: [170],
      NOTHING: [170, 172],
      NULL: [170, 172],
      TRUE: [170, 172],
      FALSE: [170, 172],
      DATELITERAL: [170],
      '.': [171],
      SPACE_DOT: [171],
      IDENTIFIER: [171, 172],
      ALIAS: [172],
      AND: [172],
      ATTRIBUTE: [172],
      AS: [172],
      BEGIN: [172],
      BOOLEAN: [172],
      BYVAL: [172],
      BYREF: [172],
      BYTE: [172],
      CALL: [172],
      CASE: [172],
      CONST: [172],
      DATE: [172],
      DECLARE: [172],
      DEFBOOL: [172],
      DEFBYTE: [172],
      DEFDATE: [172],
      DEFDBL: [172],
      DEFDEC: [172],
      DEFCUR: [172],
      DEFINT: [172],
      DEFLNG: [172],
      DEFOBJ: [172],
      DEFSNG: [172],
      DEFSTR: [172],
      DEFVAR: [172],
      DIM: [172],
      DO: [172],
      DOUBLE: [172],
      EACH: [172],
      ELSE: [172],
      ELSEIF: [172],
      END_ENUM: [172],
      END_FUNCTION: [172],
      END_IF: [172],
      END_PROPERTY: [172],
      END_SELECT: [172],
      END_SUB: [172],
      END_TYPE: [172],
      END_WITH: [172],
      END: [172],
      ENUM: [172],
      EQV: [172],
      ERASE: [172],
      EVENT: [172],
      EXIT_DO: [172],
      EXIT_FOR: [172],
      EXIT_FUNCTION: [172],
      EXIT_PROPERTY: [172],
      EXIT_SUB: [172],
      FRIEND: [172],
      FOR: [172],
      FUNCTION: [172],
      GET: [172],
      GLOBAL: [172],
      GOSUB: [172],
      GOTO: [172],
      IF: [172],
      IMPLEMENTS: [172],
      IN: [172],
      ISNOT: [172],
      IS: [172],
      INTEGER: [172],
      LONG: [172],
      LOOP: [172],
      LEN: [172],
      LET: [172],
      LIB: [172],
      LIKE: [172],
      LSET: [172],
      MACRO_CONST: [172],
      MACRO_IF: [172],
      MACRO_ELSEIF: [172],
      MACRO_ELSE: [172],
      MACRO_END_IF: [172],
      MOD: [172],
      NEXT: [172],
      NEW: [172, 173],
      NOT: [172],
      ON_ERROR: [172],
      ON_LOCAL_ERROR: [172],
      ON: [172],
      OPTIONAL: [172],
      OPTION_BASE: [172],
      OPTION_EXPLICIT: [172],
      OPTION_COMPARE: [172],
      OPTION_PRIVATE_MODULE: [172],
      OR: [172],
      PARAMARRAY: [172],
      PRESERVE: [172],
      PRIVATE: [172],
      PROPERTY_GET: [172],
      PROPERTY_LET: [172],
      PROPERTY_SET: [172],
      PTRSAFE: [172],
      PUBLIC: [172],
      RAISEEVENT: [172],
      REDIM: [172],
      RESET: [172],
      RESUME: [172],
      RETURN: [172],
      SELECT: [172],
      SET: [172],
      SINGLE: [172],
      STATIC: [172],
      STEP: [172],
      STOP: [172],
      STRING: [172],
      SUB: [172],
      THEN: [172],
      TO: [172],
      TYPEOF: [172],
      UNTIL: [172],
      VARIANT: [172],
      WEND: [172],
      WHILE: [172],
      WITH: [172],
      WITHEVENTS: [172],
      XOR: [172],
      IMP: [172],
      LPAREN: [174],
    },
    implicitCallStmt_InStmt: {
      IDENTIFIER: [175, 176, 177],
      '.': [175],
      SPACE_DOT: [175],
    },
    iCS_S_MembersCall_group_def_75: {
      IDENTIFIER: [178],
    },
    iCS_S_MembersCall_group_74: {
      IDENTIFIER: [179, 181],
    },
    iCS_S_MembersCall_group_def_76: {
      IDENTIFIER: [180],
    },
    iCS_S_MembersCall_group_def_77: {
      IDENTIFIER: [182],
      '.': [182],
    },
    iCS_S_MembersCall_group_73: {
      IDENTIFIER: [183],
      '.': [183],
      SPACE_DOT: [185],
    },
    iCS_S_MembersCall_group_def_78: {
      SPACE_DOT: [184],
    },
    iCS_S_MembersCall: {
      IDENTIFIER: [186],
      '.': [186],
      SPACE_DOT: [186],
    },
    iCS_S_MemberCall_group_def_81: {
      ALIAS: [187],
      AND: [187],
      ATTRIBUTE: [187],
      AS: [187],
      BEGIN: [187],
      BOOLEAN: [187],
      BYVAL: [187],
      BYREF: [187],
      BYTE: [187],
      CALL: [187],
      CASE: [187],
      CONST: [187],
      DATE: [187],
      DECLARE: [187],
      DEFBOOL: [187],
      DEFBYTE: [187],
      DEFDATE: [187],
      DEFDBL: [187],
      DEFDEC: [187],
      DEFCUR: [187],
      DEFINT: [187],
      DEFLNG: [187],
      DEFOBJ: [187],
      DEFSNG: [187],
      DEFSTR: [187],
      DEFVAR: [187],
      DIM: [187],
      DO: [187],
      DOUBLE: [187],
      EACH: [187],
      ELSE: [187],
      ELSEIF: [187],
      END_ENUM: [187],
      END_FUNCTION: [187],
      END_IF: [187],
      END_PROPERTY: [187],
      END_SELECT: [187],
      END_SUB: [187],
      END_TYPE: [187],
      END_WITH: [187],
      END: [187],
      ENUM: [187],
      EQV: [187],
      ERASE: [187],
      EVENT: [187],
      EXIT_DO: [187],
      EXIT_FOR: [187],
      EXIT_FUNCTION: [187],
      EXIT_PROPERTY: [187],
      EXIT_SUB: [187],
      FALSE: [187],
      FRIEND: [187],
      FOR: [187],
      FUNCTION: [187],
      GET: [187],
      GLOBAL: [187],
      GOSUB: [187],
      GOTO: [187],
      IF: [187],
      IMPLEMENTS: [187],
      IN: [187],
      ISNOT: [187],
      IS: [187],
      INTEGER: [187],
      LONG: [187],
      LOOP: [187],
      LEN: [187],
      LET: [187],
      LIB: [187],
      LIKE: [187],
      LSET: [187],
      MACRO_CONST: [187],
      MACRO_IF: [187],
      MACRO_ELSEIF: [187],
      MACRO_ELSE: [187],
      MACRO_END_IF: [187],
      MOD: [187],
      NEXT: [187],
      NEW: [187],
      NOT: [187],
      NOTHING: [187],
      NULL: [187],
      ON_ERROR: [187],
      ON_LOCAL_ERROR: [187],
      ON: [187],
      OPTIONAL: [187],
      OPTION_BASE: [187],
      OPTION_EXPLICIT: [187],
      OPTION_COMPARE: [187],
      OPTION_PRIVATE_MODULE: [187],
      OR: [187],
      PARAMARRAY: [187],
      PRESERVE: [187],
      PRIVATE: [187],
      PROPERTY_GET: [187],
      PROPERTY_LET: [187],
      PROPERTY_SET: [187],
      PTRSAFE: [187],
      PUBLIC: [187],
      RAISEEVENT: [187],
      REDIM: [187],
      RESET: [187],
      RESUME: [187],
      RETURN: [187],
      SELECT: [187],
      SET: [187],
      SINGLE: [187],
      STATIC: [187],
      STEP: [187],
      STOP: [187],
      STRING: [187],
      SUB: [187],
      THEN: [187],
      TO: [187],
      TRUE: [187],
      TYPEOF: [187],
      UNTIL: [187],
      VARIANT: [187],
      WEND: [187],
      WHILE: [187],
      WITH: [187],
      WITHEVENTS: [187],
      XOR: [187],
      IMP: [187],
      IDENTIFIER: [187],
    },
    iCS_S_MemberCall_group_80: {
      ALIAS: [188, 190],
      AND: [188, 190],
      ATTRIBUTE: [188, 190],
      AS: [188, 190],
      BEGIN: [188, 190],
      BOOLEAN: [188, 190],
      BYVAL: [188, 190],
      BYREF: [188, 190],
      BYTE: [188, 190],
      CALL: [188, 190],
      CASE: [188, 190],
      CONST: [188, 190],
      DATE: [188, 190],
      DECLARE: [188, 190],
      DEFBOOL: [188, 190],
      DEFBYTE: [188, 190],
      DEFDATE: [188, 190],
      DEFDBL: [188, 190],
      DEFDEC: [188, 190],
      DEFCUR: [188, 190],
      DEFINT: [188, 190],
      DEFLNG: [188, 190],
      DEFOBJ: [188, 190],
      DEFSNG: [188, 190],
      DEFSTR: [188, 190],
      DEFVAR: [188, 190],
      DIM: [188, 190],
      DO: [188, 190],
      DOUBLE: [188, 190],
      EACH: [188, 190],
      ELSE: [188, 190],
      ELSEIF: [188, 190],
      END_ENUM: [188, 190],
      END_FUNCTION: [188, 190],
      END_IF: [188, 190],
      END_PROPERTY: [188, 190],
      END_SELECT: [188, 190],
      END_SUB: [188, 190],
      END_TYPE: [188, 190],
      END_WITH: [188, 190],
      END: [188, 190],
      ENUM: [188, 190],
      EQV: [188, 190],
      ERASE: [188, 190],
      EVENT: [188, 190],
      EXIT_DO: [188, 190],
      EXIT_FOR: [188, 190],
      EXIT_FUNCTION: [188, 190],
      EXIT_PROPERTY: [188, 190],
      EXIT_SUB: [188, 190],
      FALSE: [188, 190],
      FRIEND: [188, 190],
      FOR: [188, 190],
      FUNCTION: [188, 190],
      GET: [188, 190],
      GLOBAL: [188, 190],
      GOSUB: [188, 190],
      GOTO: [188, 190],
      IF: [188, 190],
      IMPLEMENTS: [188, 190],
      IN: [188, 190],
      ISNOT: [188, 190],
      IS: [188, 190],
      INTEGER: [188, 190],
      LONG: [188, 190],
      LOOP: [188, 190],
      LEN: [188, 190],
      LET: [188, 190],
      LIB: [188, 190],
      LIKE: [188, 190],
      LSET: [188, 190],
      MACRO_CONST: [188, 190],
      MACRO_IF: [188, 190],
      MACRO_ELSEIF: [188, 190],
      MACRO_ELSE: [188, 190],
      MACRO_END_IF: [188, 190],
      MOD: [188, 190],
      NEXT: [188, 190],
      NEW: [188, 190],
      NOT: [188, 190],
      NOTHING: [188, 190],
      NULL: [188, 190],
      ON_ERROR: [188, 190],
      ON_LOCAL_ERROR: [188, 190],
      ON: [188, 190],
      OPTIONAL: [188, 190],
      OPTION_BASE: [188, 190],
      OPTION_EXPLICIT: [188, 190],
      OPTION_COMPARE: [188, 190],
      OPTION_PRIVATE_MODULE: [188, 190],
      OR: [188, 190],
      PARAMARRAY: [188, 190],
      PRESERVE: [188, 190],
      PRIVATE: [188, 190],
      PROPERTY_GET: [188, 190],
      PROPERTY_LET: [188, 190],
      PROPERTY_SET: [188, 190],
      PTRSAFE: [188, 190],
      PUBLIC: [188, 190],
      RAISEEVENT: [188, 190],
      REDIM: [188, 190],
      RESET: [188, 190],
      RESUME: [188, 190],
      RETURN: [188, 190],
      SELECT: [188, 190],
      SET: [188, 190],
      SINGLE: [188, 190],
      STATIC: [188, 190],
      STEP: [188, 190],
      STOP: [188, 190],
      STRING: [188, 190],
      SUB: [188, 190],
      THEN: [188, 190],
      TO: [188, 190],
      TRUE: [188, 190],
      TYPEOF: [188, 190],
      UNTIL: [188, 190],
      VARIANT: [188, 190],
      WEND: [188, 190],
      WHILE: [188, 190],
      WITH: [188, 190],
      WITHEVENTS: [188, 190],
      XOR: [188, 190],
      IMP: [188, 190],
      IDENTIFIER: [188, 190],
    },
    iCS_S_MemberCall_group_def_82: {
      ALIAS: [189],
      AND: [189],
      ATTRIBUTE: [189],
      AS: [189],
      BEGIN: [189],
      BOOLEAN: [189],
      BYVAL: [189],
      BYREF: [189],
      BYTE: [189],
      CALL: [189],
      CASE: [189],
      CONST: [189],
      DATE: [189],
      DECLARE: [189],
      DEFBOOL: [189],
      DEFBYTE: [189],
      DEFDATE: [189],
      DEFDBL: [189],
      DEFDEC: [189],
      DEFCUR: [189],
      DEFINT: [189],
      DEFLNG: [189],
      DEFOBJ: [189],
      DEFSNG: [189],
      DEFSTR: [189],
      DEFVAR: [189],
      DIM: [189],
      DO: [189],
      DOUBLE: [189],
      EACH: [189],
      ELSE: [189],
      ELSEIF: [189],
      END_ENUM: [189],
      END_FUNCTION: [189],
      END_IF: [189],
      END_PROPERTY: [189],
      END_SELECT: [189],
      END_SUB: [189],
      END_TYPE: [189],
      END_WITH: [189],
      END: [189],
      ENUM: [189],
      EQV: [189],
      ERASE: [189],
      EVENT: [189],
      EXIT_DO: [189],
      EXIT_FOR: [189],
      EXIT_FUNCTION: [189],
      EXIT_PROPERTY: [189],
      EXIT_SUB: [189],
      FALSE: [189],
      FRIEND: [189],
      FOR: [189],
      FUNCTION: [189],
      GET: [189],
      GLOBAL: [189],
      GOSUB: [189],
      GOTO: [189],
      IF: [189],
      IMPLEMENTS: [189],
      IN: [189],
      ISNOT: [189],
      IS: [189],
      INTEGER: [189],
      LONG: [189],
      LOOP: [189],
      LEN: [189],
      LET: [189],
      LIB: [189],
      LIKE: [189],
      LSET: [189],
      MACRO_CONST: [189],
      MACRO_IF: [189],
      MACRO_ELSEIF: [189],
      MACRO_ELSE: [189],
      MACRO_END_IF: [189],
      MOD: [189],
      NEXT: [189],
      NEW: [189],
      NOT: [189],
      NOTHING: [189],
      NULL: [189],
      ON_ERROR: [189],
      ON_LOCAL_ERROR: [189],
      ON: [189],
      OPTIONAL: [189],
      OPTION_BASE: [189],
      OPTION_EXPLICIT: [189],
      OPTION_COMPARE: [189],
      OPTION_PRIVATE_MODULE: [189],
      OR: [189],
      PARAMARRAY: [189],
      PRESERVE: [189],
      PRIVATE: [189],
      PROPERTY_GET: [189],
      PROPERTY_LET: [189],
      PROPERTY_SET: [189],
      PTRSAFE: [189],
      PUBLIC: [189],
      RAISEEVENT: [189],
      REDIM: [189],
      RESET: [189],
      RESUME: [189],
      RETURN: [189],
      SELECT: [189],
      SET: [189],
      SINGLE: [189],
      STATIC: [189],
      STEP: [189],
      STOP: [189],
      STRING: [189],
      SUB: [189],
      THEN: [189],
      TO: [189],
      TRUE: [189],
      TYPEOF: [189],
      UNTIL: [189],
      VARIANT: [189],
      WEND: [189],
      WHILE: [189],
      WITH: [189],
      WITHEVENTS: [189],
      XOR: [189],
      IMP: [189],
      IDENTIFIER: [189],
    },
    iCS_S_MemberCall: {
      '.': [191],
    },
    iCS_S_SpaceMemberCall_group_83: {
      ALIAS: [192, 193],
      AND: [192, 193],
      ATTRIBUTE: [192, 193],
      AS: [192, 193],
      BEGIN: [192, 193],
      BOOLEAN: [192, 193],
      BYVAL: [192, 193],
      BYREF: [192, 193],
      BYTE: [192, 193],
      CALL: [192, 193],
      CASE: [192, 193],
      CONST: [192, 193],
      DATE: [192, 193],
      DECLARE: [192, 193],
      DEFBOOL: [192, 193],
      DEFBYTE: [192, 193],
      DEFDATE: [192, 193],
      DEFDBL: [192, 193],
      DEFDEC: [192, 193],
      DEFCUR: [192, 193],
      DEFINT: [192, 193],
      DEFLNG: [192, 193],
      DEFOBJ: [192, 193],
      DEFSNG: [192, 193],
      DEFSTR: [192, 193],
      DEFVAR: [192, 193],
      DIM: [192, 193],
      DO: [192, 193],
      DOUBLE: [192, 193],
      EACH: [192, 193],
      ELSE: [192, 193],
      ELSEIF: [192, 193],
      END_ENUM: [192, 193],
      END_FUNCTION: [192, 193],
      END_IF: [192, 193],
      END_PROPERTY: [192, 193],
      END_SELECT: [192, 193],
      END_SUB: [192, 193],
      END_TYPE: [192, 193],
      END_WITH: [192, 193],
      END: [192, 193],
      ENUM: [192, 193],
      EQV: [192, 193],
      ERASE: [192, 193],
      EVENT: [192, 193],
      EXIT_DO: [192, 193],
      EXIT_FOR: [192, 193],
      EXIT_FUNCTION: [192, 193],
      EXIT_PROPERTY: [192, 193],
      EXIT_SUB: [192, 193],
      FALSE: [192, 193],
      FRIEND: [192, 193],
      FOR: [192, 193],
      FUNCTION: [192, 193],
      GET: [192, 193],
      GLOBAL: [192, 193],
      GOSUB: [192, 193],
      GOTO: [192, 193],
      IF: [192, 193],
      IMPLEMENTS: [192, 193],
      IN: [192, 193],
      ISNOT: [192, 193],
      IS: [192, 193],
      INTEGER: [192, 193],
      LONG: [192, 193],
      LOOP: [192, 193],
      LEN: [192, 193],
      LET: [192, 193],
      LIB: [192, 193],
      LIKE: [192, 193],
      LSET: [192, 193],
      MACRO_CONST: [192, 193],
      MACRO_IF: [192, 193],
      MACRO_ELSEIF: [192, 193],
      MACRO_ELSE: [192, 193],
      MACRO_END_IF: [192, 193],
      MOD: [192, 193],
      NEXT: [192, 193],
      NEW: [192, 193],
      NOT: [192, 193],
      NOTHING: [192, 193],
      NULL: [192, 193],
      ON_ERROR: [192, 193],
      ON_LOCAL_ERROR: [192, 193],
      ON: [192, 193],
      OPTIONAL: [192, 193],
      OPTION_BASE: [192, 193],
      OPTION_EXPLICIT: [192, 193],
      OPTION_COMPARE: [192, 193],
      OPTION_PRIVATE_MODULE: [192, 193],
      OR: [192, 193],
      PARAMARRAY: [192, 193],
      PRESERVE: [192, 193],
      PRIVATE: [192, 193],
      PROPERTY_GET: [192, 193],
      PROPERTY_LET: [192, 193],
      PROPERTY_SET: [192, 193],
      PTRSAFE: [192, 193],
      PUBLIC: [192, 193],
      RAISEEVENT: [192, 193],
      REDIM: [192, 193],
      RESET: [192, 193],
      RESUME: [192, 193],
      RETURN: [192, 193],
      SELECT: [192, 193],
      SET: [192, 193],
      SINGLE: [192, 193],
      STATIC: [192, 193],
      STEP: [192, 193],
      STOP: [192, 193],
      STRING: [192, 193],
      SUB: [192, 193],
      THEN: [192, 193],
      TO: [192, 193],
      TRUE: [192, 193],
      TYPEOF: [192, 193],
      UNTIL: [192, 193],
      VARIANT: [192, 193],
      WEND: [192, 193],
      WHILE: [192, 193],
      WITH: [192, 193],
      WITHEVENTS: [192, 193],
      XOR: [192, 193],
      IMP: [192, 193],
      IDENTIFIER: [192, 193],
    },
    iCS_S_SpaceMemberCall: {
      SPACE_DOT: [194],
    },
    iCS_S_ProcedureOrArrayCall: {
      IDENTIFIER: [195],
    },
    mCS_S_ProcedureOrArrayCall: {
      ALIAS: [196],
      AND: [196],
      ATTRIBUTE: [196],
      AS: [196],
      BEGIN: [196],
      BOOLEAN: [196],
      BYVAL: [196],
      BYREF: [196],
      BYTE: [196],
      CALL: [196],
      CASE: [196],
      CONST: [196],
      DATE: [196],
      DECLARE: [196],
      DEFBOOL: [196],
      DEFBYTE: [196],
      DEFDATE: [196],
      DEFDBL: [196],
      DEFDEC: [196],
      DEFCUR: [196],
      DEFINT: [196],
      DEFLNG: [196],
      DEFOBJ: [196],
      DEFSNG: [196],
      DEFSTR: [196],
      DEFVAR: [196],
      DIM: [196],
      DO: [196],
      DOUBLE: [196],
      EACH: [196],
      ELSE: [196],
      ELSEIF: [196],
      END_ENUM: [196],
      END_FUNCTION: [196],
      END_IF: [196],
      END_PROPERTY: [196],
      END_SELECT: [196],
      END_SUB: [196],
      END_TYPE: [196],
      END_WITH: [196],
      END: [196],
      ENUM: [196],
      EQV: [196],
      ERASE: [196],
      EVENT: [196],
      EXIT_DO: [196],
      EXIT_FOR: [196],
      EXIT_FUNCTION: [196],
      EXIT_PROPERTY: [196],
      EXIT_SUB: [196],
      FALSE: [196],
      FRIEND: [196],
      FOR: [196],
      FUNCTION: [196],
      GET: [196],
      GLOBAL: [196],
      GOSUB: [196],
      GOTO: [196],
      IF: [196],
      IMPLEMENTS: [196],
      IN: [196],
      ISNOT: [196],
      IS: [196],
      INTEGER: [196],
      LONG: [196],
      LOOP: [196],
      LEN: [196],
      LET: [196],
      LIB: [196],
      LIKE: [196],
      LSET: [196],
      MACRO_CONST: [196],
      MACRO_IF: [196],
      MACRO_ELSEIF: [196],
      MACRO_ELSE: [196],
      MACRO_END_IF: [196],
      MOD: [196],
      NEXT: [196],
      NEW: [196],
      NOT: [196],
      NOTHING: [196],
      NULL: [196],
      ON_ERROR: [196],
      ON_LOCAL_ERROR: [196],
      ON: [196],
      OPTIONAL: [196],
      OPTION_BASE: [196],
      OPTION_EXPLICIT: [196],
      OPTION_COMPARE: [196],
      OPTION_PRIVATE_MODULE: [196],
      OR: [196],
      PARAMARRAY: [196],
      PRESERVE: [196],
      PRIVATE: [196],
      PROPERTY_GET: [196],
      PROPERTY_LET: [196],
      PROPERTY_SET: [196],
      PTRSAFE: [196],
      PUBLIC: [196],
      RAISEEVENT: [196],
      REDIM: [196],
      RESET: [196],
      RESUME: [196],
      RETURN: [196],
      SELECT: [196],
      SET: [196],
      SINGLE: [196],
      STATIC: [196],
      STEP: [196],
      STOP: [196],
      STRING: [196],
      SUB: [196],
      THEN: [196],
      TO: [196],
      TRUE: [196],
      TYPEOF: [196],
      UNTIL: [196],
      VARIANT: [196],
      WEND: [196],
      WHILE: [196],
      WITH: [196],
      WITHEVENTS: [196],
      XOR: [196],
      IMP: [196],
      IDENTIFIER: [196],
    },
    iCS_S_VariableOrProcedureCall: {
      IDENTIFIER: [197],
    },
    mCS_S_VariableOrProcedureCall: {
      ALIAS: [198],
      AND: [198],
      ATTRIBUTE: [198],
      AS: [198],
      BEGIN: [198],
      BOOLEAN: [198],
      BYVAL: [198],
      BYREF: [198],
      BYTE: [198],
      CALL: [198],
      CASE: [198],
      CONST: [198],
      DATE: [198],
      DECLARE: [198],
      DEFBOOL: [198],
      DEFBYTE: [198],
      DEFDATE: [198],
      DEFDBL: [198],
      DEFDEC: [198],
      DEFCUR: [198],
      DEFINT: [198],
      DEFLNG: [198],
      DEFOBJ: [198],
      DEFSNG: [198],
      DEFSTR: [198],
      DEFVAR: [198],
      DIM: [198],
      DO: [198],
      DOUBLE: [198],
      EACH: [198],
      ELSE: [198],
      ELSEIF: [198],
      END_ENUM: [198],
      END_FUNCTION: [198],
      END_IF: [198],
      END_PROPERTY: [198],
      END_SELECT: [198],
      END_SUB: [198],
      END_TYPE: [198],
      END_WITH: [198],
      END: [198],
      ENUM: [198],
      EQV: [198],
      ERASE: [198],
      EVENT: [198],
      EXIT_DO: [198],
      EXIT_FOR: [198],
      EXIT_FUNCTION: [198],
      EXIT_PROPERTY: [198],
      EXIT_SUB: [198],
      FALSE: [198],
      FRIEND: [198],
      FOR: [198],
      FUNCTION: [198],
      GET: [198],
      GLOBAL: [198],
      GOSUB: [198],
      GOTO: [198],
      IF: [198],
      IMPLEMENTS: [198],
      IN: [198],
      ISNOT: [198],
      IS: [198],
      INTEGER: [198],
      LONG: [198],
      LOOP: [198],
      LEN: [198],
      LET: [198],
      LIB: [198],
      LIKE: [198],
      LSET: [198],
      MACRO_CONST: [198],
      MACRO_IF: [198],
      MACRO_ELSEIF: [198],
      MACRO_ELSE: [198],
      MACRO_END_IF: [198],
      MOD: [198],
      NEXT: [198],
      NEW: [198],
      NOT: [198],
      NOTHING: [198],
      NULL: [198],
      ON_ERROR: [198],
      ON_LOCAL_ERROR: [198],
      ON: [198],
      OPTIONAL: [198],
      OPTION_BASE: [198],
      OPTION_EXPLICIT: [198],
      OPTION_COMPARE: [198],
      OPTION_PRIVATE_MODULE: [198],
      OR: [198],
      PARAMARRAY: [198],
      PRESERVE: [198],
      PRIVATE: [198],
      PROPERTY_GET: [198],
      PROPERTY_LET: [198],
      PROPERTY_SET: [198],
      PTRSAFE: [198],
      PUBLIC: [198],
      RAISEEVENT: [198],
      REDIM: [198],
      RESET: [198],
      RESUME: [198],
      RETURN: [198],
      SELECT: [198],
      SET: [198],
      SINGLE: [198],
      STATIC: [198],
      STEP: [198],
      STOP: [198],
      STRING: [198],
      SUB: [198],
      THEN: [198],
      TO: [198],
      TRUE: [198],
      TYPEOF: [198],
      UNTIL: [198],
      VARIANT: [198],
      WEND: [198],
      WHILE: [198],
      WITH: [198],
      WITHEVENTS: [198],
      XOR: [198],
      IMP: [198],
      IDENTIFIER: [198],
    },
    literal: {
      DOUBLELITERAL: [199],
      INTEGERLITERAL: [200],
      STRINGLITERAL: [201],
      NOTHING: [202],
      NULL: [203],
      TRUE: [204],
      FALSE: [205],
      DATELITERAL: [206],
    },
    typeHint: {
      '&': [207],
      '%': [208],
      '#': [209],
      '!': [210],
      '@': [211],
      $: [212],
    },
    arg_group_def_89: {
      BYVAL: [213],
    },
    arg_group_88: {
      BYVAL: [214],
      BYREF: [216],
    },
    arg_group_def_90: {
      BYREF: [215],
    },
    arg_group_def_92: {
      LPAREN: [217],
    },
    arg: {
      OPTIONAL: [218],
      BYVAL: [218],
      BYREF: [218],
      PARAMARRAY: [218],
      ALIAS: [218],
      AND: [218],
      ATTRIBUTE: [218],
      AS: [218],
      BEGIN: [218],
      BOOLEAN: [218],
      BYTE: [218],
      CALL: [218],
      CASE: [218],
      CONST: [218],
      DATE: [218],
      DECLARE: [218],
      DEFBOOL: [218],
      DEFBYTE: [218],
      DEFDATE: [218],
      DEFDBL: [218],
      DEFDEC: [218],
      DEFCUR: [218],
      DEFINT: [218],
      DEFLNG: [218],
      DEFOBJ: [218],
      DEFSNG: [218],
      DEFSTR: [218],
      DEFVAR: [218],
      DIM: [218],
      DO: [218],
      DOUBLE: [218],
      EACH: [218],
      ELSE: [218],
      ELSEIF: [218],
      END_ENUM: [218],
      END_FUNCTION: [218],
      END_IF: [218],
      END_PROPERTY: [218],
      END_SELECT: [218],
      END_SUB: [218],
      END_TYPE: [218],
      END_WITH: [218],
      END: [218],
      ENUM: [218],
      EQV: [218],
      ERASE: [218],
      EVENT: [218],
      EXIT_DO: [218],
      EXIT_FOR: [218],
      EXIT_FUNCTION: [218],
      EXIT_PROPERTY: [218],
      EXIT_SUB: [218],
      FALSE: [218],
      FRIEND: [218],
      FOR: [218],
      FUNCTION: [218],
      GET: [218],
      GLOBAL: [218],
      GOSUB: [218],
      GOTO: [218],
      IF: [218],
      IMPLEMENTS: [218],
      IN: [218],
      ISNOT: [218],
      IS: [218],
      INTEGER: [218],
      LONG: [218],
      LOOP: [218],
      LEN: [218],
      LET: [218],
      LIB: [218],
      LIKE: [218],
      LSET: [218],
      MACRO_CONST: [218],
      MACRO_IF: [218],
      MACRO_ELSEIF: [218],
      MACRO_ELSE: [218],
      MACRO_END_IF: [218],
      MOD: [218],
      NEXT: [218],
      NEW: [218],
      NOT: [218],
      NOTHING: [218],
      NULL: [218],
      ON_ERROR: [218],
      ON_LOCAL_ERROR: [218],
      ON: [218],
      OPTION_BASE: [218],
      OPTION_EXPLICIT: [218],
      OPTION_COMPARE: [218],
      OPTION_PRIVATE_MODULE: [218],
      OR: [218],
      PRESERVE: [218],
      PRIVATE: [218],
      PROPERTY_GET: [218],
      PROPERTY_LET: [218],
      PROPERTY_SET: [218],
      PTRSAFE: [218],
      PUBLIC: [218],
      RAISEEVENT: [218],
      REDIM: [218],
      RESET: [218],
      RESUME: [218],
      RETURN: [218],
      SELECT: [218],
      SET: [218],
      SINGLE: [218],
      STATIC: [218],
      STEP: [218],
      STOP: [218],
      STRING: [218],
      SUB: [218],
      THEN: [218],
      TO: [218],
      TRUE: [218],
      TYPEOF: [218],
      UNTIL: [218],
      VARIANT: [218],
      WEND: [218],
      WHILE: [218],
      WITH: [218],
      WITHEVENTS: [218],
      XOR: [218],
      IMP: [218],
      IDENTIFIER: [218],
    },
    argDefaultValue: {
      EQ: [219],
    },
    asTypeClause: {
      AS: [220],
    },
    type__group_def_94: {
      BOOLEAN: [221],
      BYTE: [221],
      DOUBLE: [221],
      INTEGER: [221],
      LONG: [221],
      SINGLE: [221],
      VARIANT: [221],
      STRING: [221],
      DATE: [221],
    },
    type__group_93: {
      BOOLEAN: [222, 224],
      BYTE: [222, 224],
      DOUBLE: [222, 224],
      INTEGER: [222, 224],
      LONG: [222, 224],
      SINGLE: [222, 224],
      VARIANT: [222, 224],
      STRING: [222, 224],
      DATE: [222, 224],
      ALIAS: [224],
      AND: [224],
      ATTRIBUTE: [224],
      AS: [224],
      BEGIN: [224],
      BYVAL: [224],
      BYREF: [224],
      CALL: [224],
      CASE: [224],
      CONST: [224],
      DECLARE: [224],
      DEFBOOL: [224],
      DEFBYTE: [224],
      DEFDATE: [224],
      DEFDBL: [224],
      DEFDEC: [224],
      DEFCUR: [224],
      DEFINT: [224],
      DEFLNG: [224],
      DEFOBJ: [224],
      DEFSNG: [224],
      DEFSTR: [224],
      DEFVAR: [224],
      DIM: [224],
      DO: [224],
      EACH: [224],
      ELSE: [224],
      ELSEIF: [224],
      END_ENUM: [224],
      END_FUNCTION: [224],
      END_IF: [224],
      END_PROPERTY: [224],
      END_SELECT: [224],
      END_SUB: [224],
      END_TYPE: [224],
      END_WITH: [224],
      END: [224],
      ENUM: [224],
      EQV: [224],
      ERASE: [224],
      EVENT: [224],
      EXIT_DO: [224],
      EXIT_FOR: [224],
      EXIT_FUNCTION: [224],
      EXIT_PROPERTY: [224],
      EXIT_SUB: [224],
      FALSE: [224],
      FRIEND: [224],
      FOR: [224],
      FUNCTION: [224],
      GET: [224],
      GLOBAL: [224],
      GOSUB: [224],
      GOTO: [224],
      IF: [224],
      IMPLEMENTS: [224],
      IN: [224],
      ISNOT: [224],
      IS: [224],
      LOOP: [224],
      LEN: [224],
      LET: [224],
      LIB: [224],
      LIKE: [224],
      LSET: [224],
      MACRO_CONST: [224],
      MACRO_IF: [224],
      MACRO_ELSEIF: [224],
      MACRO_ELSE: [224],
      MACRO_END_IF: [224],
      MOD: [224],
      NEXT: [224],
      NEW: [224],
      NOT: [224],
      NOTHING: [224],
      NULL: [224],
      ON_ERROR: [224],
      ON_LOCAL_ERROR: [224],
      ON: [224],
      OPTIONAL: [224],
      OPTION_BASE: [224],
      OPTION_EXPLICIT: [224],
      OPTION_COMPARE: [224],
      OPTION_PRIVATE_MODULE: [224],
      OR: [224],
      PARAMARRAY: [224],
      PRESERVE: [224],
      PRIVATE: [224],
      PROPERTY_GET: [224],
      PROPERTY_LET: [224],
      PROPERTY_SET: [224],
      PTRSAFE: [224],
      PUBLIC: [224],
      RAISEEVENT: [224],
      REDIM: [224],
      RESET: [224],
      RESUME: [224],
      RETURN: [224],
      SELECT: [224],
      SET: [224],
      STATIC: [224],
      STEP: [224],
      STOP: [224],
      SUB: [224],
      THEN: [224],
      TO: [224],
      TRUE: [224],
      TYPEOF: [224],
      UNTIL: [224],
      WEND: [224],
      WHILE: [224],
      WITH: [224],
      WITHEVENTS: [224],
      XOR: [224],
      IMP: [224],
      IDENTIFIER: [224],
    },
    type__group_def_95: {
      ALIAS: [223],
      AND: [223],
      ATTRIBUTE: [223],
      AS: [223],
      BEGIN: [223],
      BOOLEAN: [223],
      BYVAL: [223],
      BYREF: [223],
      BYTE: [223],
      CALL: [223],
      CASE: [223],
      CONST: [223],
      DATE: [223],
      DECLARE: [223],
      DEFBOOL: [223],
      DEFBYTE: [223],
      DEFDATE: [223],
      DEFDBL: [223],
      DEFDEC: [223],
      DEFCUR: [223],
      DEFINT: [223],
      DEFLNG: [223],
      DEFOBJ: [223],
      DEFSNG: [223],
      DEFSTR: [223],
      DEFVAR: [223],
      DIM: [223],
      DO: [223],
      DOUBLE: [223],
      EACH: [223],
      ELSE: [223],
      ELSEIF: [223],
      END_ENUM: [223],
      END_FUNCTION: [223],
      END_IF: [223],
      END_PROPERTY: [223],
      END_SELECT: [223],
      END_SUB: [223],
      END_TYPE: [223],
      END_WITH: [223],
      END: [223],
      ENUM: [223],
      EQV: [223],
      ERASE: [223],
      EVENT: [223],
      EXIT_DO: [223],
      EXIT_FOR: [223],
      EXIT_FUNCTION: [223],
      EXIT_PROPERTY: [223],
      EXIT_SUB: [223],
      FALSE: [223],
      FRIEND: [223],
      FOR: [223],
      FUNCTION: [223],
      GET: [223],
      GLOBAL: [223],
      GOSUB: [223],
      GOTO: [223],
      IF: [223],
      IMPLEMENTS: [223],
      IN: [223],
      ISNOT: [223],
      IS: [223],
      INTEGER: [223],
      LONG: [223],
      LOOP: [223],
      LEN: [223],
      LET: [223],
      LIB: [223],
      LIKE: [223],
      LSET: [223],
      MACRO_CONST: [223],
      MACRO_IF: [223],
      MACRO_ELSEIF: [223],
      MACRO_ELSE: [223],
      MACRO_END_IF: [223],
      MOD: [223],
      NEXT: [223],
      NEW: [223],
      NOT: [223],
      NOTHING: [223],
      NULL: [223],
      ON_ERROR: [223],
      ON_LOCAL_ERROR: [223],
      ON: [223],
      OPTIONAL: [223],
      OPTION_BASE: [223],
      OPTION_EXPLICIT: [223],
      OPTION_COMPARE: [223],
      OPTION_PRIVATE_MODULE: [223],
      OR: [223],
      PARAMARRAY: [223],
      PRESERVE: [223],
      PRIVATE: [223],
      PROPERTY_GET: [223],
      PROPERTY_LET: [223],
      PROPERTY_SET: [223],
      PTRSAFE: [223],
      PUBLIC: [223],
      RAISEEVENT: [223],
      REDIM: [223],
      RESET: [223],
      RESUME: [223],
      RETURN: [223],
      SELECT: [223],
      SET: [223],
      SINGLE: [223],
      STATIC: [223],
      STEP: [223],
      STOP: [223],
      STRING: [223],
      SUB: [223],
      THEN: [223],
      TO: [223],
      TRUE: [223],
      TYPEOF: [223],
      UNTIL: [223],
      VARIANT: [223],
      WEND: [223],
      WHILE: [223],
      WITH: [223],
      WITHEVENTS: [223],
      XOR: [223],
      IMP: [223],
      IDENTIFIER: [223],
    },
    type_: {
      BOOLEAN: [225],
      BYTE: [225],
      DOUBLE: [225],
      INTEGER: [225],
      LONG: [225],
      SINGLE: [225],
      VARIANT: [225],
      STRING: [225],
      DATE: [225],
      ALIAS: [225],
      AND: [225],
      ATTRIBUTE: [225],
      AS: [225],
      BEGIN: [225],
      BYVAL: [225],
      BYREF: [225],
      CALL: [225],
      CASE: [225],
      CONST: [225],
      DECLARE: [225],
      DEFBOOL: [225],
      DEFBYTE: [225],
      DEFDATE: [225],
      DEFDBL: [225],
      DEFDEC: [225],
      DEFCUR: [225],
      DEFINT: [225],
      DEFLNG: [225],
      DEFOBJ: [225],
      DEFSNG: [225],
      DEFSTR: [225],
      DEFVAR: [225],
      DIM: [225],
      DO: [225],
      EACH: [225],
      ELSE: [225],
      ELSEIF: [225],
      END_ENUM: [225],
      END_FUNCTION: [225],
      END_IF: [225],
      END_PROPERTY: [225],
      END_SELECT: [225],
      END_SUB: [225],
      END_TYPE: [225],
      END_WITH: [225],
      END: [225],
      ENUM: [225],
      EQV: [225],
      ERASE: [225],
      EVENT: [225],
      EXIT_DO: [225],
      EXIT_FOR: [225],
      EXIT_FUNCTION: [225],
      EXIT_PROPERTY: [225],
      EXIT_SUB: [225],
      FALSE: [225],
      FRIEND: [225],
      FOR: [225],
      FUNCTION: [225],
      GET: [225],
      GLOBAL: [225],
      GOSUB: [225],
      GOTO: [225],
      IF: [225],
      IMPLEMENTS: [225],
      IN: [225],
      ISNOT: [225],
      IS: [225],
      LOOP: [225],
      LEN: [225],
      LET: [225],
      LIB: [225],
      LIKE: [225],
      LSET: [225],
      MACRO_CONST: [225],
      MACRO_IF: [225],
      MACRO_ELSEIF: [225],
      MACRO_ELSE: [225],
      MACRO_END_IF: [225],
      MOD: [225],
      NEXT: [225],
      NEW: [225],
      NOT: [225],
      NOTHING: [225],
      NULL: [225],
      ON_ERROR: [225],
      ON_LOCAL_ERROR: [225],
      ON: [225],
      OPTIONAL: [225],
      OPTION_BASE: [225],
      OPTION_EXPLICIT: [225],
      OPTION_COMPARE: [225],
      OPTION_PRIVATE_MODULE: [225],
      OR: [225],
      PARAMARRAY: [225],
      PRESERVE: [225],
      PRIVATE: [225],
      PROPERTY_GET: [225],
      PROPERTY_LET: [225],
      PROPERTY_SET: [225],
      PTRSAFE: [225],
      PUBLIC: [225],
      RAISEEVENT: [225],
      REDIM: [225],
      RESET: [225],
      RESUME: [225],
      RETURN: [225],
      SELECT: [225],
      SET: [225],
      STATIC: [225],
      STEP: [225],
      STOP: [225],
      SUB: [225],
      THEN: [225],
      TO: [225],
      TRUE: [225],
      TYPEOF: [225],
      UNTIL: [225],
      WEND: [225],
      WHILE: [225],
      WITH: [225],
      WITHEVENTS: [225],
      XOR: [225],
      IMP: [225],
      IDENTIFIER: [225],
    },
    complexType_group_def_98: {
      '.': [226],
    },
    complexType: {
      ALIAS: [227],
      AND: [227],
      ATTRIBUTE: [227],
      AS: [227],
      BEGIN: [227],
      BOOLEAN: [227],
      BYVAL: [227],
      BYREF: [227],
      BYTE: [227],
      CALL: [227],
      CASE: [227],
      CONST: [227],
      DATE: [227],
      DECLARE: [227],
      DEFBOOL: [227],
      DEFBYTE: [227],
      DEFDATE: [227],
      DEFDBL: [227],
      DEFDEC: [227],
      DEFCUR: [227],
      DEFINT: [227],
      DEFLNG: [227],
      DEFOBJ: [227],
      DEFSNG: [227],
      DEFSTR: [227],
      DEFVAR: [227],
      DIM: [227],
      DO: [227],
      DOUBLE: [227],
      EACH: [227],
      ELSE: [227],
      ELSEIF: [227],
      END_ENUM: [227],
      END_FUNCTION: [227],
      END_IF: [227],
      END_PROPERTY: [227],
      END_SELECT: [227],
      END_SUB: [227],
      END_TYPE: [227],
      END_WITH: [227],
      END: [227],
      ENUM: [227],
      EQV: [227],
      ERASE: [227],
      EVENT: [227],
      EXIT_DO: [227],
      EXIT_FOR: [227],
      EXIT_FUNCTION: [227],
      EXIT_PROPERTY: [227],
      EXIT_SUB: [227],
      FALSE: [227],
      FRIEND: [227],
      FOR: [227],
      FUNCTION: [227],
      GET: [227],
      GLOBAL: [227],
      GOSUB: [227],
      GOTO: [227],
      IF: [227],
      IMPLEMENTS: [227],
      IN: [227],
      ISNOT: [227],
      IS: [227],
      INTEGER: [227],
      LONG: [227],
      LOOP: [227],
      LEN: [227],
      LET: [227],
      LIB: [227],
      LIKE: [227],
      LSET: [227],
      MACRO_CONST: [227],
      MACRO_IF: [227],
      MACRO_ELSEIF: [227],
      MACRO_ELSE: [227],
      MACRO_END_IF: [227],
      MOD: [227],
      NEXT: [227],
      NEW: [227],
      NOT: [227],
      NOTHING: [227],
      NULL: [227],
      ON_ERROR: [227],
      ON_LOCAL_ERROR: [227],
      ON: [227],
      OPTIONAL: [227],
      OPTION_BASE: [227],
      OPTION_EXPLICIT: [227],
      OPTION_COMPARE: [227],
      OPTION_PRIVATE_MODULE: [227],
      OR: [227],
      PARAMARRAY: [227],
      PRESERVE: [227],
      PRIVATE: [227],
      PROPERTY_GET: [227],
      PROPERTY_LET: [227],
      PROPERTY_SET: [227],
      PTRSAFE: [227],
      PUBLIC: [227],
      RAISEEVENT: [227],
      REDIM: [227],
      RESET: [227],
      RESUME: [227],
      RETURN: [227],
      SELECT: [227],
      SET: [227],
      SINGLE: [227],
      STATIC: [227],
      STEP: [227],
      STOP: [227],
      STRING: [227],
      SUB: [227],
      THEN: [227],
      TO: [227],
      TRUE: [227],
      TYPEOF: [227],
      UNTIL: [227],
      VARIANT: [227],
      WEND: [227],
      WHILE: [227],
      WITH: [227],
      WITHEVENTS: [227],
      XOR: [227],
      IMP: [227],
      IDENTIFIER: [227],
    },
    baseType: {
      BOOLEAN: [228],
      BYTE: [229],
      DOUBLE: [230],
      INTEGER: [231],
      LONG: [232],
      SINGLE: [233],
      VARIANT: [234],
      STRING: [235],
      DATE: [236],
    },
    ambiguousIdentifier: {
      ALIAS: [237],
      AND: [238],
      ATTRIBUTE: [239],
      AS: [240],
      BEGIN: [241],
      BOOLEAN: [242],
      BYVAL: [243],
      BYREF: [244],
      BYTE: [245],
      CALL: [246],
      CASE: [247],
      CONST: [248],
      DATE: [249],
      DECLARE: [250],
      DEFBOOL: [251],
      DEFBYTE: [252],
      DEFDATE: [253],
      DEFDBL: [254],
      DEFDEC: [255],
      DEFCUR: [256],
      DEFINT: [257],
      DEFLNG: [258],
      DEFOBJ: [259],
      DEFSNG: [260],
      DEFSTR: [261],
      DEFVAR: [262],
      DIM: [263],
      DO: [264],
      DOUBLE: [265],
      EACH: [266],
      ELSE: [267],
      ELSEIF: [268],
      END_ENUM: [269],
      END_FUNCTION: [270],
      END_IF: [271],
      END_PROPERTY: [272],
      END_SELECT: [273],
      END_SUB: [274],
      END_TYPE: [275],
      END_WITH: [276],
      END: [277],
      ENUM: [278],
      EQV: [279],
      ERASE: [280],
      EVENT: [281],
      EXIT_DO: [282],
      EXIT_FOR: [283],
      EXIT_FUNCTION: [284],
      EXIT_PROPERTY: [285],
      EXIT_SUB: [286],
      FALSE: [287],
      FRIEND: [288],
      FOR: [289],
      FUNCTION: [290],
      GET: [291],
      GLOBAL: [292],
      GOSUB: [293],
      GOTO: [294],
      IF: [295],
      IMPLEMENTS: [296],
      IN: [297],
      ISNOT: [298],
      IS: [299],
      INTEGER: [300],
      LONG: [301],
      LOOP: [302],
      LEN: [303],
      LET: [304],
      LIB: [305],
      LIKE: [306],
      LSET: [307],
      MACRO_CONST: [308],
      MACRO_IF: [309],
      MACRO_ELSEIF: [310],
      MACRO_ELSE: [311],
      MACRO_END_IF: [312],
      MOD: [313],
      NEXT: [314],
      NEW: [315],
      NOT: [316],
      NOTHING: [317],
      NULL: [318],
      ON_ERROR: [319],
      ON_LOCAL_ERROR: [320],
      ON: [321],
      OPTIONAL: [322],
      OPTION_BASE: [323],
      OPTION_EXPLICIT: [324],
      OPTION_COMPARE: [325],
      OPTION_PRIVATE_MODULE: [326],
      OR: [327],
      PARAMARRAY: [328],
      PRESERVE: [329],
      PRIVATE: [330],
      PROPERTY_GET: [331],
      PROPERTY_LET: [332],
      PROPERTY_SET: [333],
      PTRSAFE: [334],
      PUBLIC: [335],
      RAISEEVENT: [336],
      REDIM: [337],
      RESET: [338],
      RESUME: [339],
      RETURN: [340],
      SELECT: [341],
      SET: [342],
      SINGLE: [343],
      STATIC: [344],
      STEP: [345],
      STOP: [346],
      STRING: [347],
      SUB: [348],
      THEN: [349],
      TO: [350],
      TRUE: [351],
      TYPEOF: [352],
      UNTIL: [353],
      VARIANT: [354],
      WEND: [355],
      WHILE: [356],
      WITH: [357],
      WITHEVENTS: [358],
      XOR: [359],
      IMP: [360],
      IDENTIFIER: [362],
    },
    certainIdentifier: {
      IDENTIFIER: [361],
    },
    valueStmt: {
      DOUBLELITERAL: [363],
      INTEGERLITERAL: [363],
      STRINGLITERAL: [363],
      NOTHING: [363],
      NULL: [363],
      TRUE: [363],
      FALSE: [363],
      DATELITERAL: [363],
      '.': [363],
      SPACE_DOT: [363],
      IDENTIFIER: [363],
      ALIAS: [363],
      AND: [363],
      ATTRIBUTE: [363],
      AS: [363],
      BEGIN: [363],
      BOOLEAN: [363],
      BYVAL: [363],
      BYREF: [363],
      BYTE: [363],
      CALL: [363],
      CASE: [363],
      CONST: [363],
      DATE: [363],
      DECLARE: [363],
      DEFBOOL: [363],
      DEFBYTE: [363],
      DEFDATE: [363],
      DEFDBL: [363],
      DEFDEC: [363],
      DEFCUR: [363],
      DEFINT: [363],
      DEFLNG: [363],
      DEFOBJ: [363],
      DEFSNG: [363],
      DEFSTR: [363],
      DEFVAR: [363],
      DIM: [363],
      DO: [363],
      DOUBLE: [363],
      EACH: [363],
      ELSE: [363],
      ELSEIF: [363],
      END_ENUM: [363],
      END_FUNCTION: [363],
      END_IF: [363],
      END_PROPERTY: [363],
      END_SELECT: [363],
      END_SUB: [363],
      END_TYPE: [363],
      END_WITH: [363],
      END: [363],
      ENUM: [363],
      EQV: [363],
      ERASE: [363],
      EVENT: [363],
      EXIT_DO: [363],
      EXIT_FOR: [363],
      EXIT_FUNCTION: [363],
      EXIT_PROPERTY: [363],
      EXIT_SUB: [363],
      FRIEND: [363],
      FOR: [363],
      FUNCTION: [363],
      GET: [363],
      GLOBAL: [363],
      GOSUB: [363],
      GOTO: [363],
      IF: [363],
      IMPLEMENTS: [363],
      IN: [363],
      ISNOT: [363],
      IS: [363],
      INTEGER: [363],
      LONG: [363],
      LOOP: [363],
      LEN: [363],
      LET: [363],
      LIB: [363],
      LIKE: [363],
      LSET: [363],
      MACRO_CONST: [363],
      MACRO_IF: [363],
      MACRO_ELSEIF: [363],
      MACRO_ELSE: [363],
      MACRO_END_IF: [363],
      MOD: [363],
      NEXT: [363],
      NEW: [363],
      NOT: [363, 364],
      ON_ERROR: [363],
      ON_LOCAL_ERROR: [363],
      ON: [363],
      OPTIONAL: [363],
      OPTION_BASE: [363],
      OPTION_EXPLICIT: [363],
      OPTION_COMPARE: [363],
      OPTION_PRIVATE_MODULE: [363],
      OR: [363],
      PARAMARRAY: [363],
      PRESERVE: [363],
      PRIVATE: [363],
      PROPERTY_GET: [363],
      PROPERTY_LET: [363],
      PROPERTY_SET: [363],
      PTRSAFE: [363],
      PUBLIC: [363],
      RAISEEVENT: [363],
      REDIM: [363],
      RESET: [363],
      RESUME: [363],
      RETURN: [363],
      SELECT: [363],
      SET: [363],
      SINGLE: [363],
      STATIC: [363],
      STEP: [363],
      STOP: [363],
      STRING: [363],
      SUB: [363],
      THEN: [363],
      TO: [363],
      TYPEOF: [363],
      UNTIL: [363],
      VARIANT: [363],
      WEND: [363],
      WHILE: [363],
      WITH: [363],
      WITHEVENTS: [363],
      XOR: [363],
      IMP: [363],
      LPAREN: [363],
      MINUS: [363],
      PLUS: [363],
    },
    '(valueStmt_p_2)1_': {
      IS: [365, 392],
      ISNOT: [367, 392],
      GEQ: [368, 392],
      LEQ: [369, 392],
      GT: [370, 392],
      LT: [371, 392],
      NEQ: [372, 392],
      EQ: [373, 392],
      NEWLINE: [392],
      COMMENT: [392],
      REMCOMMENT: [392],
      COLON: [392],
      ELSE: [392],
      STEP: [392],
      THEN: [392],
      ',': [392],
      TO: [392],
      RPAREN: [392],
      LPAREN: [392],
      POW: [392],
      MULT: [392],
      DIV: [392],
      IDIV: [392],
      MOD: [392],
      PLUS: [392],
      MINUS: [392],
      AMPERSAND: [392],
      XOR: [392],
      OR: [392],
      AND: [392],
    },
    valueStmt_p_2: {
      DOUBLELITERAL: [366],
      INTEGERLITERAL: [366],
      STRINGLITERAL: [366],
      NOTHING: [366],
      NULL: [366],
      TRUE: [366],
      FALSE: [366],
      DATELITERAL: [366],
      '.': [366],
      SPACE_DOT: [366],
      IDENTIFIER: [366],
      ALIAS: [366],
      AND: [366],
      ATTRIBUTE: [366],
      AS: [366],
      BEGIN: [366],
      BOOLEAN: [366],
      BYVAL: [366],
      BYREF: [366],
      BYTE: [366],
      CALL: [366],
      CASE: [366],
      CONST: [366],
      DATE: [366],
      DECLARE: [366],
      DEFBOOL: [366],
      DEFBYTE: [366],
      DEFDATE: [366],
      DEFDBL: [366],
      DEFDEC: [366],
      DEFCUR: [366],
      DEFINT: [366],
      DEFLNG: [366],
      DEFOBJ: [366],
      DEFSNG: [366],
      DEFSTR: [366],
      DEFVAR: [366],
      DIM: [366],
      DO: [366],
      DOUBLE: [366],
      EACH: [366],
      ELSE: [366],
      ELSEIF: [366],
      END_ENUM: [366],
      END_FUNCTION: [366],
      END_IF: [366],
      END_PROPERTY: [366],
      END_SELECT: [366],
      END_SUB: [366],
      END_TYPE: [366],
      END_WITH: [366],
      END: [366],
      ENUM: [366],
      EQV: [366],
      ERASE: [366],
      EVENT: [366],
      EXIT_DO: [366],
      EXIT_FOR: [366],
      EXIT_FUNCTION: [366],
      EXIT_PROPERTY: [366],
      EXIT_SUB: [366],
      FRIEND: [366],
      FOR: [366],
      FUNCTION: [366],
      GET: [366],
      GLOBAL: [366],
      GOSUB: [366],
      GOTO: [366],
      IF: [366],
      IMPLEMENTS: [366],
      IN: [366],
      ISNOT: [366],
      IS: [366],
      INTEGER: [366],
      LONG: [366],
      LOOP: [366],
      LEN: [366],
      LET: [366],
      LIB: [366],
      LIKE: [366],
      LSET: [366],
      MACRO_CONST: [366],
      MACRO_IF: [366],
      MACRO_ELSEIF: [366],
      MACRO_ELSE: [366],
      MACRO_END_IF: [366],
      MOD: [366],
      NEXT: [366],
      NEW: [366],
      NOT: [366],
      ON_ERROR: [366],
      ON_LOCAL_ERROR: [366],
      ON: [366],
      OPTIONAL: [366],
      OPTION_BASE: [366],
      OPTION_EXPLICIT: [366],
      OPTION_COMPARE: [366],
      OPTION_PRIVATE_MODULE: [366],
      OR: [366],
      PARAMARRAY: [366],
      PRESERVE: [366],
      PRIVATE: [366],
      PROPERTY_GET: [366],
      PROPERTY_LET: [366],
      PROPERTY_SET: [366],
      PTRSAFE: [366],
      PUBLIC: [366],
      RAISEEVENT: [366],
      REDIM: [366],
      RESET: [366],
      RESUME: [366],
      RETURN: [366],
      SELECT: [366],
      SET: [366],
      SINGLE: [366],
      STATIC: [366],
      STEP: [366],
      STOP: [366],
      STRING: [366],
      SUB: [366],
      THEN: [366],
      TO: [366],
      TYPEOF: [366],
      UNTIL: [366],
      VARIANT: [366],
      WEND: [366],
      WHILE: [366],
      WITH: [366],
      WITHEVENTS: [366],
      XOR: [366],
      IMP: [366],
      LPAREN: [366],
      MINUS: [366],
      PLUS: [366],
    },
    '(valueStmt_p_3)1_': {
      XOR: [374, 393],
      OR: [376, 393],
      AND: [377, 393],
      IS: [393],
      ISNOT: [393],
      GEQ: [393],
      LEQ: [393],
      GT: [393],
      LT: [393],
      NEQ: [393],
      EQ: [393],
      NEWLINE: [393],
      COMMENT: [393],
      REMCOMMENT: [393],
      COLON: [393],
      ELSE: [393],
      STEP: [393],
      THEN: [393],
      ',': [393],
      TO: [393],
      RPAREN: [393],
      LPAREN: [393],
      POW: [393],
      MULT: [393],
      DIV: [393],
      IDIV: [393],
      MOD: [393],
      PLUS: [393],
      MINUS: [393],
      AMPERSAND: [393],
    },
    valueStmt_p_3: {
      DOUBLELITERAL: [375],
      INTEGERLITERAL: [375],
      STRINGLITERAL: [375],
      NOTHING: [375],
      NULL: [375],
      TRUE: [375],
      FALSE: [375],
      DATELITERAL: [375],
      '.': [375],
      SPACE_DOT: [375],
      IDENTIFIER: [375],
      ALIAS: [375],
      AND: [375],
      ATTRIBUTE: [375],
      AS: [375],
      BEGIN: [375],
      BOOLEAN: [375],
      BYVAL: [375],
      BYREF: [375],
      BYTE: [375],
      CALL: [375],
      CASE: [375],
      CONST: [375],
      DATE: [375],
      DECLARE: [375],
      DEFBOOL: [375],
      DEFBYTE: [375],
      DEFDATE: [375],
      DEFDBL: [375],
      DEFDEC: [375],
      DEFCUR: [375],
      DEFINT: [375],
      DEFLNG: [375],
      DEFOBJ: [375],
      DEFSNG: [375],
      DEFSTR: [375],
      DEFVAR: [375],
      DIM: [375],
      DO: [375],
      DOUBLE: [375],
      EACH: [375],
      ELSE: [375],
      ELSEIF: [375],
      END_ENUM: [375],
      END_FUNCTION: [375],
      END_IF: [375],
      END_PROPERTY: [375],
      END_SELECT: [375],
      END_SUB: [375],
      END_TYPE: [375],
      END_WITH: [375],
      END: [375],
      ENUM: [375],
      EQV: [375],
      ERASE: [375],
      EVENT: [375],
      EXIT_DO: [375],
      EXIT_FOR: [375],
      EXIT_FUNCTION: [375],
      EXIT_PROPERTY: [375],
      EXIT_SUB: [375],
      FRIEND: [375],
      FOR: [375],
      FUNCTION: [375],
      GET: [375],
      GLOBAL: [375],
      GOSUB: [375],
      GOTO: [375],
      IF: [375],
      IMPLEMENTS: [375],
      IN: [375],
      ISNOT: [375],
      IS: [375],
      INTEGER: [375],
      LONG: [375],
      LOOP: [375],
      LEN: [375],
      LET: [375],
      LIB: [375],
      LIKE: [375],
      LSET: [375],
      MACRO_CONST: [375],
      MACRO_IF: [375],
      MACRO_ELSEIF: [375],
      MACRO_ELSE: [375],
      MACRO_END_IF: [375],
      MOD: [375],
      NEXT: [375],
      NEW: [375],
      NOT: [375],
      ON_ERROR: [375],
      ON_LOCAL_ERROR: [375],
      ON: [375],
      OPTIONAL: [375],
      OPTION_BASE: [375],
      OPTION_EXPLICIT: [375],
      OPTION_COMPARE: [375],
      OPTION_PRIVATE_MODULE: [375],
      OR: [375],
      PARAMARRAY: [375],
      PRESERVE: [375],
      PRIVATE: [375],
      PROPERTY_GET: [375],
      PROPERTY_LET: [375],
      PROPERTY_SET: [375],
      PTRSAFE: [375],
      PUBLIC: [375],
      RAISEEVENT: [375],
      REDIM: [375],
      RESET: [375],
      RESUME: [375],
      RETURN: [375],
      SELECT: [375],
      SET: [375],
      SINGLE: [375],
      STATIC: [375],
      STEP: [375],
      STOP: [375],
      STRING: [375],
      SUB: [375],
      THEN: [375],
      TO: [375],
      TYPEOF: [375],
      UNTIL: [375],
      VARIANT: [375],
      WEND: [375],
      WHILE: [375],
      WITH: [375],
      WITHEVENTS: [375],
      XOR: [375],
      IMP: [375],
      LPAREN: [375],
      MINUS: [375],
      PLUS: [375],
    },
    '(valueStmt_p_4)1_': {
      PLUS: [378, 394],
      MINUS: [380, 394],
      AMPERSAND: [381, 394],
      XOR: [394],
      OR: [394],
      AND: [394],
      IS: [394],
      ISNOT: [394],
      GEQ: [394],
      LEQ: [394],
      GT: [394],
      LT: [394],
      NEQ: [394],
      EQ: [394],
      NEWLINE: [394],
      COMMENT: [394],
      REMCOMMENT: [394],
      COLON: [394],
      ELSE: [394],
      STEP: [394],
      THEN: [394],
      ',': [394],
      TO: [394],
      RPAREN: [394],
      LPAREN: [394],
      POW: [394],
      MULT: [394],
      DIV: [394],
      IDIV: [394],
      MOD: [394],
    },
    valueStmt_p_4: {
      DOUBLELITERAL: [379],
      INTEGERLITERAL: [379],
      STRINGLITERAL: [379],
      NOTHING: [379],
      NULL: [379],
      TRUE: [379],
      FALSE: [379],
      DATELITERAL: [379],
      '.': [379],
      SPACE_DOT: [379],
      IDENTIFIER: [379],
      ALIAS: [379],
      AND: [379],
      ATTRIBUTE: [379],
      AS: [379],
      BEGIN: [379],
      BOOLEAN: [379],
      BYVAL: [379],
      BYREF: [379],
      BYTE: [379],
      CALL: [379],
      CASE: [379],
      CONST: [379],
      DATE: [379],
      DECLARE: [379],
      DEFBOOL: [379],
      DEFBYTE: [379],
      DEFDATE: [379],
      DEFDBL: [379],
      DEFDEC: [379],
      DEFCUR: [379],
      DEFINT: [379],
      DEFLNG: [379],
      DEFOBJ: [379],
      DEFSNG: [379],
      DEFSTR: [379],
      DEFVAR: [379],
      DIM: [379],
      DO: [379],
      DOUBLE: [379],
      EACH: [379],
      ELSE: [379],
      ELSEIF: [379],
      END_ENUM: [379],
      END_FUNCTION: [379],
      END_IF: [379],
      END_PROPERTY: [379],
      END_SELECT: [379],
      END_SUB: [379],
      END_TYPE: [379],
      END_WITH: [379],
      END: [379],
      ENUM: [379],
      EQV: [379],
      ERASE: [379],
      EVENT: [379],
      EXIT_DO: [379],
      EXIT_FOR: [379],
      EXIT_FUNCTION: [379],
      EXIT_PROPERTY: [379],
      EXIT_SUB: [379],
      FRIEND: [379],
      FOR: [379],
      FUNCTION: [379],
      GET: [379],
      GLOBAL: [379],
      GOSUB: [379],
      GOTO: [379],
      IF: [379],
      IMPLEMENTS: [379],
      IN: [379],
      ISNOT: [379],
      IS: [379],
      INTEGER: [379],
      LONG: [379],
      LOOP: [379],
      LEN: [379],
      LET: [379],
      LIB: [379],
      LIKE: [379],
      LSET: [379],
      MACRO_CONST: [379],
      MACRO_IF: [379],
      MACRO_ELSEIF: [379],
      MACRO_ELSE: [379],
      MACRO_END_IF: [379],
      MOD: [379],
      NEXT: [379],
      NEW: [379],
      NOT: [379],
      ON_ERROR: [379],
      ON_LOCAL_ERROR: [379],
      ON: [379],
      OPTIONAL: [379],
      OPTION_BASE: [379],
      OPTION_EXPLICIT: [379],
      OPTION_COMPARE: [379],
      OPTION_PRIVATE_MODULE: [379],
      OR: [379],
      PARAMARRAY: [379],
      PRESERVE: [379],
      PRIVATE: [379],
      PROPERTY_GET: [379],
      PROPERTY_LET: [379],
      PROPERTY_SET: [379],
      PTRSAFE: [379],
      PUBLIC: [379],
      RAISEEVENT: [379],
      REDIM: [379],
      RESET: [379],
      RESUME: [379],
      RETURN: [379],
      SELECT: [379],
      SET: [379],
      SINGLE: [379],
      STATIC: [379],
      STEP: [379],
      STOP: [379],
      STRING: [379],
      SUB: [379],
      THEN: [379],
      TO: [379],
      TYPEOF: [379],
      UNTIL: [379],
      VARIANT: [379],
      WEND: [379],
      WHILE: [379],
      WITH: [379],
      WITHEVENTS: [379],
      XOR: [379],
      IMP: [379],
      LPAREN: [379],
      MINUS: [379],
      PLUS: [379],
    },
    '(valueStmt_p_5)1_': {
      MULT: [382, 395],
      DIV: [384, 395],
      IDIV: [385, 395],
      MOD: [386, 395],
      PLUS: [395],
      MINUS: [395],
      AMPERSAND: [395],
      XOR: [395],
      OR: [395],
      AND: [395],
      IS: [395],
      ISNOT: [395],
      GEQ: [395],
      LEQ: [395],
      GT: [395],
      LT: [395],
      NEQ: [395],
      EQ: [395],
      NEWLINE: [395],
      COMMENT: [395],
      REMCOMMENT: [395],
      COLON: [395],
      ELSE: [395],
      STEP: [395],
      THEN: [395],
      ',': [395],
      TO: [395],
      RPAREN: [395],
      LPAREN: [395],
      POW: [395],
    },
    valueStmt_p_5: {
      DOUBLELITERAL: [383],
      INTEGERLITERAL: [383],
      STRINGLITERAL: [383],
      NOTHING: [383],
      NULL: [383],
      TRUE: [383],
      FALSE: [383],
      DATELITERAL: [383],
      '.': [383],
      SPACE_DOT: [383],
      IDENTIFIER: [383],
      ALIAS: [383],
      AND: [383],
      ATTRIBUTE: [383],
      AS: [383],
      BEGIN: [383],
      BOOLEAN: [383],
      BYVAL: [383],
      BYREF: [383],
      BYTE: [383],
      CALL: [383],
      CASE: [383],
      CONST: [383],
      DATE: [383],
      DECLARE: [383],
      DEFBOOL: [383],
      DEFBYTE: [383],
      DEFDATE: [383],
      DEFDBL: [383],
      DEFDEC: [383],
      DEFCUR: [383],
      DEFINT: [383],
      DEFLNG: [383],
      DEFOBJ: [383],
      DEFSNG: [383],
      DEFSTR: [383],
      DEFVAR: [383],
      DIM: [383],
      DO: [383],
      DOUBLE: [383],
      EACH: [383],
      ELSE: [383],
      ELSEIF: [383],
      END_ENUM: [383],
      END_FUNCTION: [383],
      END_IF: [383],
      END_PROPERTY: [383],
      END_SELECT: [383],
      END_SUB: [383],
      END_TYPE: [383],
      END_WITH: [383],
      END: [383],
      ENUM: [383],
      EQV: [383],
      ERASE: [383],
      EVENT: [383],
      EXIT_DO: [383],
      EXIT_FOR: [383],
      EXIT_FUNCTION: [383],
      EXIT_PROPERTY: [383],
      EXIT_SUB: [383],
      FRIEND: [383],
      FOR: [383],
      FUNCTION: [383],
      GET: [383],
      GLOBAL: [383],
      GOSUB: [383],
      GOTO: [383],
      IF: [383],
      IMPLEMENTS: [383],
      IN: [383],
      ISNOT: [383],
      IS: [383],
      INTEGER: [383],
      LONG: [383],
      LOOP: [383],
      LEN: [383],
      LET: [383],
      LIB: [383],
      LIKE: [383],
      LSET: [383],
      MACRO_CONST: [383],
      MACRO_IF: [383],
      MACRO_ELSEIF: [383],
      MACRO_ELSE: [383],
      MACRO_END_IF: [383],
      MOD: [383],
      NEXT: [383],
      NEW: [383],
      NOT: [383],
      ON_ERROR: [383],
      ON_LOCAL_ERROR: [383],
      ON: [383],
      OPTIONAL: [383],
      OPTION_BASE: [383],
      OPTION_EXPLICIT: [383],
      OPTION_COMPARE: [383],
      OPTION_PRIVATE_MODULE: [383],
      OR: [383],
      PARAMARRAY: [383],
      PRESERVE: [383],
      PRIVATE: [383],
      PROPERTY_GET: [383],
      PROPERTY_LET: [383],
      PROPERTY_SET: [383],
      PTRSAFE: [383],
      PUBLIC: [383],
      RAISEEVENT: [383],
      REDIM: [383],
      RESET: [383],
      RESUME: [383],
      RETURN: [383],
      SELECT: [383],
      SET: [383],
      SINGLE: [383],
      STATIC: [383],
      STEP: [383],
      STOP: [383],
      STRING: [383],
      SUB: [383],
      THEN: [383],
      TO: [383],
      TYPEOF: [383],
      UNTIL: [383],
      VARIANT: [383],
      WEND: [383],
      WHILE: [383],
      WITH: [383],
      WITHEVENTS: [383],
      XOR: [383],
      IMP: [383],
      LPAREN: [383],
      MINUS: [383],
      PLUS: [383],
    },
    '(valueStmt_p_6)1_': {
      POW: [387, 396],
      MULT: [396],
      DIV: [396],
      IDIV: [396],
      MOD: [396],
      PLUS: [396],
      MINUS: [396],
      AMPERSAND: [396],
      XOR: [396],
      OR: [396],
      AND: [396],
      IS: [396],
      ISNOT: [396],
      GEQ: [396],
      LEQ: [396],
      GT: [396],
      LT: [396],
      NEQ: [396],
      EQ: [396],
      NEWLINE: [396],
      COMMENT: [396],
      REMCOMMENT: [396],
      COLON: [396],
      ELSE: [396],
      STEP: [396],
      THEN: [396],
      ',': [396],
      TO: [396],
      RPAREN: [396],
      LPAREN: [396],
    },
    valueStmt_p_6: {
      DOUBLELITERAL: [388],
      INTEGERLITERAL: [388],
      STRINGLITERAL: [388],
      NOTHING: [388],
      NULL: [388],
      TRUE: [388],
      FALSE: [388],
      DATELITERAL: [388],
      '.': [388],
      SPACE_DOT: [388],
      IDENTIFIER: [388],
      ALIAS: [388],
      AND: [388],
      ATTRIBUTE: [388],
      AS: [388],
      BEGIN: [388],
      BOOLEAN: [388],
      BYVAL: [388],
      BYREF: [388],
      BYTE: [388],
      CALL: [388],
      CASE: [388],
      CONST: [388],
      DATE: [388],
      DECLARE: [388],
      DEFBOOL: [388],
      DEFBYTE: [388],
      DEFDATE: [388],
      DEFDBL: [388],
      DEFDEC: [388],
      DEFCUR: [388],
      DEFINT: [388],
      DEFLNG: [388],
      DEFOBJ: [388],
      DEFSNG: [388],
      DEFSTR: [388],
      DEFVAR: [388],
      DIM: [388],
      DO: [388],
      DOUBLE: [388],
      EACH: [388],
      ELSE: [388],
      ELSEIF: [388],
      END_ENUM: [388],
      END_FUNCTION: [388],
      END_IF: [388],
      END_PROPERTY: [388],
      END_SELECT: [388],
      END_SUB: [388],
      END_TYPE: [388],
      END_WITH: [388],
      END: [388],
      ENUM: [388],
      EQV: [388],
      ERASE: [388],
      EVENT: [388],
      EXIT_DO: [388],
      EXIT_FOR: [388],
      EXIT_FUNCTION: [388],
      EXIT_PROPERTY: [388],
      EXIT_SUB: [388],
      FRIEND: [388],
      FOR: [388],
      FUNCTION: [388],
      GET: [388],
      GLOBAL: [388],
      GOSUB: [388],
      GOTO: [388],
      IF: [388],
      IMPLEMENTS: [388],
      IN: [388],
      ISNOT: [388],
      IS: [388],
      INTEGER: [388],
      LONG: [388],
      LOOP: [388],
      LEN: [388],
      LET: [388],
      LIB: [388],
      LIKE: [388],
      LSET: [388],
      MACRO_CONST: [388],
      MACRO_IF: [388],
      MACRO_ELSEIF: [388],
      MACRO_ELSE: [388],
      MACRO_END_IF: [388],
      MOD: [388],
      NEXT: [388],
      NEW: [388],
      NOT: [388],
      ON_ERROR: [388],
      ON_LOCAL_ERROR: [388],
      ON: [388],
      OPTIONAL: [388],
      OPTION_BASE: [388],
      OPTION_EXPLICIT: [388],
      OPTION_COMPARE: [388],
      OPTION_PRIVATE_MODULE: [388],
      OR: [388],
      PARAMARRAY: [388],
      PRESERVE: [388],
      PRIVATE: [388],
      PROPERTY_GET: [388],
      PROPERTY_LET: [388],
      PROPERTY_SET: [388],
      PTRSAFE: [388],
      PUBLIC: [388],
      RAISEEVENT: [388],
      REDIM: [388],
      RESET: [388],
      RESUME: [388],
      RETURN: [388],
      SELECT: [388],
      SET: [388],
      SINGLE: [388],
      STATIC: [388],
      STEP: [388],
      STOP: [388],
      STRING: [388],
      SUB: [388],
      THEN: [388],
      TO: [388],
      TYPEOF: [388],
      UNTIL: [388],
      VARIANT: [388],
      WEND: [388],
      WHILE: [388],
      WITH: [388],
      WITHEVENTS: [388],
      XOR: [388],
      IMP: [388],
      LPAREN: [388],
      MINUS: [388],
      PLUS: [388],
    },
    valueStmt_p_7: {
      DOUBLELITERAL: [389],
      INTEGERLITERAL: [389],
      STRINGLITERAL: [389],
      NOTHING: [389],
      NULL: [389],
      TRUE: [389],
      FALSE: [389],
      DATELITERAL: [389],
      '.': [389],
      SPACE_DOT: [389],
      IDENTIFIER: [389],
      ALIAS: [389],
      AND: [389],
      ATTRIBUTE: [389],
      AS: [389],
      BEGIN: [389],
      BOOLEAN: [389],
      BYVAL: [389],
      BYREF: [389],
      BYTE: [389],
      CALL: [389],
      CASE: [389],
      CONST: [389],
      DATE: [389],
      DECLARE: [389],
      DEFBOOL: [389],
      DEFBYTE: [389],
      DEFDATE: [389],
      DEFDBL: [389],
      DEFDEC: [389],
      DEFCUR: [389],
      DEFINT: [389],
      DEFLNG: [389],
      DEFOBJ: [389],
      DEFSNG: [389],
      DEFSTR: [389],
      DEFVAR: [389],
      DIM: [389],
      DO: [389],
      DOUBLE: [389],
      EACH: [389],
      ELSE: [389],
      ELSEIF: [389],
      END_ENUM: [389],
      END_FUNCTION: [389],
      END_IF: [389],
      END_PROPERTY: [389],
      END_SELECT: [389],
      END_SUB: [389],
      END_TYPE: [389],
      END_WITH: [389],
      END: [389],
      ENUM: [389],
      EQV: [389],
      ERASE: [389],
      EVENT: [389],
      EXIT_DO: [389],
      EXIT_FOR: [389],
      EXIT_FUNCTION: [389],
      EXIT_PROPERTY: [389],
      EXIT_SUB: [389],
      FRIEND: [389],
      FOR: [389],
      FUNCTION: [389],
      GET: [389],
      GLOBAL: [389],
      GOSUB: [389],
      GOTO: [389],
      IF: [389],
      IMPLEMENTS: [389],
      IN: [389],
      ISNOT: [389],
      IS: [389],
      INTEGER: [389],
      LONG: [389],
      LOOP: [389],
      LEN: [389],
      LET: [389],
      LIB: [389],
      LIKE: [389],
      LSET: [389],
      MACRO_CONST: [389],
      MACRO_IF: [389],
      MACRO_ELSEIF: [389],
      MACRO_ELSE: [389],
      MACRO_END_IF: [389],
      MOD: [389],
      NEXT: [389],
      NEW: [389],
      NOT: [389],
      ON_ERROR: [389],
      ON_LOCAL_ERROR: [389],
      ON: [389],
      OPTIONAL: [389],
      OPTION_BASE: [389],
      OPTION_EXPLICIT: [389],
      OPTION_COMPARE: [389],
      OPTION_PRIVATE_MODULE: [389],
      OR: [389],
      PARAMARRAY: [389],
      PRESERVE: [389],
      PRIVATE: [389],
      PROPERTY_GET: [389],
      PROPERTY_LET: [389],
      PROPERTY_SET: [389],
      PTRSAFE: [389],
      PUBLIC: [389],
      RAISEEVENT: [389],
      REDIM: [389],
      RESET: [389],
      RESUME: [389],
      RETURN: [389],
      SELECT: [389],
      SET: [389],
      SINGLE: [389],
      STATIC: [389],
      STEP: [389],
      STOP: [389],
      STRING: [389],
      SUB: [389],
      THEN: [389],
      TO: [389],
      TYPEOF: [389],
      UNTIL: [389],
      VARIANT: [389],
      WEND: [389],
      WHILE: [389],
      WITH: [389],
      WITHEVENTS: [389],
      XOR: [389],
      IMP: [389],
      LPAREN: [389],
      MINUS: [390],
      PLUS: [391],
    },
  };
  var parse = function (input, options = {}) {
    prepareLLParse();
    let recoveryTokens = [];
    const terminalNodes = [];
    let error;
    var {
      getProductionIsWrap,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;
    var {
      globalMatch = true,
      onErrorRecovery,
      lexerOptions = {},
      transformNode,
      parseTree = true,
      startSymbol = getProductionSymbol(productions[0]),
    } = options;
    startSymbol = lexer.mapSymbol(startSymbol);

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    lexer.options = lexerOptions;
    symbolStack = [startSymbol];
    lexer.resetInput(input);
    let token = undefined;
    let next = null;
    let topSymbol;
    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      let currentSymbolItem = symbolStack[index];

      while (
        currentSymbolItem &&
        typeof currentSymbolItem === 'object' &&
        currentSymbolItem.type === 'rule'
      ) {
        index--;
        currentSymbolItem = symbolStack[index];
      }

      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();

        if (!t || typeof t !== 'object' || t.type !== 'rule') {
          break;
        }
      }

      let l = symbolStack.length - 1;
      let current = symbolStack[l];

      while (
        current &&
        typeof current === 'object' &&
        current.type === 'rule'
      ) {
        symbolStack.pop();
        current = symbolStack[--l];
      }
    }

    let getExpected = function () {
      const s = topSymbol;

      if (typeof s === 'string' && !isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      } // get expected tokens from state machine

      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = -1;

      while (top >= 0 && symbolStack[top] !== topSymbol) {
        top--;
      }

      let current = symbolStack[top];

      while (
        current &&
        (typeof current !== 'object' || current.type !== 'rule')
      ) {
        if (typeof current === 'string') {
          i++;
        }

        top--;
        current = symbolStack[top];
      }

      if (current && typeof current === 'object' && current.type === 'rule') {
        ruleIndex = current.ruleIndex;
      }

      return {
        childReverseIndex: i,
        ruleIndex,
        topSymbol,
      };
    }

    let production;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      topSymbol = reduceLLAction(
        parseTree,
        topSymbol,
        popSymbolStack,
        peekSymbolStack,
      );

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }

        const normalizedSymbol = normalizeSymbol(topSymbol);
        next = null;

        if (isSymbol(normalizedSymbol)) {
          next = predictProductionIndexLLK(globalMatch, findSymbolIndex());
        } else if (
          normalizedSymbol === token.t ||
          normalizedSymbol === `$ANY`
        ) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const terminalNode = new AstTokenNode(token);
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          next = {
            ruleIndex: VIRTUAL_OPTIONAL_RULE_INDEX,
          };
        }

        if (next && next.unit) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;
          production = productions[ruleIndex];

          if (
            productionSkipAstNodeSet !== null &&
            productionSkipAstNodeSet !== void 0 &&
            productionSkipAstNodeSet.has(ruleIndex)
          ) {
            const newRhs = getLabeledRhsForAddNodeFlag(production, [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
            ]);
            symbolStack.push.apply(symbolStack, newRhs.reverse());
          } else {
            const label = getOriginalSymbol(getProductionLabel(production));
            const isWrap = getProductionIsWrap(production);

            if (parseTree) {
              const newAst = new AstSymbolNode({
                internalRuleIndex: ruleIndex,
                id: ++globalSymbolNodeId,
                symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
                label,
                isWrap,
                children: [],
              });
              peekStack(astStack).addChild(newAst);
              astStack.push(newAst);
            }

            const newRhs = [
              ...getProductionRhs(production),
              makeRuleIndexFlag(ruleIndex, unit),
              productionEndFlag,
            ].reverse();
            symbolStack.push(...newRhs);
          }
        } else if (
          next &&
          (isZeroOrMoreSymbol(topSymbol) || isOptionalSymbol(topSymbol))
        ) {
          popSymbolStack();
        } else {
          let breakToEnd;
          ({ error, errorNode, token, breakToEnd } = takeCareLLError(
            parseTree,
            getExpected,
            onErrorRecovery,
            topSymbol,
            () =>
              !!predictProductionIndexNextLLK(globalMatch, findSymbolIndex()),
            transformNode,
            recoveryTokens,
            {
              error,
              errorNode,
              token,
            },
          ));

          if (breakToEnd) {
            break;
          }
        }
      }

      topSymbol = takeCareLLAction(popSymbolStack, peekSymbolStack);

      if (!symbolStack.length) {
        break;
      }
    }

    ({ error, errorNode } = checkLLEndError(parseTree, getExpected, {
      error,
      errorNode,
    }));
    const ast = parseTree ? getAstRootNode(astStack, transformNode) : null;
    endLLParse();
    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    // expensive
    globalMatch,
    { childReverseIndex, ruleIndex, topSymbol },
    fn,
  ) {
    let unit;
    let lastUnit;
    let endState;
    let symbolEndState;

    if (ruleIndex === -1) {
      lastUnit = unit = getUnitBySymbol(topSymbol);
    } else {
      let parentSymbolItem = getParentSymbolItem();

      if (!parentSymbolItem) {
        throw new Error('no parent symbol');
      }

      const parentUnit = parentSymbolItem.ruleUnit;
      const { units } = parentUnit;
      unit = units[units.length - 1 - childReverseIndex];
      lastUnit = units[units.length - 1];
    }

    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    const { unitType } = unit;
    lexer.stash();

    if (fn) {
      fn();
    }

    const getSkipCheckStates = (unit) => {
      const u = unit;
      let states = u.checkStates;

      if (!states) {
        const skipStartState = new State(
          'startOfSkip$' + childSymbol,
          null,
          VIRTUAL_OPTIONAL_RULE_INDEX,
        );
        skipStartState.pushTransition(unit.end);
        const symbolUnit = new SymbolStateUnit(childSymbol, -2);
        symbolUnit.end.pushTransition(unit.end);
        u.checkStates = states = {
          state: skipStartState,
          unit: symbolUnit,
        };
      }

      return [states.state, ...states.unit.start.getAlternativeStartStates()];
    };

    let nextUnits;
    let startState;

    function returnNext(ruleIndex) {
      lexer.stashPop();

      if (ruleIndex === undefined) {
        return null;
      }

      if (ruleIndex === VIRTUAL_OPTIONAL_RULE_INDEX) {
        return {
          ruleIndex,
        };
      }

      const nextUnit = nextUnits[ruleIndex];
      return {
        ruleIndex,
        unit: nextUnit,
      };
    }

    if (unit.lazy) {
      let states = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
      const ruleIndexes = findBestAlternation(
        false,
        childSymbol,
        states,
        globalMatch ? null : endState,
        symbolEndState,
      );

      if (!ruleIndexes.length) {
        return returnNext();
      } else if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
        // skip this symbol first
        return returnNext(VIRTUAL_OPTIONAL_RULE_INDEX);
      } else {
        startState = unit.start.transitions[0].to;

        if (startState.classType !== 'SymbolState') {
          throw new Error('expect SymbolState!');
        }

        nextUnits = startState.getUnits();
        return returnNext(Array.from(ruleIndexes.values())[0]);
      }
    }

    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    let startStates = [];

    if (canSkipped) {
      startState = unit.start.transitions[0].to;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();
      startStates = getSkipCheckStates(unit);
      endState = lastUnit.end;
      symbolEndState = unit.end;
    } else {
      const alternatives = productionsBySymbol[childSymbol];
      startState = unit.start;

      if (startState.classType !== 'SymbolState') {
        throw new Error('expect SymbolState!');
      }

      nextUnits = startState.getUnits();

      if (alternatives.ruleIndexes.length <= 1) {
        const ruleIndex = alternatives.ruleIndexes[0];

        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }

        return returnNext(ruleIndex);
      }

      startStates = startState.getAlternativeStartStates();

      if (startStates.length === 1) {
        return returnNext(startStates[0].ruleIndex);
      }

      endState = lastUnit.end;
      symbolEndState = unit.end;
    }

    const ruleIndexes = findBestAlternation(
      false,
      childSymbol,
      startStates,
      globalMatch ? null : endState,
      symbolEndState,
    );

    if (ruleIndexes[0] === VIRTUAL_OPTIONAL_RULE_INDEX) {
      ruleIndexes.shift();

      if (!ruleIndexes.length) {
        return returnNext(VIRTUAL_OPTIONAL_RULE_INDEX);
      }
    }

    if (ruleIndexes.length) {
      return returnNext(ruleIndexes[0]);
    }

    return returnNext();
  };
  var predictProductionIndexNextLLK = function (globalMatch, arg) {
    return predictProductionIndexLLK(globalMatch, arg, () => lexer.lex());
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = [];
    start = null;
    end = null;
    lazy = false;
    unitType = 'rootSymbol';

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var State = class State {
    classType = 'State';
    transitions = [];

    constructor(type, unit, ruleIndex) {
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
      this.transitions = [];
    }

    getTransitionsToMatch() {
      return this.transitions;
    }

    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this, ruleIndex);
      this.end = new State(`endOf${type}`, this, ruleIndex);
    }
  };
  var SymbolState = class SymbolState {
    classType = 'SymbolState';
    startStates = {};
    units = {};
    _afterTransitions = [];
    indexedTransitions = {};

    constructor(symbol, type, unit, ruleIndex) {
      this.symbol = symbol;
      this.type = type;
      this.unit = unit;
      this.ruleIndex = ruleIndex;
    }

    get transitions() {
      let transitions = this.alltransitions;
      const { indexedTransitions } = this;

      if (!transitions) {
        const { symbol, unit, startStates, units } = this;
        this.alltransitions = transitions = [];
        const myProductions = productionsBySymbol[symbol];

        if (!myProductions) {
          throw new Error('unexpected productionsBySymbol: ' + symbol);
        }

        for (const i of myProductions.ruleIndexes) {
          const p = myProductions.productions[i];
          const rhs = parser.getProductionRhs(p);
          const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
          units[i] = rootSymbolUnit;
          startStates[i] = rootSymbolUnit.start;
          const t = new Transition(rootSymbolUnit.start);
          transitions.push(t);
          indexedTransitions[i] = t;
          rootSymbolUnit.end.pushTransition(unit.end);
        }

        this.alltransitions = transitions = [
          ...transitions,
          ...this._afterTransitions,
        ];
      }

      return transitions;
    }

    getTransitionsToMatch() {
      const { indexedTransitions, _afterTransitions } = this;
      const transitions = this.getNextRuleIndexes().map(
        (i) => indexedTransitions[i],
      );
      const ret = _afterTransitions.length
        ? transitions.concat(_afterTransitions)
        : transitions; // console.log(`optimize ${this.symbol} getTransitionsToMatch: from ${this.transitions.length} to ${ret.length}`);

      return ret;
    }

    getTransitions() {
      return this.transitions;
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    getNextRuleIndexes() {
      this.getTransitions();
      const t = lexer.getCurrentToken().t;
      const predictTable = parserPredictTable[this.symbol];
      const nextRuleIndexes = predictTable[t] || [];
      const ret = [];
      const { productions, getProductionPredict } = parser;

      for (const ruleIndex of nextRuleIndexes) {
        const production = productions[ruleIndex];
        const predict = getProductionPredict(production);

        if (!predict || predict.call(parser) !== false) {
          ret.push(ruleIndex);
        }
      }

      return ret;
    }

    getAlternativeStartStates() {
      const nextRuleIndexes = this.getNextRuleIndexes();
      let startStates = nextRuleIndexes.map(
        (ruleIndex) => this.startStates[ruleIndex],
      ); // console.log(`optimize ${this.symbol} getAlternativeStartStates: from ${Object.keys(this.startStates).length} to ${startStates.length}`);

      return startStates;
    }

    pushTransition(endState, condition) {
      this._afterTransitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    lazy = false;

    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.end = new State(`endOf${type}`, this, ruleIndex);
      this.start = new SymbolState(type, `startOf${type}`, this, ruleIndex);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }

    perform() {
      if (this.condition) {
        const ret = this.condition();

        if (ret === true) {
          return {
            count: 0,
          };
        }

        return ret;
      }

      return {
        count: 0,
      };
    }
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }

      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];

    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }

      let finalUnit;

      if (isOptionalSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = normalizeSymbol(r);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';

        if (isLazySymbol(r)) {
          finalUnit.lazy = true;
        }

        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }

      units.push(finalUnit);
    }

    return concatUnits(symbol, units, ruleIndex);
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;

    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }

    const ret = new RootSymbolUnit(type, ruleIndex);

    if (us[0] && us[l - 1]) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret, ruleIndex);
      ret.end = new State(`endOf${type}`, ret, ruleIndex);
      ret.start.pushTransition(ret.end);
    }

    ret.units = us;
    return ret;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];

    while (states.length) {
      const state = states.pop();

      if (stack.has(state)) {
        continue;
      }

      stack.add(state);

      for (const t of state.transitions) {
        var _t$condition;

        if (
          (_t$condition = t.condition) !== null &&
          _t$condition !== void 0 &&
          _t$condition.token
        ) {
          ret.add(t.condition.token);
          continue;
        }

        if (t.to) {
          states.push(t.to);
        }
      }
    }

    return Array.from(ret);
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];

      if ((s === null || s === void 0 ? void 0 : s.type) === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var getUnitBySymbol = function (symbol) {
    if (!smUnitBySymbol[symbol]) {
      smUnitBySymbol[symbol] = new SymbolStateUnit(symbol, -1);
    }

    return smUnitBySymbol[symbol];
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var findBestAlternation = function (
    strict,
    _forSymbol,
    states,
    endState,
    symbolEndState,
  ) {
    // const start = Date.now();
    let reachableStates = [];

    for (const state of states) {
      reachableStates.push({
        state,
        ruleIndexes: [state.ruleIndex],
      });
    }

    let consumedTokensLength = new Map(); //const times = [];

    let count = 0;
    const finishedTokens = new Set();
    let possibleRuleIndexes;

    while (1) {
      //const start = Date.now();
      reachableStates = getNextReachableStateItems(
        reachableStates,
        consumedTokensLength,
        endState,
        count,
        symbolEndState,
        finishedTokens,
      );

      if (
        reachableStates.length === 1 &&
        !finishedTokens.has(VIRTUAL_OPTIONAL_RULE_INDEX)
      ) {
        if (
          !finishedTokens.size ||
          (finishedTokens.size === 1 &&
            consumedTokensLength.get(Array.from(finishedTokens.keys())[0]) ===
              0)
        ) {
          const rule = reachableStates[0].ruleIndexes[0];
          finishedTokens.add(rule);
          consumedTokensLength.set(rule, count + 1);
          break;
        }
      } //times.push(Date.now() - start);

      if (reachableStates.length) {
        ++count;
        possibleRuleIndexes = new Set(
          reachableStates
            .map((r) =>
              r === null || r === void 0 ? void 0 : r.ruleIndexes[0],
            )
            .filter((n) => typeof n === 'number'),
        );
        lexer.lex();
      } else {
        break;
      }
    }

    let arr = Array.from(finishedTokens.keys());

    if (!strict && !arr.length) {
      // deep go to error branch
      arr = Array.from(consumedTokensLength.keys());
    }

    if (arr.length > 1) {
      const getOrder = (a) => {
        return consumedTokensLength.get(a) || count;
      };

      if (consumedTokensLength.has(VIRTUAL_OPTIONAL_RULE_INDEX)) {
        consumedTokensLength.set(VIRTUAL_OPTIONAL_RULE_INDEX, 0xffff);
      }

      arr = arr.sort((a, b) => {
        const ret = getOrder(b) - getOrder(a);

        if (ret === 0) {
          return a - b;
        }

        return ret;
      });
    } // const time=0
    // const time = Date.now() - start;
    // console.log(_forSymbol + ' findBestAlternation: ' + time);
    // for (const a of arr) {
    //   if (a === VIRTUAL_OPTIONAL_RULE_INDEX) {
    //     console.log(_forSymbol, ': skip');
    //   } else {
    //     console.log(_forSymbol, parser.productions[a][1])
    //   }
    // }
    // console.log('');

    if (!arr.length && possibleRuleIndexes) {
      arr = Array.from(possibleRuleIndexes.values());
      arr = arr.sort((a, b) => a - b);
    }

    return arr;
  };
  var getNextReachableStateItems = function (
    reachableStates,
    consumedTokensLength,
    endState,
    count,
    symbolEndState,
    finishedTokens,
  ) {
    // function last<T>(arr: T[], n = 1) {
    //   return arr[arr.length - n];
    // }
    let stack = [];
    let newReachableStates = [];
    const encounteredMap = new Map();

    for (let i = 0; i < reachableStates.length; i++) {
      const currentState = reachableStates[i];

      if (!currentState) {
        continue;
      }

      stack.push(currentState);
      let stateItem;
      let state;
      let currentRuleIndexes = currentState.ruleIndexes;
      let encountered = encounteredMap.get(currentRuleIndexes[0]);

      if (!encountered) {
        encountered = new Set();
        encounteredMap.set(currentRuleIndexes[0], encountered);
      }

      while (stack.length) {
        stateItem = stack.shift();

        if (!stateItem) {
          continue;
        }

        state = stateItem.state;

        if (state === symbolEndState) {
          const rootIndex = stateItem.ruleIndexes[0];
          consumedTokensLength.set(rootIndex, count);
        }

        if (
          state === endState ||
          (!state.transitions.length &&
            lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN)
        ) {
          const rootIndex = stateItem.ruleIndexes[0];
          finishedTokens.add(rootIndex);
          continue;
        }

        if (encountered.has(state)) {
          continue;
        }

        encountered.add(state);
        currentRuleIndexes = stateItem.ruleIndexes;
        let finded;

        for (const t of state.getTransitionsToMatch()) {
          const find = t.perform();
          finded = finded || !!find;

          if (find) {
            let ruleIndexes = currentRuleIndexes; // const toRuleIndex = t.to.ruleIndex;
            // if (last(currentRuleIndexes) !== toRuleIndex) {
            //   ruleIndexes = [...ruleIndexes, toRuleIndex];
            // }

            if (find.count) {
              newReachableStates.push({
                state: t.to,
                ruleIndexes,
              });
            } else {
              stack.push({
                state: t.to,
                ruleIndexes,
              });
            }
          }
        }
      }
    }

    newReachableStates = newReachableStates.filter((n) => !!n);
    let current = newReachableStates[0];

    if (current && finishedTokens.size === 0) {
      let i = 1;

      for (i = 1; i < newReachableStates.length; i++) {
        let next = newReachableStates[i];

        if (next) {
          if (current.ruleIndexes[0] !== next.ruleIndexes[0]) {
            break;
          }

          current = next;
        }
      }

      if (current && i === newReachableStates.length) {
        const ruleIndex = current.ruleIndexes[0];
        finishedTokens.add(ruleIndex);
        consumedTokensLength.set(ruleIndex, count);
        return [];
      }
    }

    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token
        ? {
            count: 1,
          }
        : false;
    };

    fn.token = token;
    return fn;
  };
  var initLLK = function () {
    const { productions } = parser;

    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const item = (productionsBySymbol[symbol] = productionsBySymbol[
        symbol
      ] || {
        ruleIndexes: [],
        productions: [],
      });
      item.productions[i] = p;
      item.ruleIndexes.push(i);
    }
  };
  initLLK();
  parser.parse = parse;
  var productionRuleIndexMap = {
    0: 1,
    1: 1,
    2: 2,
    3: 2,
    4: 2,
    5: 3,
    6: 3,
    7: 3,
    8: 3,
    9: 3,
    10: 4,
    11: 4,
    12: 5,
    13: 5,
    14: 6,
    15: 6,
    16: 7,
    17: 7,
    18: 7,
    19: 8,
    20: 8,
    21: 8,
    22: 8,
    23: 9,
    24: 9,
    25: 10,
    26: 10,
    27: 10,
    28: 10,
    29: 10,
    30: 11,
    31: 11,
    32: 11,
    33: 11,
    34: 12,
    35: 13,
    36: 14,
    37: 15,
    38: 16,
    39: 17,
    40: 17,
    41: 18,
    42: 18,
    43: 18,
    44: 18,
    45: 18,
    46: 18,
    47: 18,
    48: 18,
    49: 18,
    50: 18,
    51: 18,
    52: 18,
    53: 18,
    54: 18,
    55: 18,
    56: 18,
    57: 18,
    58: 18,
    59: 18,
    60: 18,
    61: 19,
    62: 20,
    63: 21,
    64: 22,
    65: 22,
    66: 22,
    67: 22,
    68: 22,
    69: 23,
    70: 23,
    71: 23,
    72: 24,
    73: 24,
    74: 25,
    75: 26,
    76: 27,
    77: 28,
    78: 29,
    79: 30,
    80: 31,
    81: 32,
    82: 32,
    83: 33,
    84: 33,
    85: 33,
    86: 33,
    87: 33,
    88: 33,
    89: 33,
    90: 34,
    91: 34,
    92: 35,
    93: 36,
    94: 37,
    95: 38,
    96: 39,
    97: 39,
    98: 39,
    99: 39,
    100: 39,
    101: 39,
    102: 39,
    103: 39,
    104: 39,
    105: 40,
    106: 41,
    107: 42,
    108: 42,
    109: 43,
    110: 43,
    111: 44,
    112: 45,
    113: 45,
    114: 45,
    115: 45,
    116: 45,
    117: 45,
    118: 46,
    119: 46,
    120: 46,
    121: 46,
    122: 46,
    123: 46,
    124: 46,
    125: 47,
    126: 48,
    127: 48,
    128: 49,
    129: 49,
    130: 49,
    131: 49,
    132: 49,
    133: 49,
    134: 49,
    135: 50,
    136: 51,
    137: 51,
    138: 52,
    139: 52,
    140: 52,
    141: 53,
    142: 54,
    143: 54,
    144: 55,
    145: 56,
    146: 56,
    147: 56,
    148: 56,
    149: 56,
    150: 56,
    151: 56,
    152: 57,
    153: 57,
    154: 57,
    155: 57,
    156: 57,
    157: 58,
    158: 58,
    159: 59,
    160: 59,
    161: 60,
    162: 61,
    163: 61,
    164: 62,
    165: 62,
    166: 63,
    167: 64,
    168: 64,
    169: 64,
    170: 65,
    171: 65,
    172: 65,
    173: 65,
    174: 66,
    175: 89,
    176: 89,
    177: 89,
    178: 90,
    179: 90,
    180: 90,
    181: 90,
    182: 90,
    183: 90,
    184: 90,
    185: 90,
    186: 90,
    187: 91,
    188: 91,
    189: 91,
    190: 91,
    191: 91,
    192: 92,
    193: 92,
    194: 92,
    195: 93,
    196: 94,
    197: 95,
    198: 96,
    199: 97,
    200: 97,
    201: 97,
    202: 97,
    203: 97,
    204: 97,
    205: 97,
    206: 97,
    207: 98,
    208: 98,
    209: 98,
    210: 98,
    211: 98,
    212: 98,
    213: 99,
    214: 99,
    215: 99,
    216: 99,
    217: 99,
    218: 99,
    219: 100,
    220: 101,
    221: 102,
    222: 102,
    223: 102,
    224: 102,
    225: 102,
    226: 103,
    227: 103,
    228: 104,
    229: 104,
    230: 104,
    231: 104,
    232: 104,
    233: 104,
    234: 104,
    235: 104,
    236: 104,
    237: 105,
    238: 106,
    239: 107,
    240: 108,
    241: 109,
    242: 110,
    243: 111,
    244: 112,
    245: 113,
    246: 114,
    247: 115,
    248: 116,
    249: 117,
    250: 118,
    251: 119,
    252: 120,
    253: 121,
    254: 122,
    255: 123,
    256: 124,
    257: 125,
    258: 126,
    259: 127,
    260: 128,
    261: 129,
    262: 130,
    263: 131,
    264: 132,
    265: 133,
    266: 134,
    267: 135,
    268: 136,
    269: 137,
    270: 138,
    271: 139,
    272: 140,
    273: 141,
    274: 142,
    275: 143,
    276: 144,
    277: 145,
    278: 146,
    279: 147,
    280: 148,
    281: 149,
    282: 150,
    283: 151,
    284: 152,
    285: 153,
    286: 154,
    287: 155,
    288: 156,
    289: 157,
    290: 158,
    291: 159,
    292: 160,
    293: 161,
    294: 162,
    295: 163,
    296: 164,
    297: 165,
    298: 166,
    299: 167,
    300: 168,
    301: 169,
    302: 170,
    303: 171,
    304: 172,
    305: 173,
    306: 174,
    307: 175,
    308: 176,
    309: 177,
    310: 178,
    311: 179,
    312: 180,
    313: 181,
    314: 182,
    315: 183,
    316: 184,
    317: 185,
    318: 186,
    319: 187,
    320: 188,
    321: 189,
    322: 190,
    323: 191,
    324: 192,
    325: 193,
    326: 194,
    327: 195,
    328: 196,
    329: 197,
    330: 198,
    331: 199,
    332: 200,
    333: 201,
    334: 202,
    335: 203,
    336: 204,
    337: 205,
    338: 206,
    339: 207,
    340: 208,
    341: 209,
    342: 210,
    343: 211,
    344: 212,
    345: 213,
    346: 214,
    347: 215,
    348: 216,
    349: 217,
    350: 218,
    351: 219,
    352: 220,
    353: 221,
    354: 222,
    355: 223,
    356: 224,
    357: 225,
    358: 226,
    359: 227,
    360: 228,
    361: 229,
    362: 230,
    363: 88,
    364: 88,
    365: 67,
    366: 67,
    367: 68,
    368: 69,
    369: 70,
    370: 71,
    371: 72,
    372: 73,
    373: 74,
    374: 75,
    375: 75,
    376: 76,
    377: 77,
    378: 78,
    379: 78,
    380: 79,
    381: 80,
    382: 81,
    383: 81,
    384: 82,
    385: 83,
    386: 84,
    387: 85,
    388: 85,
    389: 86,
    390: 86,
    391: 87,
  };
  return parser;
})();

export default vbaParser;
