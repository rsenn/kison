/*
Generated By kison v0.5.6

Generate time: Thu Oct 14 2021 11:25:41 GMT+0800 (中国标准时间)
*/
var vbaParser = (function (undefined) {
  var AstNode = class AstNode {
    parent = null;
    symbol = undefined;
    label = undefined;
    type = undefined;

    constructor(cfg) {
      Object.assign(this, cfg);
      if (cfg.children) {
        this.setChildren(cfg.children);
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }
      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;
      for (const c of cs) {
        c.parent = this;
      }
    }

    toJSON() {
      const ret = {};
      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          ret[k] = this[k];
        }
      }
      return ret;
    }
  };
  var filterRhs = function (rhs) {
    return rhs.filter((r) => typeof r === 'string');
  };
  var isExtraAstNode = function (ast) {
    return ast.children && !ast.children.length;
  };
  var peekStack = function (stack, n) {
    n = n || 1;
    return stack[stack.length - n];
  };
  var getOriginalSymbol = function (s) {
    let uncompressed = lexer.mapReverseSymbol(s);
    return parser.prioritySymbolMap[uncompressed] || uncompressed;
  };
  var closeAstWhenError = function (error, astStack) {
    const errorNode = new AstNode({
      type: 'token',
      error,
      ...error.lexer,
    });
    peekStack(astStack).addChild(errorNode);
    while (astStack.length !== 1) {
      const ast = astStack.pop();
      if (ast.symbol && isExtraAstNode(ast)) {
        const topAst = peekStack(astStack);
        topAst.children.pop();
        topAst.addChildren(ast.children);
      }
    }
    return errorNode;
  };
  var pushRecoveryTokens = function (recoveryTokens, token) {
    const { EOF_TOKEN } = Lexer.STATIC;
    let eof;
    if (recoveryTokens[recoveryTokens.length - 1]?.token === EOF_TOKEN) {
      eof = recoveryTokens.pop();
    }
    recoveryTokens.push(token);
    if (eof && token.token !== EOF_TOKEN) {
      recoveryTokens.push(eof);
    }
  };
  var getParseError = function (getExpected) {
    const expected = getExpected();
    const tips = [];
    if (expected.length) {
      tips.push("'" + expected.join("', '") + "' expected.");
    }
    tips.push("current token: '" + lexer.getCurrentToken().token + "'.");
    const tip = tips.join('\n');
    return {
      errorMessage: [
        'syntax error at line ' +
          lexer.lineNumber +
          ':\n' +
          lexer.showDebugInfo(),
        ...tips,
      ].join('\n'),
      tip,
    };
  };
  var cleanAst = function (ast, transformNode) {
    if (!transformNode) {
      return ast;
    }
    if (ast.children) {
      let children;
      let childrenChanged;
      while (true) {
        let changed = false;
        let index = 0;
        children = [];
        for (const c of ast.children) {
          const node = transformNode({
            node: c,
            index,
            parent: ast,
            defaultTransformNode: defaultTransformAstNode,
          });
          if (Array.isArray(node)) {
            children.push(...node);
          } else if (node) {
            children.push(node);
          }
          changed = changed || node !== c;
          index++;
        }
        if (!changed) {
          break;
        } else {
          ast.setChildren(children);
          childrenChanged = true;
        }
      }
      if (childrenChanged && ast.parent) {
        cleanAst(ast.parent, transformNode);
      } else {
        for (const c of children) {
          cleanAst(c, transformNode);
        }
      }
    }
    return ast;
  };
  var getAstRootNode = function (astStack, transformNode, raw) {
    let ast = astStack[0];
    ast = ast?.children?.[0];
    ast = ast?.children?.[0];
    if (ast) {
      ast.parent = null;
    }
    if (raw) {
      return ast;
    }
    return ast && cleanAst(ast, transformNode);
  };
  var checkProductionLabelIsSame = function (node, parent) {
    if (node.label || parent.label) {
      if (node.label === parent.label) {
        return node.children;
      }
      return node;
    }
    return node.children;
  };
  var defaultTransformAstNode = function ({ node, parent }) {
    if (node.token || node.error || node.symbol !== parent.symbol) {
      return node;
    }
    if (parent.children.length === 1) {
      // do not check label
      // replace label!
      parent.label = node.label;
      return node.children;
    }
    if (node.children.length > 1) {
      return node;
    }
    // drill down to token
    if (node.children[0]?.token) {
      // do not check label
      // parent.label = node.label;
      return node.children;
    }
    return checkProductionLabelIsSame(node, parent);
  };
  var isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  var isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  var isOneOrMoreSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && s.endsWith('+');
  };
  var isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && s.endsWith('?');
  };
  var normalizeSymbol = function (s) {
    return isOptionalSymbol(s) || isZeroOrMoreSymbol(s) || isOneOrMoreSymbol(s)
      ? s.slice(0, -1)
      : s;
  };
  var isZeroOrMoreSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && s.endsWith('*');
  };
  var rootSmUnit = undefined;
  var productionSkipAstNodeSet = undefined;
  var symbolStack = [{}];
  var productionsBySymbol = {};
  var cachedStateMatchMap = undefined;
  var productionAddAstNodeFlag = 1;
  var productionEndFlag = 2;
  var Lexer = function (cfg) {
    this.nextTokens = [];
    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const ruleIndexMap = (this.ruleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      filter: 3,
      state: 4,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([
      STATIC.EOF_TOKEN,
      STATIC.UNKNOWN_TOKEN,
      STATIC.HIDDEN_TOKEN,
    ]);
    this.rules = [];
    this.defaultEnv = undefined;
    Object.assign(this, cfg);
    this.rules = this.rules.concat();

    this.regexpIndex = this.isCompress ? this.ruleIndexMap.regexp : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;

    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });
    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    }
    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[ruleIndexMap.token] = errorRule.token;
      errorRuleCompress[ruleIndexMap.regexp] = errorRule.regexp;
    }
    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];
      if (pattern.test) {
        let source = pattern.source;
        if (source.startsWith('^')) {
          source = source.slice(1);
        }
        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;
        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = undefined;
      this.tokensQueue = [];
      this.nextTokens = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.ruleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];
      for (const r of this.rules) {
        var filter = this.getRuleItem(r, 'filter');
        if (filter) {
          if (filter.call(this)) {
            rules.push(r);
          }
          continue;
        }
        var state = this.getRuleItem(r, 'state');
        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (state.indexOf(currentState) !== -1) {
          rules.push(r);
        }
      }
      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n) {
      n = n || 1;
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num) {
      num = num || 1;
      var ret;
      while (num--) {
        ret = this.stateStack.pop();
      }
      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function () {
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { matched, match, input } = this;

      matched = matched.slice(0, matched.length - match.length);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? '...' : '') +
          matched
            .slice(0 - DEBUG_CONTEXT_LIMIT)
            .split('\n')
            .join(' '),
        next = match + input.slice(this.end);
      //#JSCOVERAGE_ENDIF
      next =
        next.slice(0, DEBUG_CONTEXT_LIMIT).split('\n').join(' ') +
        (next.length > DEBUG_CONTEXT_LIMIT ? '...' : '');
      return past + next + '\n' + new Array(past.length + 1).join('-') + '^';
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (regexp) {
      if (regexp.test) {
        regexp.lastIndex = this.end;
        const ret = regexp.exec(this.input);
        if (ret && ret.index !== this.end) {
          return null;
        }
        return ret;
      }
      return regexp.call(this, this);
    },
    pushToken: function (token) {
      const tokens = this.tokens;
      if (tokens[tokens.length - 1]?.token === Lexer.STATIC.EOF_TOKEN) {
        tokens.pop();
      }
      tokens.push(token);
    },
    lex: function () {
      const { EOF_TOKEN, HIDDEN_TOKEN } = Lexer.STATIC;

      const token = this.nextToken();
      const tokens = this.tokens;
      const lastToken = tokens[tokens.length - 1];
      if (
        lastToken &&
        token.token === EOF_TOKEN &&
        lastToken.token === EOF_TOKEN
      ) {
        return token;
      }
      this.tokens.push(token);
      if (token.token === HIDDEN_TOKEN || !token.token) {
        return this.lex();
      }
      return token;
    },
    getCurrentToken: function () {
      if (this.tokens[this.tokens.length - 1]) {
        return this.tokens[this.tokens.length - 1];
      }
      return this.lex();
    },
    getLastToken: function () {
      return this.tokens[this.tokens.length - 2] || this.getCurrentToken();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;
      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }
      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);
        if (code === undefined || isNaN(code)) {
          return '';
        }
        return String.fromCodePoint(code);
      }
      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }
      return this.input.charCodeAt(index);
    },
    getTokensLength: function () {
      return this.tokens.length;
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }
      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();

      var { input } = this;

      var { env = this.defaultEnv } = this.options;

      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        var regexp = this.getRuleItem(rule, 'regexp'),
          token = this.getRuleItem(rule, 'token'),
          action = this.getRuleItem(rule, 'action');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        }

        //#JSCOVERAGE_ENDIF
        if ((m = this.matchRegExp(regexp))) {
          this.start = this.end;
          this.end += m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: this.start,
            end: this.end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          Object.assign(this, position);

          var match;
          // for error report
          match = this.match = m[0];

          // all matches
          this.matches = m;
          // may change by user
          this.text = match;
          // matched content utils now
          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
    HIDDEN_TOKEN: '$HIDDEN',
  };
  var lexer = new Lexer({
    rules: [
      ['ACCESS', /ACCESS/gi],
      ['ADDRESSOF', /ADDRESSOF/gi],
      ['ALIAS', /ALIAS/gi],
      ['AND', /AND/gi],
      ['ATTRIBUTE', /ATTRIBUTE/gi],
      ['APPACTIVATE', /APPACTIVATE/gi],
      ['APPEND', /APPEND/gi],
      ['AS', /AS/gi],
      ['BEGIN', /BEGIN/gi],
      ['BEEP', /BEEP/gi],
      ['BINARY', /BINARY/gi],
      ['BOOLEAN', /BOOLEAN/gi],
      ['BYVAL', /BYVAL/gi],
      ['BYREF', /BYREF/gi],
      ['BYTE', /BYTE/gi],
      ['CALL', /CALL/gi],
      ['CASE', /CASE/gi],
      ['CHDIR', /CHDIR/gi],
      ['CHDRIVE', /CHDRIVE/gi],
      ['CLASS', /CLASS/gi],
      ['CLOSE', /CLOSE/gi],
      ['COLLECTION', /COLLECTION/gi],
      ['CONST', /CONST/gi],
      ['DATABASE', /DATABASE/gi],
      ['DATE', /DATE/gi],
      ['DECLARE', /DECLARE/gi],
      ['DEFBOOL', /DEFBOOL/gi],
      ['DEFBYTE', /DEFBYTE/gi],
      ['DEFDATE', /DEFDATE/gi],
      ['DEFDBL', /DEFDBL/gi],
      ['DEFDEC', /DEFDEC/gi],
      ['DEFCUR', /DEFCUR/gi],
      ['DEFINT', /DEFINT/gi],
      ['DEFLNG', /DEFLNG/gi],
      ['DEFOBJ', /DEFOBJ/gi],
      ['DEFSNG', /DEFSNG/gi],
      ['DEFSTR', /DEFSTR/gi],
      ['DEFVAR', /DEFVAR/gi],
      ['DELETESETTING', /DELETESETTING/gi],
      ['DIM', /DIM/gi],
      ['DO', /DO/gi],
      ['DOUBLE', /DOUBLE/gi],
      ['EACH', /EACH/gi],
      ['ELSE', /ELSE/gi],
      ['ELSEIF', /ELSEIF/gi],
      ['END_ENUM', /END ENUM/gi],
      ['END_FUNCTION', /END FUNCTION/gi],
      ['END_IF', /END IF/gi],
      ['END_PROPERTY', /END PROPERTY/gi],
      ['END_SELECT', /END SELECT/gi],
      ['END_SUB', /END SUB/gi],
      ['END_TYPE', /END TYPE/gi],
      ['END_WITH', /END WITH/gi],
      ['END', /END/gi],
      ['ENUM', /ENUM/gi],
      ['EQV', /EQV/gi],
      ['ERASE', /ERASE/gi],
      ['ERROR', /ERROR/gi],
      ['EVENT', /EVENT/gi],
      ['EXIT_DO', /EXIT DO/gi],
      ['EXIT_FOR', /EXIT FOR/gi],
      ['EXIT_FUNCTION', /EXIT FUNCTION/gi],
      ['EXIT_PROPERTY', /EXIT PROPERTY/gi],
      ['EXIT_SUB', /EXIT SUB/gi],
      ['FALSE', /FALSE/gi],
      ['FILECOPY', /FILECOPY/gi],
      ['FRIEND', /FRIEND/gi],
      ['FOR', /FOR/gi],
      ['FUNCTION', /FUNCTION/gi],
      ['GET', /GET/gi],
      ['GLOBAL', /GLOBAL/gi],
      ['GOSUB', /GOSUB/gi],
      ['GOTO', /GOTO/gi],
      ['IF', /IF/gi],
      ['IMP', /IMP/gi],
      ['IMPLEMENTS', /IMPLEMENTS/gi],
      ['IN', /IN/gi],
      ['INPUT', /INPUT/gi],
      ['IS', /IS/gi],
      ['INTEGER', /INTEGER/gi],
      ['KILL', /KILL/gi],
      ['LOAD', /LOAD/gi],
      ['LOCK', /LOCK/gi],
      ['LONG', /LONG/gi],
      ['LOOP', /LOOP/gi],
      ['LEN', /LEN/gi],
      ['LET', /LET/gi],
      ['LIB', /LIB/gi],
      ['LIKE', /LIKE/gi],
      ['LINE_INPUT', /LINE INPUT/gi],
      ['LOCK_READ', /LOCK READ/gi],
      ['LOCK_WRITE', /LOCK WRITE/gi],
      ['LOCK_READ_WRITE', /LOCK READ WRITE/gi],
      ['LSET', /LSET/gi],
      ['MACRO_CONST', /#CONST/gi],
      ['MACRO_IF', /#IF/gi],
      ['MACRO_ELSEIF', /#ELSEIF/gi],
      ['MACRO_ELSE', /#ELSE/gi],
      ['MACRO_END_IF', /#END IF/gi],
      ['ME', /ME/gi],
      ['MID', /MID/gi],
      ['MKDIR', /MKDIR/gi],
      ['MOD', /MOD/gi],
      ['NAME', /NAME/gi],
      ['NEXT', /NEXT/gi],
      ['NEW', /NEW/gi],
      ['NOT', /NOT/gi],
      ['NOTHING', /NOTHING/gi],
      ['NULL', /NULL/gi],
      ['ON', /ON/gi],
      ['ON_ERROR', /ON ERROR/gi],
      ['ON_LOCAL_ERROR', /ON LOCAL ERROR/gi],
      ['OPEN', /OPEN/gi],
      ['OPTIONAL', /OPTIONAL/gi],
      ['OPTION_BASE', /OPTION BASE/gi],
      ['OPTION_EXPLICIT', /OPTION EXPLICIT/gi],
      ['OPTION_COMPARE', /OPTION COMPARE/gi],
      ['OPTION_PRIVATE_MODULE', /OPTION PRIVATE MODULE/gi],
      ['OR', /OR/gi],
      ['OUTPUT', /OUTPUT/gi],
      ['PARAMARRAY', /PARAMARRAY/gi],
      ['PRESERVE', /PRESERVE/gi],
      ['PRINT', /PRINT/gi],
      ['PRIVATE', /PRIVATE/gi],
      ['PROPERTY_GET', /PROPERTY GET/gi],
      ['PROPERTY_LET', /PROPERTY LET/gi],
      ['PROPERTY_SET', /PROPERTY SET/gi],
      ['PTRSAFE', /PTRSAFE/gi],
      ['PUBLIC', /PUBLIC/gi],
      ['PUT', /PUT/gi],
      ['RANDOM', /RANDOM/gi],
      ['RANDOMIZE', /RANDOMIZE/gi],
      ['RAISEEVENT', /RAISEEVENT/gi],
      ['READ', /READ/gi],
      ['READ_WRITE', /READ WRITE/gi],
      ['REDIM', /REDIM/gi],
      ['REM', /REM/gi],
      ['RESET', /RESET/gi],
      ['RESUME', /RESUME/gi],
      ['RETURN', /RETURN/gi],
      ['RMDIR', /RMDIR/gi],
      ['RSET', /RSET/gi],
      ['SAVEPICTURE', /SAVEPICTURE/gi],
      ['SAVESETTING', /SAVESETTING/gi],
      ['SEEK', /SEEK/gi],
      ['SELECT', /SELECT/gi],
      ['SENDKEYS', /SENDKEYS/gi],
      ['SET', /SET/gi],
      ['SETATTR', /SETATTR/gi],
      ['SHARED', /SHARED/gi],
      ['SINGLE', /SINGLE/gi],
      ['SPC', /SPC/gi],
      ['STATIC', /STATIC/gi],
      ['STEP', /STEP/gi],
      ['STOP', /STOP/gi],
      ['STRING', /STRING/gi],
      ['SUB', /SUB/gi],
      ['TAB', /TAB/gi],
      ['TEXT', /TEXT/gi],
      ['THEN', /THEN/gi],
      ['TIME', /TIME/gi],
      ['TO', /TO/gi],
      ['TRUE', /TRUE/gi],
      ['TYPE', /TYPE/gi],
      ['TYPEOF', /TYPEOF/gi],
      ['UNLOAD', /UNLOAD/gi],
      ['UNLOCK', /UNLOCK/gi],
      ['UNTIL', /UNTIL/gi],
      ['VARIANT', /VARIANT/gi],
      ['VERSION', /VERSION/gi],
      ['WEND', /WEND/gi],
      ['WHILE', /WHILE/gi],
      ['WIDTH', /WIDTH/gi],
      ['WITH', /WITH/gi],
      ['WITHEVENTS', /WITHEVENTS/gi],
      ['WRITE', /WRITE/gi],
      ['XOR', /XOR/gi],
      ['AMPERSAND', /&/g],
      ['ASSIGN', /:=/g],
      ['DIV', /\//g],
      ['EQ', /=/g],
      ['GEQ', />=/g],
      ['GT', />/g],
      ['LEQ', /<=/g],
      ['LPAREN', /\(/g],
      ['LT', /</g],
      ['MINUS', /\-/g],
      ['MINUS_EQ', /\-=/g],
      ['MULT', /\*/g],
      ['NEQ', /<>/g],
      ['PLUS', /\+/g],
      ['PLUS_EQ', /\+=/g],
      ['POW', /\^/g],
      ['RPAREN', /\)/g],
      ['L_SQUARE_BRACKET', /\[/g],
      ['R_SQUARE_BRACKET', /\]/g],
      ['$HIDDEN', /\s+/g],
      ['STRINGLITERAL', /"[^"\r\n]*"/g],
      ['INTEGERLITERAL', /(\+|-)?[0-9]+/g],
      ['IDENTIFIER', /\w[\w\d]*/g],
      ['moduleBodyElement+', /moduleBodyElement\+/g],
      ["'|'", /'\|'/g],
      ['blockStmt+', /blockStmt\+/g],
      ["'('", /'\('/g],
      ["')'", /'\)'/g],
      [',', /,/g],
      [';', /;/g],
      ['!', /!/g],
      ['&', /&/g],
      ['%', /%/g],
      ['#', /#/g],
      ['@', /@/g],
      ['$', /\$/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;
    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }
      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }
    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);
    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['progam']],
      ['progam', ['moduleBody?']],
      ['moduleBody', ['moduleBodyElement', 'moduleBodyElement*']],
      ['moduleBodyElement', ['subStmt']],
      ['visibility', ['PRIVATE']],
      ['visibility', ['PUBLIC']],
      ['visibility', ['FRIEND']],
      ['visibility', ['GLOBAL']],
      [
        'subStmt',
        [
          'visibility?',
          'STATIC?',
          'SUB',
          'IDENTIFIER',
          'argList?',
          'block?',
          'END_SUB',
        ],
      ],
      ['block', ['blockStmt', 'blockStmt*']],
      ['blockStmt', ['variableStmt']],
      ['blockStmt', ['implicitCallStmt_InBlock']],
      ['implicitCallStmt_InBlock', ['iCS_B_ProcedureCall']],
      [
        'iCS_B_ProcedureCall',
        ['IDENTIFIER', 'argsCall?', 'iCS_B_ProcedureCall_14_group_2*'],
      ],
      ['argsCall', ['argsCall_15_group_0*', 'argCall', 'argsCall_15_group_7*']],
      ['argsCall', ['argsCall_16_group_0*', 'argCall', 'argsCall_16_group_7*']],
      ['argsCall', ['argsCall_17_group_0*', 'argCall', 'argsCall_17_group_7*']],
      ['argsCall', ['argsCall_18_group_0*', 'argCall', 'argsCall_18_group_7*']],
      ['argCall', ['LPAREN?', 'BYREF?', 'RPAREN?', 'valueStmt']],
      ['argCall', ['LPAREN?', 'BYVAL?', 'RPAREN?', 'valueStmt']],
      ['argCall', ['LPAREN?', 'PARAMARRAY?', 'RPAREN?', 'valueStmt']],
      ['dictionaryCallStmt', ['!', 'IDENTIFIER', 'typeHint?']],
      [
        'variableStmt',
        ['DIM', 'STATIC', 'visibility', 'WITHEVENTS?', 'variableListStmt'],
      ],
      ['variableListStmt', ['variableSubStmt', 'variableListStmt_24_group_1*']],
      [
        'variableSubStmt',
        [
          'IDENTIFIER',
          'variableSubStmt_25_group_1?',
          'typeHint?',
          'asTypeClause?',
        ],
      ],
      ['subscripts', ['subscript_', 'subscripts_26_group_1*']],
      ['subscript_', ['subscript__27_group_0?', 'valueStmt']],
      ['argList', ['LPAREN', 'argList_28_group_1?', 'RPAREN']],
      ['valueStmt', ['literal']],
      ['literal', ['INTEGERLITERAL']],
      ['literal', ['STRINGLITERAL']],
      ['typeHint', ['&']],
      ['typeHint', ['%']],
      ['typeHint', ['#']],
      ['typeHint', ['!']],
      ['typeHint', ['@']],
      ['typeHint', ['$']],
      [
        'arg',
        [
          'OPTIONAL?',
          'BYVAL?',
          'PARAMARRAY?',
          'IDENTIFIER',
          'typeHint?',
          'arg_38_group_7?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      [
        'arg',
        [
          'OPTIONAL?',
          'BYREF?',
          'PARAMARRAY?',
          'IDENTIFIER',
          'typeHint?',
          'arg_39_group_7?',
          'asTypeClause?',
          'argDefaultValue?',
        ],
      ],
      ['argDefaultValue', ['EQ', 'valueStmt']],
      ['asTypeClause', ['AS', 'NEW?', 'type_', 'fieldLength?']],
      ['type_', ['baseType', 'type__42_group_1?']],
      ['baseType', ['BOOLEAN']],
      ['baseType', ['BYTE']],
      ['baseType', ['COLLECTION']],
      ['baseType', ['DATE']],
      ['baseType', ['DOUBLE']],
      ['baseType', ['INTEGER']],
      ['baseType', ['LONG']],
      ['baseType', ['SINGLE']],
      ['baseType', ['VARIANT']],
      ['baseType', ['STRING', 'baseType_52_group_1?']],
      ['fieldLength', ['MULT', 'INTEGERLITERAL']],
      ['fieldLength', ['MULT', 'IDENTIFIER']],
      ['iCS_B_ProcedureCall_14_group_2', ['LPAREN', 'subscripts', 'RPAREN']],
      ['argsCall_15_group_0', ['argCall?', ',']],
      ['argsCall_15_group_7', [',', 'argCall?']],
      ['argsCall_16_group_0', ['argCall?', ',']],
      ['argsCall_16_group_7', [';', 'argCall?']],
      ['argsCall_17_group_0', ['argCall?', ';']],
      ['argsCall_17_group_7', [',', 'argCall?']],
      ['argsCall_18_group_0', ['argCall?', ';']],
      ['argsCall_18_group_7', [';', 'argCall?']],
      ['variableListStmt_24_group_1', [',', 'variableSubStmt']],
      ['variableSubStmt_25_group_1', ['LPAREN', 'subscripts?', 'RPAREN']],
      ['subscripts_26_group_1', [',', 'subscript_']],
      ['subscript__27_group_0', ['valueStmt', 'TO']],
      ['argList_28_group_1', ['arg', 'argList_28_group_1_122_group_1*']],
      ['arg_38_group_7', ['LPAREN', 'RPAREN']],
      ['arg_39_group_7', ['LPAREN', 'RPAREN']],
      ['type__42_group_1', ['LPAREN', 'RPAREN']],
      ['baseType_52_group_1', ['MULT', 'valueStmt']],
      ['argList_28_group_1_122_group_1', [',', 'arg']],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
    },
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p[this.productionIndexMap[itemType]];
      }
      return p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    isCompress: 1,
  };
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  parser.prioritySymbolMap = {};
  productionSkipAstNodeSet = new Set([
    54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
  ]);
  var parse = function (input, options) {
    // clearStateMatchCache();

    let recoveryTokens = [];
    const terminalNodes = [];

    options = options || {};
    let error;
    var {
      onErrorRecovery,
      onAction,
      lexerOptions = {},
      transformNode,
    } = options;

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformAstNode;
    }

    var {
      lexer,
      productions,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;

    lexer.options = lexerOptions;
    const startSymbol = getProductionSymbol(productions[0]);
    symbolStack = [startSymbol];
    const astStack = [
      new AstNode({
        children: [],
      }),
    ];
    lexer.resetInput(input);
    let token;
    let next = null;

    let topSymbol;

    let errorNode;

    function peekSymbolStack(n = 1) {
      let index = symbolStack.length - n;
      while (
        index !== -1 &&
        symbolStack[index] &&
        symbolStack[index].type === 'rule'
      ) {
        index--;
      }
      return symbolStack[index];
    }

    function popSymbolStack() {
      while (true) {
        const t = symbolStack.pop();
        if (!t || t.type !== 'rule') {
          break;
        }
      }
      while (symbolStack[symbolStack.length - 1]?.type === 'rule') {
        symbolStack.pop();
      }
    }

    let getExpected = function () {
      const s = topSymbol;
      if (!isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      }
      // get expected tokens from state machine
      return findExpectedTokenFromStateMachine(findSymbolIndex()).map((s) =>
        lexer.mapReverseSymbol(s),
      );
    };

    function makeRuleIndexFlag(ruleIndex, ruleUnit) {
      return {
        type: 'rule',
        ruleUnit,
        tokensLength: lexer.getTokensLength(),
        ruleIndex,
      };
    }

    function findSymbolIndex() {
      if (topSymbol === startSymbol) {
        return { childReverseIndex: -1, ruleIndex: -1 };
      }
      let i = -1;
      let top = symbolStack.length - 1;
      let ruleIndex = 0;
      while (symbolStack[top] !== topSymbol) {
        top--;
      }
      while (
        top !== -1 &&
        symbolStack[top] &&
        symbolStack[top].type !== 'rule'
      ) {
        if (typeof symbolStack[top] === 'string') {
          i++;
        }
        top--;
      }
      if (symbolStack[top]?.type === 'rule') {
        ruleIndex = symbolStack[top].ruleIndex;
      }

      return { childReverseIndex: i, ruleIndex };
    }

    let production;

    const { EOF_TOKEN } = Lexer.STATIC;

    while (1) {
      topSymbol = peekSymbolStack();

      if (!topSymbol) {
        break;
      }

      while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
        let ast = astStack.pop();
        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstNode({
            type: 'symbol',
            symbol: ast.symbol,
            children: [ast],
            label: ast.label,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
        popSymbolStack();
        topSymbol = peekSymbolStack();
        if (!topSymbol) {
          break;
        }
      }

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
        }
        if (topSymbol === token.t) {
          popSymbolStack();
          const terminalNode = new AstNode(token);
          terminalNode.type = 'token';
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = lexer.lex();
          pushRecoveryTokens(recoveryTokens, token);
          continue;
        }
        next = predictProductionIndexLLK(findSymbolIndex());
        if (next) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          const { ruleIndex, unit } = next;

          production = productions[ruleIndex];

          if (productionSkipAstNodeSet?.has(ruleIndex)) {
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production)
                .concat(makeRuleIndexFlag(ruleIndex, unit))
                .reverse(),
            );
          } else {
            const newAst = new AstNode({
              type: 'symbol',
              symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
              label: getOriginalSymbol(getProductionLabel(production)),
              children: [],
            });
            peekStack(astStack).addChild(newAst);
            astStack.push(newAst);
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production)
                .concat([makeRuleIndexFlag(ruleIndex, unit), productionEndFlag])
                .reverse(),
            );
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          error = {
            recovery: false,
            ...getParseError(getExpected),
            expected: getExpected(),
            symbol: peekStack(astStack).symbol,
            lexer: lexer.toJSON(),
          };
          if (onErrorRecovery) {
            const recommendedAction = {};
            lexer.stash();
            const nextToken = lexer.lex();
            lexer.stashPop();
            // should delete
            if (
              topSymbol === nextToken.t ||
              predictProductionIndexNextLLK(findSymbolIndex())
            ) {
              recommendedAction.action = 'del';
            } else if (error.expected.length) {
              recommendedAction.action = 'add';
            }

            const localErrorNode = new AstNode({
              error,
              type: 'token',
              ...error.lexer,
            });
            peekStack(astStack).addChild(localErrorNode);

            const recovery =
              onErrorRecovery(
                {
                  errorNode: localErrorNode,
                  parseTree: getAstRootNode(astStack, getAstRootNode, true),
                },
                recommendedAction,
              ) || {};

            const { action } = recovery;

            peekStack(astStack).children.pop();

            if (!action) {
              errorNode = closeAstWhenError(error, astStack);
              break;
            }

            // clearStateMatchCache();

            if (action === 'del') {
              error.recovery = true;
              const deleteToken = recoveryTokens.pop();
              deleteToken.recovery = 'del';
              token = null;
            } else if (action === 'add') {
              error.recovery = true;
              token = {
                ...token,
                token: recovery.token,
                text: recovery.text,
                t: lexer.mapSymbol(recovery.token),
                recovery: 'add',
              };
              lexer.pushToken(token);
              pushRecoveryTokens(recoveryTokens, token);
            }
          } else {
            errorNode = closeAstWhenError(error, astStack);
            break;
          }
        }
      }

      topSymbol = peekSymbolStack();

      while (topSymbol && typeof topSymbol === 'function') {
        if (onAction) {
          onAction({
            token: lexer.getLastToken(),
            action: topSymbol,
            parseTree: getAstRootNode(astStack, transformNode, true),
          });
        }
        popSymbolStack();
        topSymbol = peekSymbolStack();
      }

      if (!symbolStack.length) {
        break;
      }
    }

    if (!error && lexer.getCurrentToken().token !== EOF_TOKEN) {
      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [EOF_TOKEN];
      }
      error = {
        ...getParseError(getExpected),
        expected: getExpected(),
        symbol: peekStack(astStack)?.symbol,
        lexer: lexer.toJSON(),
      };
      errorNode = closeAstWhenError(error, astStack);
    }

    const ast = getAstRootNode(astStack, transformNode);

    symbolStack = [];

    // clearStateMatchCache();

    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  var predictProductionIndexLLK = function (
    { childReverseIndex, ruleIndex },
    fn,
  ) {
    const productions = parser.productions;

    if (ruleIndex === -1) {
      return rootSmUnit;
    }

    let parentSymbolItem = getParentSymbolItem();
    if (!parentSymbolItem) {
      throw new Error('no parent symbol');
    }
    const parentUnit = parentSymbolItem.ruleUnit;
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const childSymbol = unit.type;

    if (!isSymbol(unit.type)) {
      return null;
    }

    let returnedUnit = unit;

    const { unitType } = unit;
    const canSkipped = unitType === 'zeroOrMore' || unitType === 'optional';
    if (canSkipped) {
      let newUnit = unit.checkUnit;
      if (!newUnit) {
        newUnit = new SymbolStateUnit(childSymbol, ruleIndex);
        newUnit.end.pushTransition(unit.end);
      }
      if (unitType === 'zeroOrMore') {
        returnedUnit = unit.start.transitions[0].to.unit;
      } else {
        returnedUnit = newUnit;
      }
      unit.checkUnit = newUnit;
      unit = newUnit;
    } else {
      const alterations = productionsBySymbol[childSymbol];
      if (alterations.ruleIndexes.length <= 1) {
        const ruleIndex = alterations.ruleIndexes[0];
        if (ruleIndex === undefined) {
          throw new Error('no predict!');
        }
        return returnNext(ruleIndex);
      }
    }

    const transitions = unit.start.transitions;

    let maxCount = 0;
    let matchedRuleIndex = -1;

    function returnNext(ruleIndex) {
      return {
        ruleIndex,
        unit: returnedUnit.start.getUnits()[ruleIndex],
      };
    }

    // function cacheUnit() {
    //   const afterUnits = units.slice(units.length - childReverseIndex);
    //   for (const afterUnit of afterUnits) {
    //     setStateCacheMatch(afterUnit.start, parentSymbolItem.tokensLength);
    //   }
    // }

    // function getStateCacheMatchLocal(state) {
    //   return getStateCacheMatch(state, parentSymbolItem.tokensLength);
    // }

    for (const t of transitions) {
      lexer.stash();
      if (fn) {
        fn();
      }
      const { match, count } = bfsMatch(t.to);
      lexer.stashPop();
      if (match) {
        //console.log('match', productions[t.to.unit.ruleIndex] + '');
        // cacheUnit();
        return returnNext(t.to.unit.ruleIndex);
      }
      if (maxCount < count) {
        maxCount = count;
        matchedRuleIndex = t.to.unit.ruleIndex;
      }
    }

    if (matchedRuleIndex !== -1 && !canSkipped) {
      //console.log('matchedRuleIndex', productions[matchedRuleIndex] + '');
      // cacheUnit();
      return returnNext(matchedRuleIndex);
    }
    return null;
  };
  var predictProductionIndexNextLLK = function (arg) {
    return predictProductionIndexLLK(arg, () => lexer.lex());
  };
  var isSymbol = function (s) {
    return !!productionsBySymbol[s];
  };
  var bfsMatch = function (startState, getStateCacheMatchLocal) {
    let reachableStates = [startState];
    let ret = {};
    let count = 0;
    while (1) {
      reachableStates = getNextReachableStates(
        reachableStates,
        ret,
        getStateCacheMatchLocal,
      );
      if (reachableStates.length) {
        lexer.lex();
        count++;
      } else {
        break;
      }
    }
    if (ret.matchedInput) {
      return {
        match: true,
        count,
      };
    }
    return { match: false, count };
  };
  var getNextReachableStates = function (
    reachableStates,
    ret,
    getStateCacheMatchLocal,
  ) {
    const stack = [];
    const newReachableStates = [];
    const encountered = new Set();
    for (const currentState of reachableStates) {
      stack.push(currentState);
      let state;
      while (stack.length) {
        state = stack.pop();
        if (encountered.has(state)) {
          continue;
        }
        encountered.add(state);
        if (getStateCacheMatchLocal && getStateCacheMatchLocal(state)) {
          ret.matchedInput = true;
          return [];
        }
        if (
          !state.transitions.length &&
          lexer.getCurrentToken().token === Lexer.STATIC.EOF_TOKEN
        ) {
          ret.matchedInput = true;
          return [];
        }
        let finded;
        for (const t of state.transitions) {
          const find = t.perform();
          finded = finded || !!find;
          if (find) {
            if (find.count) {
              newReachableStates.push(t.to);
            } else {
              stack.push(t.to);
            }
          }
        }
      }
    }
    return newReachableStates;
  };
  var createTokenMatcher = (token) => {
    const fn = () => {
      const currentToken = lexer.getCurrentToken();
      return currentToken.t === token ? { count: 1 } : false;
    };
    fn.token = token;
    return fn;
  };
  var getParentSymbolItem = function () {
    let parentSymbolItem;

    for (let i = symbolStack.length - 1; i >= 0; i--) {
      const s = symbolStack[i];
      if (s?.type === 'rule') {
        parentSymbolItem = s;
        break;
      }
    }

    return parentSymbolItem;
  };
  var findExpectedTokenFromStateMachine = function (
    { childReverseIndex },
    stack = new Set(),
  ) {
    const ret = new Set();
    const { ruleUnit: parentUnit } = getParentSymbolItem();
    const { units } = parentUnit;
    let unit = units[units.length - 1 - childReverseIndex];
    const states = [unit.start];
    while (states.length) {
      const state = states.pop();
      if (stack.has(state)) {
        continue;
      }
      stack.add(state);
      for (const t of state.transitions) {
        if (t.condition?.token) {
          ret.add(t.condition.token);
          continue;
        }
        if (t.to) {
          states.push(t.to);
        }
      }
    }
    return Array.from(ret);
  };
  var buildRhsSM = function (symbol, rhs, ruleIndex) {
    function getUnit(rr) {
      if (isSymbol(rr)) {
        return new SymbolStateUnit(rr, ruleIndex);
      }
      const unit = new StateUnit(rr, ruleIndex);
      unit.start.pushTransition(unit.end, createTokenMatcher(rr));
      return unit;
    }

    const units = [];
    let i = -1;
    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }
      ++i;
      let finalUnit;
      if (isOptionalSymbol(r)) {
        const rr = r.slice(0, -1);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'optional';
        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = r.slice(0, -1);
        const unit = getUnit(rr);
        finalUnit = new StateUnit(rr, ruleIndex);
        finalUnit.unitType = 'zeroOrMore';
        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }
      units.push(finalUnit);
    }
    return concatUnits(symbol, units, ruleIndex);
  };
  var SymbolState = class SymbolState {
    constructor(symbol, type, unit) {
      this.type = type;
      this.symbol = symbol;
      let transitions = undefined;
      this._transitions = [];
      this.allTranstions = [];
      this.unit = unit;
      this.emptyRuleIndex = undefined;
      this.units = {};
      Object.defineProperty(this, 'transitions', {
        get: () => {
          if (!transitions) {
            transitions = this._transitions.concat();
            const myProductions = productionsBySymbol[symbol];
            for (const i of myProductions.ruleIndexes) {
              const p = myProductions[i];
              const rhs = parser.getProductionRhs(p);
              const rootSymbolUnit = buildRhsSM(symbol, rhs, i);
              this.units[i] = rootSymbolUnit;
              transitions.push(new Transition(rootSymbolUnit.start));
              rootSymbolUnit.end.pushTransition(unit.end);
            }
            this.allTranstions = transitions;
          }
          return transitions;
        },
      });
    }

    getTransitions() {
      return this['transitions'];
    }

    getUnits() {
      this.getTransitions();
      return this.units;
    }

    pushTransition(endState, condition) {
      this._transitions.push(new Transition(endState, condition));
    }
  };
  var SymbolStateUnit = class SymbolStateUnit {
    unitType = 'symbol';
    constructor(type, ruleIndex) {
      this.ruleIndex = ruleIndex;
      this.type = type;
      this.end = new State(`endOf${type}`, this);
      this.start = new SymbolState(type, `startOf${type}`, this);
    }
  };
  var State = class State {
    constructor(type, unit) {
      this.type = type;
      this.unit = unit;
      this.transitions = [];
    }
    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  var concatUnits = function (type, us, ruleIndex) {
    const l = us.length;
    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }
    const ret = new RootSymbolUnit(type, ruleIndex);
    if (l >= 1) {
      ret.start = us[0].start;
      ret.end = us[l - 1].end;
    } else {
      ret.start = new State(`startOf${type}`, ret);
      ret.end = new State(`endOf${type}`, ret);
      ret.start.pushTransition(ret.end);
    }
    ret.units = us;
    return ret;
  };
  var StateUnit = class StateUnit {
    units = undefined;
    unitType = 'token';
    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
      this.start = new State(`startOf${type}`, this);
      this.end = new State(`endOf${type}`, this);
    }
  };
  var Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }
    perform() {
      if (this.condition) {
        const ret = this.condition();
        if (ret === true) {
          return {
            count: 0,
          };
        }
        return ret;
      }
      return {
        count: 0,
      };
    }
  };
  var RootSymbolUnit = class RootSymbolUnit {
    units = undefined;
    start = undefined;
    end = undefined;
    unitType = 'rootSymbol';
    constructor(type, ruleIndex) {
      this.type = type;
      this.ruleIndex = ruleIndex;
    }
  };
  var initLLK = function () {
    const { productions } = parser;
    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      productionsBySymbol[symbol] = productionsBySymbol[symbol] || {
        ruleIndexes: [],
      };
      productionsBySymbol[symbol][i] = p;
      productionsBySymbol[symbol].ruleIndexes.push(i);
    }
    const production = productions[0];

    rootSmUnit = {};

    Object.assign(rootSmUnit, {
      unit: buildRhsSM(
        parser.getProductionSymbol(production),
        filterRhs(parser.getProductionRhs(production)),
        0,
      ),
      ruleIndex: 0,
    });
  };
  initLLK();
  parser.parse = parse;
  return parser;
})();

export default vbaParser;
