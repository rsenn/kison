progam ::= moduleBody?
moduleBody ::= moduleBodyElement+
moduleBodyElement ::= functionStmt | subStmt
visibility ::= 'PRIVATE' | 'PUBLIC' | 'FRIEND' | 'GLOBAL'
subStmt ::= visibility? 'STATIC'? 'SUB' 'IDENTIFIER' argList? block? 'END_SUB'
functionStmt ::= visibility? 'STATIC'? 'FUNCTION' 'IDENTIFIER' typeHint? argList? asTypeClause? block? 'END_FUNCTION'
block ::= blockStmt+
blockStmt ::= exitStmt | variableStmt | implicitCallStmt_InBlock | explicitCallStmt | setStmt | letStmt
exitStmt ::= 'EXIT_DO' | 'EXIT_FOR' | 'EXIT_FUNCTION' | 'EXIT_PROPERTY' | 'EXIT_SUB' | 'END'
letStmt ::= 'LET'? implicitCallStmt_InStmt ( 'EQ' | 'PLUS_EQ' | 'MINUS_EQ' ) valueStmt
setStmt ::= 'SET' implicitCallStmt_InStmt 'EQ' valueStmt
explicitCallStmt ::= eCS_ProcedureCall
eCS_ProcedureCall ::= 'CALL' 'IDENTIFIER' typeHint? ( 'LPAREN' argsCall 'RPAREN' )? ( 'LPAREN' subscripts 'RPAREN' )?
implicitCallStmt_InBlock ::= iCS_B_ProcedureCall
iCS_B_ProcedureCall ::= 'IDENTIFIER' argsCall? ( 'LPAREN' subscripts 'RPAREN' )?
argsCall ::= ( argCall? ( ',' | ';' ) )* argCall ( ( ',' | ';' ) argCall? )*
argCall ::= 'LPAREN'? ( 'BYREF' | 'BYVAL' | 'PARAMARRAY' )? 'RPAREN'? valueStmt
dictionaryCallStmt ::= '!' 'IDENTIFIER' typeHint?
variableStmt ::= ( 'DIM' | 'STATIC' | visibility ) 'WITHEVENTS'? variableListStmt
variableListStmt ::= variableSubStmt ( ',' variableSubStmt )*
variableSubStmt ::= 'IDENTIFIER' ( 'LPAREN' subscripts? 'RPAREN' )? typeHint? asTypeClause?
subscripts ::= subscript_ ( ',' subscript_ )*
subscript_ ::= ( valueStmt 'TO' )? valueStmt
argList ::= 'LPAREN' ( arg ( ',' arg )* )? 'RPAREN'
valueStmt ::= literal | implicitCallStmt_InStmt
implicitCallStmt_InStmt ::= iCS_S_VariableOrProcedureCall | iCS_S_ProcedureOrArrayCall
iCS_S_ProcedureOrArrayCall ::= 'IDENTIFIER' typeHint? 'LPAREN' argsCall? 'RPAREN' dictionaryCallStmt? ( 'LPAREN' subscripts 'RPAREN' )?
iCS_S_VariableOrProcedureCall ::= 'IDENTIFIER' typeHint? dictionaryCallStmt? ( 'LPAREN' subscripts 'RPAREN' )?
dictionaryCallStmt ::= '!' 'IDENTIFIER' typeHint?
literal ::= 'INTEGERLITERAL' | 'STRINGLITERAL'
typeHint ::= '&' | '%' | '#' | '!' | '@' | '$'
arg ::= 'OPTIONAL'? ( 'BYVAL' | 'BYREF' )? 'PARAMARRAY'? 'IDENTIFIER' typeHint? ( 'LPAREN' 'RPAREN' )? asTypeClause? argDefaultValue?
argDefaultValue ::= 'EQ' valueStmt
asTypeClause ::= 'AS' 'NEW'? type_ fieldLength?
type_ ::= baseType ( 'LPAREN' 'RPAREN' )?
baseType ::= 'BOOLEAN' | 'BYTE' | 'COLLECTION' | 'DATE' | 'DOUBLE' | 'INTEGER' | 'LONG' | 'SINGLE' | 'VARIANT' | 'STRING' ( 'MULT' valueStmt )?
fieldLength ::= 'MULT' 'INTEGERLITERAL' | 'MULT' 'IDENTIFIER'