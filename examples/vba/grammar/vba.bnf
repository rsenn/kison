progam ::= moduleDeclarations? endOfLine* moduleBody? endOfLine*
endOfLine ::= 'NEWLINE' | 'COMMENT' | 'REMCOMMENT'
endOfStatement ::= ( endOfLine | 'COLON' )*
moduleDeclarations ::= moduleDeclarationsElement ( endOfLine+ moduleDeclarationsElement )* endOfLine*
moduleDeclarationsElement ::= variableStmt
moduleBody ::= moduleBodyElement ( endOfLine+ moduleBodyElement )* endOfLine*
moduleBodyElement ::= functionStmt | propertyGetStmt | propertySetStmt | propertyLetStmt | subStmt
visibility ::= 'PRIVATE' | 'PUBLIC' | 'FRIEND' | 'GLOBAL'
subStmt ::= visibility? 'STATIC'? 'SUB' ambiguousIdentifier argList? endOfStatement block? 'END_SUB'
propertyGetStmt ::= visibility? 'STATIC'? 'PROPERTY_GET' ambiguousIdentifier typeHint? 'LPAREN' 'RPAREN' asTypeClause? endOfStatement block? 'END_PROPERTY'
propertySetStmt ::= visibility? 'STATIC'? 'PROPERTY_SET' ambiguousIdentifier argList? endOfStatement block? 'END_PROPERTY'
propertyLetStmt ::= visibility? 'STATIC'? 'PROPERTY_LET' ambiguousIdentifier argList? endOfStatement block? 'END_PROPERTY'
functionStmt ::= visibility? 'STATIC'? 'FUNCTION' ambiguousIdentifier typeHint? argList? asTypeClause? endOfStatement block? 'END_FUNCTION'
block ::= blockStmt ( endOfStatement blockStmt )* endOfStatement
blockStmt ::= eraseStmt | exitStmt | explicitCallStmt | setStmt | redimStmt | letStmt | variableStmt | implicitCallStmt_InBlock
eraseStmt ::= 'ERASE' valueStmt ( ',' valueStmt )*
redimStmt ::= 'REDIM' 'PRESERVE'? redimSubStmt ( ',' redimSubStmt )*
redimSubStmt ::= implicitCallStmt_InStmt 'LPAREN' subscripts 'RPAREN' asTypeClause?
exitStmt ::= 'EXIT_DO' | 'EXIT_FOR' | 'EXIT_FUNCTION' | 'EXIT_PROPERTY' | 'EXIT_SUB' | 'END'
letStmt ::= 'LET'? implicitCallStmt_InStmt ( 'EQ' | 'PLUS_EQ' | 'MINUS_EQ' ) valueStmt
setStmt ::= 'SET' implicitCallStmt_InStmt 'EQ' valueStmt
explicitCallStmt ::= eCS_MemberProcedureCall | eCS_ProcedureCall
eCS_MemberProcedureCall ::= 'CALL' implicitCallStmt_InStmt? '.' ambiguousIdentifier typeHint? ( 'LPAREN' argsCall 'RPAREN' )? ( 'LPAREN' indexes 'RPAREN' )?
eCS_ProcedureCall ::= 'CALL' ambiguousIdentifier typeHint? ( 'LPAREN' argsCall 'RPAREN' )? ( 'LPAREN' indexes 'RPAREN' )?
implicitCallStmt_InBlock ::= iCS_B_MemberProcedureCall | iCS_B_ProcedureCall
iCS_B_MemberProcedureCall ::= implicitCallStmt_InStmt '.' ambiguousIdentifier typeHint? argsCall? dictionaryCallStmt? ( 'LPAREN' indexes 'RPAREN' )?
iCS_B_ProcedureCall ::= ambiguousIdentifier argsCall? ( 'LPAREN' subscripts 'RPAREN' )?
argsCall ::= argCall? ( ',' argCall? )*
argCall ::= 'LPAREN'? ( 'BYREF' | 'BYVAL' | 'PARAMARRAY' )? 'RPAREN'? valueStmt
variableStmt ::= ( 'DIM' | 'STATIC' | visibility ) 'WITHEVENTS'? variableListStmt
variableListStmt ::= variableSubStmt ( ',' variableSubStmt )*
variableSubStmt ::= ambiguousIdentifier ( 'LPAREN' subscripts? 'RPAREN' )? typeHint? asTypeClause?
indexes ::= valueStmt ( ',' valueStmt )*
subscript_ ::= ( valueStmt 'TO' )? valueStmt
subscripts ::= subscript_ ( ',' subscript_ )*
subscript_ ::= ( valueStmt 'TO' )? valueStmt
argList ::= 'LPAREN' ( arg ( ',' arg )* )? 'RPAREN'
valueStmt ::= literal | implicitCallStmt_InStmt
implicitCallStmt_InStmt ::= iCS_S_MembersCall | iCS_S_VariableOrProcedureCall | iCS_S_ProcedureOrArrayCall
iCS_S_MembersCall ::= ( iCS_S_VariableOrProcedureCall | iCS_S_ProcedureOrArrayCall )? iCS_S_MemberCall+ dictionaryCallStmt? ( 'LPAREN' indexes 'RPAREN' )?
iCS_S_MemberCall ::= ( '.' | '!' ) ( iCS_S_VariableOrProcedureCall | iCS_S_ProcedureOrArrayCall )
iCS_S_ProcedureOrArrayCall ::= ambiguousIdentifier typeHint? 'LPAREN' argsCall? 'RPAREN' dictionaryCallStmt? ( 'LPAREN' indexes 'RPAREN' )?
iCS_S_VariableOrProcedureCall ::= ambiguousIdentifier typeHint? dictionaryCallStmt? ( 'LPAREN' indexes 'RPAREN' )?
dictionaryCallStmt ::= '!' ambiguousIdentifier typeHint?
literal ::= 'INTEGERLITERAL' | 'STRINGLITERAL'
typeHint ::= '&' | '%' | '#' | '!' | '@' | '$'
arg ::= 'OPTIONAL'? ( 'BYVAL' | 'BYREF' )? 'PARAMARRAY'? ambiguousIdentifier typeHint? ( 'LPAREN' 'RPAREN' )? asTypeClause? argDefaultValue?
argDefaultValue ::= 'EQ' valueStmt
asTypeClause ::= 'AS' 'NEW'? type_ fieldLength?
type_ ::= ( baseType | complexType ) ( 'LPAREN' 'RPAREN' )?
complexType ::= ambiguousIdentifier ( ( '.' | '!' ) ambiguousIdentifier )*
baseType ::= 'BOOLEAN' | 'BYTE' | 'COLLECTION' | 'DOUBLE' | 'INTEGER' | 'LONG' | 'SINGLE' | 'VARIANT' | 'STRING' ( 'MULT' valueStmt )?
fieldLength ::= 'MULT' 'INTEGERLITERAL' | 'MULT' ambiguousIdentifier
ambiguousIdentifier ::= 'IDENTIFIER'