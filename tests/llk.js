/*
Generated By kison v0.5.0

Generate time: Fri Oct 01 2021 01:09:20 GMT+0800 (中国标准时间)
*/
var $parser = (function (undefined) {
  function mix(to, from) {
    for (var f in from) {
      to[f] = from[f];
    }
  }
  function isArray(obj) {
    return '[object Array]' === Object.prototype.toString.call(obj);
  }
  function each(object, fn, context) {
    if (object) {
      var key,
        val,
        length,
        i = 0;

      context = context || null;

      if (!isArray(object)) {
        for (key in object) {
          // can not use hasOwnProperty
          if (fn.call(context, object[key], key, object) === false) {
            break;
          }
        }
      } else {
        length = object.length;
        for (val = object[0]; i < length; val = object[++i]) {
          if (fn.call(context, val, i, object) === false) {
            break;
          }
        }
      }
    }
  }
  function inArray(item, arr) {
    for (var i = 0, l = arr.length; i < l; i++) {
      if (arr[i] === item) {
        return true;
      }
    }
    return false;
  }
  var Lexer = function (cfg) {
    this.nextTokens = [];
    if (Lexer.supportSticky === undefined) {
      try {
        Lexer.supportSticky = typeof /(?:)/.sticky == 'boolean';
      } catch (e) {
        Lexer.supportSticky = false;
      }
    }

    const ruleIndexMap = (this.ruleIndexMap = {
      token: 0,
      regexp: 1,
      action: 2,
      filter: 3,
      state: 4,
    });
    const STATIC = Lexer.STATIC;
    this.tokenSet = new Set([
      STATIC.EOF_TOKEN,
      STATIC.UNKNOWN_TOKEN,
      STATIC.HIDDEN_TOKEN,
    ]);
    this.rules = [];
    this.defaultEnv = undefined;
    mix(this, cfg);
    this.rules = this.rules.concat();

    this.regexpIndex = this.isCompress ? this.ruleIndexMap.regexp : 'regexp';
    this.getRuleItem = this.isCompress
      ? this.getRuleItemCompress
      : this.getRuleItemNoCompress;

    this.transformRules();
    this.userData = {};
    const errorRule = (this.errorRule = {
      regexp: this.matchAny,
      token: Lexer.STATIC.UNKNOWN_TOKEN,
    });
    for (const rule of this.rules) {
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    }
    if (this.isCompress) {
      const errorRuleCompress = (this.errorRule = []);
      errorRuleCompress[ruleIndexMap.token] = errorRule.token;
      errorRuleCompress[ruleIndexMap.regexp] = errorRule.regexp;
    }
    this.resetInput(this.input);
    this.options = {};
  };
  Lexer.prototype = {
    transformRegExp: function (obj, p, disableSticky) {
      const pattern = obj[p];
      if (pattern.test) {
        let source = pattern.source;
        if (source.startsWith('^')) {
          source = source.slice(1);
        }
        var flags = Lexer.supportSticky && !disableSticky ? 'gy' : 'g';
        if (pattern.multiline) flags += 'm';
        if (pattern.ignoreCase) flags += 'i';
        if (pattern.unicode) flags += 'u';
        obj[p] = new RegExp(source, flags);
      } else if (typeof pattern === 'object') {
        for (const k of Object.keys(pattern)) {
          this.transformRegExp(pattern, k);
        }
      }
    },
    hasToken: function (t) {
      return this.tokenSet.has(t);
    },
    transformRules: function () {
      if (Lexer.supportSticky) {
        const { regexpIndex } = this;
        for (const r of this.rules) {
          this.transformRegExp(r, regexpIndex);
        }
      }
    },
    matchAny: function () {
      return this.end < this.input.length ? this.input.charAt(this.end) : false;
    },
    addRule: function (rule) {
      this.rules.push(rule);
      const token = this.getRuleItem(rule, 'token');
      if (token) {
        this.tokenSet.add(token);
      }
    },
    resetInput: function (input) {
      this.token = undefined;
      this.tokensQueue = [];
      this.tokens = [];
      this.userData = {};
      this.input = input;
      this.matched = '';
      this.stateStack = [Lexer.STATIC.INITIAL_STATE];
      this.match = '';
      this.text = '';
      this.firstLine = 1;
      this.lineNumber = 1;
      this.lastLine = 1;
      this.start = 0;
      this.end = 0;
      this.firstColumn = 1;
      this.lastColumn = 1;
    },
    getRuleItemNoCompress: function (rule, itemType) {
      return rule[itemType];
    },
    getRuleItemCompress: function (rule, itemType) {
      return rule[this.ruleIndexMap[itemType]];
    },
    getCurrentRules: function () {
      var currentState = this.stateStack[this.stateStack.length - 1],
        rules = [];
      each(this.rules, (r) => {
        var filter = this.getRuleItem(r, 'filter');
        if (filter) {
          if (filter.call(this)) {
            rules.push(r);
          }
          return;
        }
        var state = this.getRuleItem(r, 'state');
        if (!state) {
          if (currentState === Lexer.STATIC.INITIAL_STATE) {
            rules.push(r);
          }
        } else if (inArray(currentState, state)) {
          rules.push(r);
        }
      });
      rules.push(this.errorRule);
      return rules;
    },
    peekState: function (n) {
      n = n || 1;
      return this.mapReverseState(this.stateStack[this.stateStack.length - n]);
    },
    pushState: function (state) {
      this.stateStack.push(this.mapState(state));
    },
    popState: function (num) {
      num = num || 1;
      var ret;
      while (num--) {
        ret = this.stateStack.pop();
      }
      return ret && this.mapReverseState(ret);
    },
    showDebugInfo: function () {
      var { DEBUG_CONTEXT_LIMIT } = Lexer.STATIC;
      var { matched, match, input } = this;

      matched = matched.slice(0, matched.length - match.length);
      var past =
          (matched.length > DEBUG_CONTEXT_LIMIT ? '...' : '') +
          matched
            .slice(0 - DEBUG_CONTEXT_LIMIT)
            .split('\n')
            .join(' '),
        next = match + input.slice(this.end);
      //#JSCOVERAGE_ENDIF
      next =
        next.slice(0, DEBUG_CONTEXT_LIMIT).split('\n').join(' ') +
        (next.length > DEBUG_CONTEXT_LIMIT ? '...' : '');
      return past + next + '\n' + new Array(past.length + 1).join('-') + '^';
    },
    mapSymbol: function (n) {
      return n;
    },
    mapReverseSymbol: function (n) {
      return n;
    },
    mapState: function (n) {
      return n;
    },
    mapReverseState: function (n) {
      return n;
    },
    toJSON: function () {
      const currentToken = this.getCurrentToken();
      return {
        text: currentToken.text,
        firstLine: currentToken.firstLine,
        firstColumn: currentToken.firstColumn,
        lastLine: currentToken.lastLine,
        lastColumn: currentToken.lastColumn,
        token: currentToken.token,
        start: currentToken.start,
        end: currentToken.end,
      };
    },
    stash: function () {
      this.stashIndex = this.tokens.length;
    },
    stashPop: function () {
      this.nextTokens = [
        ...this.tokens.slice(this.stashIndex),
        ...this.nextTokens,
      ];
      this.tokens.length = this.stashIndex;
    },
    matchRegExp: function (regexp) {
      if (regexp.test) {
        regexp.lastIndex = this.end;
        const ret = regexp.exec(this.input);
        if (ret && ret.index !== this.end) {
          return null;
        }
        return ret;
      }
      return regexp.call(this, this);
    },
    lex: function () {
      const token = this.nextToken();
      this.tokens.push(token);
      if (token.token === Lexer.STATIC.HIDDEN_TOKEN || !token.token) {
        return this.lex();
      }
      return token;
    },
    getCurrentToken: function () {
      if (this.tokens[this.tokens.length - 1]) {
        return this.tokens[this.tokens.length - 1];
      }
      return this.lex();
    },
    nextChar: function (index = 0) {
      return this.getChar(this.end + index);
    },
    nextCharCode: function (index = 0) {
      return this.getCharCode(this.end + index);
    },
    nextStartsWith: function (search) {
      let { input, end } = this;
      const l = search.length;
      for (let i = 0; i < l; i++) {
        if (input.charAt(end++) !== search.charAt(i)) {
          return false;
        }
      }
      return true;
    },
    nextCharAt: function (index) {
      return this.input.charAt(this.end + index);
    },
    nextLength: function () {
      return this.input.length - this.end;
    },
    getChar: function (index = 0) {
      if (this.options.unicode) {
        const code = this.input.codePointAt(index);
        if (code === undefined || isNaN(code)) {
          return '';
        }
        return String.fromCodePoint(code);
      }
      return this.input.charAt(index);
    },
    getCharCode: function (index = 0) {
      if (this.options.unicode) {
        return this.input.codePointAt(index);
      }
      return this.input.charCodeAt(index);
    },
    nextToken: function () {
      if (this.nextTokens.length) {
        return this.nextTokens.shift();
      }
      var i,
        rule,
        m,
        ret,
        lines,
        rules = this.getCurrentRules();

      var { input } = this;

      var { env = this.defaultEnv } = this.options;

      this.match = this.text = '';

      if (this.end >= input.length) {
        this.token = Lexer.STATIC.EOF_TOKEN;
        this.start = this.end;
        this.firstLine = this.lastLine;
        this.firstColumn = this.lastColumn;
        return {
          text: '',
          t: this.mapSymbol(this.token),
          token: this.token,
          start: this.start,
          end: this.end,
          firstLine: this.firstLine,
          firstColumn: this.firstColumn,
          lastLine: this.lastLine,
          lastColumn: this.lastColumn,
        };
      }

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        var regexp = this.getRuleItem(rule, 'regexp'),
          token = this.getRuleItem(rule, 'token'),
          action = this.getRuleItem(rule, 'action');

        if (
          typeof regexp !== 'function' &&
          regexp &&
          env &&
          typeof regexp.test !== 'function'
        ) {
          regexp = regexp[env];
        }

        if (!regexp) {
          continue;
        }

        //#JSCOVERAGE_ENDIF
        if ((m = this.matchRegExp(regexp))) {
          this.start = this.end;
          this.end += m[0].length;
          lines = m[0].split('\n');
          lines.shift();
          this.lineNumber += lines.length;
          const position = {
            start: this.start,
            end: this.end,
            firstLine: this.lastLine,
            lastLine: this.lineNumber,
            firstColumn: this.lastColumn,
            lastColumn: lines.length
              ? lines[lines.length - 1].length + 1
              : this.lastColumn + m[0].length,
          };

          mix(this, position);

          var match;
          // for error report
          match = this.match = m[0];

          // all matches
          this.matches = m;
          // may change by user
          this.text = match;
          // matched content utils now
          this.matched += match;
          ret = action && action.call(this);

          if (ret === undefined) {
            ret = token;
          } else {
            ret = this.mapSymbol(ret);
          }

          if (ret) {
            this.token = this.mapReverseSymbol(ret);
            return {
              text: this.text,
              token: this.token,
              t: ret,
              ...position,
            };
          } else {
            // ignore
            return this.nextToken();
          }
        }
      }
    },
  };
  Lexer.STATIC = {
    INITIAL_STATE: 'I',
    DEBUG_CONTEXT_LIMIT: 20,
    EOF_TOKEN: '$EOF',
    UNKNOWN_TOKEN: '$UNKNOWN',
    HIDDEN_TOKEN: '$HIDDEN',
  };
  var lexer = new Lexer({
    rules: [
      ['$HIDDEN', /\s+/g],
      ['NUMBER', /[0-9]+(\.[0-9]+)?\b/g],
      ['+', /\+/g],
    ],
    isCompress: 1,
    defaultEnv: undefined,
  });
  function lex(input, options = {}) {
    lexer.options = options;
    lexer.resetInput(input);
    const { state } = options;
    if (state) {
      if (state.userData) {
        lexer.userData = state.userData;
      }
      if (state.stateStack) {
        lexer.stateStack = state.stateStack;
      }
    }
    while (lexer.lex().token !== Lexer.STATIC.EOF_TOKEN);
    return {
      state: {
        userData: lexer.userData,
        stateStack: lexer.stateStack,
      },
      tokens: lexer.tokens,
    };
  }
  var parser = {
    productions: [
      ['$START', ['exp']],
      ['(zeroMore1)1_', ['post', '(zeroMore1)1_']],
      ['zeroMore1', ['(zeroMore1)1_']],
      ['exp', ['NUMBER', 'zeroMore1'], undefined, 'binary-exp'],
      ['post', ['+', 'NUMBER']],
      ['(zeroMore1)1_', []],
    ],
    productionIndexMap: {
      symbol: 0,
      rhs: 1,
      action: 2,
      label: 3,
    },
    getProductionItemByType: function (p, itemType) {
      if (this.isCompress) {
        return p[this.productionIndexMap[itemType]];
      }
      return p[itemType];
    },
    getProductionSymbol: function (p) {
      return this.getProductionItemByType(p, 'symbol');
    },
    getProductionRhs: function (p) {
      return this.getProductionItemByType(p, 'rhs');
    },
    getProductionAction: function (p) {
      return this.getProductionItemByType(p, 'action');
    },
    getProductionLabel: function (p) {
      return this.getProductionItemByType(p, 'label');
    },
    isCompress: 1,
  };
  parser.getProductionSymbol = parser.getProductionSymbol.bind(parser);
  parser.getProductionRhs = parser.getProductionRhs.bind(parser);
  parser.getProductionAction = parser.getProductionAction.bind(parser);
  parser.getProductionLabel = parser.getProductionLabel.bind(parser);
  parser.lexer = lexer;
  parser.lex = lex;
  const productionSkipAstNodeSet = new Set([1, 2, 4, 5]);
  parser.prioritySymbolMap = {};
  const AstNode = class AstNode {
    parent = null;
    symbol = '';
    label = '';
    type = '';

    constructor(cfg) {
      Object.assign(this, cfg);
      if (cfg.children) {
        this.setChildren(cfg.children);
      }
    }

    addChild(c) {
      this.addChildren([c]);
    }

    addChildren(cs) {
      this.children.push(...cs);
      this.setChildren(this.children);
    }

    setChildren(cs) {
      if (!cs.length) {
        this.children = [];
        return;
      }
      const first = cs[0];
      const last = cs[cs.length - 1];
      this.start = first.start;
      this.end = last.end;
      this.firstLine = first.firstLine;
      this.lastLine = last.lastLine;
      this.firstColumn = first.firstColumn;
      this.lastColumn = last.lastColumn;
      this.children = cs;
      for (const c of cs) {
        c.parent = this;
      }
    }

    toJSON() {
      const ret = {};
      for (const k of Object.keys(this)) {
        if (k !== 'parent' && k !== 't') {
          ret[k] = this[k];
        }
      }
      return ret;
    }
  };
  const symbolMap = {};
  const stateMachine = {};
  const parse = function (input, options) {
    const recoveryTokens = [];
    const terminalNodes = [];

    function isExtraSymbol(ast) {
      return ast.children && !ast.children.length;
    }

    function peekStack(stack, n) {
      n = n || 1;
      return stack[stack.length - n];
    }

    function getOriginalSymbol(s) {
      let uncompressed = lexer.mapReverseSymbol(s);
      return prioritySymbolMap[uncompressed] || uncompressed;
    }

    options = options || {};
    let error;
    var {
      onErrorRecovery,
      onAction,
      lexerOptions = {},
      transformNode,
    } = options;

    function checkLabel(node, parent) {
      if (node.label || parent.label) {
        if (node.label === parent.label) {
          return node.children;
        }
        return node;
      }
      return node.children;
    }

    function defaultTransformNode({ node, parent }) {
      if (node.token || node.error || node.symbol !== parent.symbol) {
        return node;
      }
      if (parent.children.length === 1) {
        // do not check label
        // replace label!
        parent.label = node.label;
        return node.children;
      }
      if (node.children.length > 1) {
        return node;
      }
      // drill down to token
      if (node.children[0]?.token) {
        // do not check label
        // parent.label = node.label;
        return node.children;
      }
      return checkLabel(node, parent);
    }

    if (transformNode !== false && !transformNode) {
      transformNode = defaultTransformNode;
    }

    var {
      lexer,
      productions,
      prioritySymbolMap,
      getProductionSymbol,
      getProductionRhs,
      getProductionLabel,
    } = parser;

    lexer.options = lexerOptions;
    const startSymbol = getProductionSymbol(productions[0]);
    var symbolStack = [startSymbol];
    const astStack = [
      new AstNode({
        children: [],
      }),
    ];
    lexer.resetInput(input);
    let token;
    let next;

    function getError() {
      const expected = getExpected();
      const tips = [];
      if (expected.length) {
        tips.push("'" + expected.join("', '") + "' expected.");
      }
      tips.push("current token: '" + lexer.getCurrentToken().token + "'.");
      const tip = tips.join('\n');
      return {
        errorMessage: [
          'syntax error at line ' +
            lexer.lineNumber +
            ':\n' +
            lexer.showDebugInfo(),
          ...tips,
        ].join('\n'),
        tip,
      };
    }

    function cleanAst(ast) {
      if (!transformNode) {
        return ast;
      }
      if (ast.children) {
        let children;
        let childrenChanged;
        while (true) {
          let changed = false;
          let index = 0;
          children = [];
          for (const c of ast.children) {
            const node = transformNode({
              node: c,
              index,
              parent: ast,
              defaultTransformNode,
            });
            if (Array.isArray(node)) {
              children.push(...node);
            } else if (node) {
              children.push(node);
            }
            changed = changed || node !== c;
            index++;
          }
          if (!changed) {
            break;
          } else {
            ast.setChildren(children);
            childrenChanged = true;
          }
        }
        if (childrenChanged && ast.parent) {
          cleanAst(ast.parent);
        } else {
          for (const c of children) {
            cleanAst(c);
          }
        }
      }
      return ast;
    }

    function getAst(raw) {
      let ast = astStack[0];
      ast = ast?.children?.[0];
      ast = ast?.children?.[0];
      if (ast) {
        ast.parent = null;
      }
      if (raw) {
        return ast;
      }
      return ast && cleanAst(ast);
    }

    let topSymbol;

    let errorNode;

    function popSymbolStack() {
      symbolStack.pop();
    }

    let getExpected = function () {
      const s = topSymbol;
      if (!isSymbol(s)) {
        return [lexer.mapReverseSymbol(s)];
      }
      // get expected tokens from state machine
      if (next !== -1) {
        return findExpectedTokenFromStateMachine(
          stateMachine[getProductionSymbol(productions[next])][next].start,
        );
      }
      return [];
    };

    function closeAstWhenError() {
      errorNode = new AstNode({
        type: 'token',
        error,
        ...error.lexer,
      });
      peekStack(astStack).addChild(errorNode);
      while (astStack.length !== 1) {
        const ast = astStack.pop();
        if (ast.symbol && isExtraSymbol(ast)) {
          const topAst = peekStack(astStack);
          topAst.children.pop();
          topAst.addChildren(ast.children);
        }
      }
    }

    let production;

    while (1) {
      topSymbol = peekStack(symbolStack);

      if (!topSymbol) {
        break;
      }

      while (isProductionEndFlag(topSymbol) || isAddAstNodeFlag(topSymbol)) {
        let ast = astStack.pop();
        if (isAddAstNodeFlag(topSymbol)) {
          const stackTop = peekStack(astStack);
          const wrap = new AstNode({
            type: 'symbol',
            symbol: ast.symbol,
            children: [ast],
            label: ast.label,
          });
          stackTop.children.pop();
          stackTop.addChild(wrap);
          astStack.push(wrap);
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
        if (!topSymbol) {
          break;
        }
      }

      if (typeof topSymbol === 'string') {
        if (!token) {
          token = lexer.lex();
          recoveryTokens.push(token);
        }
        if (topSymbol === token.t) {
          symbolStack.pop();
          const terminalNode = new AstNode(token);
          terminalNode.type = 'token';
          terminalNodes.push(terminalNode);
          const parent = peekStack(astStack);
          parent.addChild(terminalNode);
          token = null;
          continue;
        }
        next = predictProductionIndexLLK(topSymbol);
        if (next !== -1) {
          if (!isZeroOrMoreSymbol(topSymbol)) {
            popSymbolStack();
          }

          production = productions[next];

          if (productionSkipAstNodeSet.has(next)) {
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat().reverse(),
            );
          } else {
            const newAst = new AstNode({
              type: 'symbol',
              symbol: getOriginalSymbol(normalizeSymbol(topSymbol)),
              label: getOriginalSymbol(getProductionLabel(production)),
              children: [],
            });
            peekStack(astStack).addChild(newAst);
            astStack.push(newAst);
            symbolStack.push.apply(
              symbolStack,
              getProductionRhs(production).concat(productionEndFlag).reverse(),
            );
          }
        } else if (
          isZeroOrMoreSymbol(topSymbol) ||
          isOptionalSymbol(topSymbol)
        ) {
          popSymbolStack();
        } else {
          error = {
            recovery: false,
            ...getError(),
            expected: getExpected(),
            symbol: peekStack(astStack).symbol,
            lexer: lexer.toJSON(),
          };
          if (onErrorRecovery) {
            const recommendedAction = {};
            lexer.stash();
            const nextToken = lexer.lex();
            lexer.stashPop();
            // should delete
            if (
              topSymbol === nextToken.t ||
              predictProductionIndexNextLLK(topSymbol) === -1
            ) {
              recommendedAction.action = 'del';
            } else if (error.expected.length) {
              recommendedAction.action = 'add';
            }

            const errorNode = new AstNode({
              error,
              type: 'token',
              ...error.lexer,
            });
            peekStack(astStack).addChild(errorNode);

            const recovery =
              onErrorRecovery(
                {
                  errorNode,
                  parseTree: getAst(true),
                },
                recommendedAction,
              ) || {};

            const { action } = recovery;

            peekStack(astStack).children.pop();

            if (!action) {
              closeAstWhenError();
              break;
            }

            if (action === 'del') {
              error.recovery = true;
              recoveryTokens.pop();
              token = null;
            } else if (action === 'add') {
              error.recovery = true;
              token = {
                ...token,
                token: recovery.token,
                text: recovery.text,
                t: lexer.mapSymbol(recovery.token),
              };
              recoveryTokens.push(token);
            }
          } else {
            closeAstWhenError();
            break;
          }
        }
      }

      topSymbol = peekStack(symbolStack);

      while (topSymbol && typeof topSymbol === 'function') {
        if (onAction) {
          onAction({
            token: lexer.toJSON(),
            action: topSymbol,
            parseTree: getAst(true),
          });
        }
        popSymbolStack();
        topSymbol = peekStack(symbolStack);
      }

      if (!symbolStack.length) {
        break;
      }
    }

    if (!error && lexer.getCurrentToken().token !== Lexer.STATIC.EOF_TOKEN) {
      // reduction done but still has input
      if (!symbolStack.length) {
        getExpected = () => [Lexer.STATIC.EOF_TOKEN];
      }
      error = {
        ...getError(),
        expected: getExpected(),
        symbol: peekStack(astStack)?.symbol,
        lexer: lexer.toJSON(),
      };
      closeAstWhenError();
    }

    const ast = getAst();

    return {
      ast,
      tokens: lexer.tokens,
      recoveryTokens,
      errorNode,
      error,
      terminalNodes,
    };
  };
  const isAddAstNodeFlag = function (t) {
    return t === productionAddAstNodeFlag;
  };
  const isProductionEndFlag = function (t) {
    return t === productionEndFlag;
  };
  const productionAddAstNodeFlag = 1;
  const productionEndFlag = 2;
  const predictProductionIndexLLK = function (symbol, fn = () => {}) {
    if (isZeroOrMoreSymbol(symbol) || isOptionalSymbol(symbol)) {
      symbol = symbol.slice(0, -1);
    }
    if (!isSymbol(symbol)) {
      return -1;
    }
    const symbolSm = stateMachine[symbol];
    if (!symbolSm) {
      throw new Error('No state machine for symbol: ' + symbol);
    }
    const allSms = Object.keys(symbolSm);
    for (const key of allSms) {
      if (symbolSm[key]) {
        lexer.stash();
        fn();
        const ret = bfsMatch(symbolSm[key].start);
        lexer.stashPop();
        if (ret) {
          return Number(key);
        }
      }
    }
    // reduce
    for (const key of Object.keys(symbolSm)) {
      if (!symbolSm[key]) {
        return Number(key);
      }
    }
    return -1;
  };
  const predictProductionIndexNextLLK = function (symbol) {
    return predictProductionIndexLLK(symbol, () => lexer.lex());
  };
  const bfsMatch = function (startState, cacheResultIndexMap = new Map()) {
    let reachableStates = [startState];
    let ret = {};
    while (1) {
      reachableStates = getNextReachableStates(
        reachableStates,
        ret,
        cacheResultIndexMap,
      );
      if (reachableStates.length) {
        lexer.lex();
      } else {
        break;
      }
    }
    if (ret.matchedInput) {
      return ret.matchedInput;
    }
    return false;
  };
  const getNextReachableStates = function (
    reachableStates,
    ret,
    cacheResultIndexMap,
  ) {
    const stack = [];
    const newReachableStates = [];
    const encountered = new Set();
    for (const currentState of reachableStates) {
      stack.push(currentState);
      let state;
      while (stack.length) {
        state = stack.pop();
        if (encountered.has(state)) {
          continue;
        }
        if (cacheResultIndexMap.get(state) === false) {
          continue;
        }
        if (!state.transitions.length) {
          ret.matchedInput = true;
          return [];
        }
        let finded;
        for (const t of state.transitions) {
          const find = t.perform();
          finded = finded || !!find;
          if (find) {
            if (find.count) {
              newReachableStates.push(t.to);
            } else {
              stack.push(t.to);
            }
          }
        }
        if (!finded) {
          cacheResultIndexMap.set(state, false);
        }
      }
    }
    return newReachableStates;
  };
  const buildSymbolMap = function () {
    for (const p of parser.productions) {
      symbolMap[parser.getProductionSymbol(p)] = true;
    }
  };
  const isSymbol = function (s) {
    return !!symbolMap[s];
  };
  const createMatchSymbolToken = (token) => {
    const fn = isSymbol(token)
      ? () => {
          const symbolSm = stateMachine[token];
          for (const key of Object.keys(symbolSm)) {
            const m = symbolSm[key] && bfsMatch(symbolSm[key].start);
            if (m) {
              return m;
            }
          }
          for (const key of Object.keys(symbolSm)) {
            if (!symbolSm[key]) {
              return true;
            }
          }
          return false;
        }
      : () => {
          const currentToken = parser.lexer.getCurrentToken();
          return currentToken.t === token ? { count: 1 } : false;
        };
    if (!isSymbol(token)) {
      fn['token'] = token;
    } else {
      fn['symbol'] = token;
    }
    return fn;
  };
  const findExpectedTokenFromStateMachine = function (
    state,
    ret = [],
    nullable = {},
    stack = new Set(),
  ) {
    if (state) {
      if (stack.has(state)) {
        return;
      }
      stack.add(state);
      for (const t of state.transitions) {
        if (t.condition) {
          if (t.condition.token) {
            ret.push(t.condition.token);
          } else if (t.condition.symbol) {
            const { symbol } = t.condition;
            const symbolSm = stateMachine[symbol];
            let anotherNull = {};
            for (const key of Object.keys(symbolSm)) {
              if (symbolSm[key]) {
                findExpectedTokenFromStateMachine(
                  symbolSm[key].start,
                  ret,
                  anotherNull,
                  stack,
                );
              } else {
                anotherNull.ok = true;
              }
            }
            if (anotherNull.ok) {
              nullable.ok = true;
              findExpectedTokenFromStateMachine(t.to, ret, {}, stack);
            }
          }
        } else {
          nullable.ok = true;
        }
      }
    }
    return ret;
  };
  const buildStateMachine = function () {
    const productions = parser.productions;
    for (let i = 0; i < productions.length; i++) {
      const p = productions[i];
      const symbol = parser.getProductionSymbol(p);
      const rhs = parser.getProductionRhs(p);
      stateMachine[symbol] = stateMachine[symbol] || {};
      stateMachine[symbol][i] = buildRhsSM(symbol, rhs);
    }
  };
  const buildRhsSM = function (s, rhs) {
    function getUnit(rr) {
      const unit = new StateUnit(rr);
      unit.start.pushTransition(unit.end, createMatchSymbolToken(rr));
      return unit;
    }

    const units = [];
    for (const r of rhs) {
      if (typeof r !== 'string') {
        continue;
      }
      let finalUnit;
      if (isOptionalSymbol(r)) {
        const rr = r.slice(0, -1);
        const unit = getUnit(rr);
        finalUnit = new StateUnit('?');
        finalUnit.start.pushTransition(unit.start);
        finalUnit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(finalUnit.end);
      } else if (isZeroOrMoreSymbol(r)) {
        const rr = r.slice(0, -1);
        const unit = getUnit();
        finalUnit = new StateUnit('*');
        finalUnit.start.pushTransition(unit.start);
        unit.start.pushTransition(finalUnit.end);
        unit.end.pushTransition(unit.start);
      } else {
        finalUnit = getUnit(r);
      }
      units.push(finalUnit);
    }
    return concatUnits(s, units);
  };
  const isZeroOrMoreSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && s.endsWith('*');
  };
  const normalizeSymbol = function (s) {
    return isOptionalSymbol(s) || isZeroOrMoreSymbol(s) ? s.slice(0, -1) : s;
  };
  const isOptionalSymbol = function (s) {
    return typeof s === 'string' && s.length > 1 && s.endsWith('?');
  };
  const State = class State {
    constructor(type) {
      this.type = type;
      this.transitions = [];
    }
    pushTransition(endState, condition) {
      this.transitions.push(new Transition(endState, condition));
    }
  };
  const concatUnits = function (type, us) {
    if (!us.length) {
      return null;
    }
    const l = us.length;
    if (l === 1) {
      return us[0];
    }
    for (let i = 0; i < l - 1; i++) {
      const first = us[i];
      const s = us[i + 1];
      first.end.pushTransition(s.start);
    }
    const ret = new StateUnit(type);
    ret.start = us[0].start;
    ret.end = us[l - 1].end;
    return ret;
  };
  const StateUnit = class StateUnit {
    constructor(type) {
      this.type = type;
      this.start = new State(`startOf${type}`);
      this.end = new State(`endOf${type}`);
    }
  };
  const Transition = class Transition {
    constructor(to, condition) {
      this.to = to;
      this.condition = condition;
    }
    perform() {
      if (this.condition) {
        const ret = this.condition();
        if (ret === true) {
          return {
            count: 0,
          };
        }
        return ret;
      }
      return {
        count: 0,
      };
    }
  };
  buildSymbolMap();
  buildStateMachine();
  parser.parse = parse;
  return parser;
})();

if (typeof module !== 'undefined') {
  module.exports = $parser;
}
